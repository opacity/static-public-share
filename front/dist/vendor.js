__fuse.bundle({

// node_modules/fuse-box/modules/fuse-box-css/index.js @7
7: function(__fusereq, exports, module){
var cssHandler = function (__filename, contents) {
  var styleId = __filename.replace(/[\.\/]+/g, '-');
  if (styleId.charAt(0) === '-') styleId = styleId.substring(1);
  var exists = document.getElementById(styleId);
  if (!exists) {
    var s = document.createElement(contents ? 'style' : 'link');
    s.id = styleId;
    s.type = 'text/css';
    if (contents) {
      s.innerHTML = contents;
    } else {
      s.rel = 'stylesheet';
      s.href = __filename;
    }
    document.getElementsByTagName('head')[0].appendChild(s);
  } else {
    if (contents) exists.innerHTML = contents;
  }
};
module.exports = cssHandler;

},

// node_modules/fuse-box/modules/fuse-box-websocket/index.js @8
8: function(__fusereq, exports, module){
const events = __fusereq(10);
function log(text) {
  console.info(`%c${text}`, 'color: #237abe');
}
class SocketClient {
  constructor(opts) {
    opts = opts || ({});
    const port = opts.port || window.location.port;
    const protocol = location.protocol === 'https:' ? 'wss://' : 'ws://';
    const domain = location.hostname || 'localhost';
    if (opts.connectionURL) {
      this.url = opts.connectionURL;
    } else {
      if (opts.useCurrentURL) {
        this.url = protocol + location.hostname + (location.port ? ':' + location.port : '');
      }
      if (opts.port) {
        this.url = `${protocol}${domain}:${opts.port}`;
      }
    }
    this.authSent = false;
    this.emitter = new events.EventEmitter();
  }
  reconnect(fn) {
    setTimeout(() => {
      this.emitter.emit('reconnect', {
        message: 'Trying to reconnect'
      });
      this.connect(fn);
    }, 5000);
  }
  on(event, fn) {
    this.emitter.on(event, fn);
  }
  connect(fn) {
    setTimeout(() => {
      log(`Connecting to FuseBox HMR at ${this.url}`);
      this.client = new WebSocket(this.url);
      this.bindEvents(fn);
    }, 0);
  }
  close() {
    this.client.close();
  }
  send(eventName, data) {
    if (this.client.readyState === 1) {
      this.client.send(JSON.stringify({
        name: eventName,
        payload: data || ({})
      }));
    }
  }
  error(data) {
    this.emitter.emit('error', data);
  }
  bindEvents(fn) {
    this.client.onopen = event => {
      log('Connection successful');
      if (fn) {
        fn(this);
      }
    };
    this.client.onerror = event => {
      this.error({
        reason: event.reason,
        message: 'Socket error'
      });
    };
    this.client.onclose = event => {
      this.emitter.emit('close', {
        message: 'Socket closed'
      });
      if (event.code !== 1011) {
        this.reconnect(fn);
      }
    };
    this.client.onmessage = event => {
      let data = event.data;
      if (data) {
        let item = JSON.parse(data);
        this.emitter.emit(item.name, item.payload);
      }
    };
  }
}
exports.SocketClient = SocketClient;

},

// node_modules/fuse-box/modules/events/index.js @10
10: function(__fusereq, exports, module){
function EventEmitter() {
  this._events = this._events || ({});
  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;
EventEmitter.EventEmitter = EventEmitter;
EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;
EventEmitter.defaultMaxListeners = 10;
EventEmitter.prototype.setMaxListeners = function (n) {
  if (!isNumber(n) || n < 0 || isNaN(n)) throw TypeError('n must be a positive number');
  this._maxListeners = n;
  return this;
};
EventEmitter.prototype.emit = function (type) {
  var er, handler, len, args, i, listeners;
  if (!this._events) this._events = {};
  if (type === 'error') {
    if (!this._events.error || isObject(this._events.error) && !this._events.error.length) {
      er = arguments[1];
      if (er instanceof Error) {
        throw er;
      }
      throw TypeError('Uncaught, unspecified "error" event.');
    }
  }
  handler = this._events[type];
  if (isUndefined(handler)) return false;
  if (isFunction(handler)) {
    switch (arguments.length) {
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      default:
        args = Array.prototype.slice.call(arguments, 1);
        handler.apply(this, args);
    }
  } else if (isObject(handler)) {
    args = Array.prototype.slice.call(arguments, 1);
    listeners = handler.slice();
    len = listeners.length;
    for (i = 0; i < len; i++) listeners[i].apply(this, args);
  }
  return true;
};
EventEmitter.prototype.addListener = function (type, listener) {
  var m;
  if (!isFunction(listener)) throw TypeError('listener must be a function');
  if (!this._events) this._events = {};
  if (this._events.newListener) this.emit('newListener', type, isFunction(listener.listener) ? listener.listener : listener);
  if (!this._events[type]) this._events[type] = listener; else if (isObject(this._events[type])) this._events[type].push(listener); else this._events[type] = [this._events[type], listener];
  if (isObject(this._events[type]) && !this._events[type].warned) {
    if (!isUndefined(this._maxListeners)) {
      m = this._maxListeners;
    } else {
      m = EventEmitter.defaultMaxListeners;
    }
    if (m && m > 0 && this._events[type].length > m) {
      this._events[type].warned = true;
      console.error('(node) warning: possible EventEmitter memory ' + 'leak detected. %d listeners added. ' + 'Use emitter.setMaxListeners() to increase limit.', this._events[type].length);
      if (typeof console.trace === 'function') {
        console.trace();
      }
    }
  }
  return this;
};
EventEmitter.prototype.on = EventEmitter.prototype.addListener;
EventEmitter.prototype.once = function (type, listener) {
  if (!isFunction(listener)) throw TypeError('listener must be a function');
  var fired = false;
  function g() {
    this.removeListener(type, g);
    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }
  g.listener = listener;
  this.on(type, g);
  return this;
};
EventEmitter.prototype.removeListener = function (type, listener) {
  var list, position, length, i;
  if (!isFunction(listener)) throw TypeError('listener must be a function');
  if (!this._events || !this._events[type]) return this;
  list = this._events[type];
  length = list.length;
  position = -1;
  if (list === listener || isFunction(list.listener) && list.listener === listener) {
    delete this._events[type];
    if (this._events.removeListener) this.emit('removeListener', type, listener);
  } else if (isObject(list)) {
    for (i = length; i-- > 0; ) {
      if (list[i] === listener || list[i].listener && list[i].listener === listener) {
        position = i;
        break;
      }
    }
    if (position < 0) return this;
    if (list.length === 1) {
      list.length = 0;
      delete this._events[type];
    } else {
      list.splice(position, 1);
    }
    if (this._events.removeListener) this.emit('removeListener', type, listener);
  }
  return this;
};
EventEmitter.prototype.removeAllListeners = function (type) {
  var key, listeners;
  if (!this._events) return this;
  if (!this._events.removeListener) {
    if (arguments.length === 0) this._events = {}; else if (this._events[type]) delete this._events[type];
    return this;
  }
  if (arguments.length === 0) {
    for (key in this._events) {
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = {};
    return this;
  }
  listeners = this._events[type];
  if (isFunction(listeners)) {
    this.removeListener(type, listeners);
  } else if (listeners) {
    while (listeners.length) this.removeListener(type, listeners[listeners.length - 1]);
  }
  delete this._events[type];
  return this;
};
EventEmitter.prototype.listeners = function (type) {
  var ret;
  if (!this._events || !this._events[type]) ret = []; else if (isFunction(this._events[type])) ret = [this._events[type]]; else ret = this._events[type].slice();
  return ret;
};
EventEmitter.prototype.listenerCount = function (type) {
  if (this._events) {
    var evlistener = this._events[type];
    if (isFunction(evlistener)) return 1; else if (evlistener) return evlistener.length;
  }
  return 0;
};
EventEmitter.listenerCount = function (emitter, type) {
  return emitter.listenerCount(type);
};
function isFunction(arg) {
  return typeof arg === 'function';
}
function isNumber(arg) {
  return typeof arg === 'number';
}
function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
function isUndefined(arg) {
  return arg === void 0;
}

},

// node_modules/fuse-box/modules/fuse-box-hot-reload/clientHotReload.ts @2
2: function(__fusereq, exports, module){
exports.__esModule = true;
const {SocketClient} = __fusereq(8);
function log(text) {
  console.info(`%c${text}`, 'color: #237abe');
}
const STYLESHEET_EXTENSIONS = ['.css', '.scss', '.sass', '.less', '.styl'];
function gatherSummary() {
  const modules = [];
  for (const id in __fuse.modules) {
    modules.push(parseInt(id));
  }
  return {
    modules
  };
}
function createHMRHelper(payload) {
  const {updates} = payload;
  let isStylesheeetUpdate = true;
  for (const item of updates) {
    const file = item.path;
    const s = file.match(/(\.\w+)$/i);
    const extension = s[1];
    if (!STYLESHEET_EXTENSIONS.includes(extension)) {
      isStylesheeetUpdate = false;
    }
  }
  return {
    isStylesheeetUpdate,
    callEntries: () => {
      const appEntries = [1];
      for (const entryId of appEntries) {
        __fuse.r(entryId);
      }
    },
    callModules: modules => {
      for (const item of modules) __fuse.r(item.id);
    },
    flushAll: () => {
      __fuse.c = {};
    },
    flushModules: modules => {
      for (const item of modules) {
        __fuse.c[item.id] = undefined;
      }
    },
    updateModules: () => {
      for (const update of updates) {
        new Function(update.content)();
      }
    }
  };
}
exports.connect = opts => {
  let client = new SocketClient(opts);
  client.connect();
  client.on('get-summary', data => {
    const {id} = data;
    const summary = gatherSummary();
    client.send('summary', {
      id,
      summary
    });
  });
  client.on('reload', () => {
    window.location.reload();
  });
  client.on('hmr', payload => {
    const {updates} = payload;
    const hmr = createHMRHelper(payload);
    const hmrModuleId = undefined;
    if (hmrModuleId) {
      const hmrModule = __fuse.r(hmrModuleId);
      if (!hmrModule.default) throw new Error('An HMR plugin must export a default function');
      hmrModule.default(payload, hmr);
      return;
    }
    hmr.updateModules();
    if (hmr.isStylesheeetUpdate) {
      log(`Flushing ${updates.map(item => item.path)}`);
      hmr.flushModules(updates);
      log(`Calling modules ${updates.map(item => item.path)}`);
      hmr.callModules(updates);
    } else {
      log(`Flushing all`);
      hmr.flushAll();
      log(`Calling entries all`);
      hmr.callEntries();
    }
  });
};

},

// node_modules/object-assign/index.js @20
20: function(__fusereq, exports, module){
'use strict';
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;
function toObject(val) {
  if (val === null || val === undefined) {
    throw new TypeError('Object.assign cannot be called with null or undefined');
  }
  return Object(val);
}
function shouldUseNative() {
  try {
    if (!Object.assign) {
      return false;
    }
    var test1 = new String('abc');
    test1[5] = 'de';
    if (Object.getOwnPropertyNames(test1)[0] === '5') {
      return false;
    }
    var test2 = {};
    for (var i = 0; i < 10; i++) {
      test2['_' + String.fromCharCode(i)] = i;
    }
    var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
      return test2[n];
    });
    if (order2.join('') !== '0123456789') {
      return false;
    }
    var test3 = {};
    ('abcdefghijklmnopqrst').split('').forEach(function (letter) {
      test3[letter] = letter;
    });
    if (Object.keys(Object.assign({}, test3)).join('') !== 'abcdefghijklmnopqrst') {
      return false;
    }
    return true;
  } catch (err) {
    return false;
  }
}
module.exports = shouldUseNative() ? Object.assign : function (target, source) {
  var from;
  var to = toObject(target);
  var symbols;
  for (var s = 1; s < arguments.length; s++) {
    from = Object(arguments[s]);
    for (var key in from) {
      if (hasOwnProperty.call(from, key)) {
        to[key] = from[key];
      }
    }
    if (getOwnPropertySymbols) {
      symbols = getOwnPropertySymbols(from);
      for (var i = 0; i < symbols.length; i++) {
        if (propIsEnumerable.call(from, symbols[i])) {
          to[symbols[i]] = from[symbols[i]];
        }
      }
    }
  }
  return to;
};

},

// node_modules/react-is/index.js @201
201: function(__fusereq, exports, module){
'use strict';
module.exports = __fusereq(277);

},

// node_modules/react-is/cjs/react-is.development.js @277
277: function(__fusereq, exports, module){
'use strict';
(function () {
  'use strict';
  var hasSymbol = typeof Symbol === 'function' && Symbol.for;
  var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
  var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
  var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
  var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
  var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
  var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
  var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace;
  var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;
  var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
  var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
  var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
  var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
  var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
  var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
  var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 0xead9;
  var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;
  var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;
  var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;
  function isValidElementType(type) {
    return typeof type === 'string' || typeof type === 'function' || type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
  }
  function typeOf(object) {
    if (typeof object === 'object' && object !== null) {
      var $$typeof = object.$$typeof;
      switch ($$typeof) {
        case REACT_ELEMENT_TYPE:
          var type = object.type;
          switch (type) {
            case REACT_ASYNC_MODE_TYPE:
            case REACT_CONCURRENT_MODE_TYPE:
            case REACT_FRAGMENT_TYPE:
            case REACT_PROFILER_TYPE:
            case REACT_STRICT_MODE_TYPE:
            case REACT_SUSPENSE_TYPE:
              return type;
            default:
              var $$typeofType = type && type.$$typeof;
              switch ($$typeofType) {
                case REACT_CONTEXT_TYPE:
                case REACT_FORWARD_REF_TYPE:
                case REACT_LAZY_TYPE:
                case REACT_MEMO_TYPE:
                case REACT_PROVIDER_TYPE:
                  return $$typeofType;
                default:
                  return $$typeof;
              }
          }
        case REACT_PORTAL_TYPE:
          return $$typeof;
      }
    }
    return undefined;
  }
  var AsyncMode = REACT_ASYNC_MODE_TYPE;
  var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
  var ContextConsumer = REACT_CONTEXT_TYPE;
  var ContextProvider = REACT_PROVIDER_TYPE;
  var Element = REACT_ELEMENT_TYPE;
  var ForwardRef = REACT_FORWARD_REF_TYPE;
  var Fragment = REACT_FRAGMENT_TYPE;
  var Lazy = REACT_LAZY_TYPE;
  var Memo = REACT_MEMO_TYPE;
  var Portal = REACT_PORTAL_TYPE;
  var Profiler = REACT_PROFILER_TYPE;
  var StrictMode = REACT_STRICT_MODE_TYPE;
  var Suspense = REACT_SUSPENSE_TYPE;
  var hasWarnedAboutDeprecatedIsAsyncMode = false;
  function isAsyncMode(object) {
    {
      if (!hasWarnedAboutDeprecatedIsAsyncMode) {
        hasWarnedAboutDeprecatedIsAsyncMode = true;
        console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');
      }
    }
    return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
  }
  function isConcurrentMode(object) {
    return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
  }
  function isContextConsumer(object) {
    return typeOf(object) === REACT_CONTEXT_TYPE;
  }
  function isContextProvider(object) {
    return typeOf(object) === REACT_PROVIDER_TYPE;
  }
  function isElement(object) {
    return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
  }
  function isForwardRef(object) {
    return typeOf(object) === REACT_FORWARD_REF_TYPE;
  }
  function isFragment(object) {
    return typeOf(object) === REACT_FRAGMENT_TYPE;
  }
  function isLazy(object) {
    return typeOf(object) === REACT_LAZY_TYPE;
  }
  function isMemo(object) {
    return typeOf(object) === REACT_MEMO_TYPE;
  }
  function isPortal(object) {
    return typeOf(object) === REACT_PORTAL_TYPE;
  }
  function isProfiler(object) {
    return typeOf(object) === REACT_PROFILER_TYPE;
  }
  function isStrictMode(object) {
    return typeOf(object) === REACT_STRICT_MODE_TYPE;
  }
  function isSuspense(object) {
    return typeOf(object) === REACT_SUSPENSE_TYPE;
  }
  exports.AsyncMode = AsyncMode;
  exports.ConcurrentMode = ConcurrentMode;
  exports.ContextConsumer = ContextConsumer;
  exports.ContextProvider = ContextProvider;
  exports.Element = Element;
  exports.ForwardRef = ForwardRef;
  exports.Fragment = Fragment;
  exports.Lazy = Lazy;
  exports.Memo = Memo;
  exports.Portal = Portal;
  exports.Profiler = Profiler;
  exports.StrictMode = StrictMode;
  exports.Suspense = Suspense;
  exports.isAsyncMode = isAsyncMode;
  exports.isConcurrentMode = isConcurrentMode;
  exports.isContextConsumer = isContextConsumer;
  exports.isContextProvider = isContextProvider;
  exports.isElement = isElement;
  exports.isForwardRef = isForwardRef;
  exports.isFragment = isFragment;
  exports.isLazy = isLazy;
  exports.isMemo = isMemo;
  exports.isPortal = isPortal;
  exports.isProfiler = isProfiler;
  exports.isStrictMode = isStrictMode;
  exports.isSuspense = isSuspense;
  exports.isValidElementType = isValidElementType;
  exports.typeOf = typeOf;
})();

},

// node_modules/prop-types/checkPropTypes.js @21
21: function(__fusereq, exports, module){
'use strict';
var printWarning = function () {};
var ReactPropTypesSecret = __fusereq(103);
var loggedTypeFailures = {};
var has = Function.call.bind(Object.prototype.hasOwnProperty);
printWarning = function (text) {
  var message = 'Warning: ' + text;
  if (typeof console !== 'undefined') {
    console.error(message);
  }
  try {
    throw new Error(message);
  } catch (x) {}
};
function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
  for (var typeSpecName in typeSpecs) {
    if (has(typeSpecs, typeSpecName)) {
      var error;
      try {
        if (typeof typeSpecs[typeSpecName] !== 'function') {
          var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.');
          err.name = 'Invariant Violation';
          throw err;
        }
        error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
      } catch (ex) {
        error = ex;
      }
      if (error && !(error instanceof Error)) {
        printWarning((componentName || 'React class') + ': type specification of ' + location + ' `' + typeSpecName + '` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a ' + typeof error + '. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).');
      }
      if (error instanceof Error && !((error.message in loggedTypeFailures))) {
        loggedTypeFailures[error.message] = true;
        var stack = getStack ? getStack() : '';
        printWarning('Failed ' + location + ' type: ' + error.message + (stack != null ? stack : ''));
      }
    }
  }
}
checkPropTypes.resetWarningCache = function () {
  loggedTypeFailures = {};
};
module.exports = checkPropTypes;

},

// node_modules/prop-types/lib/ReactPropTypesSecret.js @103
103: function(__fusereq, exports, module){
'use strict';
var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';
module.exports = ReactPropTypesSecret;

},

// node_modules/prop-types/index.js @112
112: function(__fusereq, exports, module){
var ReactIs = __fusereq(201);
var throwOnDirectAccess = true;
module.exports = __fusereq(202)(ReactIs.isElement, throwOnDirectAccess);

},

// node_modules/prop-types/factoryWithTypeCheckers.js @202
202: function(__fusereq, exports, module){
'use strict';
var ReactIs = __fusereq(201);
var assign = __fusereq(20);
var ReactPropTypesSecret = __fusereq(103);
var checkPropTypes = __fusereq(21);
var has = Function.call.bind(Object.prototype.hasOwnProperty);
var printWarning = function () {};
printWarning = function (text) {
  var message = 'Warning: ' + text;
  if (typeof console !== 'undefined') {
    console.error(message);
  }
  try {
    throw new Error(message);
  } catch (x) {}
};
function emptyFunctionThatReturnsNull() {
  return null;
}
module.exports = function (isValidElement, throwOnDirectAccess) {
  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
  var FAUX_ITERATOR_SYMBOL = '@@iterator';
  function getIteratorFn(maybeIterable) {
    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
    if (typeof iteratorFn === 'function') {
      return iteratorFn;
    }
  }
  var ANONYMOUS = '<<anonymous>>';
  var ReactPropTypes = {
    array: createPrimitiveTypeChecker('array'),
    bool: createPrimitiveTypeChecker('boolean'),
    func: createPrimitiveTypeChecker('function'),
    number: createPrimitiveTypeChecker('number'),
    object: createPrimitiveTypeChecker('object'),
    string: createPrimitiveTypeChecker('string'),
    symbol: createPrimitiveTypeChecker('symbol'),
    any: createAnyTypeChecker(),
    arrayOf: createArrayOfTypeChecker,
    element: createElementTypeChecker(),
    elementType: createElementTypeTypeChecker(),
    instanceOf: createInstanceTypeChecker,
    node: createNodeChecker(),
    objectOf: createObjectOfTypeChecker,
    oneOf: createEnumTypeChecker,
    oneOfType: createUnionTypeChecker,
    shape: createShapeTypeChecker,
    exact: createStrictShapeTypeChecker
  };
  function is(x, y) {
    if (x === y) {
      return x !== 0 || 1 / x === 1 / y;
    } else {
      return x !== x && y !== y;
    }
  }
  function PropTypeError(message) {
    this.message = message;
    this.stack = '';
  }
  PropTypeError.prototype = Error.prototype;
  function createChainableTypeChecker(validate) {
    var manualPropTypeCallCache = {};
    var manualPropTypeWarningCount = 0;
    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
      componentName = componentName || ANONYMOUS;
      propFullName = propFullName || propName;
      if (secret !== ReactPropTypesSecret) {
        if (throwOnDirectAccess) {
          var err = new Error('Calling PropTypes validators directly is not supported by the `prop-types` package. ' + 'Use `PropTypes.checkPropTypes()` to call them. ' + 'Read more at http://fb.me/use-check-prop-types');
          err.name = 'Invariant Violation';
          throw err;
        } else if ("development" !== 'production' && typeof console !== 'undefined') {
          var cacheKey = componentName + ':' + propName;
          if (!manualPropTypeCallCache[cacheKey] && manualPropTypeWarningCount < 3) {
            printWarning('You are manually calling a React.PropTypes validation ' + 'function for the `' + propFullName + '` prop on `' + componentName + '`. This is deprecated ' + 'and will throw in the standalone `prop-types` package. ' + 'You may be seeing this warning due to a third-party PropTypes ' + 'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.');
            manualPropTypeCallCache[cacheKey] = true;
            manualPropTypeWarningCount++;
          }
        }
      }
      if (props[propName] == null) {
        if (isRequired) {
          if (props[propName] === null) {
            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
          }
          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
        }
        return null;
      } else {
        return validate(props, propName, componentName, location, propFullName);
      }
    }
    var chainedCheckType = checkType.bind(null, false);
    chainedCheckType.isRequired = checkType.bind(null, true);
    return chainedCheckType;
  }
  function createPrimitiveTypeChecker(expectedType) {
    function validate(props, propName, componentName, location, propFullName, secret) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== expectedType) {
        var preciseType = getPreciseType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }
  function createAnyTypeChecker() {
    return createChainableTypeChecker(emptyFunctionThatReturnsNull);
  }
  function createArrayOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
      }
      var propValue = props[propName];
      if (!Array.isArray(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
      }
      for (var i = 0; i < propValue.length; i++) {
        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
        if (error instanceof Error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }
  function createElementTypeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      if (!isValidElement(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }
  function createElementTypeTypeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      if (!ReactIs.isValidElementType(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement type.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }
  function createInstanceTypeChecker(expectedClass) {
    function validate(props, propName, componentName, location, propFullName) {
      if (!(props[propName] instanceof expectedClass)) {
        var expectedClassName = expectedClass.name || ANONYMOUS;
        var actualClassName = getClassName(props[propName]);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }
  function createEnumTypeChecker(expectedValues) {
    if (!Array.isArray(expectedValues)) {
      if (arguments.length > 1) {
        printWarning('Invalid arguments supplied to oneOf, expected an array, got ' + arguments.length + ' arguments. ' + 'A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).');
      } else {
        printWarning('Invalid argument supplied to oneOf, expected an array.');
      }
      return emptyFunctionThatReturnsNull;
    }
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      for (var i = 0; i < expectedValues.length; i++) {
        if (is(propValue, expectedValues[i])) {
          return null;
        }
      }
      var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
        var type = getPreciseType(value);
        if (type === 'symbol') {
          return String(value);
        }
        return value;
      });
      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + String(propValue) + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
    }
    return createChainableTypeChecker(validate);
  }
  function createObjectOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
      }
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
      }
      for (var key in propValue) {
        if (has(propValue, key)) {
          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
          if (error instanceof Error) {
            return error;
          }
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }
  function createUnionTypeChecker(arrayOfTypeCheckers) {
    if (!Array.isArray(arrayOfTypeCheckers)) {
      "development" !== 'production' ? printWarning('Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
      return emptyFunctionThatReturnsNull;
    }
    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
      var checker = arrayOfTypeCheckers[i];
      if (typeof checker !== 'function') {
        printWarning('Invalid argument supplied to oneOfType. Expected an array of check functions, but ' + 'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.');
        return emptyFunctionThatReturnsNull;
      }
    }
    function validate(props, propName, componentName, location, propFullName) {
      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
        var checker = arrayOfTypeCheckers[i];
        if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {
          return null;
        }
      }
      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
    }
    return createChainableTypeChecker(validate);
  }
  function createNodeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      if (!isNode(props[propName])) {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }
  function createShapeTypeChecker(shapeTypes) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
      }
      for (var key in shapeTypes) {
        var checker = shapeTypes[key];
        if (!checker) {
          continue;
        }
        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
        if (error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }
  function createStrictShapeTypeChecker(shapeTypes) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
      }
      var allKeys = assign({}, props[propName], shapeTypes);
      for (var key in allKeys) {
        var checker = shapeTypes[key];
        if (!checker) {
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' + '\nBad object: ' + JSON.stringify(props[propName], null, '  ') + '\nValid keys: ' + JSON.stringify(Object.keys(shapeTypes), null, '  '));
        }
        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
        if (error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }
  function isNode(propValue) {
    switch (typeof propValue) {
      case 'number':
      case 'string':
      case 'undefined':
        return true;
      case 'boolean':
        return !propValue;
      case 'object':
        if (Array.isArray(propValue)) {
          return propValue.every(isNode);
        }
        if (propValue === null || isValidElement(propValue)) {
          return true;
        }
        var iteratorFn = getIteratorFn(propValue);
        if (iteratorFn) {
          var iterator = iteratorFn.call(propValue);
          var step;
          if (iteratorFn !== propValue.entries) {
            while (!(step = iterator.next()).done) {
              if (!isNode(step.value)) {
                return false;
              }
            }
          } else {
            while (!(step = iterator.next()).done) {
              var entry = step.value;
              if (entry) {
                if (!isNode(entry[1])) {
                  return false;
                }
              }
            }
          }
        } else {
          return false;
        }
        return true;
      default:
        return false;
    }
  }
  function isSymbol(propType, propValue) {
    if (propType === 'symbol') {
      return true;
    }
    if (!propValue) {
      return false;
    }
    if (propValue['@@toStringTag'] === 'Symbol') {
      return true;
    }
    if (typeof Symbol === 'function' && propValue instanceof Symbol) {
      return true;
    }
    return false;
  }
  function getPropType(propValue) {
    var propType = typeof propValue;
    if (Array.isArray(propValue)) {
      return 'array';
    }
    if (propValue instanceof RegExp) {
      return 'object';
    }
    if (isSymbol(propType, propValue)) {
      return 'symbol';
    }
    return propType;
  }
  function getPreciseType(propValue) {
    if (typeof propValue === 'undefined' || propValue === null) {
      return '' + propValue;
    }
    var propType = getPropType(propValue);
    if (propType === 'object') {
      if (propValue instanceof Date) {
        return 'date';
      } else if (propValue instanceof RegExp) {
        return 'regexp';
      }
    }
    return propType;
  }
  function getPostfixForTypeWarning(value) {
    var type = getPreciseType(value);
    switch (type) {
      case 'array':
      case 'object':
        return 'an ' + type;
      case 'boolean':
      case 'date':
      case 'regexp':
        return 'a ' + type;
      default:
        return type;
    }
  }
  function getClassName(propValue) {
    if (!propValue.constructor || !propValue.constructor.name) {
      return ANONYMOUS;
    }
    return propValue.constructor.name;
  }
  ReactPropTypes.checkPropTypes = checkPropTypes;
  ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
  ReactPropTypes.PropTypes = ReactPropTypes;
  return ReactPropTypes;
};

},

// node_modules/react/index.js @3
3: function(__fusereq, exports, module){
'use strict';
module.exports = __fusereq(9);

},

// node_modules/react/cjs/react.development.js @9
9: function(__fusereq, exports, module){
'use strict';
(function () {
  'use strict';
  var _assign = __fusereq(20);
  var checkPropTypes = __fusereq(21);
  var ReactVersion = '16.14.0';
  var hasSymbol = typeof Symbol === 'function' && Symbol.for;
  var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
  var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
  var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
  var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
  var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
  var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
  var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace;
  var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
  var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
  var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
  var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
  var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
  var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
  var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 0xead9;
  var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;
  var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;
  var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;
  var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
  var FAUX_ITERATOR_SYMBOL = '@@iterator';
  function getIteratorFn(maybeIterable) {
    if (maybeIterable === null || typeof maybeIterable !== 'object') {
      return null;
    }
    var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
    if (typeof maybeIterator === 'function') {
      return maybeIterator;
    }
    return null;
  }
  var ReactCurrentDispatcher = {
    current: null
  };
  var ReactCurrentBatchConfig = {
    suspense: null
  };
  var ReactCurrentOwner = {
    current: null
  };
  var BEFORE_SLASH_RE = /^(.*)[\\\/]/;
  function describeComponentFrame(name, source, ownerName) {
    var sourceInfo = '';
    if (source) {
      var path = source.fileName;
      var fileName = path.replace(BEFORE_SLASH_RE, '');
      {
        if ((/^index\./).test(fileName)) {
          var match = path.match(BEFORE_SLASH_RE);
          if (match) {
            var pathBeforeSlash = match[1];
            if (pathBeforeSlash) {
              var folderName = pathBeforeSlash.replace(BEFORE_SLASH_RE, '');
              fileName = folderName + '/' + fileName;
            }
          }
        }
      }
      sourceInfo = ' (at ' + fileName + ':' + source.lineNumber + ')';
    } else if (ownerName) {
      sourceInfo = ' (created by ' + ownerName + ')';
    }
    return '\n    in ' + (name || 'Unknown') + sourceInfo;
  }
  var Resolved = 1;
  function refineResolvedLazyComponent(lazyComponent) {
    return lazyComponent._status === Resolved ? lazyComponent._result : null;
  }
  function getWrappedName(outerType, innerType, wrapperName) {
    var functionName = innerType.displayName || innerType.name || '';
    return outerType.displayName || (functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName);
  }
  function getComponentName(type) {
    if (type == null) {
      return null;
    }
    {
      if (typeof type.tag === 'number') {
        error('Received an unexpected object in getComponentName(). ' + 'This is likely a bug in React. Please file an issue.');
      }
    }
    if (typeof type === 'function') {
      return type.displayName || type.name || null;
    }
    if (typeof type === 'string') {
      return type;
    }
    switch (type) {
      case REACT_FRAGMENT_TYPE:
        return 'Fragment';
      case REACT_PORTAL_TYPE:
        return 'Portal';
      case REACT_PROFILER_TYPE:
        return "Profiler";
      case REACT_STRICT_MODE_TYPE:
        return 'StrictMode';
      case REACT_SUSPENSE_TYPE:
        return 'Suspense';
      case REACT_SUSPENSE_LIST_TYPE:
        return 'SuspenseList';
    }
    if (typeof type === 'object') {
      switch (type.$$typeof) {
        case REACT_CONTEXT_TYPE:
          return 'Context.Consumer';
        case REACT_PROVIDER_TYPE:
          return 'Context.Provider';
        case REACT_FORWARD_REF_TYPE:
          return getWrappedName(type, type.render, 'ForwardRef');
        case REACT_MEMO_TYPE:
          return getComponentName(type.type);
        case REACT_BLOCK_TYPE:
          return getComponentName(type.render);
        case REACT_LAZY_TYPE:
          {
            var thenable = type;
            var resolvedThenable = refineResolvedLazyComponent(thenable);
            if (resolvedThenable) {
              return getComponentName(resolvedThenable);
            }
            break;
          }
      }
    }
    return null;
  }
  var ReactDebugCurrentFrame = {};
  var currentlyValidatingElement = null;
  function setCurrentlyValidatingElement(element) {
    {
      currentlyValidatingElement = element;
    }
  }
  {
    ReactDebugCurrentFrame.getCurrentStack = null;
    ReactDebugCurrentFrame.getStackAddendum = function () {
      var stack = '';
      if (currentlyValidatingElement) {
        var name = getComponentName(currentlyValidatingElement.type);
        var owner = currentlyValidatingElement._owner;
        stack += describeComponentFrame(name, currentlyValidatingElement._source, owner && getComponentName(owner.type));
      }
      var impl = ReactDebugCurrentFrame.getCurrentStack;
      if (impl) {
        stack += impl() || '';
      }
      return stack;
    };
  }
  var IsSomeRendererActing = {
    current: false
  };
  var ReactSharedInternals = {
    ReactCurrentDispatcher: ReactCurrentDispatcher,
    ReactCurrentBatchConfig: ReactCurrentBatchConfig,
    ReactCurrentOwner: ReactCurrentOwner,
    IsSomeRendererActing: IsSomeRendererActing,
    assign: _assign
  };
  {
    _assign(ReactSharedInternals, {
      ReactDebugCurrentFrame: ReactDebugCurrentFrame,
      ReactComponentTreeHook: {}
    });
  }
  function warn(format) {
    {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
      printWarning('warn', format, args);
    }
  }
  function error(format) {
    {
      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        args[_key2 - 1] = arguments[_key2];
      }
      printWarning('error', format, args);
    }
  }
  function printWarning(level, format, args) {
    {
      var hasExistingStack = args.length > 0 && typeof args[args.length - 1] === 'string' && args[args.length - 1].indexOf('\n    in') === 0;
      if (!hasExistingStack) {
        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        var stack = ReactDebugCurrentFrame.getStackAddendum();
        if (stack !== '') {
          format += '%s';
          args = args.concat([stack]);
        }
      }
      var argsWithFormat = args.map(function (item) {
        return '' + item;
      });
      argsWithFormat.unshift('Warning: ' + format);
      Function.prototype.apply.call(console[level], console, argsWithFormat);
      try {
        var argIndex = 0;
        var message = 'Warning: ' + format.replace(/%s/g, function () {
          return args[argIndex++];
        });
        throw new Error(message);
      } catch (x) {}
    }
  }
  var didWarnStateUpdateForUnmountedComponent = {};
  function warnNoop(publicInstance, callerName) {
    {
      var _constructor = publicInstance.constructor;
      var componentName = _constructor && (_constructor.displayName || _constructor.name) || 'ReactClass';
      var warningKey = componentName + "." + callerName;
      if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
        return;
      }
      error("Can't call %s on a component that is not yet mounted. " + 'This is a no-op, but it might indicate a bug in your application. ' + 'Instead, assign to `this.state` directly or define a `state = {};` ' + 'class property with the desired state in the %s component.', callerName, componentName);
      didWarnStateUpdateForUnmountedComponent[warningKey] = true;
    }
  }
  var ReactNoopUpdateQueue = {
    isMounted: function (publicInstance) {
      return false;
    },
    enqueueForceUpdate: function (publicInstance, callback, callerName) {
      warnNoop(publicInstance, 'forceUpdate');
    },
    enqueueReplaceState: function (publicInstance, completeState, callback, callerName) {
      warnNoop(publicInstance, 'replaceState');
    },
    enqueueSetState: function (publicInstance, partialState, callback, callerName) {
      warnNoop(publicInstance, 'setState');
    }
  };
  var emptyObject = {};
  {
    Object.freeze(emptyObject);
  }
  function Component(props, context, updater) {
    this.props = props;
    this.context = context;
    this.refs = emptyObject;
    this.updater = updater || ReactNoopUpdateQueue;
  }
  Component.prototype.isReactComponent = {};
  Component.prototype.setState = function (partialState, callback) {
    if (!(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null)) {
      {
        throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
      }
    }
    this.updater.enqueueSetState(this, partialState, callback, 'setState');
  };
  Component.prototype.forceUpdate = function (callback) {
    this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');
  };
  {
    var deprecatedAPIs = {
      isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
      replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
    };
    var defineDeprecationWarning = function (methodName, info) {
      Object.defineProperty(Component.prototype, methodName, {
        get: function () {
          warn('%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);
          return undefined;
        }
      });
    };
    for (var fnName in deprecatedAPIs) {
      if (deprecatedAPIs.hasOwnProperty(fnName)) {
        defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
      }
    }
  }
  function ComponentDummy() {}
  ComponentDummy.prototype = Component.prototype;
  function PureComponent(props, context, updater) {
    this.props = props;
    this.context = context;
    this.refs = emptyObject;
    this.updater = updater || ReactNoopUpdateQueue;
  }
  var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
  pureComponentPrototype.constructor = PureComponent;
  _assign(pureComponentPrototype, Component.prototype);
  pureComponentPrototype.isPureReactComponent = true;
  function createRef() {
    var refObject = {
      current: null
    };
    {
      Object.seal(refObject);
    }
    return refObject;
  }
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var RESERVED_PROPS = {
    key: true,
    ref: true,
    __self: true,
    __source: true
  };
  var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
  {
    didWarnAboutStringRefs = {};
  }
  function hasValidRef(config) {
    {
      if (hasOwnProperty.call(config, 'ref')) {
        var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;
        if (getter && getter.isReactWarning) {
          return false;
        }
      }
    }
    return config.ref !== undefined;
  }
  function hasValidKey(config) {
    {
      if (hasOwnProperty.call(config, 'key')) {
        var getter = Object.getOwnPropertyDescriptor(config, 'key').get;
        if (getter && getter.isReactWarning) {
          return false;
        }
      }
    }
    return config.key !== undefined;
  }
  function defineKeyPropWarningGetter(props, displayName) {
    var warnAboutAccessingKey = function () {
      {
        if (!specialPropKeyWarningShown) {
          specialPropKeyWarningShown = true;
          error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);
        }
      }
    };
    warnAboutAccessingKey.isReactWarning = true;
    Object.defineProperty(props, 'key', {
      get: warnAboutAccessingKey,
      configurable: true
    });
  }
  function defineRefPropWarningGetter(props, displayName) {
    var warnAboutAccessingRef = function () {
      {
        if (!specialPropRefWarningShown) {
          specialPropRefWarningShown = true;
          error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);
        }
      }
    };
    warnAboutAccessingRef.isReactWarning = true;
    Object.defineProperty(props, 'ref', {
      get: warnAboutAccessingRef,
      configurable: true
    });
  }
  function warnIfStringRefCannotBeAutoConverted(config) {
    {
      if (typeof config.ref === 'string' && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
        var componentName = getComponentName(ReactCurrentOwner.current.type);
        if (!didWarnAboutStringRefs[componentName]) {
          error('Component "%s" contains the string ref "%s". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://fb.me/react-strict-mode-string-ref', getComponentName(ReactCurrentOwner.current.type), config.ref);
          didWarnAboutStringRefs[componentName] = true;
        }
      }
    }
  }
  var ReactElement = function (type, key, ref, self, source, owner, props) {
    var element = {
      $$typeof: REACT_ELEMENT_TYPE,
      type: type,
      key: key,
      ref: ref,
      props: props,
      _owner: owner
    };
    {
      element._store = {};
      Object.defineProperty(element._store, 'validated', {
        configurable: false,
        enumerable: false,
        writable: true,
        value: false
      });
      Object.defineProperty(element, '_self', {
        configurable: false,
        enumerable: false,
        writable: false,
        value: self
      });
      Object.defineProperty(element, '_source', {
        configurable: false,
        enumerable: false,
        writable: false,
        value: source
      });
      if (Object.freeze) {
        Object.freeze(element.props);
        Object.freeze(element);
      }
    }
    return element;
  };
  function createElement(type, config, children) {
    var propName;
    var props = {};
    var key = null;
    var ref = null;
    var self = null;
    var source = null;
    if (config != null) {
      if (hasValidRef(config)) {
        ref = config.ref;
        {
          warnIfStringRefCannotBeAutoConverted(config);
        }
      }
      if (hasValidKey(config)) {
        key = '' + config.key;
      }
      self = config.__self === undefined ? null : config.__self;
      source = config.__source === undefined ? null : config.__source;
      for (propName in config) {
        if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
          props[propName] = config[propName];
        }
      }
    }
    var childrenLength = arguments.length - 2;
    if (childrenLength === 1) {
      props.children = children;
    } else if (childrenLength > 1) {
      var childArray = Array(childrenLength);
      for (var i = 0; i < childrenLength; i++) {
        childArray[i] = arguments[i + 2];
      }
      {
        if (Object.freeze) {
          Object.freeze(childArray);
        }
      }
      props.children = childArray;
    }
    if (type && type.defaultProps) {
      var defaultProps = type.defaultProps;
      for (propName in defaultProps) {
        if (props[propName] === undefined) {
          props[propName] = defaultProps[propName];
        }
      }
    }
    {
      if (key || ref) {
        var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;
        if (key) {
          defineKeyPropWarningGetter(props, displayName);
        }
        if (ref) {
          defineRefPropWarningGetter(props, displayName);
        }
      }
    }
    return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
  }
  function cloneAndReplaceKey(oldElement, newKey) {
    var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
    return newElement;
  }
  function cloneElement(element, config, children) {
    if (!!(element === null || element === undefined)) {
      {
        throw Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
      }
    }
    var propName;
    var props = _assign({}, element.props);
    var key = element.key;
    var ref = element.ref;
    var self = element._self;
    var source = element._source;
    var owner = element._owner;
    if (config != null) {
      if (hasValidRef(config)) {
        ref = config.ref;
        owner = ReactCurrentOwner.current;
      }
      if (hasValidKey(config)) {
        key = '' + config.key;
      }
      var defaultProps;
      if (element.type && element.type.defaultProps) {
        defaultProps = element.type.defaultProps;
      }
      for (propName in config) {
        if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
          if (config[propName] === undefined && defaultProps !== undefined) {
            props[propName] = defaultProps[propName];
          } else {
            props[propName] = config[propName];
          }
        }
      }
    }
    var childrenLength = arguments.length - 2;
    if (childrenLength === 1) {
      props.children = children;
    } else if (childrenLength > 1) {
      var childArray = Array(childrenLength);
      for (var i = 0; i < childrenLength; i++) {
        childArray[i] = arguments[i + 2];
      }
      props.children = childArray;
    }
    return ReactElement(element.type, key, ref, self, source, owner, props);
  }
  function isValidElement(object) {
    return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
  }
  var SEPARATOR = '.';
  var SUBSEPARATOR = ':';
  function escape(key) {
    var escapeRegex = /[=:]/g;
    var escaperLookup = {
      '=': '=0',
      ':': '=2'
    };
    var escapedString = ('' + key).replace(escapeRegex, function (match) {
      return escaperLookup[match];
    });
    return '$' + escapedString;
  }
  var didWarnAboutMaps = false;
  var userProvidedKeyEscapeRegex = /\/+/g;
  function escapeUserProvidedKey(text) {
    return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');
  }
  var POOL_SIZE = 10;
  var traverseContextPool = [];
  function getPooledTraverseContext(mapResult, keyPrefix, mapFunction, mapContext) {
    if (traverseContextPool.length) {
      var traverseContext = traverseContextPool.pop();
      traverseContext.result = mapResult;
      traverseContext.keyPrefix = keyPrefix;
      traverseContext.func = mapFunction;
      traverseContext.context = mapContext;
      traverseContext.count = 0;
      return traverseContext;
    } else {
      return {
        result: mapResult,
        keyPrefix: keyPrefix,
        func: mapFunction,
        context: mapContext,
        count: 0
      };
    }
  }
  function releaseTraverseContext(traverseContext) {
    traverseContext.result = null;
    traverseContext.keyPrefix = null;
    traverseContext.func = null;
    traverseContext.context = null;
    traverseContext.count = 0;
    if (traverseContextPool.length < POOL_SIZE) {
      traverseContextPool.push(traverseContext);
    }
  }
  function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
    var type = typeof children;
    if (type === 'undefined' || type === 'boolean') {
      children = null;
    }
    var invokeCallback = false;
    if (children === null) {
      invokeCallback = true;
    } else {
      switch (type) {
        case 'string':
        case 'number':
          invokeCallback = true;
          break;
        case 'object':
          switch (children.$$typeof) {
            case REACT_ELEMENT_TYPE:
            case REACT_PORTAL_TYPE:
              invokeCallback = true;
          }
      }
    }
    if (invokeCallback) {
      callback(traverseContext, children, nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
      return 1;
    }
    var child;
    var nextName;
    var subtreeCount = 0;
    var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;
    if (Array.isArray(children)) {
      for (var i = 0; i < children.length; i++) {
        child = children[i];
        nextName = nextNamePrefix + getComponentKey(child, i);
        subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
      }
    } else {
      var iteratorFn = getIteratorFn(children);
      if (typeof iteratorFn === 'function') {
        {
          if (iteratorFn === children.entries) {
            if (!didWarnAboutMaps) {
              warn('Using Maps as children is deprecated and will be removed in ' + 'a future major release. Consider converting children to ' + 'an array of keyed ReactElements instead.');
            }
            didWarnAboutMaps = true;
          }
        }
        var iterator = iteratorFn.call(children);
        var step;
        var ii = 0;
        while (!(step = iterator.next()).done) {
          child = step.value;
          nextName = nextNamePrefix + getComponentKey(child, ii++);
          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
        }
      } else if (type === 'object') {
        var addendum = '';
        {
          addendum = ' If you meant to render a collection of children, use an array ' + 'instead.' + ReactDebugCurrentFrame.getStackAddendum();
        }
        var childrenString = '' + children;
        {
          {
            throw Error("Objects are not valid as a React child (found: " + (childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString) + ")." + addendum);
          }
        }
      }
    }
    return subtreeCount;
  }
  function traverseAllChildren(children, callback, traverseContext) {
    if (children == null) {
      return 0;
    }
    return traverseAllChildrenImpl(children, '', callback, traverseContext);
  }
  function getComponentKey(component, index) {
    if (typeof component === 'object' && component !== null && component.key != null) {
      return escape(component.key);
    }
    return index.toString(36);
  }
  function forEachSingleChild(bookKeeping, child, name) {
    var func = bookKeeping.func, context = bookKeeping.context;
    func.call(context, child, bookKeeping.count++);
  }
  function forEachChildren(children, forEachFunc, forEachContext) {
    if (children == null) {
      return children;
    }
    var traverseContext = getPooledTraverseContext(null, null, forEachFunc, forEachContext);
    traverseAllChildren(children, forEachSingleChild, traverseContext);
    releaseTraverseContext(traverseContext);
  }
  function mapSingleChildIntoContext(bookKeeping, child, childKey) {
    var result = bookKeeping.result, keyPrefix = bookKeeping.keyPrefix, func = bookKeeping.func, context = bookKeeping.context;
    var mappedChild = func.call(context, child, bookKeeping.count++);
    if (Array.isArray(mappedChild)) {
      mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, function (c) {
        return c;
      });
    } else if (mappedChild != null) {
      if (isValidElement(mappedChild)) {
        mappedChild = cloneAndReplaceKey(mappedChild, keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);
      }
      result.push(mappedChild);
    }
  }
  function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
    var escapedPrefix = '';
    if (prefix != null) {
      escapedPrefix = escapeUserProvidedKey(prefix) + '/';
    }
    var traverseContext = getPooledTraverseContext(array, escapedPrefix, func, context);
    traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
    releaseTraverseContext(traverseContext);
  }
  function mapChildren(children, func, context) {
    if (children == null) {
      return children;
    }
    var result = [];
    mapIntoWithKeyPrefixInternal(children, result, null, func, context);
    return result;
  }
  function countChildren(children) {
    return traverseAllChildren(children, function () {
      return null;
    }, null);
  }
  function toArray(children) {
    var result = [];
    mapIntoWithKeyPrefixInternal(children, result, null, function (child) {
      return child;
    });
    return result;
  }
  function onlyChild(children) {
    if (!isValidElement(children)) {
      {
        throw Error("React.Children.only expected to receive a single React element child.");
      }
    }
    return children;
  }
  function createContext(defaultValue, calculateChangedBits) {
    if (calculateChangedBits === undefined) {
      calculateChangedBits = null;
    } else {
      {
        if (calculateChangedBits !== null && typeof calculateChangedBits !== 'function') {
          error('createContext: Expected the optional second argument to be a ' + 'function. Instead received: %s', calculateChangedBits);
        }
      }
    }
    var context = {
      $$typeof: REACT_CONTEXT_TYPE,
      _calculateChangedBits: calculateChangedBits,
      _currentValue: defaultValue,
      _currentValue2: defaultValue,
      _threadCount: 0,
      Provider: null,
      Consumer: null
    };
    context.Provider = {
      $$typeof: REACT_PROVIDER_TYPE,
      _context: context
    };
    var hasWarnedAboutUsingNestedContextConsumers = false;
    var hasWarnedAboutUsingConsumerProvider = false;
    {
      var Consumer = {
        $$typeof: REACT_CONTEXT_TYPE,
        _context: context,
        _calculateChangedBits: context._calculateChangedBits
      };
      Object.defineProperties(Consumer, {
        Provider: {
          get: function () {
            if (!hasWarnedAboutUsingConsumerProvider) {
              hasWarnedAboutUsingConsumerProvider = true;
              error('Rendering <Context.Consumer.Provider> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Provider> instead?');
            }
            return context.Provider;
          },
          set: function (_Provider) {
            context.Provider = _Provider;
          }
        },
        _currentValue: {
          get: function () {
            return context._currentValue;
          },
          set: function (_currentValue) {
            context._currentValue = _currentValue;
          }
        },
        _currentValue2: {
          get: function () {
            return context._currentValue2;
          },
          set: function (_currentValue2) {
            context._currentValue2 = _currentValue2;
          }
        },
        _threadCount: {
          get: function () {
            return context._threadCount;
          },
          set: function (_threadCount) {
            context._threadCount = _threadCount;
          }
        },
        Consumer: {
          get: function () {
            if (!hasWarnedAboutUsingNestedContextConsumers) {
              hasWarnedAboutUsingNestedContextConsumers = true;
              error('Rendering <Context.Consumer.Consumer> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');
            }
            return context.Consumer;
          }
        }
      });
      context.Consumer = Consumer;
    }
    {
      context._currentRenderer = null;
      context._currentRenderer2 = null;
    }
    return context;
  }
  function lazy(ctor) {
    var lazyType = {
      $$typeof: REACT_LAZY_TYPE,
      _ctor: ctor,
      _status: -1,
      _result: null
    };
    {
      var defaultProps;
      var propTypes;
      Object.defineProperties(lazyType, {
        defaultProps: {
          configurable: true,
          get: function () {
            return defaultProps;
          },
          set: function (newDefaultProps) {
            error('React.lazy(...): It is not supported to assign `defaultProps` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');
            defaultProps = newDefaultProps;
            Object.defineProperty(lazyType, 'defaultProps', {
              enumerable: true
            });
          }
        },
        propTypes: {
          configurable: true,
          get: function () {
            return propTypes;
          },
          set: function (newPropTypes) {
            error('React.lazy(...): It is not supported to assign `propTypes` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');
            propTypes = newPropTypes;
            Object.defineProperty(lazyType, 'propTypes', {
              enumerable: true
            });
          }
        }
      });
    }
    return lazyType;
  }
  function forwardRef(render) {
    {
      if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
        error('forwardRef requires a render function but received a `memo` ' + 'component. Instead of forwardRef(memo(...)), use ' + 'memo(forwardRef(...)).');
      } else if (typeof render !== 'function') {
        error('forwardRef requires a render function but was given %s.', render === null ? 'null' : typeof render);
      } else {
        if (render.length !== 0 && render.length !== 2) {
          error('forwardRef render functions accept exactly two parameters: props and ref. %s', render.length === 1 ? 'Did you forget to use the ref parameter?' : 'Any additional parameter will be undefined.');
        }
      }
      if (render != null) {
        if (render.defaultProps != null || render.propTypes != null) {
          error('forwardRef render functions do not support propTypes or defaultProps. ' + 'Did you accidentally pass a React component?');
        }
      }
    }
    return {
      $$typeof: REACT_FORWARD_REF_TYPE,
      render: render
    };
  }
  function isValidElementType(type) {
    return typeof type === 'string' || typeof type === 'function' || type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
  }
  function memo(type, compare) {
    {
      if (!isValidElementType(type)) {
        error('memo: The first argument must be a component. Instead ' + 'received: %s', type === null ? 'null' : typeof type);
      }
    }
    return {
      $$typeof: REACT_MEMO_TYPE,
      type: type,
      compare: compare === undefined ? null : compare
    };
  }
  function resolveDispatcher() {
    var dispatcher = ReactCurrentDispatcher.current;
    if (!(dispatcher !== null)) {
      {
        throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://fb.me/react-invalid-hook-call for tips about how to debug and fix this problem.");
      }
    }
    return dispatcher;
  }
  function useContext(Context, unstable_observedBits) {
    var dispatcher = resolveDispatcher();
    {
      if (unstable_observedBits !== undefined) {
        error('useContext() second argument is reserved for future ' + 'use in React. Passing it is not supported. ' + 'You passed: %s.%s', unstable_observedBits, typeof unstable_observedBits === 'number' && Array.isArray(arguments[2]) ? '\n\nDid you call array.map(useContext)? ' + 'Calling Hooks inside a loop is not supported. ' + 'Learn more at https://fb.me/rules-of-hooks' : '');
      }
      if (Context._context !== undefined) {
        var realContext = Context._context;
        if (realContext.Consumer === Context) {
          error('Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be ' + 'removed in a future major release. Did you mean to call useContext(Context) instead?');
        } else if (realContext.Provider === Context) {
          error('Calling useContext(Context.Provider) is not supported. ' + 'Did you mean to call useContext(Context) instead?');
        }
      }
    }
    return dispatcher.useContext(Context, unstable_observedBits);
  }
  function useState(initialState) {
    var dispatcher = resolveDispatcher();
    return dispatcher.useState(initialState);
  }
  function useReducer(reducer, initialArg, init) {
    var dispatcher = resolveDispatcher();
    return dispatcher.useReducer(reducer, initialArg, init);
  }
  function useRef(initialValue) {
    var dispatcher = resolveDispatcher();
    return dispatcher.useRef(initialValue);
  }
  function useEffect(create, deps) {
    var dispatcher = resolveDispatcher();
    return dispatcher.useEffect(create, deps);
  }
  function useLayoutEffect(create, deps) {
    var dispatcher = resolveDispatcher();
    return dispatcher.useLayoutEffect(create, deps);
  }
  function useCallback(callback, deps) {
    var dispatcher = resolveDispatcher();
    return dispatcher.useCallback(callback, deps);
  }
  function useMemo(create, deps) {
    var dispatcher = resolveDispatcher();
    return dispatcher.useMemo(create, deps);
  }
  function useImperativeHandle(ref, create, deps) {
    var dispatcher = resolveDispatcher();
    return dispatcher.useImperativeHandle(ref, create, deps);
  }
  function useDebugValue(value, formatterFn) {
    {
      var dispatcher = resolveDispatcher();
      return dispatcher.useDebugValue(value, formatterFn);
    }
  }
  var propTypesMisspellWarningShown;
  {
    propTypesMisspellWarningShown = false;
  }
  function getDeclarationErrorAddendum() {
    if (ReactCurrentOwner.current) {
      var name = getComponentName(ReactCurrentOwner.current.type);
      if (name) {
        return '\n\nCheck the render method of `' + name + '`.';
      }
    }
    return '';
  }
  function getSourceInfoErrorAddendum(source) {
    if (source !== undefined) {
      var fileName = source.fileName.replace(/^.*[\\\/]/, '');
      var lineNumber = source.lineNumber;
      return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
    }
    return '';
  }
  function getSourceInfoErrorAddendumForProps(elementProps) {
    if (elementProps !== null && elementProps !== undefined) {
      return getSourceInfoErrorAddendum(elementProps.__source);
    }
    return '';
  }
  var ownerHasKeyUseWarning = {};
  function getCurrentComponentErrorInfo(parentType) {
    var info = getDeclarationErrorAddendum();
    if (!info) {
      var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
      if (parentName) {
        info = "\n\nCheck the top-level render call using <" + parentName + ">.";
      }
    }
    return info;
  }
  function validateExplicitKey(element, parentType) {
    if (!element._store || element._store.validated || element.key != null) {
      return;
    }
    element._store.validated = true;
    var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
    if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
      return;
    }
    ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
    var childOwner = '';
    if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
      childOwner = " It was passed a child from " + getComponentName(element._owner.type) + ".";
    }
    setCurrentlyValidatingElement(element);
    {
      error('Each child in a list should have a unique "key" prop.' + '%s%s See https://fb.me/react-warning-keys for more information.', currentComponentErrorInfo, childOwner);
    }
    setCurrentlyValidatingElement(null);
  }
  function validateChildKeys(node, parentType) {
    if (typeof node !== 'object') {
      return;
    }
    if (Array.isArray(node)) {
      for (var i = 0; i < node.length; i++) {
        var child = node[i];
        if (isValidElement(child)) {
          validateExplicitKey(child, parentType);
        }
      }
    } else if (isValidElement(node)) {
      if (node._store) {
        node._store.validated = true;
      }
    } else if (node) {
      var iteratorFn = getIteratorFn(node);
      if (typeof iteratorFn === 'function') {
        if (iteratorFn !== node.entries) {
          var iterator = iteratorFn.call(node);
          var step;
          while (!(step = iterator.next()).done) {
            if (isValidElement(step.value)) {
              validateExplicitKey(step.value, parentType);
            }
          }
        }
      }
    }
  }
  function validatePropTypes(element) {
    {
      var type = element.type;
      if (type === null || type === undefined || typeof type === 'string') {
        return;
      }
      var name = getComponentName(type);
      var propTypes;
      if (typeof type === 'function') {
        propTypes = type.propTypes;
      } else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MEMO_TYPE)) {
        propTypes = type.propTypes;
      } else {
        return;
      }
      if (propTypes) {
        setCurrentlyValidatingElement(element);
        checkPropTypes(propTypes, element.props, 'prop', name, ReactDebugCurrentFrame.getStackAddendum);
        setCurrentlyValidatingElement(null);
      } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
        propTypesMisspellWarningShown = true;
        error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', name || 'Unknown');
      }
      if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) {
        error('getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');
      }
    }
  }
  function validateFragmentProps(fragment) {
    {
      setCurrentlyValidatingElement(fragment);
      var keys = Object.keys(fragment.props);
      for (var i = 0; i < keys.length; i++) {
        var key = keys[i];
        if (key !== 'children' && key !== 'key') {
          error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);
          break;
        }
      }
      if (fragment.ref !== null) {
        error('Invalid attribute `ref` supplied to `React.Fragment`.');
      }
      setCurrentlyValidatingElement(null);
    }
  }
  function createElementWithValidation(type, props, children) {
    var validType = isValidElementType(type);
    if (!validType) {
      var info = '';
      if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
        info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and named imports.";
      }
      var sourceInfo = getSourceInfoErrorAddendumForProps(props);
      if (sourceInfo) {
        info += sourceInfo;
      } else {
        info += getDeclarationErrorAddendum();
      }
      var typeString;
      if (type === null) {
        typeString = 'null';
      } else if (Array.isArray(type)) {
        typeString = 'array';
      } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
        typeString = "<" + (getComponentName(type.type) || 'Unknown') + " />";
        info = ' Did you accidentally export a JSX literal instead of a component?';
      } else {
        typeString = typeof type;
      }
      {
        error('React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);
      }
    }
    var element = createElement.apply(this, arguments);
    if (element == null) {
      return element;
    }
    if (validType) {
      for (var i = 2; i < arguments.length; i++) {
        validateChildKeys(arguments[i], type);
      }
    }
    if (type === REACT_FRAGMENT_TYPE) {
      validateFragmentProps(element);
    } else {
      validatePropTypes(element);
    }
    return element;
  }
  var didWarnAboutDeprecatedCreateFactory = false;
  function createFactoryWithValidation(type) {
    var validatedFactory = createElementWithValidation.bind(null, type);
    validatedFactory.type = type;
    {
      if (!didWarnAboutDeprecatedCreateFactory) {
        didWarnAboutDeprecatedCreateFactory = true;
        warn('React.createFactory() is deprecated and will be removed in ' + 'a future major release. Consider using JSX ' + 'or use React.createElement() directly instead.');
      }
      Object.defineProperty(validatedFactory, 'type', {
        enumerable: false,
        get: function () {
          warn('Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.');
          Object.defineProperty(this, 'type', {
            value: type
          });
          return type;
        }
      });
    }
    return validatedFactory;
  }
  function cloneElementWithValidation(element, props, children) {
    var newElement = cloneElement.apply(this, arguments);
    for (var i = 2; i < arguments.length; i++) {
      validateChildKeys(arguments[i], newElement.type);
    }
    validatePropTypes(newElement);
    return newElement;
  }
  {
    try {
      var frozenObject = Object.freeze({});
      var testMap = new Map([[frozenObject, null]]);
      var testSet = new Set([frozenObject]);
      testMap.set(0, 0);
      testSet.add(0);
    } catch (e) {}
  }
  var createElement$1 = createElementWithValidation;
  var cloneElement$1 = cloneElementWithValidation;
  var createFactory = createFactoryWithValidation;
  var Children = {
    map: mapChildren,
    forEach: forEachChildren,
    count: countChildren,
    toArray: toArray,
    only: onlyChild
  };
  exports.Children = Children;
  exports.Component = Component;
  exports.Fragment = REACT_FRAGMENT_TYPE;
  exports.Profiler = REACT_PROFILER_TYPE;
  exports.PureComponent = PureComponent;
  exports.StrictMode = REACT_STRICT_MODE_TYPE;
  exports.Suspense = REACT_SUSPENSE_TYPE;
  exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
  exports.cloneElement = cloneElement$1;
  exports.createContext = createContext;
  exports.createElement = createElement$1;
  exports.createFactory = createFactory;
  exports.createRef = createRef;
  exports.forwardRef = forwardRef;
  exports.isValidElement = isValidElement;
  exports.lazy = lazy;
  exports.memo = memo;
  exports.useCallback = useCallback;
  exports.useContext = useContext;
  exports.useDebugValue = useDebugValue;
  exports.useEffect = useEffect;
  exports.useImperativeHandle = useImperativeHandle;
  exports.useLayoutEffect = useLayoutEffect;
  exports.useMemo = useMemo;
  exports.useReducer = useReducer;
  exports.useRef = useRef;
  exports.useState = useState;
  exports.version = ReactVersion;
})();

},

// node_modules/scheduler/index.js @101
101: function(__fusereq, exports, module){
'use strict';
module.exports = __fusereq(182);

},

// node_modules/scheduler/tracing.js @102
102: function(__fusereq, exports, module){
'use strict';
module.exports = __fusereq(183);

},

// node_modules/scheduler/cjs/scheduler.development.js @182
182: function(__fusereq, exports, module){
'use strict';
(function () {
  'use strict';
  var enableSchedulerDebugging = false;
  var enableProfiling = true;
  var requestHostCallback;
  var requestHostTimeout;
  var cancelHostTimeout;
  var shouldYieldToHost;
  var requestPaint;
  if (typeof window === 'undefined' || typeof MessageChannel !== 'function') {
    var _callback = null;
    var _timeoutID = null;
    var _flushCallback = function () {
      if (_callback !== null) {
        try {
          var currentTime = exports.unstable_now();
          var hasRemainingTime = true;
          _callback(hasRemainingTime, currentTime);
          _callback = null;
        } catch (e) {
          setTimeout(_flushCallback, 0);
          throw e;
        }
      }
    };
    var initialTime = Date.now();
    exports.unstable_now = function () {
      return Date.now() - initialTime;
    };
    requestHostCallback = function (cb) {
      if (_callback !== null) {
        setTimeout(requestHostCallback, 0, cb);
      } else {
        _callback = cb;
        setTimeout(_flushCallback, 0);
      }
    };
    requestHostTimeout = function (cb, ms) {
      _timeoutID = setTimeout(cb, ms);
    };
    cancelHostTimeout = function () {
      clearTimeout(_timeoutID);
    };
    shouldYieldToHost = function () {
      return false;
    };
    requestPaint = exports.unstable_forceFrameRate = function () {};
  } else {
    var performance = window.performance;
    var _Date = window.Date;
    var _setTimeout = window.setTimeout;
    var _clearTimeout = window.clearTimeout;
    if (typeof console !== 'undefined') {
      var requestAnimationFrame = window.requestAnimationFrame;
      var cancelAnimationFrame = window.cancelAnimationFrame;
      if (typeof requestAnimationFrame !== 'function') {
        console['error']("This browser doesn't support requestAnimationFrame. " + 'Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');
      }
      if (typeof cancelAnimationFrame !== 'function') {
        console['error']("This browser doesn't support cancelAnimationFrame. " + 'Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');
      }
    }
    if (typeof performance === 'object' && typeof performance.now === 'function') {
      exports.unstable_now = function () {
        return performance.now();
      };
    } else {
      var _initialTime = _Date.now();
      exports.unstable_now = function () {
        return _Date.now() - _initialTime;
      };
    }
    var isMessageLoopRunning = false;
    var scheduledHostCallback = null;
    var taskTimeoutID = -1;
    var yieldInterval = 5;
    var deadline = 0;
    {
      shouldYieldToHost = function () {
        return exports.unstable_now() >= deadline;
      };
      requestPaint = function () {};
    }
    exports.unstable_forceFrameRate = function (fps) {
      if (fps < 0 || fps > 125) {
        console['error']('forceFrameRate takes a positive int between 0 and 125, ' + 'forcing framerates higher than 125 fps is not unsupported');
        return;
      }
      if (fps > 0) {
        yieldInterval = Math.floor(1000 / fps);
      } else {
        yieldInterval = 5;
      }
    };
    var performWorkUntilDeadline = function () {
      if (scheduledHostCallback !== null) {
        var currentTime = exports.unstable_now();
        deadline = currentTime + yieldInterval;
        var hasTimeRemaining = true;
        try {
          var hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
          if (!hasMoreWork) {
            isMessageLoopRunning = false;
            scheduledHostCallback = null;
          } else {
            port.postMessage(null);
          }
        } catch (error) {
          port.postMessage(null);
          throw error;
        }
      } else {
        isMessageLoopRunning = false;
      }
    };
    var channel = new MessageChannel();
    var port = channel.port2;
    channel.port1.onmessage = performWorkUntilDeadline;
    requestHostCallback = function (callback) {
      scheduledHostCallback = callback;
      if (!isMessageLoopRunning) {
        isMessageLoopRunning = true;
        port.postMessage(null);
      }
    };
    requestHostTimeout = function (callback, ms) {
      taskTimeoutID = _setTimeout(function () {
        callback(exports.unstable_now());
      }, ms);
    };
    cancelHostTimeout = function () {
      _clearTimeout(taskTimeoutID);
      taskTimeoutID = -1;
    };
  }
  function push(heap, node) {
    var index = heap.length;
    heap.push(node);
    siftUp(heap, node, index);
  }
  function peek(heap) {
    var first = heap[0];
    return first === undefined ? null : first;
  }
  function pop(heap) {
    var first = heap[0];
    if (first !== undefined) {
      var last = heap.pop();
      if (last !== first) {
        heap[0] = last;
        siftDown(heap, last, 0);
      }
      return first;
    } else {
      return null;
    }
  }
  function siftUp(heap, node, i) {
    var index = i;
    while (true) {
      var parentIndex = index - 1 >>> 1;
      var parent = heap[parentIndex];
      if (parent !== undefined && compare(parent, node) > 0) {
        heap[parentIndex] = node;
        heap[index] = parent;
        index = parentIndex;
      } else {
        return;
      }
    }
  }
  function siftDown(heap, node, i) {
    var index = i;
    var length = heap.length;
    while (index < length) {
      var leftIndex = (index + 1) * 2 - 1;
      var left = heap[leftIndex];
      var rightIndex = leftIndex + 1;
      var right = heap[rightIndex];
      if (left !== undefined && compare(left, node) < 0) {
        if (right !== undefined && compare(right, left) < 0) {
          heap[index] = right;
          heap[rightIndex] = node;
          index = rightIndex;
        } else {
          heap[index] = left;
          heap[leftIndex] = node;
          index = leftIndex;
        }
      } else if (right !== undefined && compare(right, node) < 0) {
        heap[index] = right;
        heap[rightIndex] = node;
        index = rightIndex;
      } else {
        return;
      }
    }
  }
  function compare(a, b) {
    var diff = a.sortIndex - b.sortIndex;
    return diff !== 0 ? diff : a.id - b.id;
  }
  var NoPriority = 0;
  var ImmediatePriority = 1;
  var UserBlockingPriority = 2;
  var NormalPriority = 3;
  var LowPriority = 4;
  var IdlePriority = 5;
  var runIdCounter = 0;
  var mainThreadIdCounter = 0;
  var profilingStateSize = 4;
  var sharedProfilingBuffer = typeof SharedArrayBuffer === 'function' ? new SharedArrayBuffer(profilingStateSize * Int32Array.BYTES_PER_ELEMENT) : typeof ArrayBuffer === 'function' ? new ArrayBuffer(profilingStateSize * Int32Array.BYTES_PER_ELEMENT) : null;
  var profilingState = sharedProfilingBuffer !== null ? new Int32Array(sharedProfilingBuffer) : [];
  var PRIORITY = 0;
  var CURRENT_TASK_ID = 1;
  var CURRENT_RUN_ID = 2;
  var QUEUE_SIZE = 3;
  {
    profilingState[PRIORITY] = NoPriority;
    profilingState[QUEUE_SIZE] = 0;
    profilingState[CURRENT_TASK_ID] = 0;
  }
  var INITIAL_EVENT_LOG_SIZE = 131072;
  var MAX_EVENT_LOG_SIZE = 524288;
  var eventLogSize = 0;
  var eventLogBuffer = null;
  var eventLog = null;
  var eventLogIndex = 0;
  var TaskStartEvent = 1;
  var TaskCompleteEvent = 2;
  var TaskErrorEvent = 3;
  var TaskCancelEvent = 4;
  var TaskRunEvent = 5;
  var TaskYieldEvent = 6;
  var SchedulerSuspendEvent = 7;
  var SchedulerResumeEvent = 8;
  function logEvent(entries) {
    if (eventLog !== null) {
      var offset = eventLogIndex;
      eventLogIndex += entries.length;
      if (eventLogIndex + 1 > eventLogSize) {
        eventLogSize *= 2;
        if (eventLogSize > MAX_EVENT_LOG_SIZE) {
          console['error']("Scheduler Profiling: Event log exceeded maximum size. Don't " + 'forget to call `stopLoggingProfilingEvents()`.');
          stopLoggingProfilingEvents();
          return;
        }
        var newEventLog = new Int32Array(eventLogSize * 4);
        newEventLog.set(eventLog);
        eventLogBuffer = newEventLog.buffer;
        eventLog = newEventLog;
      }
      eventLog.set(entries, offset);
    }
  }
  function startLoggingProfilingEvents() {
    eventLogSize = INITIAL_EVENT_LOG_SIZE;
    eventLogBuffer = new ArrayBuffer(eventLogSize * 4);
    eventLog = new Int32Array(eventLogBuffer);
    eventLogIndex = 0;
  }
  function stopLoggingProfilingEvents() {
    var buffer = eventLogBuffer;
    eventLogSize = 0;
    eventLogBuffer = null;
    eventLog = null;
    eventLogIndex = 0;
    return buffer;
  }
  function markTaskStart(task, ms) {
    {
      profilingState[QUEUE_SIZE]++;
      if (eventLog !== null) {
        logEvent([TaskStartEvent, ms * 1000, task.id, task.priorityLevel]);
      }
    }
  }
  function markTaskCompleted(task, ms) {
    {
      profilingState[PRIORITY] = NoPriority;
      profilingState[CURRENT_TASK_ID] = 0;
      profilingState[QUEUE_SIZE]--;
      if (eventLog !== null) {
        logEvent([TaskCompleteEvent, ms * 1000, task.id]);
      }
    }
  }
  function markTaskCanceled(task, ms) {
    {
      profilingState[QUEUE_SIZE]--;
      if (eventLog !== null) {
        logEvent([TaskCancelEvent, ms * 1000, task.id]);
      }
    }
  }
  function markTaskErrored(task, ms) {
    {
      profilingState[PRIORITY] = NoPriority;
      profilingState[CURRENT_TASK_ID] = 0;
      profilingState[QUEUE_SIZE]--;
      if (eventLog !== null) {
        logEvent([TaskErrorEvent, ms * 1000, task.id]);
      }
    }
  }
  function markTaskRun(task, ms) {
    {
      runIdCounter++;
      profilingState[PRIORITY] = task.priorityLevel;
      profilingState[CURRENT_TASK_ID] = task.id;
      profilingState[CURRENT_RUN_ID] = runIdCounter;
      if (eventLog !== null) {
        logEvent([TaskRunEvent, ms * 1000, task.id, runIdCounter]);
      }
    }
  }
  function markTaskYield(task, ms) {
    {
      profilingState[PRIORITY] = NoPriority;
      profilingState[CURRENT_TASK_ID] = 0;
      profilingState[CURRENT_RUN_ID] = 0;
      if (eventLog !== null) {
        logEvent([TaskYieldEvent, ms * 1000, task.id, runIdCounter]);
      }
    }
  }
  function markSchedulerSuspended(ms) {
    {
      mainThreadIdCounter++;
      if (eventLog !== null) {
        logEvent([SchedulerSuspendEvent, ms * 1000, mainThreadIdCounter]);
      }
    }
  }
  function markSchedulerUnsuspended(ms) {
    {
      if (eventLog !== null) {
        logEvent([SchedulerResumeEvent, ms * 1000, mainThreadIdCounter]);
      }
    }
  }
  var maxSigned31BitInt = 1073741823;
  var IMMEDIATE_PRIORITY_TIMEOUT = -1;
  var USER_BLOCKING_PRIORITY = 250;
  var NORMAL_PRIORITY_TIMEOUT = 5000;
  var LOW_PRIORITY_TIMEOUT = 10000;
  var IDLE_PRIORITY = maxSigned31BitInt;
  var taskQueue = [];
  var timerQueue = [];
  var taskIdCounter = 1;
  var currentTask = null;
  var currentPriorityLevel = NormalPriority;
  var isPerformingWork = false;
  var isHostCallbackScheduled = false;
  var isHostTimeoutScheduled = false;
  function advanceTimers(currentTime) {
    var timer = peek(timerQueue);
    while (timer !== null) {
      if (timer.callback === null) {
        pop(timerQueue);
      } else if (timer.startTime <= currentTime) {
        pop(timerQueue);
        timer.sortIndex = timer.expirationTime;
        push(taskQueue, timer);
        {
          markTaskStart(timer, currentTime);
          timer.isQueued = true;
        }
      } else {
        return;
      }
      timer = peek(timerQueue);
    }
  }
  function handleTimeout(currentTime) {
    isHostTimeoutScheduled = false;
    advanceTimers(currentTime);
    if (!isHostCallbackScheduled) {
      if (peek(taskQueue) !== null) {
        isHostCallbackScheduled = true;
        requestHostCallback(flushWork);
      } else {
        var firstTimer = peek(timerQueue);
        if (firstTimer !== null) {
          requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
        }
      }
    }
  }
  function flushWork(hasTimeRemaining, initialTime) {
    {
      markSchedulerUnsuspended(initialTime);
    }
    isHostCallbackScheduled = false;
    if (isHostTimeoutScheduled) {
      isHostTimeoutScheduled = false;
      cancelHostTimeout();
    }
    isPerformingWork = true;
    var previousPriorityLevel = currentPriorityLevel;
    try {
      if (enableProfiling) {
        try {
          return workLoop(hasTimeRemaining, initialTime);
        } catch (error) {
          if (currentTask !== null) {
            var currentTime = exports.unstable_now();
            markTaskErrored(currentTask, currentTime);
            currentTask.isQueued = false;
          }
          throw error;
        }
      } else {
        return workLoop(hasTimeRemaining, initialTime);
      }
    } finally {
      currentTask = null;
      currentPriorityLevel = previousPriorityLevel;
      isPerformingWork = false;
      {
        var _currentTime = exports.unstable_now();
        markSchedulerSuspended(_currentTime);
      }
    }
  }
  function workLoop(hasTimeRemaining, initialTime) {
    var currentTime = initialTime;
    advanceTimers(currentTime);
    currentTask = peek(taskQueue);
    while (currentTask !== null && !enableSchedulerDebugging) {
      if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {
        break;
      }
      var callback = currentTask.callback;
      if (callback !== null) {
        currentTask.callback = null;
        currentPriorityLevel = currentTask.priorityLevel;
        var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
        markTaskRun(currentTask, currentTime);
        var continuationCallback = callback(didUserCallbackTimeout);
        currentTime = exports.unstable_now();
        if (typeof continuationCallback === 'function') {
          currentTask.callback = continuationCallback;
          markTaskYield(currentTask, currentTime);
        } else {
          {
            markTaskCompleted(currentTask, currentTime);
            currentTask.isQueued = false;
          }
          if (currentTask === peek(taskQueue)) {
            pop(taskQueue);
          }
        }
        advanceTimers(currentTime);
      } else {
        pop(taskQueue);
      }
      currentTask = peek(taskQueue);
    }
    if (currentTask !== null) {
      return true;
    } else {
      var firstTimer = peek(timerQueue);
      if (firstTimer !== null) {
        requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
      }
      return false;
    }
  }
  function unstable_runWithPriority(priorityLevel, eventHandler) {
    switch (priorityLevel) {
      case ImmediatePriority:
      case UserBlockingPriority:
      case NormalPriority:
      case LowPriority:
      case IdlePriority:
        break;
      default:
        priorityLevel = NormalPriority;
    }
    var previousPriorityLevel = currentPriorityLevel;
    currentPriorityLevel = priorityLevel;
    try {
      return eventHandler();
    } finally {
      currentPriorityLevel = previousPriorityLevel;
    }
  }
  function unstable_next(eventHandler) {
    var priorityLevel;
    switch (currentPriorityLevel) {
      case ImmediatePriority:
      case UserBlockingPriority:
      case NormalPriority:
        priorityLevel = NormalPriority;
        break;
      default:
        priorityLevel = currentPriorityLevel;
        break;
    }
    var previousPriorityLevel = currentPriorityLevel;
    currentPriorityLevel = priorityLevel;
    try {
      return eventHandler();
    } finally {
      currentPriorityLevel = previousPriorityLevel;
    }
  }
  function unstable_wrapCallback(callback) {
    var parentPriorityLevel = currentPriorityLevel;
    return function () {
      var previousPriorityLevel = currentPriorityLevel;
      currentPriorityLevel = parentPriorityLevel;
      try {
        return callback.apply(this, arguments);
      } finally {
        currentPriorityLevel = previousPriorityLevel;
      }
    };
  }
  function timeoutForPriorityLevel(priorityLevel) {
    switch (priorityLevel) {
      case ImmediatePriority:
        return IMMEDIATE_PRIORITY_TIMEOUT;
      case UserBlockingPriority:
        return USER_BLOCKING_PRIORITY;
      case IdlePriority:
        return IDLE_PRIORITY;
      case LowPriority:
        return LOW_PRIORITY_TIMEOUT;
      case NormalPriority:
      default:
        return NORMAL_PRIORITY_TIMEOUT;
    }
  }
  function unstable_scheduleCallback(priorityLevel, callback, options) {
    var currentTime = exports.unstable_now();
    var startTime;
    var timeout;
    if (typeof options === 'object' && options !== null) {
      var delay = options.delay;
      if (typeof delay === 'number' && delay > 0) {
        startTime = currentTime + delay;
      } else {
        startTime = currentTime;
      }
      timeout = typeof options.timeout === 'number' ? options.timeout : timeoutForPriorityLevel(priorityLevel);
    } else {
      timeout = timeoutForPriorityLevel(priorityLevel);
      startTime = currentTime;
    }
    var expirationTime = startTime + timeout;
    var newTask = {
      id: taskIdCounter++,
      callback: callback,
      priorityLevel: priorityLevel,
      startTime: startTime,
      expirationTime: expirationTime,
      sortIndex: -1
    };
    {
      newTask.isQueued = false;
    }
    if (startTime > currentTime) {
      newTask.sortIndex = startTime;
      push(timerQueue, newTask);
      if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
        if (isHostTimeoutScheduled) {
          cancelHostTimeout();
        } else {
          isHostTimeoutScheduled = true;
        }
        requestHostTimeout(handleTimeout, startTime - currentTime);
      }
    } else {
      newTask.sortIndex = expirationTime;
      push(taskQueue, newTask);
      {
        markTaskStart(newTask, currentTime);
        newTask.isQueued = true;
      }
      if (!isHostCallbackScheduled && !isPerformingWork) {
        isHostCallbackScheduled = true;
        requestHostCallback(flushWork);
      }
    }
    return newTask;
  }
  function unstable_pauseExecution() {}
  function unstable_continueExecution() {
    if (!isHostCallbackScheduled && !isPerformingWork) {
      isHostCallbackScheduled = true;
      requestHostCallback(flushWork);
    }
  }
  function unstable_getFirstCallbackNode() {
    return peek(taskQueue);
  }
  function unstable_cancelCallback(task) {
    {
      if (task.isQueued) {
        var currentTime = exports.unstable_now();
        markTaskCanceled(task, currentTime);
        task.isQueued = false;
      }
    }
    task.callback = null;
  }
  function unstable_getCurrentPriorityLevel() {
    return currentPriorityLevel;
  }
  function unstable_shouldYield() {
    var currentTime = exports.unstable_now();
    advanceTimers(currentTime);
    var firstTask = peek(taskQueue);
    return firstTask !== currentTask && currentTask !== null && firstTask !== null && firstTask.callback !== null && firstTask.startTime <= currentTime && firstTask.expirationTime < currentTask.expirationTime || shouldYieldToHost();
  }
  var unstable_requestPaint = requestPaint;
  var unstable_Profiling = {
    startLoggingProfilingEvents: startLoggingProfilingEvents,
    stopLoggingProfilingEvents: stopLoggingProfilingEvents,
    sharedProfilingBuffer: sharedProfilingBuffer
  };
  exports.unstable_IdlePriority = IdlePriority;
  exports.unstable_ImmediatePriority = ImmediatePriority;
  exports.unstable_LowPriority = LowPriority;
  exports.unstable_NormalPriority = NormalPriority;
  exports.unstable_Profiling = unstable_Profiling;
  exports.unstable_UserBlockingPriority = UserBlockingPriority;
  exports.unstable_cancelCallback = unstable_cancelCallback;
  exports.unstable_continueExecution = unstable_continueExecution;
  exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
  exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
  exports.unstable_next = unstable_next;
  exports.unstable_pauseExecution = unstable_pauseExecution;
  exports.unstable_requestPaint = unstable_requestPaint;
  exports.unstable_runWithPriority = unstable_runWithPriority;
  exports.unstable_scheduleCallback = unstable_scheduleCallback;
  exports.unstable_shouldYield = unstable_shouldYield;
  exports.unstable_wrapCallback = unstable_wrapCallback;
})();

},

// node_modules/scheduler/cjs/scheduler-tracing.development.js @183
183: function(__fusereq, exports, module){
'use strict';
(function () {
  'use strict';
  var DEFAULT_THREAD_ID = 0;
  var interactionIDCounter = 0;
  var threadIDCounter = 0;
  exports.__interactionsRef = null;
  exports.__subscriberRef = null;
  {
    exports.__interactionsRef = {
      current: new Set()
    };
    exports.__subscriberRef = {
      current: null
    };
  }
  function unstable_clear(callback) {
    var prevInteractions = exports.__interactionsRef.current;
    exports.__interactionsRef.current = new Set();
    try {
      return callback();
    } finally {
      exports.__interactionsRef.current = prevInteractions;
    }
  }
  function unstable_getCurrent() {
    {
      return exports.__interactionsRef.current;
    }
  }
  function unstable_getThreadID() {
    return ++threadIDCounter;
  }
  function unstable_trace(name, timestamp, callback) {
    var threadID = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : DEFAULT_THREAD_ID;
    var interaction = {
      __count: 1,
      id: interactionIDCounter++,
      name: name,
      timestamp: timestamp
    };
    var prevInteractions = exports.__interactionsRef.current;
    var interactions = new Set(prevInteractions);
    interactions.add(interaction);
    exports.__interactionsRef.current = interactions;
    var subscriber = exports.__subscriberRef.current;
    var returnValue;
    try {
      if (subscriber !== null) {
        subscriber.onInteractionTraced(interaction);
      }
    } finally {
      try {
        if (subscriber !== null) {
          subscriber.onWorkStarted(interactions, threadID);
        }
      } finally {
        try {
          returnValue = callback();
        } finally {
          exports.__interactionsRef.current = prevInteractions;
          try {
            if (subscriber !== null) {
              subscriber.onWorkStopped(interactions, threadID);
            }
          } finally {
            interaction.__count--;
            if (subscriber !== null && interaction.__count === 0) {
              subscriber.onInteractionScheduledWorkCompleted(interaction);
            }
          }
        }
      }
    }
    return returnValue;
  }
  function unstable_wrap(callback) {
    var threadID = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_THREAD_ID;
    var wrappedInteractions = exports.__interactionsRef.current;
    var subscriber = exports.__subscriberRef.current;
    if (subscriber !== null) {
      subscriber.onWorkScheduled(wrappedInteractions, threadID);
    }
    wrappedInteractions.forEach(function (interaction) {
      interaction.__count++;
    });
    var hasRun = false;
    function wrapped() {
      var prevInteractions = exports.__interactionsRef.current;
      exports.__interactionsRef.current = wrappedInteractions;
      subscriber = exports.__subscriberRef.current;
      try {
        var returnValue;
        try {
          if (subscriber !== null) {
            subscriber.onWorkStarted(wrappedInteractions, threadID);
          }
        } finally {
          try {
            returnValue = callback.apply(undefined, arguments);
          } finally {
            exports.__interactionsRef.current = prevInteractions;
            if (subscriber !== null) {
              subscriber.onWorkStopped(wrappedInteractions, threadID);
            }
          }
        }
        return returnValue;
      } finally {
        if (!hasRun) {
          hasRun = true;
          wrappedInteractions.forEach(function (interaction) {
            interaction.__count--;
            if (subscriber !== null && interaction.__count === 0) {
              subscriber.onInteractionScheduledWorkCompleted(interaction);
            }
          });
        }
      }
    }
    wrapped.cancel = function cancel() {
      subscriber = exports.__subscriberRef.current;
      try {
        if (subscriber !== null) {
          subscriber.onWorkCanceled(wrappedInteractions, threadID);
        }
      } finally {
        wrappedInteractions.forEach(function (interaction) {
          interaction.__count--;
          if (subscriber && interaction.__count === 0) {
            subscriber.onInteractionScheduledWorkCompleted(interaction);
          }
        });
      }
    };
    return wrapped;
  }
  var subscribers = null;
  {
    subscribers = new Set();
  }
  function unstable_subscribe(subscriber) {
    {
      subscribers.add(subscriber);
      if (subscribers.size === 1) {
        exports.__subscriberRef.current = {
          onInteractionScheduledWorkCompleted: onInteractionScheduledWorkCompleted,
          onInteractionTraced: onInteractionTraced,
          onWorkCanceled: onWorkCanceled,
          onWorkScheduled: onWorkScheduled,
          onWorkStarted: onWorkStarted,
          onWorkStopped: onWorkStopped
        };
      }
    }
  }
  function unstable_unsubscribe(subscriber) {
    {
      subscribers.delete(subscriber);
      if (subscribers.size === 0) {
        exports.__subscriberRef.current = null;
      }
    }
  }
  function onInteractionTraced(interaction) {
    var didCatchError = false;
    var caughtError = null;
    subscribers.forEach(function (subscriber) {
      try {
        subscriber.onInteractionTraced(interaction);
      } catch (error) {
        if (!didCatchError) {
          didCatchError = true;
          caughtError = error;
        }
      }
    });
    if (didCatchError) {
      throw caughtError;
    }
  }
  function onInteractionScheduledWorkCompleted(interaction) {
    var didCatchError = false;
    var caughtError = null;
    subscribers.forEach(function (subscriber) {
      try {
        subscriber.onInteractionScheduledWorkCompleted(interaction);
      } catch (error) {
        if (!didCatchError) {
          didCatchError = true;
          caughtError = error;
        }
      }
    });
    if (didCatchError) {
      throw caughtError;
    }
  }
  function onWorkScheduled(interactions, threadID) {
    var didCatchError = false;
    var caughtError = null;
    subscribers.forEach(function (subscriber) {
      try {
        subscriber.onWorkScheduled(interactions, threadID);
      } catch (error) {
        if (!didCatchError) {
          didCatchError = true;
          caughtError = error;
        }
      }
    });
    if (didCatchError) {
      throw caughtError;
    }
  }
  function onWorkStarted(interactions, threadID) {
    var didCatchError = false;
    var caughtError = null;
    subscribers.forEach(function (subscriber) {
      try {
        subscriber.onWorkStarted(interactions, threadID);
      } catch (error) {
        if (!didCatchError) {
          didCatchError = true;
          caughtError = error;
        }
      }
    });
    if (didCatchError) {
      throw caughtError;
    }
  }
  function onWorkStopped(interactions, threadID) {
    var didCatchError = false;
    var caughtError = null;
    subscribers.forEach(function (subscriber) {
      try {
        subscriber.onWorkStopped(interactions, threadID);
      } catch (error) {
        if (!didCatchError) {
          didCatchError = true;
          caughtError = error;
        }
      }
    });
    if (didCatchError) {
      throw caughtError;
    }
  }
  function onWorkCanceled(interactions, threadID) {
    var didCatchError = false;
    var caughtError = null;
    subscribers.forEach(function (subscriber) {
      try {
        subscriber.onWorkCanceled(interactions, threadID);
      } catch (error) {
        if (!didCatchError) {
          didCatchError = true;
          caughtError = error;
        }
      }
    });
    if (didCatchError) {
      throw caughtError;
    }
  }
  exports.unstable_clear = unstable_clear;
  exports.unstable_getCurrent = unstable_getCurrent;
  exports.unstable_getThreadID = unstable_getThreadID;
  exports.unstable_subscribe = unstable_subscribe;
  exports.unstable_trace = unstable_trace;
  exports.unstable_unsubscribe = unstable_unsubscribe;
  exports.unstable_wrap = unstable_wrap;
})();

},

// node_modules/react-dom/index.js @4
4: function(__fusereq, exports, module){
'use strict';
function checkDCE() {
  if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function') {
    return;
  }
  throw new Error('^_^');
  try {
    __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
  } catch (err) {
    console.error(err);
  }
}
module.exports = __fusereq(11);

},

// node_modules/react-dom/cjs/react-dom.development.js @11
11: function(__fusereq, exports, module){
'use strict';
(function () {
  'use strict';
  var React = __fusereq(3);
  var _assign = __fusereq(20);
  var Scheduler = __fusereq(101);
  var checkPropTypes = __fusereq(21);
  var tracing = __fusereq(102);
  var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
  if (!ReactSharedInternals.hasOwnProperty('ReactCurrentDispatcher')) {
    ReactSharedInternals.ReactCurrentDispatcher = {
      current: null
    };
  }
  if (!ReactSharedInternals.hasOwnProperty('ReactCurrentBatchConfig')) {
    ReactSharedInternals.ReactCurrentBatchConfig = {
      suspense: null
    };
  }
  function warn(format) {
    {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
      printWarning('warn', format, args);
    }
  }
  function error(format) {
    {
      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        args[_key2 - 1] = arguments[_key2];
      }
      printWarning('error', format, args);
    }
  }
  function printWarning(level, format, args) {
    {
      var hasExistingStack = args.length > 0 && typeof args[args.length - 1] === 'string' && args[args.length - 1].indexOf('\n    in') === 0;
      if (!hasExistingStack) {
        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        var stack = ReactDebugCurrentFrame.getStackAddendum();
        if (stack !== '') {
          format += '%s';
          args = args.concat([stack]);
        }
      }
      var argsWithFormat = args.map(function (item) {
        return '' + item;
      });
      argsWithFormat.unshift('Warning: ' + format);
      Function.prototype.apply.call(console[level], console, argsWithFormat);
      try {
        var argIndex = 0;
        var message = 'Warning: ' + format.replace(/%s/g, function () {
          return args[argIndex++];
        });
        throw new Error(message);
      } catch (x) {}
    }
  }
  if (!React) {
    {
      throw Error("ReactDOM was loaded before React. Make sure you load the React package before loading ReactDOM.");
    }
  }
  var invokeGuardedCallbackImpl = function (name, func, context, a, b, c, d, e, f) {
    var funcArgs = Array.prototype.slice.call(arguments, 3);
    try {
      func.apply(context, funcArgs);
    } catch (error) {
      this.onError(error);
    }
  };
  {
    if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
      var fakeNode = document.createElement('react');
      var invokeGuardedCallbackDev = function (name, func, context, a, b, c, d, e, f) {
        if (!(typeof document !== 'undefined')) {
          {
            throw Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
          }
        }
        var evt = document.createEvent('Event');
        var didError = true;
        var windowEvent = window.event;
        var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, 'event');
        var funcArgs = Array.prototype.slice.call(arguments, 3);
        function callCallback() {
          fakeNode.removeEventListener(evtType, callCallback, false);
          if (typeof window.event !== 'undefined' && window.hasOwnProperty('event')) {
            window.event = windowEvent;
          }
          func.apply(context, funcArgs);
          didError = false;
        }
        var error;
        var didSetError = false;
        var isCrossOriginError = false;
        function handleWindowError(event) {
          error = event.error;
          didSetError = true;
          if (error === null && event.colno === 0 && event.lineno === 0) {
            isCrossOriginError = true;
          }
          if (event.defaultPrevented) {
            if (error != null && typeof error === 'object') {
              try {
                error._suppressLogging = true;
              } catch (inner) {}
            }
          }
        }
        var evtType = "react-" + (name ? name : 'invokeguardedcallback');
        window.addEventListener('error', handleWindowError);
        fakeNode.addEventListener(evtType, callCallback, false);
        evt.initEvent(evtType, false, false);
        fakeNode.dispatchEvent(evt);
        if (windowEventDescriptor) {
          Object.defineProperty(window, 'event', windowEventDescriptor);
        }
        if (didError) {
          if (!didSetError) {
            error = new Error('An error was thrown inside one of your components, but React ' + "doesn't know what it was. This is likely due to browser " + 'flakiness. React does its best to preserve the "Pause on ' + 'exceptions" behavior of the DevTools, which requires some ' + "DEV-mode only tricks. It's possible that these don't work in " + 'your browser. Try triggering the error in production mode, ' + 'or switching to a modern browser. If you suspect that this is ' + 'actually an issue with React, please file an issue.');
          } else if (isCrossOriginError) {
            error = new Error("A cross-origin error was thrown. React doesn't have access to " + 'the actual error object in development. ' + 'See https://fb.me/react-crossorigin-error for more information.');
          }
          this.onError(error);
        }
        window.removeEventListener('error', handleWindowError);
      };
      invokeGuardedCallbackImpl = invokeGuardedCallbackDev;
    }
  }
  var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
  var hasError = false;
  var caughtError = null;
  var hasRethrowError = false;
  var rethrowError = null;
  var reporter = {
    onError: function (error) {
      hasError = true;
      caughtError = error;
    }
  };
  function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
    hasError = false;
    caughtError = null;
    invokeGuardedCallbackImpl$1.apply(reporter, arguments);
  }
  function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
    invokeGuardedCallback.apply(this, arguments);
    if (hasError) {
      var error = clearCaughtError();
      if (!hasRethrowError) {
        hasRethrowError = true;
        rethrowError = error;
      }
    }
  }
  function rethrowCaughtError() {
    if (hasRethrowError) {
      var error = rethrowError;
      hasRethrowError = false;
      rethrowError = null;
      throw error;
    }
  }
  function hasCaughtError() {
    return hasError;
  }
  function clearCaughtError() {
    if (hasError) {
      var error = caughtError;
      hasError = false;
      caughtError = null;
      return error;
    } else {
      {
        {
          throw Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
        }
      }
    }
  }
  var getFiberCurrentPropsFromNode = null;
  var getInstanceFromNode = null;
  var getNodeFromInstance = null;
  function setComponentTree(getFiberCurrentPropsFromNodeImpl, getInstanceFromNodeImpl, getNodeFromInstanceImpl) {
    getFiberCurrentPropsFromNode = getFiberCurrentPropsFromNodeImpl;
    getInstanceFromNode = getInstanceFromNodeImpl;
    getNodeFromInstance = getNodeFromInstanceImpl;
    {
      if (!getNodeFromInstance || !getInstanceFromNode) {
        error('EventPluginUtils.setComponentTree(...): Injected ' + 'module is missing getNodeFromInstance or getInstanceFromNode.');
      }
    }
  }
  var validateEventDispatches;
  {
    validateEventDispatches = function (event) {
      var dispatchListeners = event._dispatchListeners;
      var dispatchInstances = event._dispatchInstances;
      var listenersIsArr = Array.isArray(dispatchListeners);
      var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;
      var instancesIsArr = Array.isArray(dispatchInstances);
      var instancesLen = instancesIsArr ? dispatchInstances.length : dispatchInstances ? 1 : 0;
      if (instancesIsArr !== listenersIsArr || instancesLen !== listenersLen) {
        error('EventPluginUtils: Invalid `event`.');
      }
    };
  }
  function executeDispatch(event, listener, inst) {
    var type = event.type || 'unknown-event';
    event.currentTarget = getNodeFromInstance(inst);
    invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);
    event.currentTarget = null;
  }
  function executeDispatchesInOrder(event) {
    var dispatchListeners = event._dispatchListeners;
    var dispatchInstances = event._dispatchInstances;
    {
      validateEventDispatches(event);
    }
    if (Array.isArray(dispatchListeners)) {
      for (var i = 0; i < dispatchListeners.length; i++) {
        if (event.isPropagationStopped()) {
          break;
        }
        executeDispatch(event, dispatchListeners[i], dispatchInstances[i]);
      }
    } else if (dispatchListeners) {
      executeDispatch(event, dispatchListeners, dispatchInstances);
    }
    event._dispatchListeners = null;
    event._dispatchInstances = null;
  }
  var FunctionComponent = 0;
  var ClassComponent = 1;
  var IndeterminateComponent = 2;
  var HostRoot = 3;
  var HostPortal = 4;
  var HostComponent = 5;
  var HostText = 6;
  var Fragment = 7;
  var Mode = 8;
  var ContextConsumer = 9;
  var ContextProvider = 10;
  var ForwardRef = 11;
  var Profiler = 12;
  var SuspenseComponent = 13;
  var MemoComponent = 14;
  var SimpleMemoComponent = 15;
  var LazyComponent = 16;
  var IncompleteClassComponent = 17;
  var DehydratedFragment = 18;
  var SuspenseListComponent = 19;
  var FundamentalComponent = 20;
  var ScopeComponent = 21;
  var Block = 22;
  var eventPluginOrder = null;
  var namesToPlugins = {};
  function recomputePluginOrdering() {
    if (!eventPluginOrder) {
      return;
    }
    for (var pluginName in namesToPlugins) {
      var pluginModule = namesToPlugins[pluginName];
      var pluginIndex = eventPluginOrder.indexOf(pluginName);
      if (!(pluginIndex > -1)) {
        {
          throw Error("EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `" + pluginName + "`.");
        }
      }
      if (plugins[pluginIndex]) {
        continue;
      }
      if (!pluginModule.extractEvents) {
        {
          throw Error("EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `" + pluginName + "` does not.");
        }
      }
      plugins[pluginIndex] = pluginModule;
      var publishedEvents = pluginModule.eventTypes;
      for (var eventName in publishedEvents) {
        if (!publishEventForPlugin(publishedEvents[eventName], pluginModule, eventName)) {
          {
            throw Error("EventPluginRegistry: Failed to publish event `" + eventName + "` for plugin `" + pluginName + "`.");
          }
        }
      }
    }
  }
  function publishEventForPlugin(dispatchConfig, pluginModule, eventName) {
    if (!!eventNameDispatchConfigs.hasOwnProperty(eventName)) {
      {
        throw Error("EventPluginRegistry: More than one plugin attempted to publish the same event name, `" + eventName + "`.");
      }
    }
    eventNameDispatchConfigs[eventName] = dispatchConfig;
    var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
    if (phasedRegistrationNames) {
      for (var phaseName in phasedRegistrationNames) {
        if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
          var phasedRegistrationName = phasedRegistrationNames[phaseName];
          publishRegistrationName(phasedRegistrationName, pluginModule, eventName);
        }
      }
      return true;
    } else if (dispatchConfig.registrationName) {
      publishRegistrationName(dispatchConfig.registrationName, pluginModule, eventName);
      return true;
    }
    return false;
  }
  function publishRegistrationName(registrationName, pluginModule, eventName) {
    if (!!registrationNameModules[registrationName]) {
      {
        throw Error("EventPluginRegistry: More than one plugin attempted to publish the same registration name, `" + registrationName + "`.");
      }
    }
    registrationNameModules[registrationName] = pluginModule;
    registrationNameDependencies[registrationName] = pluginModule.eventTypes[eventName].dependencies;
    {
      var lowerCasedName = registrationName.toLowerCase();
      possibleRegistrationNames[lowerCasedName] = registrationName;
      if (registrationName === 'onDoubleClick') {
        possibleRegistrationNames.ondblclick = registrationName;
      }
    }
  }
  var plugins = [];
  var eventNameDispatchConfigs = {};
  var registrationNameModules = {};
  var registrationNameDependencies = {};
  var possibleRegistrationNames = {};
  function injectEventPluginOrder(injectedEventPluginOrder) {
    if (!!eventPluginOrder) {
      {
        throw Error("EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.");
      }
    }
    eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);
    recomputePluginOrdering();
  }
  function injectEventPluginsByName(injectedNamesToPlugins) {
    var isOrderingDirty = false;
    for (var pluginName in injectedNamesToPlugins) {
      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
        continue;
      }
      var pluginModule = injectedNamesToPlugins[pluginName];
      if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== pluginModule) {
        if (!!namesToPlugins[pluginName]) {
          {
            throw Error("EventPluginRegistry: Cannot inject two different event plugins using the same name, `" + pluginName + "`.");
          }
        }
        namesToPlugins[pluginName] = pluginModule;
        isOrderingDirty = true;
      }
    }
    if (isOrderingDirty) {
      recomputePluginOrdering();
    }
  }
  var canUseDOM = !!(typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined');
  var PLUGIN_EVENT_SYSTEM = 1;
  var IS_REPLAYED = 1 << 5;
  var IS_FIRST_ANCESTOR = 1 << 6;
  var restoreImpl = null;
  var restoreTarget = null;
  var restoreQueue = null;
  function restoreStateOfTarget(target) {
    var internalInstance = getInstanceFromNode(target);
    if (!internalInstance) {
      return;
    }
    if (!(typeof restoreImpl === 'function')) {
      {
        throw Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
      }
    }
    var stateNode = internalInstance.stateNode;
    if (stateNode) {
      var _props = getFiberCurrentPropsFromNode(stateNode);
      restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
    }
  }
  function setRestoreImplementation(impl) {
    restoreImpl = impl;
  }
  function enqueueStateRestore(target) {
    if (restoreTarget) {
      if (restoreQueue) {
        restoreQueue.push(target);
      } else {
        restoreQueue = [target];
      }
    } else {
      restoreTarget = target;
    }
  }
  function needsStateRestore() {
    return restoreTarget !== null || restoreQueue !== null;
  }
  function restoreStateIfNeeded() {
    if (!restoreTarget) {
      return;
    }
    var target = restoreTarget;
    var queuedTargets = restoreQueue;
    restoreTarget = null;
    restoreQueue = null;
    restoreStateOfTarget(target);
    if (queuedTargets) {
      for (var i = 0; i < queuedTargets.length; i++) {
        restoreStateOfTarget(queuedTargets[i]);
      }
    }
  }
  var enableProfilerTimer = true;
  var enableDeprecatedFlareAPI = false;
  var enableFundamentalAPI = false;
  var warnAboutStringRefs = false;
  var batchedUpdatesImpl = function (fn, bookkeeping) {
    return fn(bookkeeping);
  };
  var discreteUpdatesImpl = function (fn, a, b, c, d) {
    return fn(a, b, c, d);
  };
  var flushDiscreteUpdatesImpl = function () {};
  var batchedEventUpdatesImpl = batchedUpdatesImpl;
  var isInsideEventHandler = false;
  var isBatchingEventUpdates = false;
  function finishEventHandler() {
    var controlledComponentsHavePendingUpdates = needsStateRestore();
    if (controlledComponentsHavePendingUpdates) {
      flushDiscreteUpdatesImpl();
      restoreStateIfNeeded();
    }
  }
  function batchedUpdates(fn, bookkeeping) {
    if (isInsideEventHandler) {
      return fn(bookkeeping);
    }
    isInsideEventHandler = true;
    try {
      return batchedUpdatesImpl(fn, bookkeeping);
    } finally {
      isInsideEventHandler = false;
      finishEventHandler();
    }
  }
  function batchedEventUpdates(fn, a, b) {
    if (isBatchingEventUpdates) {
      return fn(a, b);
    }
    isBatchingEventUpdates = true;
    try {
      return batchedEventUpdatesImpl(fn, a, b);
    } finally {
      isBatchingEventUpdates = false;
      finishEventHandler();
    }
  }
  function discreteUpdates(fn, a, b, c, d) {
    var prevIsInsideEventHandler = isInsideEventHandler;
    isInsideEventHandler = true;
    try {
      return discreteUpdatesImpl(fn, a, b, c, d);
    } finally {
      isInsideEventHandler = prevIsInsideEventHandler;
      if (!isInsideEventHandler) {
        finishEventHandler();
      }
    }
  }
  function flushDiscreteUpdatesIfNeeded(timeStamp) {
    if (!isInsideEventHandler && !enableDeprecatedFlareAPI) {
      flushDiscreteUpdatesImpl();
    }
  }
  function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushDiscreteUpdatesImpl, _batchedEventUpdatesImpl) {
    batchedUpdatesImpl = _batchedUpdatesImpl;
    discreteUpdatesImpl = _discreteUpdatesImpl;
    flushDiscreteUpdatesImpl = _flushDiscreteUpdatesImpl;
    batchedEventUpdatesImpl = _batchedEventUpdatesImpl;
  }
  var DiscreteEvent = 0;
  var UserBlockingEvent = 1;
  var ContinuousEvent = 2;
  var RESERVED = 0;
  var STRING = 1;
  var BOOLEANISH_STRING = 2;
  var BOOLEAN = 3;
  var OVERLOADED_BOOLEAN = 4;
  var NUMERIC = 5;
  var POSITIVE_NUMERIC = 6;
  var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
  var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
  var ROOT_ATTRIBUTE_NAME = 'data-reactroot';
  var VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + ATTRIBUTE_NAME_START_CHAR + '][' + ATTRIBUTE_NAME_CHAR + ']*$');
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var illegalAttributeNameCache = {};
  var validatedAttributeNameCache = {};
  function isAttributeNameSafe(attributeName) {
    if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
      return true;
    }
    if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
      return false;
    }
    if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
      validatedAttributeNameCache[attributeName] = true;
      return true;
    }
    illegalAttributeNameCache[attributeName] = true;
    {
      error('Invalid attribute name: `%s`', attributeName);
    }
    return false;
  }
  function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
    if (propertyInfo !== null) {
      return propertyInfo.type === RESERVED;
    }
    if (isCustomComponentTag) {
      return false;
    }
    if (name.length > 2 && (name[0] === 'o' || name[0] === 'O') && (name[1] === 'n' || name[1] === 'N')) {
      return true;
    }
    return false;
  }
  function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
    if (propertyInfo !== null && propertyInfo.type === RESERVED) {
      return false;
    }
    switch (typeof value) {
      case 'function':
      case 'symbol':
        return true;
      case 'boolean':
        {
          if (isCustomComponentTag) {
            return false;
          }
          if (propertyInfo !== null) {
            return !propertyInfo.acceptsBooleans;
          } else {
            var prefix = name.toLowerCase().slice(0, 5);
            return prefix !== 'data-' && prefix !== 'aria-';
          }
        }
      default:
        return false;
    }
  }
  function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
    if (value === null || typeof value === 'undefined') {
      return true;
    }
    if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
      return true;
    }
    if (isCustomComponentTag) {
      return false;
    }
    if (propertyInfo !== null) {
      switch (propertyInfo.type) {
        case BOOLEAN:
          return !value;
        case OVERLOADED_BOOLEAN:
          return value === false;
        case NUMERIC:
          return isNaN(value);
        case POSITIVE_NUMERIC:
          return isNaN(value) || value < 1;
      }
    }
    return false;
  }
  function getPropertyInfo(name) {
    return properties.hasOwnProperty(name) ? properties[name] : null;
  }
  function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL) {
    this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
    this.attributeName = attributeName;
    this.attributeNamespace = attributeNamespace;
    this.mustUseProperty = mustUseProperty;
    this.propertyName = name;
    this.type = type;
    this.sanitizeURL = sanitizeURL;
  }
  var properties = {};
  var reservedProps = ['children', 'dangerouslySetInnerHTML', 'defaultValue', 'defaultChecked', 'innerHTML', 'suppressContentEditableWarning', 'suppressHydrationWarning', 'style'];
  reservedProps.forEach(function (name) {
    properties[name] = new PropertyInfoRecord(name, RESERVED, false, name, null, false);
  });
  [['acceptCharset', 'accept-charset'], ['className', 'class'], ['htmlFor', 'for'], ['httpEquiv', 'http-equiv']].forEach(function (_ref) {
    var name = _ref[0], attributeName = _ref[1];
    properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false);
  });
  ['contentEditable', 'draggable', 'spellCheck', 'value'].forEach(function (name) {
    properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name.toLowerCase(), null, false);
  });
  ['autoReverse', 'externalResourcesRequired', 'focusable', 'preserveAlpha'].forEach(function (name) {
    properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name, null, false);
  });
  ['allowFullScreen', 'async', 'autoFocus', 'autoPlay', 'controls', 'default', 'defer', 'disabled', 'disablePictureInPicture', 'formNoValidate', 'hidden', 'loop', 'noModule', 'noValidate', 'open', 'playsInline', 'readOnly', 'required', 'reversed', 'scoped', 'seamless', 'itemScope'].forEach(function (name) {
    properties[name] = new PropertyInfoRecord(name, BOOLEAN, false, name.toLowerCase(), null, false);
  });
  ['checked', 'multiple', 'muted', 'selected'].forEach(function (name) {
    properties[name] = new PropertyInfoRecord(name, BOOLEAN, true, name, null, false);
  });
  ['capture', 'download'].forEach(function (name) {
    properties[name] = new PropertyInfoRecord(name, OVERLOADED_BOOLEAN, false, name, null, false);
  });
  ['cols', 'rows', 'size', 'span'].forEach(function (name) {
    properties[name] = new PropertyInfoRecord(name, POSITIVE_NUMERIC, false, name, null, false);
  });
  ['rowSpan', 'start'].forEach(function (name) {
    properties[name] = new PropertyInfoRecord(name, NUMERIC, false, name.toLowerCase(), null, false);
  });
  var CAMELIZE = /[\-\:]([a-z])/g;
  var capitalize = function (token) {
    return token[1].toUpperCase();
  };
  ['accent-height', 'alignment-baseline', 'arabic-form', 'baseline-shift', 'cap-height', 'clip-path', 'clip-rule', 'color-interpolation', 'color-interpolation-filters', 'color-profile', 'color-rendering', 'dominant-baseline', 'enable-background', 'fill-opacity', 'fill-rule', 'flood-color', 'flood-opacity', 'font-family', 'font-size', 'font-size-adjust', 'font-stretch', 'font-style', 'font-variant', 'font-weight', 'glyph-name', 'glyph-orientation-horizontal', 'glyph-orientation-vertical', 'horiz-adv-x', 'horiz-origin-x', 'image-rendering', 'letter-spacing', 'lighting-color', 'marker-end', 'marker-mid', 'marker-start', 'overline-position', 'overline-thickness', 'paint-order', 'panose-1', 'pointer-events', 'rendering-intent', 'shape-rendering', 'stop-color', 'stop-opacity', 'strikethrough-position', 'strikethrough-thickness', 'stroke-dasharray', 'stroke-dashoffset', 'stroke-linecap', 'stroke-linejoin', 'stroke-miterlimit', 'stroke-opacity', 'stroke-width', 'text-anchor', 'text-decoration', 'text-rendering', 'underline-position', 'underline-thickness', 'unicode-bidi', 'unicode-range', 'units-per-em', 'v-alphabetic', 'v-hanging', 'v-ideographic', 'v-mathematical', 'vector-effect', 'vert-adv-y', 'vert-origin-x', 'vert-origin-y', 'word-spacing', 'writing-mode', 'xmlns:xlink', 'x-height'].forEach(function (attributeName) {
    var name = attributeName.replace(CAMELIZE, capitalize);
    properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false);
  });
  ['xlink:actuate', 'xlink:arcrole', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type'].forEach(function (attributeName) {
    var name = attributeName.replace(CAMELIZE, capitalize);
    properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, 'http://www.w3.org/1999/xlink', false);
  });
  ['xml:base', 'xml:lang', 'xml:space'].forEach(function (attributeName) {
    var name = attributeName.replace(CAMELIZE, capitalize);
    properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, 'http://www.w3.org/XML/1998/namespace', false);
  });
  ['tabIndex', 'crossOrigin'].forEach(function (attributeName) {
    properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, false);
  });
  var xlinkHref = 'xlinkHref';
  properties[xlinkHref] = new PropertyInfoRecord('xlinkHref', STRING, false, 'xlink:href', 'http://www.w3.org/1999/xlink', true);
  ['src', 'href', 'action', 'formAction'].forEach(function (attributeName) {
    properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, true);
  });
  var ReactDebugCurrentFrame = null;
  {
    ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
  }
  var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
  var didWarn = false;
  function sanitizeURL(url) {
    {
      if (!didWarn && isJavaScriptProtocol.test(url)) {
        didWarn = true;
        error('A future version of React will block javascript: URLs as a security precaution. ' + 'Use event handlers instead if you can. If you need to generate unsafe HTML try ' + 'using dangerouslySetInnerHTML instead. React was passed %s.', JSON.stringify(url));
      }
    }
  }
  function getValueForProperty(node, name, expected, propertyInfo) {
    {
      if (propertyInfo.mustUseProperty) {
        var propertyName = propertyInfo.propertyName;
        return node[propertyName];
      } else {
        if (propertyInfo.sanitizeURL) {
          sanitizeURL('' + expected);
        }
        var attributeName = propertyInfo.attributeName;
        var stringValue = null;
        if (propertyInfo.type === OVERLOADED_BOOLEAN) {
          if (node.hasAttribute(attributeName)) {
            var value = node.getAttribute(attributeName);
            if (value === '') {
              return true;
            }
            if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
              return value;
            }
            if (value === '' + expected) {
              return expected;
            }
            return value;
          }
        } else if (node.hasAttribute(attributeName)) {
          if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
            return node.getAttribute(attributeName);
          }
          if (propertyInfo.type === BOOLEAN) {
            return expected;
          }
          stringValue = node.getAttribute(attributeName);
        }
        if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
          return stringValue === null ? expected : stringValue;
        } else if (stringValue === '' + expected) {
          return expected;
        } else {
          return stringValue;
        }
      }
    }
  }
  function getValueForAttribute(node, name, expected) {
    {
      if (!isAttributeNameSafe(name)) {
        return;
      }
      if (!node.hasAttribute(name)) {
        return expected === undefined ? undefined : null;
      }
      var value = node.getAttribute(name);
      if (value === '' + expected) {
        return expected;
      }
      return value;
    }
  }
  function setValueForProperty(node, name, value, isCustomComponentTag) {
    var propertyInfo = getPropertyInfo(name);
    if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
      return;
    }
    if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
      value = null;
    }
    if (isCustomComponentTag || propertyInfo === null) {
      if (isAttributeNameSafe(name)) {
        var _attributeName = name;
        if (value === null) {
          node.removeAttribute(_attributeName);
        } else {
          node.setAttribute(_attributeName, '' + value);
        }
      }
      return;
    }
    var mustUseProperty = propertyInfo.mustUseProperty;
    if (mustUseProperty) {
      var propertyName = propertyInfo.propertyName;
      if (value === null) {
        var type = propertyInfo.type;
        node[propertyName] = type === BOOLEAN ? false : '';
      } else {
        node[propertyName] = value;
      }
      return;
    }
    var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
    if (value === null) {
      node.removeAttribute(attributeName);
    } else {
      var _type = propertyInfo.type;
      var attributeValue;
      if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
        attributeValue = '';
      } else {
        {
          attributeValue = '' + value;
        }
        if (propertyInfo.sanitizeURL) {
          sanitizeURL(attributeValue.toString());
        }
      }
      if (attributeNamespace) {
        node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
      } else {
        node.setAttribute(attributeName, attributeValue);
      }
    }
  }
  var BEFORE_SLASH_RE = /^(.*)[\\\/]/;
  function describeComponentFrame(name, source, ownerName) {
    var sourceInfo = '';
    if (source) {
      var path = source.fileName;
      var fileName = path.replace(BEFORE_SLASH_RE, '');
      {
        if ((/^index\./).test(fileName)) {
          var match = path.match(BEFORE_SLASH_RE);
          if (match) {
            var pathBeforeSlash = match[1];
            if (pathBeforeSlash) {
              var folderName = pathBeforeSlash.replace(BEFORE_SLASH_RE, '');
              fileName = folderName + '/' + fileName;
            }
          }
        }
      }
      sourceInfo = ' (at ' + fileName + ':' + source.lineNumber + ')';
    } else if (ownerName) {
      sourceInfo = ' (created by ' + ownerName + ')';
    }
    return '\n    in ' + (name || 'Unknown') + sourceInfo;
  }
  var hasSymbol = typeof Symbol === 'function' && Symbol.for;
  var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
  var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
  var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
  var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
  var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
  var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
  var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace;
  var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
  var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
  var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
  var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
  var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
  var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
  var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 0xead9;
  var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
  var FAUX_ITERATOR_SYMBOL = '@@iterator';
  function getIteratorFn(maybeIterable) {
    if (maybeIterable === null || typeof maybeIterable !== 'object') {
      return null;
    }
    var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
    if (typeof maybeIterator === 'function') {
      return maybeIterator;
    }
    return null;
  }
  var Uninitialized = -1;
  var Pending = 0;
  var Resolved = 1;
  var Rejected = 2;
  function refineResolvedLazyComponent(lazyComponent) {
    return lazyComponent._status === Resolved ? lazyComponent._result : null;
  }
  function initializeLazyComponentType(lazyComponent) {
    if (lazyComponent._status === Uninitialized) {
      lazyComponent._status = Pending;
      var ctor = lazyComponent._ctor;
      var thenable = ctor();
      lazyComponent._result = thenable;
      thenable.then(function (moduleObject) {
        if (lazyComponent._status === Pending) {
          var defaultExport = moduleObject.default;
          {
            if (defaultExport === undefined) {
              error('lazy: Expected the result of a dynamic import() call. ' + 'Instead received: %s\n\nYour code should look like: \n  ' + "const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
            }
          }
          lazyComponent._status = Resolved;
          lazyComponent._result = defaultExport;
        }
      }, function (error) {
        if (lazyComponent._status === Pending) {
          lazyComponent._status = Rejected;
          lazyComponent._result = error;
        }
      });
    }
  }
  function getWrappedName(outerType, innerType, wrapperName) {
    var functionName = innerType.displayName || innerType.name || '';
    return outerType.displayName || (functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName);
  }
  function getComponentName(type) {
    if (type == null) {
      return null;
    }
    {
      if (typeof type.tag === 'number') {
        error('Received an unexpected object in getComponentName(). ' + 'This is likely a bug in React. Please file an issue.');
      }
    }
    if (typeof type === 'function') {
      return type.displayName || type.name || null;
    }
    if (typeof type === 'string') {
      return type;
    }
    switch (type) {
      case REACT_FRAGMENT_TYPE:
        return 'Fragment';
      case REACT_PORTAL_TYPE:
        return 'Portal';
      case REACT_PROFILER_TYPE:
        return "Profiler";
      case REACT_STRICT_MODE_TYPE:
        return 'StrictMode';
      case REACT_SUSPENSE_TYPE:
        return 'Suspense';
      case REACT_SUSPENSE_LIST_TYPE:
        return 'SuspenseList';
    }
    if (typeof type === 'object') {
      switch (type.$$typeof) {
        case REACT_CONTEXT_TYPE:
          return 'Context.Consumer';
        case REACT_PROVIDER_TYPE:
          return 'Context.Provider';
        case REACT_FORWARD_REF_TYPE:
          return getWrappedName(type, type.render, 'ForwardRef');
        case REACT_MEMO_TYPE:
          return getComponentName(type.type);
        case REACT_BLOCK_TYPE:
          return getComponentName(type.render);
        case REACT_LAZY_TYPE:
          {
            var thenable = type;
            var resolvedThenable = refineResolvedLazyComponent(thenable);
            if (resolvedThenable) {
              return getComponentName(resolvedThenable);
            }
            break;
          }
      }
    }
    return null;
  }
  var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
  function describeFiber(fiber) {
    switch (fiber.tag) {
      case HostRoot:
      case HostPortal:
      case HostText:
      case Fragment:
      case ContextProvider:
      case ContextConsumer:
        return '';
      default:
        var owner = fiber._debugOwner;
        var source = fiber._debugSource;
        var name = getComponentName(fiber.type);
        var ownerName = null;
        if (owner) {
          ownerName = getComponentName(owner.type);
        }
        return describeComponentFrame(name, source, ownerName);
    }
  }
  function getStackByFiberInDevAndProd(workInProgress) {
    var info = '';
    var node = workInProgress;
    do {
      info += describeFiber(node);
      node = node.return;
    } while (node);
    return info;
  }
  var current = null;
  var isRendering = false;
  function getCurrentFiberOwnerNameInDevOrNull() {
    {
      if (current === null) {
        return null;
      }
      var owner = current._debugOwner;
      if (owner !== null && typeof owner !== 'undefined') {
        return getComponentName(owner.type);
      }
    }
    return null;
  }
  function getCurrentFiberStackInDev() {
    {
      if (current === null) {
        return '';
      }
      return getStackByFiberInDevAndProd(current);
    }
  }
  function resetCurrentFiber() {
    {
      ReactDebugCurrentFrame$1.getCurrentStack = null;
      current = null;
      isRendering = false;
    }
  }
  function setCurrentFiber(fiber) {
    {
      ReactDebugCurrentFrame$1.getCurrentStack = getCurrentFiberStackInDev;
      current = fiber;
      isRendering = false;
    }
  }
  function setIsRendering(rendering) {
    {
      isRendering = rendering;
    }
  }
  function toString(value) {
    return '' + value;
  }
  function getToStringValue(value) {
    switch (typeof value) {
      case 'boolean':
      case 'number':
      case 'object':
      case 'string':
      case 'undefined':
        return value;
      default:
        return '';
    }
  }
  var ReactDebugCurrentFrame$2 = null;
  var ReactControlledValuePropTypes = {
    checkPropTypes: null
  };
  {
    ReactDebugCurrentFrame$2 = ReactSharedInternals.ReactDebugCurrentFrame;
    var hasReadOnlyValue = {
      button: true,
      checkbox: true,
      image: true,
      hidden: true,
      radio: true,
      reset: true,
      submit: true
    };
    var propTypes = {
      value: function (props, propName, componentName) {
        if (hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled || props[propName] == null || enableDeprecatedFlareAPI) {
          return null;
        }
        return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
      },
      checked: function (props, propName, componentName) {
        if (props.onChange || props.readOnly || props.disabled || props[propName] == null || enableDeprecatedFlareAPI) {
          return null;
        }
        return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
      }
    };
    ReactControlledValuePropTypes.checkPropTypes = function (tagName, props) {
      checkPropTypes(propTypes, props, 'prop', tagName, ReactDebugCurrentFrame$2.getStackAddendum);
    };
  }
  function isCheckable(elem) {
    var type = elem.type;
    var nodeName = elem.nodeName;
    return nodeName && nodeName.toLowerCase() === 'input' && (type === 'checkbox' || type === 'radio');
  }
  function getTracker(node) {
    return node._valueTracker;
  }
  function detachTracker(node) {
    node._valueTracker = null;
  }
  function getValueFromNode(node) {
    var value = '';
    if (!node) {
      return value;
    }
    if (isCheckable(node)) {
      value = node.checked ? 'true' : 'false';
    } else {
      value = node.value;
    }
    return value;
  }
  function trackValueOnNode(node) {
    var valueField = isCheckable(node) ? 'checked' : 'value';
    var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
    var currentValue = '' + node[valueField];
    if (node.hasOwnProperty(valueField) || typeof descriptor === 'undefined' || typeof descriptor.get !== 'function' || typeof descriptor.set !== 'function') {
      return;
    }
    var get = descriptor.get, set = descriptor.set;
    Object.defineProperty(node, valueField, {
      configurable: true,
      get: function () {
        return get.call(this);
      },
      set: function (value) {
        currentValue = '' + value;
        set.call(this, value);
      }
    });
    Object.defineProperty(node, valueField, {
      enumerable: descriptor.enumerable
    });
    var tracker = {
      getValue: function () {
        return currentValue;
      },
      setValue: function (value) {
        currentValue = '' + value;
      },
      stopTracking: function () {
        detachTracker(node);
        delete node[valueField];
      }
    };
    return tracker;
  }
  function track(node) {
    if (getTracker(node)) {
      return;
    }
    node._valueTracker = trackValueOnNode(node);
  }
  function updateValueIfChanged(node) {
    if (!node) {
      return false;
    }
    var tracker = getTracker(node);
    if (!tracker) {
      return true;
    }
    var lastValue = tracker.getValue();
    var nextValue = getValueFromNode(node);
    if (nextValue !== lastValue) {
      tracker.setValue(nextValue);
      return true;
    }
    return false;
  }
  var didWarnValueDefaultValue = false;
  var didWarnCheckedDefaultChecked = false;
  var didWarnControlledToUncontrolled = false;
  var didWarnUncontrolledToControlled = false;
  function isControlled(props) {
    var usesChecked = props.type === 'checkbox' || props.type === 'radio';
    return usesChecked ? props.checked != null : props.value != null;
  }
  function getHostProps(element, props) {
    var node = element;
    var checked = props.checked;
    var hostProps = _assign({}, props, {
      defaultChecked: undefined,
      defaultValue: undefined,
      value: undefined,
      checked: checked != null ? checked : node._wrapperState.initialChecked
    });
    return hostProps;
  }
  function initWrapperState(element, props) {
    {
      ReactControlledValuePropTypes.checkPropTypes('input', props);
      if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {
        error('%s contains an input of type %s with both checked and defaultChecked props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the checked prop, or the defaultChecked prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);
        didWarnCheckedDefaultChecked = true;
      }
      if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
        error('%s contains an input of type %s with both value and defaultValue props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);
        didWarnValueDefaultValue = true;
      }
    }
    var node = element;
    var defaultValue = props.defaultValue == null ? '' : props.defaultValue;
    node._wrapperState = {
      initialChecked: props.checked != null ? props.checked : props.defaultChecked,
      initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
      controlled: isControlled(props)
    };
  }
  function updateChecked(element, props) {
    var node = element;
    var checked = props.checked;
    if (checked != null) {
      setValueForProperty(node, 'checked', checked, false);
    }
  }
  function updateWrapper(element, props) {
    var node = element;
    {
      var controlled = isControlled(props);
      if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
        error('A component is changing an uncontrolled input of type %s to be controlled. ' + 'Input elements should not switch from uncontrolled to controlled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', props.type);
        didWarnUncontrolledToControlled = true;
      }
      if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
        error('A component is changing a controlled input of type %s to be uncontrolled. ' + 'Input elements should not switch from controlled to uncontrolled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', props.type);
        didWarnControlledToUncontrolled = true;
      }
    }
    updateChecked(element, props);
    var value = getToStringValue(props.value);
    var type = props.type;
    if (value != null) {
      if (type === 'number') {
        if (value === 0 && node.value === '' || node.value != value) {
          node.value = toString(value);
        }
      } else if (node.value !== toString(value)) {
        node.value = toString(value);
      }
    } else if (type === 'submit' || type === 'reset') {
      node.removeAttribute('value');
      return;
    }
    {
      if (props.hasOwnProperty('value')) {
        setDefaultValue(node, props.type, value);
      } else if (props.hasOwnProperty('defaultValue')) {
        setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
      }
    }
    {
      if (props.checked == null && props.defaultChecked != null) {
        node.defaultChecked = !!props.defaultChecked;
      }
    }
  }
  function postMountWrapper(element, props, isHydrating) {
    var node = element;
    if (props.hasOwnProperty('value') || props.hasOwnProperty('defaultValue')) {
      var type = props.type;
      var isButton = type === 'submit' || type === 'reset';
      if (isButton && (props.value === undefined || props.value === null)) {
        return;
      }
      var initialValue = toString(node._wrapperState.initialValue);
      if (!isHydrating) {
        {
          if (initialValue !== node.value) {
            node.value = initialValue;
          }
        }
      }
      {
        node.defaultValue = initialValue;
      }
    }
    var name = node.name;
    if (name !== '') {
      node.name = '';
    }
    {
      node.defaultChecked = !node.defaultChecked;
      node.defaultChecked = !!node._wrapperState.initialChecked;
    }
    if (name !== '') {
      node.name = name;
    }
  }
  function restoreControlledState(element, props) {
    var node = element;
    updateWrapper(node, props);
    updateNamedCousins(node, props);
  }
  function updateNamedCousins(rootNode, props) {
    var name = props.name;
    if (props.type === 'radio' && name != null) {
      var queryRoot = rootNode;
      while (queryRoot.parentNode) {
        queryRoot = queryRoot.parentNode;
      }
      var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');
      for (var i = 0; i < group.length; i++) {
        var otherNode = group[i];
        if (otherNode === rootNode || otherNode.form !== rootNode.form) {
          continue;
        }
        var otherProps = getFiberCurrentPropsFromNode$1(otherNode);
        if (!otherProps) {
          {
            throw Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
          }
        }
        updateValueIfChanged(otherNode);
        updateWrapper(otherNode, otherProps);
      }
    }
  }
  function setDefaultValue(node, type, value) {
    if (type !== 'number' || node.ownerDocument.activeElement !== node) {
      if (value == null) {
        node.defaultValue = toString(node._wrapperState.initialValue);
      } else if (node.defaultValue !== toString(value)) {
        node.defaultValue = toString(value);
      }
    }
  }
  var didWarnSelectedSetOnOption = false;
  var didWarnInvalidChild = false;
  function flattenChildren(children) {
    var content = '';
    React.Children.forEach(children, function (child) {
      if (child == null) {
        return;
      }
      content += child;
    });
    return content;
  }
  function validateProps(element, props) {
    {
      if (typeof props.children === 'object' && props.children !== null) {
        React.Children.forEach(props.children, function (child) {
          if (child == null) {
            return;
          }
          if (typeof child === 'string' || typeof child === 'number') {
            return;
          }
          if (typeof child.type !== 'string') {
            return;
          }
          if (!didWarnInvalidChild) {
            didWarnInvalidChild = true;
            error('Only strings and numbers are supported as <option> children.');
          }
        });
      }
      if (props.selected != null && !didWarnSelectedSetOnOption) {
        error('Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.');
        didWarnSelectedSetOnOption = true;
      }
    }
  }
  function postMountWrapper$1(element, props) {
    if (props.value != null) {
      element.setAttribute('value', toString(getToStringValue(props.value)));
    }
  }
  function getHostProps$1(element, props) {
    var hostProps = _assign({
      children: undefined
    }, props);
    var content = flattenChildren(props.children);
    if (content) {
      hostProps.children = content;
    }
    return hostProps;
  }
  var didWarnValueDefaultValue$1;
  {
    didWarnValueDefaultValue$1 = false;
  }
  function getDeclarationErrorAddendum() {
    var ownerName = getCurrentFiberOwnerNameInDevOrNull();
    if (ownerName) {
      return '\n\nCheck the render method of `' + ownerName + '`.';
    }
    return '';
  }
  var valuePropNames = ['value', 'defaultValue'];
  function checkSelectPropTypes(props) {
    {
      ReactControlledValuePropTypes.checkPropTypes('select', props);
      for (var i = 0; i < valuePropNames.length; i++) {
        var propName = valuePropNames[i];
        if (props[propName] == null) {
          continue;
        }
        var isArray = Array.isArray(props[propName]);
        if (props.multiple && !isArray) {
          error('The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum());
        } else if (!props.multiple && isArray) {
          error('The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum());
        }
      }
    }
  }
  function updateOptions(node, multiple, propValue, setDefaultSelected) {
    var options = node.options;
    if (multiple) {
      var selectedValues = propValue;
      var selectedValue = {};
      for (var i = 0; i < selectedValues.length; i++) {
        selectedValue['$' + selectedValues[i]] = true;
      }
      for (var _i = 0; _i < options.length; _i++) {
        var selected = selectedValue.hasOwnProperty('$' + options[_i].value);
        if (options[_i].selected !== selected) {
          options[_i].selected = selected;
        }
        if (selected && setDefaultSelected) {
          options[_i].defaultSelected = true;
        }
      }
    } else {
      var _selectedValue = toString(getToStringValue(propValue));
      var defaultSelected = null;
      for (var _i2 = 0; _i2 < options.length; _i2++) {
        if (options[_i2].value === _selectedValue) {
          options[_i2].selected = true;
          if (setDefaultSelected) {
            options[_i2].defaultSelected = true;
          }
          return;
        }
        if (defaultSelected === null && !options[_i2].disabled) {
          defaultSelected = options[_i2];
        }
      }
      if (defaultSelected !== null) {
        defaultSelected.selected = true;
      }
    }
  }
  function getHostProps$2(element, props) {
    return _assign({}, props, {
      value: undefined
    });
  }
  function initWrapperState$1(element, props) {
    var node = element;
    {
      checkSelectPropTypes(props);
    }
    node._wrapperState = {
      wasMultiple: !!props.multiple
    };
    {
      if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue$1) {
        error('Select elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled select ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components');
        didWarnValueDefaultValue$1 = true;
      }
    }
  }
  function postMountWrapper$2(element, props) {
    var node = element;
    node.multiple = !!props.multiple;
    var value = props.value;
    if (value != null) {
      updateOptions(node, !!props.multiple, value, false);
    } else if (props.defaultValue != null) {
      updateOptions(node, !!props.multiple, props.defaultValue, true);
    }
  }
  function postUpdateWrapper(element, props) {
    var node = element;
    var wasMultiple = node._wrapperState.wasMultiple;
    node._wrapperState.wasMultiple = !!props.multiple;
    var value = props.value;
    if (value != null) {
      updateOptions(node, !!props.multiple, value, false);
    } else if (wasMultiple !== !!props.multiple) {
      if (props.defaultValue != null) {
        updateOptions(node, !!props.multiple, props.defaultValue, true);
      } else {
        updateOptions(node, !!props.multiple, props.multiple ? [] : '', false);
      }
    }
  }
  function restoreControlledState$1(element, props) {
    var node = element;
    var value = props.value;
    if (value != null) {
      updateOptions(node, !!props.multiple, value, false);
    }
  }
  var didWarnValDefaultVal = false;
  function getHostProps$3(element, props) {
    var node = element;
    if (!(props.dangerouslySetInnerHTML == null)) {
      {
        throw Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
      }
    }
    var hostProps = _assign({}, props, {
      value: undefined,
      defaultValue: undefined,
      children: toString(node._wrapperState.initialValue)
    });
    return hostProps;
  }
  function initWrapperState$2(element, props) {
    var node = element;
    {
      ReactControlledValuePropTypes.checkPropTypes('textarea', props);
      if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {
        error('%s contains a textarea with both value and defaultValue props. ' + 'Textarea elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled textarea ' + 'and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component');
        didWarnValDefaultVal = true;
      }
    }
    var initialValue = props.value;
    if (initialValue == null) {
      var children = props.children, defaultValue = props.defaultValue;
      if (children != null) {
        {
          error('Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.');
        }
        {
          if (!(defaultValue == null)) {
            {
              throw Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
            }
          }
          if (Array.isArray(children)) {
            if (!(children.length <= 1)) {
              {
                throw Error("<textarea> can only have at most one child.");
              }
            }
            children = children[0];
          }
          defaultValue = children;
        }
      }
      if (defaultValue == null) {
        defaultValue = '';
      }
      initialValue = defaultValue;
    }
    node._wrapperState = {
      initialValue: getToStringValue(initialValue)
    };
  }
  function updateWrapper$1(element, props) {
    var node = element;
    var value = getToStringValue(props.value);
    var defaultValue = getToStringValue(props.defaultValue);
    if (value != null) {
      var newValue = toString(value);
      if (newValue !== node.value) {
        node.value = newValue;
      }
      if (props.defaultValue == null && node.defaultValue !== newValue) {
        node.defaultValue = newValue;
      }
    }
    if (defaultValue != null) {
      node.defaultValue = toString(defaultValue);
    }
  }
  function postMountWrapper$3(element, props) {
    var node = element;
    var textContent = node.textContent;
    if (textContent === node._wrapperState.initialValue) {
      if (textContent !== '' && textContent !== null) {
        node.value = textContent;
      }
    }
  }
  function restoreControlledState$2(element, props) {
    updateWrapper$1(element, props);
  }
  var HTML_NAMESPACE = 'http://www.w3.org/1999/xhtml';
  var MATH_NAMESPACE = 'http://www.w3.org/1998/Math/MathML';
  var SVG_NAMESPACE = 'http://www.w3.org/2000/svg';
  var Namespaces = {
    html: HTML_NAMESPACE,
    mathml: MATH_NAMESPACE,
    svg: SVG_NAMESPACE
  };
  function getIntrinsicNamespace(type) {
    switch (type) {
      case 'svg':
        return SVG_NAMESPACE;
      case 'math':
        return MATH_NAMESPACE;
      default:
        return HTML_NAMESPACE;
    }
  }
  function getChildNamespace(parentNamespace, type) {
    if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
      return getIntrinsicNamespace(type);
    }
    if (parentNamespace === SVG_NAMESPACE && type === 'foreignObject') {
      return HTML_NAMESPACE;
    }
    return parentNamespace;
  }
  var createMicrosoftUnsafeLocalFunction = function (func) {
    if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
      return function (arg0, arg1, arg2, arg3) {
        MSApp.execUnsafeLocalFunction(function () {
          return func(arg0, arg1, arg2, arg3);
        });
      };
    } else {
      return func;
    }
  };
  var reusableSVGContainer;
  var setInnerHTML = createMicrosoftUnsafeLocalFunction(function (node, html) {
    if (node.namespaceURI === Namespaces.svg) {
      if (!(('innerHTML' in node))) {
        reusableSVGContainer = reusableSVGContainer || document.createElement('div');
        reusableSVGContainer.innerHTML = '<svg>' + html.valueOf().toString() + '</svg>';
        var svgNode = reusableSVGContainer.firstChild;
        while (node.firstChild) {
          node.removeChild(node.firstChild);
        }
        while (svgNode.firstChild) {
          node.appendChild(svgNode.firstChild);
        }
        return;
      }
    }
    node.innerHTML = html;
  });
  var ELEMENT_NODE = 1;
  var TEXT_NODE = 3;
  var COMMENT_NODE = 8;
  var DOCUMENT_NODE = 9;
  var DOCUMENT_FRAGMENT_NODE = 11;
  var setTextContent = function (node, text) {
    if (text) {
      var firstChild = node.firstChild;
      if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
        firstChild.nodeValue = text;
        return;
      }
    }
    node.textContent = text;
  };
  function unsafeCastStringToDOMTopLevelType(topLevelType) {
    return topLevelType;
  }
  function unsafeCastDOMTopLevelTypeToString(topLevelType) {
    return topLevelType;
  }
  function makePrefixMap(styleProp, eventName) {
    var prefixes = {};
    prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
    prefixes['Webkit' + styleProp] = 'webkit' + eventName;
    prefixes['Moz' + styleProp] = 'moz' + eventName;
    return prefixes;
  }
  var vendorPrefixes = {
    animationend: makePrefixMap('Animation', 'AnimationEnd'),
    animationiteration: makePrefixMap('Animation', 'AnimationIteration'),
    animationstart: makePrefixMap('Animation', 'AnimationStart'),
    transitionend: makePrefixMap('Transition', 'TransitionEnd')
  };
  var prefixedEventNames = {};
  var style = {};
  if (canUseDOM) {
    style = document.createElement('div').style;
    if (!(('AnimationEvent' in window))) {
      delete vendorPrefixes.animationend.animation;
      delete vendorPrefixes.animationiteration.animation;
      delete vendorPrefixes.animationstart.animation;
    }
    if (!(('TransitionEvent' in window))) {
      delete vendorPrefixes.transitionend.transition;
    }
  }
  function getVendorPrefixedEventName(eventName) {
    if (prefixedEventNames[eventName]) {
      return prefixedEventNames[eventName];
    } else if (!vendorPrefixes[eventName]) {
      return eventName;
    }
    var prefixMap = vendorPrefixes[eventName];
    for (var styleProp in prefixMap) {
      if (prefixMap.hasOwnProperty(styleProp) && (styleProp in style)) {
        return prefixedEventNames[eventName] = prefixMap[styleProp];
      }
    }
    return eventName;
  }
  var TOP_ABORT = unsafeCastStringToDOMTopLevelType('abort');
  var TOP_ANIMATION_END = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('animationend'));
  var TOP_ANIMATION_ITERATION = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('animationiteration'));
  var TOP_ANIMATION_START = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('animationstart'));
  var TOP_BLUR = unsafeCastStringToDOMTopLevelType('blur');
  var TOP_CAN_PLAY = unsafeCastStringToDOMTopLevelType('canplay');
  var TOP_CAN_PLAY_THROUGH = unsafeCastStringToDOMTopLevelType('canplaythrough');
  var TOP_CANCEL = unsafeCastStringToDOMTopLevelType('cancel');
  var TOP_CHANGE = unsafeCastStringToDOMTopLevelType('change');
  var TOP_CLICK = unsafeCastStringToDOMTopLevelType('click');
  var TOP_CLOSE = unsafeCastStringToDOMTopLevelType('close');
  var TOP_COMPOSITION_END = unsafeCastStringToDOMTopLevelType('compositionend');
  var TOP_COMPOSITION_START = unsafeCastStringToDOMTopLevelType('compositionstart');
  var TOP_COMPOSITION_UPDATE = unsafeCastStringToDOMTopLevelType('compositionupdate');
  var TOP_CONTEXT_MENU = unsafeCastStringToDOMTopLevelType('contextmenu');
  var TOP_COPY = unsafeCastStringToDOMTopLevelType('copy');
  var TOP_CUT = unsafeCastStringToDOMTopLevelType('cut');
  var TOP_DOUBLE_CLICK = unsafeCastStringToDOMTopLevelType('dblclick');
  var TOP_AUX_CLICK = unsafeCastStringToDOMTopLevelType('auxclick');
  var TOP_DRAG = unsafeCastStringToDOMTopLevelType('drag');
  var TOP_DRAG_END = unsafeCastStringToDOMTopLevelType('dragend');
  var TOP_DRAG_ENTER = unsafeCastStringToDOMTopLevelType('dragenter');
  var TOP_DRAG_EXIT = unsafeCastStringToDOMTopLevelType('dragexit');
  var TOP_DRAG_LEAVE = unsafeCastStringToDOMTopLevelType('dragleave');
  var TOP_DRAG_OVER = unsafeCastStringToDOMTopLevelType('dragover');
  var TOP_DRAG_START = unsafeCastStringToDOMTopLevelType('dragstart');
  var TOP_DROP = unsafeCastStringToDOMTopLevelType('drop');
  var TOP_DURATION_CHANGE = unsafeCastStringToDOMTopLevelType('durationchange');
  var TOP_EMPTIED = unsafeCastStringToDOMTopLevelType('emptied');
  var TOP_ENCRYPTED = unsafeCastStringToDOMTopLevelType('encrypted');
  var TOP_ENDED = unsafeCastStringToDOMTopLevelType('ended');
  var TOP_ERROR = unsafeCastStringToDOMTopLevelType('error');
  var TOP_FOCUS = unsafeCastStringToDOMTopLevelType('focus');
  var TOP_GOT_POINTER_CAPTURE = unsafeCastStringToDOMTopLevelType('gotpointercapture');
  var TOP_INPUT = unsafeCastStringToDOMTopLevelType('input');
  var TOP_INVALID = unsafeCastStringToDOMTopLevelType('invalid');
  var TOP_KEY_DOWN = unsafeCastStringToDOMTopLevelType('keydown');
  var TOP_KEY_PRESS = unsafeCastStringToDOMTopLevelType('keypress');
  var TOP_KEY_UP = unsafeCastStringToDOMTopLevelType('keyup');
  var TOP_LOAD = unsafeCastStringToDOMTopLevelType('load');
  var TOP_LOAD_START = unsafeCastStringToDOMTopLevelType('loadstart');
  var TOP_LOADED_DATA = unsafeCastStringToDOMTopLevelType('loadeddata');
  var TOP_LOADED_METADATA = unsafeCastStringToDOMTopLevelType('loadedmetadata');
  var TOP_LOST_POINTER_CAPTURE = unsafeCastStringToDOMTopLevelType('lostpointercapture');
  var TOP_MOUSE_DOWN = unsafeCastStringToDOMTopLevelType('mousedown');
  var TOP_MOUSE_MOVE = unsafeCastStringToDOMTopLevelType('mousemove');
  var TOP_MOUSE_OUT = unsafeCastStringToDOMTopLevelType('mouseout');
  var TOP_MOUSE_OVER = unsafeCastStringToDOMTopLevelType('mouseover');
  var TOP_MOUSE_UP = unsafeCastStringToDOMTopLevelType('mouseup');
  var TOP_PASTE = unsafeCastStringToDOMTopLevelType('paste');
  var TOP_PAUSE = unsafeCastStringToDOMTopLevelType('pause');
  var TOP_PLAY = unsafeCastStringToDOMTopLevelType('play');
  var TOP_PLAYING = unsafeCastStringToDOMTopLevelType('playing');
  var TOP_POINTER_CANCEL = unsafeCastStringToDOMTopLevelType('pointercancel');
  var TOP_POINTER_DOWN = unsafeCastStringToDOMTopLevelType('pointerdown');
  var TOP_POINTER_MOVE = unsafeCastStringToDOMTopLevelType('pointermove');
  var TOP_POINTER_OUT = unsafeCastStringToDOMTopLevelType('pointerout');
  var TOP_POINTER_OVER = unsafeCastStringToDOMTopLevelType('pointerover');
  var TOP_POINTER_UP = unsafeCastStringToDOMTopLevelType('pointerup');
  var TOP_PROGRESS = unsafeCastStringToDOMTopLevelType('progress');
  var TOP_RATE_CHANGE = unsafeCastStringToDOMTopLevelType('ratechange');
  var TOP_RESET = unsafeCastStringToDOMTopLevelType('reset');
  var TOP_SCROLL = unsafeCastStringToDOMTopLevelType('scroll');
  var TOP_SEEKED = unsafeCastStringToDOMTopLevelType('seeked');
  var TOP_SEEKING = unsafeCastStringToDOMTopLevelType('seeking');
  var TOP_SELECTION_CHANGE = unsafeCastStringToDOMTopLevelType('selectionchange');
  var TOP_STALLED = unsafeCastStringToDOMTopLevelType('stalled');
  var TOP_SUBMIT = unsafeCastStringToDOMTopLevelType('submit');
  var TOP_SUSPEND = unsafeCastStringToDOMTopLevelType('suspend');
  var TOP_TEXT_INPUT = unsafeCastStringToDOMTopLevelType('textInput');
  var TOP_TIME_UPDATE = unsafeCastStringToDOMTopLevelType('timeupdate');
  var TOP_TOGGLE = unsafeCastStringToDOMTopLevelType('toggle');
  var TOP_TOUCH_CANCEL = unsafeCastStringToDOMTopLevelType('touchcancel');
  var TOP_TOUCH_END = unsafeCastStringToDOMTopLevelType('touchend');
  var TOP_TOUCH_MOVE = unsafeCastStringToDOMTopLevelType('touchmove');
  var TOP_TOUCH_START = unsafeCastStringToDOMTopLevelType('touchstart');
  var TOP_TRANSITION_END = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('transitionend'));
  var TOP_VOLUME_CHANGE = unsafeCastStringToDOMTopLevelType('volumechange');
  var TOP_WAITING = unsafeCastStringToDOMTopLevelType('waiting');
  var TOP_WHEEL = unsafeCastStringToDOMTopLevelType('wheel');
  var mediaEventTypes = [TOP_ABORT, TOP_CAN_PLAY, TOP_CAN_PLAY_THROUGH, TOP_DURATION_CHANGE, TOP_EMPTIED, TOP_ENCRYPTED, TOP_ENDED, TOP_ERROR, TOP_LOADED_DATA, TOP_LOADED_METADATA, TOP_LOAD_START, TOP_PAUSE, TOP_PLAY, TOP_PLAYING, TOP_PROGRESS, TOP_RATE_CHANGE, TOP_SEEKED, TOP_SEEKING, TOP_STALLED, TOP_SUSPEND, TOP_TIME_UPDATE, TOP_VOLUME_CHANGE, TOP_WAITING];
  function getRawEventName(topLevelType) {
    return unsafeCastDOMTopLevelTypeToString(topLevelType);
  }
  var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
  var elementListenerMap = new PossiblyWeakMap();
  function getListenerMapForElement(element) {
    var listenerMap = elementListenerMap.get(element);
    if (listenerMap === undefined) {
      listenerMap = new Map();
      elementListenerMap.set(element, listenerMap);
    }
    return listenerMap;
  }
  function get(key) {
    return key._reactInternalFiber;
  }
  function has(key) {
    return key._reactInternalFiber !== undefined;
  }
  function set(key, value) {
    key._reactInternalFiber = value;
  }
  var NoEffect = 0;
  var PerformedWork = 1;
  var Placement = 2;
  var Update = 4;
  var PlacementAndUpdate = 6;
  var Deletion = 8;
  var ContentReset = 16;
  var Callback = 32;
  var DidCapture = 64;
  var Ref = 128;
  var Snapshot = 256;
  var Passive = 512;
  var Hydrating = 1024;
  var HydratingAndUpdate = 1028;
  var LifecycleEffectMask = 932;
  var HostEffectMask = 2047;
  var Incomplete = 2048;
  var ShouldCapture = 4096;
  var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
  function getNearestMountedFiber(fiber) {
    var node = fiber;
    var nearestMounted = fiber;
    if (!fiber.alternate) {
      var nextNode = node;
      do {
        node = nextNode;
        if ((node.effectTag & (Placement | Hydrating)) !== NoEffect) {
          nearestMounted = node.return;
        }
        nextNode = node.return;
      } while (nextNode);
    } else {
      while (node.return) {
        node = node.return;
      }
    }
    if (node.tag === HostRoot) {
      return nearestMounted;
    }
    return null;
  }
  function getSuspenseInstanceFromFiber(fiber) {
    if (fiber.tag === SuspenseComponent) {
      var suspenseState = fiber.memoizedState;
      if (suspenseState === null) {
        var current = fiber.alternate;
        if (current !== null) {
          suspenseState = current.memoizedState;
        }
      }
      if (suspenseState !== null) {
        return suspenseState.dehydrated;
      }
    }
    return null;
  }
  function getContainerFromFiber(fiber) {
    return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
  }
  function isFiberMounted(fiber) {
    return getNearestMountedFiber(fiber) === fiber;
  }
  function isMounted(component) {
    {
      var owner = ReactCurrentOwner.current;
      if (owner !== null && owner.tag === ClassComponent) {
        var ownerFiber = owner;
        var instance = ownerFiber.stateNode;
        if (!instance._warnedAboutRefsInRender) {
          error('%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentName(ownerFiber.type) || 'A component');
        }
        instance._warnedAboutRefsInRender = true;
      }
    }
    var fiber = get(component);
    if (!fiber) {
      return false;
    }
    return getNearestMountedFiber(fiber) === fiber;
  }
  function assertIsMounted(fiber) {
    if (!(getNearestMountedFiber(fiber) === fiber)) {
      {
        throw Error("Unable to find node on an unmounted component.");
      }
    }
  }
  function findCurrentFiberUsingSlowPath(fiber) {
    var alternate = fiber.alternate;
    if (!alternate) {
      var nearestMounted = getNearestMountedFiber(fiber);
      if (!(nearestMounted !== null)) {
        {
          throw Error("Unable to find node on an unmounted component.");
        }
      }
      if (nearestMounted !== fiber) {
        return null;
      }
      return fiber;
    }
    var a = fiber;
    var b = alternate;
    while (true) {
      var parentA = a.return;
      if (parentA === null) {
        break;
      }
      var parentB = parentA.alternate;
      if (parentB === null) {
        var nextParent = parentA.return;
        if (nextParent !== null) {
          a = b = nextParent;
          continue;
        }
        break;
      }
      if (parentA.child === parentB.child) {
        var child = parentA.child;
        while (child) {
          if (child === a) {
            assertIsMounted(parentA);
            return fiber;
          }
          if (child === b) {
            assertIsMounted(parentA);
            return alternate;
          }
          child = child.sibling;
        }
        {
          {
            throw Error("Unable to find node on an unmounted component.");
          }
        }
      }
      if (a.return !== b.return) {
        a = parentA;
        b = parentB;
      } else {
        var didFindChild = false;
        var _child = parentA.child;
        while (_child) {
          if (_child === a) {
            didFindChild = true;
            a = parentA;
            b = parentB;
            break;
          }
          if (_child === b) {
            didFindChild = true;
            b = parentA;
            a = parentB;
            break;
          }
          _child = _child.sibling;
        }
        if (!didFindChild) {
          _child = parentB.child;
          while (_child) {
            if (_child === a) {
              didFindChild = true;
              a = parentB;
              b = parentA;
              break;
            }
            if (_child === b) {
              didFindChild = true;
              b = parentB;
              a = parentA;
              break;
            }
            _child = _child.sibling;
          }
          if (!didFindChild) {
            {
              throw Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
            }
          }
        }
      }
      if (!(a.alternate === b)) {
        {
          throw Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
        }
      }
    }
    if (!(a.tag === HostRoot)) {
      {
        throw Error("Unable to find node on an unmounted component.");
      }
    }
    if (a.stateNode.current === a) {
      return fiber;
    }
    return alternate;
  }
  function findCurrentHostFiber(parent) {
    var currentParent = findCurrentFiberUsingSlowPath(parent);
    if (!currentParent) {
      return null;
    }
    var node = currentParent;
    while (true) {
      if (node.tag === HostComponent || node.tag === HostText) {
        return node;
      } else if (node.child) {
        node.child.return = node;
        node = node.child;
        continue;
      }
      if (node === currentParent) {
        return null;
      }
      while (!node.sibling) {
        if (!node.return || node.return === currentParent) {
          return null;
        }
        node = node.return;
      }
      node.sibling.return = node.return;
      node = node.sibling;
    }
    return null;
  }
  function findCurrentHostFiberWithNoPortals(parent) {
    var currentParent = findCurrentFiberUsingSlowPath(parent);
    if (!currentParent) {
      return null;
    }
    var node = currentParent;
    while (true) {
      if (node.tag === HostComponent || node.tag === HostText || enableFundamentalAPI) {
        return node;
      } else if (node.child && node.tag !== HostPortal) {
        node.child.return = node;
        node = node.child;
        continue;
      }
      if (node === currentParent) {
        return null;
      }
      while (!node.sibling) {
        if (!node.return || node.return === currentParent) {
          return null;
        }
        node = node.return;
      }
      node.sibling.return = node.return;
      node = node.sibling;
    }
    return null;
  }
  function accumulateInto(current, next) {
    if (!(next != null)) {
      {
        throw Error("accumulateInto(...): Accumulated items must not be null or undefined.");
      }
    }
    if (current == null) {
      return next;
    }
    if (Array.isArray(current)) {
      if (Array.isArray(next)) {
        current.push.apply(current, next);
        return current;
      }
      current.push(next);
      return current;
    }
    if (Array.isArray(next)) {
      return [current].concat(next);
    }
    return [current, next];
  }
  function forEachAccumulated(arr, cb, scope) {
    if (Array.isArray(arr)) {
      arr.forEach(cb, scope);
    } else if (arr) {
      cb.call(scope, arr);
    }
  }
  var eventQueue = null;
  var executeDispatchesAndRelease = function (event) {
    if (event) {
      executeDispatchesInOrder(event);
      if (!event.isPersistent()) {
        event.constructor.release(event);
      }
    }
  };
  var executeDispatchesAndReleaseTopLevel = function (e) {
    return executeDispatchesAndRelease(e);
  };
  function runEventsInBatch(events) {
    if (events !== null) {
      eventQueue = accumulateInto(eventQueue, events);
    }
    var processingEventQueue = eventQueue;
    eventQueue = null;
    if (!processingEventQueue) {
      return;
    }
    forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);
    if (!!eventQueue) {
      {
        throw Error("processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented.");
      }
    }
    rethrowCaughtError();
  }
  function getEventTarget(nativeEvent) {
    var target = nativeEvent.target || nativeEvent.srcElement || window;
    if (target.correspondingUseElement) {
      target = target.correspondingUseElement;
    }
    return target.nodeType === TEXT_NODE ? target.parentNode : target;
  }
  function isEventSupported(eventNameSuffix) {
    if (!canUseDOM) {
      return false;
    }
    var eventName = 'on' + eventNameSuffix;
    var isSupported = (eventName in document);
    if (!isSupported) {
      var element = document.createElement('div');
      element.setAttribute(eventName, 'return;');
      isSupported = typeof element[eventName] === 'function';
    }
    return isSupported;
  }
  var CALLBACK_BOOKKEEPING_POOL_SIZE = 10;
  var callbackBookkeepingPool = [];
  function releaseTopLevelCallbackBookKeeping(instance) {
    instance.topLevelType = null;
    instance.nativeEvent = null;
    instance.targetInst = null;
    instance.ancestors.length = 0;
    if (callbackBookkeepingPool.length < CALLBACK_BOOKKEEPING_POOL_SIZE) {
      callbackBookkeepingPool.push(instance);
    }
  }
  function getTopLevelCallbackBookKeeping(topLevelType, nativeEvent, targetInst, eventSystemFlags) {
    if (callbackBookkeepingPool.length) {
      var instance = callbackBookkeepingPool.pop();
      instance.topLevelType = topLevelType;
      instance.eventSystemFlags = eventSystemFlags;
      instance.nativeEvent = nativeEvent;
      instance.targetInst = targetInst;
      return instance;
    }
    return {
      topLevelType: topLevelType,
      eventSystemFlags: eventSystemFlags,
      nativeEvent: nativeEvent,
      targetInst: targetInst,
      ancestors: []
    };
  }
  function findRootContainerNode(inst) {
    if (inst.tag === HostRoot) {
      return inst.stateNode.containerInfo;
    }
    while (inst.return) {
      inst = inst.return;
    }
    if (inst.tag !== HostRoot) {
      return null;
    }
    return inst.stateNode.containerInfo;
  }
  function extractPluginEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
    var events = null;
    for (var i = 0; i < plugins.length; i++) {
      var possiblePlugin = plugins[i];
      if (possiblePlugin) {
        var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
        if (extractedEvents) {
          events = accumulateInto(events, extractedEvents);
        }
      }
    }
    return events;
  }
  function runExtractedPluginEventsInBatch(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
    var events = extractPluginEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
    runEventsInBatch(events);
  }
  function handleTopLevel(bookKeeping) {
    var targetInst = bookKeeping.targetInst;
    var ancestor = targetInst;
    do {
      if (!ancestor) {
        var ancestors = bookKeeping.ancestors;
        ancestors.push(ancestor);
        break;
      }
      var root = findRootContainerNode(ancestor);
      if (!root) {
        break;
      }
      var tag = ancestor.tag;
      if (tag === HostComponent || tag === HostText) {
        bookKeeping.ancestors.push(ancestor);
      }
      ancestor = getClosestInstanceFromNode(root);
    } while (ancestor);
    for (var i = 0; i < bookKeeping.ancestors.length; i++) {
      targetInst = bookKeeping.ancestors[i];
      var eventTarget = getEventTarget(bookKeeping.nativeEvent);
      var topLevelType = bookKeeping.topLevelType;
      var nativeEvent = bookKeeping.nativeEvent;
      var eventSystemFlags = bookKeeping.eventSystemFlags;
      if (i === 0) {
        eventSystemFlags |= IS_FIRST_ANCESTOR;
      }
      runExtractedPluginEventsInBatch(topLevelType, targetInst, nativeEvent, eventTarget, eventSystemFlags);
    }
  }
  function dispatchEventForLegacyPluginEventSystem(topLevelType, eventSystemFlags, nativeEvent, targetInst) {
    var bookKeeping = getTopLevelCallbackBookKeeping(topLevelType, nativeEvent, targetInst, eventSystemFlags);
    try {
      batchedEventUpdates(handleTopLevel, bookKeeping);
    } finally {
      releaseTopLevelCallbackBookKeeping(bookKeeping);
    }
  }
  function legacyListenToEvent(registrationName, mountAt) {
    var listenerMap = getListenerMapForElement(mountAt);
    var dependencies = registrationNameDependencies[registrationName];
    for (var i = 0; i < dependencies.length; i++) {
      var dependency = dependencies[i];
      legacyListenToTopLevelEvent(dependency, mountAt, listenerMap);
    }
  }
  function legacyListenToTopLevelEvent(topLevelType, mountAt, listenerMap) {
    if (!listenerMap.has(topLevelType)) {
      switch (topLevelType) {
        case TOP_SCROLL:
          trapCapturedEvent(TOP_SCROLL, mountAt);
          break;
        case TOP_FOCUS:
        case TOP_BLUR:
          trapCapturedEvent(TOP_FOCUS, mountAt);
          trapCapturedEvent(TOP_BLUR, mountAt);
          listenerMap.set(TOP_BLUR, null);
          listenerMap.set(TOP_FOCUS, null);
          break;
        case TOP_CANCEL:
        case TOP_CLOSE:
          if (isEventSupported(getRawEventName(topLevelType))) {
            trapCapturedEvent(topLevelType, mountAt);
          }
          break;
        case TOP_INVALID:
        case TOP_SUBMIT:
        case TOP_RESET:
          break;
        default:
          var isMediaEvent = mediaEventTypes.indexOf(topLevelType) !== -1;
          if (!isMediaEvent) {
            trapBubbledEvent(topLevelType, mountAt);
          }
          break;
      }
      listenerMap.set(topLevelType, null);
    }
  }
  function isListeningToAllDependencies(registrationName, mountAt) {
    var listenerMap = getListenerMapForElement(mountAt);
    var dependencies = registrationNameDependencies[registrationName];
    for (var i = 0; i < dependencies.length; i++) {
      var dependency = dependencies[i];
      if (!listenerMap.has(dependency)) {
        return false;
      }
    }
    return true;
  }
  var attemptUserBlockingHydration;
  function setAttemptUserBlockingHydration(fn) {
    attemptUserBlockingHydration = fn;
  }
  var attemptContinuousHydration;
  function setAttemptContinuousHydration(fn) {
    attemptContinuousHydration = fn;
  }
  var attemptHydrationAtCurrentPriority;
  function setAttemptHydrationAtCurrentPriority(fn) {
    attemptHydrationAtCurrentPriority = fn;
  }
  var hasScheduledReplayAttempt = false;
  var queuedDiscreteEvents = [];
  var queuedFocus = null;
  var queuedDrag = null;
  var queuedMouse = null;
  var queuedPointers = new Map();
  var queuedPointerCaptures = new Map();
  var queuedExplicitHydrationTargets = [];
  function hasQueuedDiscreteEvents() {
    return queuedDiscreteEvents.length > 0;
  }
  var discreteReplayableEvents = [TOP_MOUSE_DOWN, TOP_MOUSE_UP, TOP_TOUCH_CANCEL, TOP_TOUCH_END, TOP_TOUCH_START, TOP_AUX_CLICK, TOP_DOUBLE_CLICK, TOP_POINTER_CANCEL, TOP_POINTER_DOWN, TOP_POINTER_UP, TOP_DRAG_END, TOP_DRAG_START, TOP_DROP, TOP_COMPOSITION_END, TOP_COMPOSITION_START, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_INPUT, TOP_TEXT_INPUT, TOP_CLOSE, TOP_CANCEL, TOP_COPY, TOP_CUT, TOP_PASTE, TOP_CLICK, TOP_CHANGE, TOP_CONTEXT_MENU, TOP_RESET, TOP_SUBMIT];
  var continuousReplayableEvents = [TOP_FOCUS, TOP_BLUR, TOP_DRAG_ENTER, TOP_DRAG_LEAVE, TOP_MOUSE_OVER, TOP_MOUSE_OUT, TOP_POINTER_OVER, TOP_POINTER_OUT, TOP_GOT_POINTER_CAPTURE, TOP_LOST_POINTER_CAPTURE];
  function isReplayableDiscreteEvent(eventType) {
    return discreteReplayableEvents.indexOf(eventType) > -1;
  }
  function trapReplayableEventForDocument(topLevelType, document, listenerMap) {
    legacyListenToTopLevelEvent(topLevelType, document, listenerMap);
  }
  function eagerlyTrapReplayableEvents(container, document) {
    var listenerMapForDoc = getListenerMapForElement(document);
    discreteReplayableEvents.forEach(function (topLevelType) {
      trapReplayableEventForDocument(topLevelType, document, listenerMapForDoc);
    });
    continuousReplayableEvents.forEach(function (topLevelType) {
      trapReplayableEventForDocument(topLevelType, document, listenerMapForDoc);
    });
  }
  function createQueuedReplayableEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent) {
    return {
      blockedOn: blockedOn,
      topLevelType: topLevelType,
      eventSystemFlags: eventSystemFlags | IS_REPLAYED,
      nativeEvent: nativeEvent,
      container: container
    };
  }
  function queueDiscreteEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent) {
    var queuedEvent = createQueuedReplayableEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent);
    queuedDiscreteEvents.push(queuedEvent);
  }
  function clearIfContinuousEvent(topLevelType, nativeEvent) {
    switch (topLevelType) {
      case TOP_FOCUS:
      case TOP_BLUR:
        queuedFocus = null;
        break;
      case TOP_DRAG_ENTER:
      case TOP_DRAG_LEAVE:
        queuedDrag = null;
        break;
      case TOP_MOUSE_OVER:
      case TOP_MOUSE_OUT:
        queuedMouse = null;
        break;
      case TOP_POINTER_OVER:
      case TOP_POINTER_OUT:
        {
          var pointerId = nativeEvent.pointerId;
          queuedPointers.delete(pointerId);
          break;
        }
      case TOP_GOT_POINTER_CAPTURE:
      case TOP_LOST_POINTER_CAPTURE:
        {
          var _pointerId = nativeEvent.pointerId;
          queuedPointerCaptures.delete(_pointerId);
          break;
        }
    }
  }
  function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, topLevelType, eventSystemFlags, container, nativeEvent) {
    if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
      var queuedEvent = createQueuedReplayableEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent);
      if (blockedOn !== null) {
        var _fiber2 = getInstanceFromNode$1(blockedOn);
        if (_fiber2 !== null) {
          attemptContinuousHydration(_fiber2);
        }
      }
      return queuedEvent;
    }
    existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
    return existingQueuedEvent;
  }
  function queueIfContinuousEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent) {
    switch (topLevelType) {
      case TOP_FOCUS:
        {
          var focusEvent = nativeEvent;
          queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, topLevelType, eventSystemFlags, container, focusEvent);
          return true;
        }
      case TOP_DRAG_ENTER:
        {
          var dragEvent = nativeEvent;
          queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, topLevelType, eventSystemFlags, container, dragEvent);
          return true;
        }
      case TOP_MOUSE_OVER:
        {
          var mouseEvent = nativeEvent;
          queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, topLevelType, eventSystemFlags, container, mouseEvent);
          return true;
        }
      case TOP_POINTER_OVER:
        {
          var pointerEvent = nativeEvent;
          var pointerId = pointerEvent.pointerId;
          queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, topLevelType, eventSystemFlags, container, pointerEvent));
          return true;
        }
      case TOP_GOT_POINTER_CAPTURE:
        {
          var _pointerEvent = nativeEvent;
          var _pointerId2 = _pointerEvent.pointerId;
          queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, topLevelType, eventSystemFlags, container, _pointerEvent));
          return true;
        }
    }
    return false;
  }
  function attemptExplicitHydrationTarget(queuedTarget) {
    var targetInst = getClosestInstanceFromNode(queuedTarget.target);
    if (targetInst !== null) {
      var nearestMounted = getNearestMountedFiber(targetInst);
      if (nearestMounted !== null) {
        var tag = nearestMounted.tag;
        if (tag === SuspenseComponent) {
          var instance = getSuspenseInstanceFromFiber(nearestMounted);
          if (instance !== null) {
            queuedTarget.blockedOn = instance;
            Scheduler.unstable_runWithPriority(queuedTarget.priority, function () {
              attemptHydrationAtCurrentPriority(nearestMounted);
            });
            return;
          }
        } else if (tag === HostRoot) {
          var root = nearestMounted.stateNode;
          if (root.hydrate) {
            queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);
            return;
          }
        }
      }
    }
    queuedTarget.blockedOn = null;
  }
  function attemptReplayContinuousQueuedEvent(queuedEvent) {
    if (queuedEvent.blockedOn !== null) {
      return false;
    }
    var nextBlockedOn = attemptToDispatchEvent(queuedEvent.topLevelType, queuedEvent.eventSystemFlags, queuedEvent.container, queuedEvent.nativeEvent);
    if (nextBlockedOn !== null) {
      var _fiber3 = getInstanceFromNode$1(nextBlockedOn);
      if (_fiber3 !== null) {
        attemptContinuousHydration(_fiber3);
      }
      queuedEvent.blockedOn = nextBlockedOn;
      return false;
    }
    return true;
  }
  function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
    if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
      map.delete(key);
    }
  }
  function replayUnblockedEvents() {
    hasScheduledReplayAttempt = false;
    while (queuedDiscreteEvents.length > 0) {
      var nextDiscreteEvent = queuedDiscreteEvents[0];
      if (nextDiscreteEvent.blockedOn !== null) {
        var _fiber4 = getInstanceFromNode$1(nextDiscreteEvent.blockedOn);
        if (_fiber4 !== null) {
          attemptUserBlockingHydration(_fiber4);
        }
        break;
      }
      var nextBlockedOn = attemptToDispatchEvent(nextDiscreteEvent.topLevelType, nextDiscreteEvent.eventSystemFlags, nextDiscreteEvent.container, nextDiscreteEvent.nativeEvent);
      if (nextBlockedOn !== null) {
        nextDiscreteEvent.blockedOn = nextBlockedOn;
      } else {
        queuedDiscreteEvents.shift();
      }
    }
    if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
      queuedFocus = null;
    }
    if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
      queuedDrag = null;
    }
    if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
      queuedMouse = null;
    }
    queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
    queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
  }
  function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
    if (queuedEvent.blockedOn === unblocked) {
      queuedEvent.blockedOn = null;
      if (!hasScheduledReplayAttempt) {
        hasScheduledReplayAttempt = true;
        Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
      }
    }
  }
  function retryIfBlockedOn(unblocked) {
    if (queuedDiscreteEvents.length > 0) {
      scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
      for (var i = 1; i < queuedDiscreteEvents.length; i++) {
        var queuedEvent = queuedDiscreteEvents[i];
        if (queuedEvent.blockedOn === unblocked) {
          queuedEvent.blockedOn = null;
        }
      }
    }
    if (queuedFocus !== null) {
      scheduleCallbackIfUnblocked(queuedFocus, unblocked);
    }
    if (queuedDrag !== null) {
      scheduleCallbackIfUnblocked(queuedDrag, unblocked);
    }
    if (queuedMouse !== null) {
      scheduleCallbackIfUnblocked(queuedMouse, unblocked);
    }
    var unblock = function (queuedEvent) {
      return scheduleCallbackIfUnblocked(queuedEvent, unblocked);
    };
    queuedPointers.forEach(unblock);
    queuedPointerCaptures.forEach(unblock);
    for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
      var queuedTarget = queuedExplicitHydrationTargets[_i];
      if (queuedTarget.blockedOn === unblocked) {
        queuedTarget.blockedOn = null;
      }
    }
    while (queuedExplicitHydrationTargets.length > 0) {
      var nextExplicitTarget = queuedExplicitHydrationTargets[0];
      if (nextExplicitTarget.blockedOn !== null) {
        break;
      } else {
        attemptExplicitHydrationTarget(nextExplicitTarget);
        if (nextExplicitTarget.blockedOn === null) {
          queuedExplicitHydrationTargets.shift();
        }
      }
    }
  }
  function addEventBubbleListener(element, eventType, listener) {
    element.addEventListener(eventType, listener, false);
  }
  function addEventCaptureListener(element, eventType, listener) {
    element.addEventListener(eventType, listener, true);
  }
  var simpleEventPluginEventTypes = {};
  var topLevelEventsToDispatchConfig = new Map();
  var eventPriorities = new Map();
  var discreteEventPairsForSimpleEventPlugin = [TOP_BLUR, 'blur', TOP_CANCEL, 'cancel', TOP_CLICK, 'click', TOP_CLOSE, 'close', TOP_CONTEXT_MENU, 'contextMenu', TOP_COPY, 'copy', TOP_CUT, 'cut', TOP_AUX_CLICK, 'auxClick', TOP_DOUBLE_CLICK, 'doubleClick', TOP_DRAG_END, 'dragEnd', TOP_DRAG_START, 'dragStart', TOP_DROP, 'drop', TOP_FOCUS, 'focus', TOP_INPUT, 'input', TOP_INVALID, 'invalid', TOP_KEY_DOWN, 'keyDown', TOP_KEY_PRESS, 'keyPress', TOP_KEY_UP, 'keyUp', TOP_MOUSE_DOWN, 'mouseDown', TOP_MOUSE_UP, 'mouseUp', TOP_PASTE, 'paste', TOP_PAUSE, 'pause', TOP_PLAY, 'play', TOP_POINTER_CANCEL, 'pointerCancel', TOP_POINTER_DOWN, 'pointerDown', TOP_POINTER_UP, 'pointerUp', TOP_RATE_CHANGE, 'rateChange', TOP_RESET, 'reset', TOP_SEEKED, 'seeked', TOP_SUBMIT, 'submit', TOP_TOUCH_CANCEL, 'touchCancel', TOP_TOUCH_END, 'touchEnd', TOP_TOUCH_START, 'touchStart', TOP_VOLUME_CHANGE, 'volumeChange'];
  var otherDiscreteEvents = [TOP_CHANGE, TOP_SELECTION_CHANGE, TOP_TEXT_INPUT, TOP_COMPOSITION_START, TOP_COMPOSITION_END, TOP_COMPOSITION_UPDATE];
  var userBlockingPairsForSimpleEventPlugin = [TOP_DRAG, 'drag', TOP_DRAG_ENTER, 'dragEnter', TOP_DRAG_EXIT, 'dragExit', TOP_DRAG_LEAVE, 'dragLeave', TOP_DRAG_OVER, 'dragOver', TOP_MOUSE_MOVE, 'mouseMove', TOP_MOUSE_OUT, 'mouseOut', TOP_MOUSE_OVER, 'mouseOver', TOP_POINTER_MOVE, 'pointerMove', TOP_POINTER_OUT, 'pointerOut', TOP_POINTER_OVER, 'pointerOver', TOP_SCROLL, 'scroll', TOP_TOGGLE, 'toggle', TOP_TOUCH_MOVE, 'touchMove', TOP_WHEEL, 'wheel'];
  var continuousPairsForSimpleEventPlugin = [TOP_ABORT, 'abort', TOP_ANIMATION_END, 'animationEnd', TOP_ANIMATION_ITERATION, 'animationIteration', TOP_ANIMATION_START, 'animationStart', TOP_CAN_PLAY, 'canPlay', TOP_CAN_PLAY_THROUGH, 'canPlayThrough', TOP_DURATION_CHANGE, 'durationChange', TOP_EMPTIED, 'emptied', TOP_ENCRYPTED, 'encrypted', TOP_ENDED, 'ended', TOP_ERROR, 'error', TOP_GOT_POINTER_CAPTURE, 'gotPointerCapture', TOP_LOAD, 'load', TOP_LOADED_DATA, 'loadedData', TOP_LOADED_METADATA, 'loadedMetadata', TOP_LOAD_START, 'loadStart', TOP_LOST_POINTER_CAPTURE, 'lostPointerCapture', TOP_PLAYING, 'playing', TOP_PROGRESS, 'progress', TOP_SEEKING, 'seeking', TOP_STALLED, 'stalled', TOP_SUSPEND, 'suspend', TOP_TIME_UPDATE, 'timeUpdate', TOP_TRANSITION_END, 'transitionEnd', TOP_WAITING, 'waiting'];
  function processSimpleEventPluginPairsByPriority(eventTypes, priority) {
    for (var i = 0; i < eventTypes.length; i += 2) {
      var topEvent = eventTypes[i];
      var event = eventTypes[i + 1];
      var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
      var onEvent = 'on' + capitalizedEvent;
      var config = {
        phasedRegistrationNames: {
          bubbled: onEvent,
          captured: onEvent + 'Capture'
        },
        dependencies: [topEvent],
        eventPriority: priority
      };
      eventPriorities.set(topEvent, priority);
      topLevelEventsToDispatchConfig.set(topEvent, config);
      simpleEventPluginEventTypes[event] = config;
    }
  }
  function processTopEventPairsByPriority(eventTypes, priority) {
    for (var i = 0; i < eventTypes.length; i++) {
      eventPriorities.set(eventTypes[i], priority);
    }
  }
  processSimpleEventPluginPairsByPriority(discreteEventPairsForSimpleEventPlugin, DiscreteEvent);
  processSimpleEventPluginPairsByPriority(userBlockingPairsForSimpleEventPlugin, UserBlockingEvent);
  processSimpleEventPluginPairsByPriority(continuousPairsForSimpleEventPlugin, ContinuousEvent);
  processTopEventPairsByPriority(otherDiscreteEvents, DiscreteEvent);
  function getEventPriorityForPluginSystem(topLevelType) {
    var priority = eventPriorities.get(topLevelType);
    return priority === undefined ? ContinuousEvent : priority;
  }
  var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority, runWithPriority = Scheduler.unstable_runWithPriority;
  var _enabled = true;
  function setEnabled(enabled) {
    _enabled = !!enabled;
  }
  function isEnabled() {
    return _enabled;
  }
  function trapBubbledEvent(topLevelType, element) {
    trapEventForPluginEventSystem(element, topLevelType, false);
  }
  function trapCapturedEvent(topLevelType, element) {
    trapEventForPluginEventSystem(element, topLevelType, true);
  }
  function trapEventForPluginEventSystem(container, topLevelType, capture) {
    var listener;
    switch (getEventPriorityForPluginSystem(topLevelType)) {
      case DiscreteEvent:
        listener = dispatchDiscreteEvent.bind(null, topLevelType, PLUGIN_EVENT_SYSTEM, container);
        break;
      case UserBlockingEvent:
        listener = dispatchUserBlockingUpdate.bind(null, topLevelType, PLUGIN_EVENT_SYSTEM, container);
        break;
      case ContinuousEvent:
      default:
        listener = dispatchEvent.bind(null, topLevelType, PLUGIN_EVENT_SYSTEM, container);
        break;
    }
    var rawEventName = getRawEventName(topLevelType);
    if (capture) {
      addEventCaptureListener(container, rawEventName, listener);
    } else {
      addEventBubbleListener(container, rawEventName, listener);
    }
  }
  function dispatchDiscreteEvent(topLevelType, eventSystemFlags, container, nativeEvent) {
    flushDiscreteUpdatesIfNeeded(nativeEvent.timeStamp);
    discreteUpdates(dispatchEvent, topLevelType, eventSystemFlags, container, nativeEvent);
  }
  function dispatchUserBlockingUpdate(topLevelType, eventSystemFlags, container, nativeEvent) {
    runWithPriority(UserBlockingPriority, dispatchEvent.bind(null, topLevelType, eventSystemFlags, container, nativeEvent));
  }
  function dispatchEvent(topLevelType, eventSystemFlags, container, nativeEvent) {
    if (!_enabled) {
      return;
    }
    if (hasQueuedDiscreteEvents() && isReplayableDiscreteEvent(topLevelType)) {
      queueDiscreteEvent(null, topLevelType, eventSystemFlags, container, nativeEvent);
      return;
    }
    var blockedOn = attemptToDispatchEvent(topLevelType, eventSystemFlags, container, nativeEvent);
    if (blockedOn === null) {
      clearIfContinuousEvent(topLevelType, nativeEvent);
      return;
    }
    if (isReplayableDiscreteEvent(topLevelType)) {
      queueDiscreteEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent);
      return;
    }
    if (queueIfContinuousEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent)) {
      return;
    }
    clearIfContinuousEvent(topLevelType, nativeEvent);
    {
      dispatchEventForLegacyPluginEventSystem(topLevelType, eventSystemFlags, nativeEvent, null);
    }
  }
  function attemptToDispatchEvent(topLevelType, eventSystemFlags, container, nativeEvent) {
    var nativeEventTarget = getEventTarget(nativeEvent);
    var targetInst = getClosestInstanceFromNode(nativeEventTarget);
    if (targetInst !== null) {
      var nearestMounted = getNearestMountedFiber(targetInst);
      if (nearestMounted === null) {
        targetInst = null;
      } else {
        var tag = nearestMounted.tag;
        if (tag === SuspenseComponent) {
          var instance = getSuspenseInstanceFromFiber(nearestMounted);
          if (instance !== null) {
            return instance;
          }
          targetInst = null;
        } else if (tag === HostRoot) {
          var root = nearestMounted.stateNode;
          if (root.hydrate) {
            return getContainerFromFiber(nearestMounted);
          }
          targetInst = null;
        } else if (nearestMounted !== targetInst) {
          targetInst = null;
        }
      }
    }
    {
      dispatchEventForLegacyPluginEventSystem(topLevelType, eventSystemFlags, nativeEvent, targetInst);
    }
    return null;
  }
  var shorthandToLonghand = {
    animation: ['animationDelay', 'animationDirection', 'animationDuration', 'animationFillMode', 'animationIterationCount', 'animationName', 'animationPlayState', 'animationTimingFunction'],
    background: ['backgroundAttachment', 'backgroundClip', 'backgroundColor', 'backgroundImage', 'backgroundOrigin', 'backgroundPositionX', 'backgroundPositionY', 'backgroundRepeat', 'backgroundSize'],
    backgroundPosition: ['backgroundPositionX', 'backgroundPositionY'],
    border: ['borderBottomColor', 'borderBottomStyle', 'borderBottomWidth', 'borderImageOutset', 'borderImageRepeat', 'borderImageSlice', 'borderImageSource', 'borderImageWidth', 'borderLeftColor', 'borderLeftStyle', 'borderLeftWidth', 'borderRightColor', 'borderRightStyle', 'borderRightWidth', 'borderTopColor', 'borderTopStyle', 'borderTopWidth'],
    borderBlockEnd: ['borderBlockEndColor', 'borderBlockEndStyle', 'borderBlockEndWidth'],
    borderBlockStart: ['borderBlockStartColor', 'borderBlockStartStyle', 'borderBlockStartWidth'],
    borderBottom: ['borderBottomColor', 'borderBottomStyle', 'borderBottomWidth'],
    borderColor: ['borderBottomColor', 'borderLeftColor', 'borderRightColor', 'borderTopColor'],
    borderImage: ['borderImageOutset', 'borderImageRepeat', 'borderImageSlice', 'borderImageSource', 'borderImageWidth'],
    borderInlineEnd: ['borderInlineEndColor', 'borderInlineEndStyle', 'borderInlineEndWidth'],
    borderInlineStart: ['borderInlineStartColor', 'borderInlineStartStyle', 'borderInlineStartWidth'],
    borderLeft: ['borderLeftColor', 'borderLeftStyle', 'borderLeftWidth'],
    borderRadius: ['borderBottomLeftRadius', 'borderBottomRightRadius', 'borderTopLeftRadius', 'borderTopRightRadius'],
    borderRight: ['borderRightColor', 'borderRightStyle', 'borderRightWidth'],
    borderStyle: ['borderBottomStyle', 'borderLeftStyle', 'borderRightStyle', 'borderTopStyle'],
    borderTop: ['borderTopColor', 'borderTopStyle', 'borderTopWidth'],
    borderWidth: ['borderBottomWidth', 'borderLeftWidth', 'borderRightWidth', 'borderTopWidth'],
    columnRule: ['columnRuleColor', 'columnRuleStyle', 'columnRuleWidth'],
    columns: ['columnCount', 'columnWidth'],
    flex: ['flexBasis', 'flexGrow', 'flexShrink'],
    flexFlow: ['flexDirection', 'flexWrap'],
    font: ['fontFamily', 'fontFeatureSettings', 'fontKerning', 'fontLanguageOverride', 'fontSize', 'fontSizeAdjust', 'fontStretch', 'fontStyle', 'fontVariant', 'fontVariantAlternates', 'fontVariantCaps', 'fontVariantEastAsian', 'fontVariantLigatures', 'fontVariantNumeric', 'fontVariantPosition', 'fontWeight', 'lineHeight'],
    fontVariant: ['fontVariantAlternates', 'fontVariantCaps', 'fontVariantEastAsian', 'fontVariantLigatures', 'fontVariantNumeric', 'fontVariantPosition'],
    gap: ['columnGap', 'rowGap'],
    grid: ['gridAutoColumns', 'gridAutoFlow', 'gridAutoRows', 'gridTemplateAreas', 'gridTemplateColumns', 'gridTemplateRows'],
    gridArea: ['gridColumnEnd', 'gridColumnStart', 'gridRowEnd', 'gridRowStart'],
    gridColumn: ['gridColumnEnd', 'gridColumnStart'],
    gridColumnGap: ['columnGap'],
    gridGap: ['columnGap', 'rowGap'],
    gridRow: ['gridRowEnd', 'gridRowStart'],
    gridRowGap: ['rowGap'],
    gridTemplate: ['gridTemplateAreas', 'gridTemplateColumns', 'gridTemplateRows'],
    listStyle: ['listStyleImage', 'listStylePosition', 'listStyleType'],
    margin: ['marginBottom', 'marginLeft', 'marginRight', 'marginTop'],
    marker: ['markerEnd', 'markerMid', 'markerStart'],
    mask: ['maskClip', 'maskComposite', 'maskImage', 'maskMode', 'maskOrigin', 'maskPositionX', 'maskPositionY', 'maskRepeat', 'maskSize'],
    maskPosition: ['maskPositionX', 'maskPositionY'],
    outline: ['outlineColor', 'outlineStyle', 'outlineWidth'],
    overflow: ['overflowX', 'overflowY'],
    padding: ['paddingBottom', 'paddingLeft', 'paddingRight', 'paddingTop'],
    placeContent: ['alignContent', 'justifyContent'],
    placeItems: ['alignItems', 'justifyItems'],
    placeSelf: ['alignSelf', 'justifySelf'],
    textDecoration: ['textDecorationColor', 'textDecorationLine', 'textDecorationStyle'],
    textEmphasis: ['textEmphasisColor', 'textEmphasisStyle'],
    transition: ['transitionDelay', 'transitionDuration', 'transitionProperty', 'transitionTimingFunction'],
    wordWrap: ['overflowWrap']
  };
  var isUnitlessNumber = {
    animationIterationCount: true,
    borderImageOutset: true,
    borderImageSlice: true,
    borderImageWidth: true,
    boxFlex: true,
    boxFlexGroup: true,
    boxOrdinalGroup: true,
    columnCount: true,
    columns: true,
    flex: true,
    flexGrow: true,
    flexPositive: true,
    flexShrink: true,
    flexNegative: true,
    flexOrder: true,
    gridArea: true,
    gridRow: true,
    gridRowEnd: true,
    gridRowSpan: true,
    gridRowStart: true,
    gridColumn: true,
    gridColumnEnd: true,
    gridColumnSpan: true,
    gridColumnStart: true,
    fontWeight: true,
    lineClamp: true,
    lineHeight: true,
    opacity: true,
    order: true,
    orphans: true,
    tabSize: true,
    widows: true,
    zIndex: true,
    zoom: true,
    fillOpacity: true,
    floodOpacity: true,
    stopOpacity: true,
    strokeDasharray: true,
    strokeDashoffset: true,
    strokeMiterlimit: true,
    strokeOpacity: true,
    strokeWidth: true
  };
  function prefixKey(prefix, key) {
    return prefix + key.charAt(0).toUpperCase() + key.substring(1);
  }
  var prefixes = ['Webkit', 'ms', 'Moz', 'O'];
  Object.keys(isUnitlessNumber).forEach(function (prop) {
    prefixes.forEach(function (prefix) {
      isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
    });
  });
  function dangerousStyleValue(name, value, isCustomProperty) {
    var isEmpty = value == null || typeof value === 'boolean' || value === '';
    if (isEmpty) {
      return '';
    }
    if (!isCustomProperty && typeof value === 'number' && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
      return value + 'px';
    }
    return ('' + value).trim();
  }
  var uppercasePattern = /([A-Z])/g;
  var msPattern = /^ms-/;
  function hyphenateStyleName(name) {
    return name.replace(uppercasePattern, '-$1').toLowerCase().replace(msPattern, '-ms-');
  }
  var warnValidStyle = function () {};
  {
    var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
    var msPattern$1 = /^-ms-/;
    var hyphenPattern = /-(.)/g;
    var badStyleValueWithSemicolonPattern = /;\s*$/;
    var warnedStyleNames = {};
    var warnedStyleValues = {};
    var warnedForNaNValue = false;
    var warnedForInfinityValue = false;
    var camelize = function (string) {
      return string.replace(hyphenPattern, function (_, character) {
        return character.toUpperCase();
      });
    };
    var warnHyphenatedStyleName = function (name) {
      if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
        return;
      }
      warnedStyleNames[name] = true;
      error('Unsupported style property %s. Did you mean %s?', name, camelize(name.replace(msPattern$1, 'ms-')));
    };
    var warnBadVendoredStyleName = function (name) {
      if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
        return;
      }
      warnedStyleNames[name] = true;
      error('Unsupported vendor-prefixed style property %s. Did you mean %s?', name, name.charAt(0).toUpperCase() + name.slice(1));
    };
    var warnStyleValueWithSemicolon = function (name, value) {
      if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
        return;
      }
      warnedStyleValues[value] = true;
      error("Style property values shouldn't contain a semicolon. " + 'Try "%s: %s" instead.', name, value.replace(badStyleValueWithSemicolonPattern, ''));
    };
    var warnStyleValueIsNaN = function (name, value) {
      if (warnedForNaNValue) {
        return;
      }
      warnedForNaNValue = true;
      error('`NaN` is an invalid value for the `%s` css style property.', name);
    };
    var warnStyleValueIsInfinity = function (name, value) {
      if (warnedForInfinityValue) {
        return;
      }
      warnedForInfinityValue = true;
      error('`Infinity` is an invalid value for the `%s` css style property.', name);
    };
    warnValidStyle = function (name, value) {
      if (name.indexOf('-') > -1) {
        warnHyphenatedStyleName(name);
      } else if (badVendoredStyleNamePattern.test(name)) {
        warnBadVendoredStyleName(name);
      } else if (badStyleValueWithSemicolonPattern.test(value)) {
        warnStyleValueWithSemicolon(name, value);
      }
      if (typeof value === 'number') {
        if (isNaN(value)) {
          warnStyleValueIsNaN(name, value);
        } else if (!isFinite(value)) {
          warnStyleValueIsInfinity(name, value);
        }
      }
    };
  }
  var warnValidStyle$1 = warnValidStyle;
  function createDangerousStringForStyles(styles) {
    {
      var serialized = '';
      var delimiter = '';
      for (var styleName in styles) {
        if (!styles.hasOwnProperty(styleName)) {
          continue;
        }
        var styleValue = styles[styleName];
        if (styleValue != null) {
          var isCustomProperty = styleName.indexOf('--') === 0;
          serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ':';
          serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
          delimiter = ';';
        }
      }
      return serialized || null;
    }
  }
  function setValueForStyles(node, styles) {
    var style = node.style;
    for (var styleName in styles) {
      if (!styles.hasOwnProperty(styleName)) {
        continue;
      }
      var isCustomProperty = styleName.indexOf('--') === 0;
      {
        if (!isCustomProperty) {
          warnValidStyle$1(styleName, styles[styleName]);
        }
      }
      var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);
      if (styleName === 'float') {
        styleName = 'cssFloat';
      }
      if (isCustomProperty) {
        style.setProperty(styleName, styleValue);
      } else {
        style[styleName] = styleValue;
      }
    }
  }
  function isValueEmpty(value) {
    return value == null || typeof value === 'boolean' || value === '';
  }
  function expandShorthandMap(styles) {
    var expanded = {};
    for (var key in styles) {
      var longhands = shorthandToLonghand[key] || [key];
      for (var i = 0; i < longhands.length; i++) {
        expanded[longhands[i]] = key;
      }
    }
    return expanded;
  }
  function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
    {
      if (!nextStyles) {
        return;
      }
      var expandedUpdates = expandShorthandMap(styleUpdates);
      var expandedStyles = expandShorthandMap(nextStyles);
      var warnedAbout = {};
      for (var key in expandedUpdates) {
        var originalKey = expandedUpdates[key];
        var correctOriginalKey = expandedStyles[key];
        if (correctOriginalKey && originalKey !== correctOriginalKey) {
          var warningKey = originalKey + ',' + correctOriginalKey;
          if (warnedAbout[warningKey]) {
            continue;
          }
          warnedAbout[warningKey] = true;
          error('%s a style property during rerender (%s) when a ' + 'conflicting property is set (%s) can lead to styling bugs. To ' + "avoid this, don't mix shorthand and non-shorthand properties " + 'for the same value; instead, replace the shorthand with ' + 'separate values.', isValueEmpty(styleUpdates[originalKey]) ? 'Removing' : 'Updating', originalKey, correctOriginalKey);
        }
      }
    }
  }
  var omittedCloseTags = {
    area: true,
    base: true,
    br: true,
    col: true,
    embed: true,
    hr: true,
    img: true,
    input: true,
    keygen: true,
    link: true,
    meta: true,
    param: true,
    source: true,
    track: true,
    wbr: true
  };
  var voidElementTags = _assign({
    menuitem: true
  }, omittedCloseTags);
  var HTML = '__html';
  var ReactDebugCurrentFrame$3 = null;
  {
    ReactDebugCurrentFrame$3 = ReactSharedInternals.ReactDebugCurrentFrame;
  }
  function assertValidProps(tag, props) {
    if (!props) {
      return;
    }
    if (voidElementTags[tag]) {
      if (!(props.children == null && props.dangerouslySetInnerHTML == null)) {
        {
          throw Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`." + ReactDebugCurrentFrame$3.getStackAddendum());
        }
      }
    }
    if (props.dangerouslySetInnerHTML != null) {
      if (!(props.children == null)) {
        {
          throw Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
        }
      }
      if (!(typeof props.dangerouslySetInnerHTML === 'object' && (HTML in props.dangerouslySetInnerHTML))) {
        {
          throw Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://fb.me/react-invariant-dangerously-set-inner-html for more information.");
        }
      }
    }
    {
      if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
        error('A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.');
      }
    }
    if (!(props.style == null || typeof props.style === 'object')) {
      {
        throw Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX." + ReactDebugCurrentFrame$3.getStackAddendum());
      }
    }
  }
  function isCustomComponent(tagName, props) {
    if (tagName.indexOf('-') === -1) {
      return typeof props.is === 'string';
    }
    switch (tagName) {
      case 'annotation-xml':
      case 'color-profile':
      case 'font-face':
      case 'font-face-src':
      case 'font-face-uri':
      case 'font-face-format':
      case 'font-face-name':
      case 'missing-glyph':
        return false;
      default:
        return true;
    }
  }
  var possibleStandardNames = {
    accept: 'accept',
    acceptcharset: 'acceptCharset',
    'accept-charset': 'acceptCharset',
    accesskey: 'accessKey',
    action: 'action',
    allowfullscreen: 'allowFullScreen',
    alt: 'alt',
    as: 'as',
    async: 'async',
    autocapitalize: 'autoCapitalize',
    autocomplete: 'autoComplete',
    autocorrect: 'autoCorrect',
    autofocus: 'autoFocus',
    autoplay: 'autoPlay',
    autosave: 'autoSave',
    capture: 'capture',
    cellpadding: 'cellPadding',
    cellspacing: 'cellSpacing',
    challenge: 'challenge',
    charset: 'charSet',
    checked: 'checked',
    children: 'children',
    cite: 'cite',
    class: 'className',
    classid: 'classID',
    classname: 'className',
    cols: 'cols',
    colspan: 'colSpan',
    content: 'content',
    contenteditable: 'contentEditable',
    contextmenu: 'contextMenu',
    controls: 'controls',
    controlslist: 'controlsList',
    coords: 'coords',
    crossorigin: 'crossOrigin',
    dangerouslysetinnerhtml: 'dangerouslySetInnerHTML',
    data: 'data',
    datetime: 'dateTime',
    default: 'default',
    defaultchecked: 'defaultChecked',
    defaultvalue: 'defaultValue',
    defer: 'defer',
    dir: 'dir',
    disabled: 'disabled',
    disablepictureinpicture: 'disablePictureInPicture',
    download: 'download',
    draggable: 'draggable',
    enctype: 'encType',
    for: 'htmlFor',
    form: 'form',
    formmethod: 'formMethod',
    formaction: 'formAction',
    formenctype: 'formEncType',
    formnovalidate: 'formNoValidate',
    formtarget: 'formTarget',
    frameborder: 'frameBorder',
    headers: 'headers',
    height: 'height',
    hidden: 'hidden',
    high: 'high',
    href: 'href',
    hreflang: 'hrefLang',
    htmlfor: 'htmlFor',
    httpequiv: 'httpEquiv',
    'http-equiv': 'httpEquiv',
    icon: 'icon',
    id: 'id',
    innerhtml: 'innerHTML',
    inputmode: 'inputMode',
    integrity: 'integrity',
    is: 'is',
    itemid: 'itemID',
    itemprop: 'itemProp',
    itemref: 'itemRef',
    itemscope: 'itemScope',
    itemtype: 'itemType',
    keyparams: 'keyParams',
    keytype: 'keyType',
    kind: 'kind',
    label: 'label',
    lang: 'lang',
    list: 'list',
    loop: 'loop',
    low: 'low',
    manifest: 'manifest',
    marginwidth: 'marginWidth',
    marginheight: 'marginHeight',
    max: 'max',
    maxlength: 'maxLength',
    media: 'media',
    mediagroup: 'mediaGroup',
    method: 'method',
    min: 'min',
    minlength: 'minLength',
    multiple: 'multiple',
    muted: 'muted',
    name: 'name',
    nomodule: 'noModule',
    nonce: 'nonce',
    novalidate: 'noValidate',
    open: 'open',
    optimum: 'optimum',
    pattern: 'pattern',
    placeholder: 'placeholder',
    playsinline: 'playsInline',
    poster: 'poster',
    preload: 'preload',
    profile: 'profile',
    radiogroup: 'radioGroup',
    readonly: 'readOnly',
    referrerpolicy: 'referrerPolicy',
    rel: 'rel',
    required: 'required',
    reversed: 'reversed',
    role: 'role',
    rows: 'rows',
    rowspan: 'rowSpan',
    sandbox: 'sandbox',
    scope: 'scope',
    scoped: 'scoped',
    scrolling: 'scrolling',
    seamless: 'seamless',
    selected: 'selected',
    shape: 'shape',
    size: 'size',
    sizes: 'sizes',
    span: 'span',
    spellcheck: 'spellCheck',
    src: 'src',
    srcdoc: 'srcDoc',
    srclang: 'srcLang',
    srcset: 'srcSet',
    start: 'start',
    step: 'step',
    style: 'style',
    summary: 'summary',
    tabindex: 'tabIndex',
    target: 'target',
    title: 'title',
    type: 'type',
    usemap: 'useMap',
    value: 'value',
    width: 'width',
    wmode: 'wmode',
    wrap: 'wrap',
    about: 'about',
    accentheight: 'accentHeight',
    'accent-height': 'accentHeight',
    accumulate: 'accumulate',
    additive: 'additive',
    alignmentbaseline: 'alignmentBaseline',
    'alignment-baseline': 'alignmentBaseline',
    allowreorder: 'allowReorder',
    alphabetic: 'alphabetic',
    amplitude: 'amplitude',
    arabicform: 'arabicForm',
    'arabic-form': 'arabicForm',
    ascent: 'ascent',
    attributename: 'attributeName',
    attributetype: 'attributeType',
    autoreverse: 'autoReverse',
    azimuth: 'azimuth',
    basefrequency: 'baseFrequency',
    baselineshift: 'baselineShift',
    'baseline-shift': 'baselineShift',
    baseprofile: 'baseProfile',
    bbox: 'bbox',
    begin: 'begin',
    bias: 'bias',
    by: 'by',
    calcmode: 'calcMode',
    capheight: 'capHeight',
    'cap-height': 'capHeight',
    clip: 'clip',
    clippath: 'clipPath',
    'clip-path': 'clipPath',
    clippathunits: 'clipPathUnits',
    cliprule: 'clipRule',
    'clip-rule': 'clipRule',
    color: 'color',
    colorinterpolation: 'colorInterpolation',
    'color-interpolation': 'colorInterpolation',
    colorinterpolationfilters: 'colorInterpolationFilters',
    'color-interpolation-filters': 'colorInterpolationFilters',
    colorprofile: 'colorProfile',
    'color-profile': 'colorProfile',
    colorrendering: 'colorRendering',
    'color-rendering': 'colorRendering',
    contentscripttype: 'contentScriptType',
    contentstyletype: 'contentStyleType',
    cursor: 'cursor',
    cx: 'cx',
    cy: 'cy',
    d: 'd',
    datatype: 'datatype',
    decelerate: 'decelerate',
    descent: 'descent',
    diffuseconstant: 'diffuseConstant',
    direction: 'direction',
    display: 'display',
    divisor: 'divisor',
    dominantbaseline: 'dominantBaseline',
    'dominant-baseline': 'dominantBaseline',
    dur: 'dur',
    dx: 'dx',
    dy: 'dy',
    edgemode: 'edgeMode',
    elevation: 'elevation',
    enablebackground: 'enableBackground',
    'enable-background': 'enableBackground',
    end: 'end',
    exponent: 'exponent',
    externalresourcesrequired: 'externalResourcesRequired',
    fill: 'fill',
    fillopacity: 'fillOpacity',
    'fill-opacity': 'fillOpacity',
    fillrule: 'fillRule',
    'fill-rule': 'fillRule',
    filter: 'filter',
    filterres: 'filterRes',
    filterunits: 'filterUnits',
    floodopacity: 'floodOpacity',
    'flood-opacity': 'floodOpacity',
    floodcolor: 'floodColor',
    'flood-color': 'floodColor',
    focusable: 'focusable',
    fontfamily: 'fontFamily',
    'font-family': 'fontFamily',
    fontsize: 'fontSize',
    'font-size': 'fontSize',
    fontsizeadjust: 'fontSizeAdjust',
    'font-size-adjust': 'fontSizeAdjust',
    fontstretch: 'fontStretch',
    'font-stretch': 'fontStretch',
    fontstyle: 'fontStyle',
    'font-style': 'fontStyle',
    fontvariant: 'fontVariant',
    'font-variant': 'fontVariant',
    fontweight: 'fontWeight',
    'font-weight': 'fontWeight',
    format: 'format',
    from: 'from',
    fx: 'fx',
    fy: 'fy',
    g1: 'g1',
    g2: 'g2',
    glyphname: 'glyphName',
    'glyph-name': 'glyphName',
    glyphorientationhorizontal: 'glyphOrientationHorizontal',
    'glyph-orientation-horizontal': 'glyphOrientationHorizontal',
    glyphorientationvertical: 'glyphOrientationVertical',
    'glyph-orientation-vertical': 'glyphOrientationVertical',
    glyphref: 'glyphRef',
    gradienttransform: 'gradientTransform',
    gradientunits: 'gradientUnits',
    hanging: 'hanging',
    horizadvx: 'horizAdvX',
    'horiz-adv-x': 'horizAdvX',
    horizoriginx: 'horizOriginX',
    'horiz-origin-x': 'horizOriginX',
    ideographic: 'ideographic',
    imagerendering: 'imageRendering',
    'image-rendering': 'imageRendering',
    in2: 'in2',
    in: 'in',
    inlist: 'inlist',
    intercept: 'intercept',
    k1: 'k1',
    k2: 'k2',
    k3: 'k3',
    k4: 'k4',
    k: 'k',
    kernelmatrix: 'kernelMatrix',
    kernelunitlength: 'kernelUnitLength',
    kerning: 'kerning',
    keypoints: 'keyPoints',
    keysplines: 'keySplines',
    keytimes: 'keyTimes',
    lengthadjust: 'lengthAdjust',
    letterspacing: 'letterSpacing',
    'letter-spacing': 'letterSpacing',
    lightingcolor: 'lightingColor',
    'lighting-color': 'lightingColor',
    limitingconeangle: 'limitingConeAngle',
    local: 'local',
    markerend: 'markerEnd',
    'marker-end': 'markerEnd',
    markerheight: 'markerHeight',
    markermid: 'markerMid',
    'marker-mid': 'markerMid',
    markerstart: 'markerStart',
    'marker-start': 'markerStart',
    markerunits: 'markerUnits',
    markerwidth: 'markerWidth',
    mask: 'mask',
    maskcontentunits: 'maskContentUnits',
    maskunits: 'maskUnits',
    mathematical: 'mathematical',
    mode: 'mode',
    numoctaves: 'numOctaves',
    offset: 'offset',
    opacity: 'opacity',
    operator: 'operator',
    order: 'order',
    orient: 'orient',
    orientation: 'orientation',
    origin: 'origin',
    overflow: 'overflow',
    overlineposition: 'overlinePosition',
    'overline-position': 'overlinePosition',
    overlinethickness: 'overlineThickness',
    'overline-thickness': 'overlineThickness',
    paintorder: 'paintOrder',
    'paint-order': 'paintOrder',
    panose1: 'panose1',
    'panose-1': 'panose1',
    pathlength: 'pathLength',
    patterncontentunits: 'patternContentUnits',
    patterntransform: 'patternTransform',
    patternunits: 'patternUnits',
    pointerevents: 'pointerEvents',
    'pointer-events': 'pointerEvents',
    points: 'points',
    pointsatx: 'pointsAtX',
    pointsaty: 'pointsAtY',
    pointsatz: 'pointsAtZ',
    prefix: 'prefix',
    preservealpha: 'preserveAlpha',
    preserveaspectratio: 'preserveAspectRatio',
    primitiveunits: 'primitiveUnits',
    property: 'property',
    r: 'r',
    radius: 'radius',
    refx: 'refX',
    refy: 'refY',
    renderingintent: 'renderingIntent',
    'rendering-intent': 'renderingIntent',
    repeatcount: 'repeatCount',
    repeatdur: 'repeatDur',
    requiredextensions: 'requiredExtensions',
    requiredfeatures: 'requiredFeatures',
    resource: 'resource',
    restart: 'restart',
    result: 'result',
    results: 'results',
    rotate: 'rotate',
    rx: 'rx',
    ry: 'ry',
    scale: 'scale',
    security: 'security',
    seed: 'seed',
    shaperendering: 'shapeRendering',
    'shape-rendering': 'shapeRendering',
    slope: 'slope',
    spacing: 'spacing',
    specularconstant: 'specularConstant',
    specularexponent: 'specularExponent',
    speed: 'speed',
    spreadmethod: 'spreadMethod',
    startoffset: 'startOffset',
    stddeviation: 'stdDeviation',
    stemh: 'stemh',
    stemv: 'stemv',
    stitchtiles: 'stitchTiles',
    stopcolor: 'stopColor',
    'stop-color': 'stopColor',
    stopopacity: 'stopOpacity',
    'stop-opacity': 'stopOpacity',
    strikethroughposition: 'strikethroughPosition',
    'strikethrough-position': 'strikethroughPosition',
    strikethroughthickness: 'strikethroughThickness',
    'strikethrough-thickness': 'strikethroughThickness',
    string: 'string',
    stroke: 'stroke',
    strokedasharray: 'strokeDasharray',
    'stroke-dasharray': 'strokeDasharray',
    strokedashoffset: 'strokeDashoffset',
    'stroke-dashoffset': 'strokeDashoffset',
    strokelinecap: 'strokeLinecap',
    'stroke-linecap': 'strokeLinecap',
    strokelinejoin: 'strokeLinejoin',
    'stroke-linejoin': 'strokeLinejoin',
    strokemiterlimit: 'strokeMiterlimit',
    'stroke-miterlimit': 'strokeMiterlimit',
    strokewidth: 'strokeWidth',
    'stroke-width': 'strokeWidth',
    strokeopacity: 'strokeOpacity',
    'stroke-opacity': 'strokeOpacity',
    suppresscontenteditablewarning: 'suppressContentEditableWarning',
    suppresshydrationwarning: 'suppressHydrationWarning',
    surfacescale: 'surfaceScale',
    systemlanguage: 'systemLanguage',
    tablevalues: 'tableValues',
    targetx: 'targetX',
    targety: 'targetY',
    textanchor: 'textAnchor',
    'text-anchor': 'textAnchor',
    textdecoration: 'textDecoration',
    'text-decoration': 'textDecoration',
    textlength: 'textLength',
    textrendering: 'textRendering',
    'text-rendering': 'textRendering',
    to: 'to',
    transform: 'transform',
    typeof: 'typeof',
    u1: 'u1',
    u2: 'u2',
    underlineposition: 'underlinePosition',
    'underline-position': 'underlinePosition',
    underlinethickness: 'underlineThickness',
    'underline-thickness': 'underlineThickness',
    unicode: 'unicode',
    unicodebidi: 'unicodeBidi',
    'unicode-bidi': 'unicodeBidi',
    unicoderange: 'unicodeRange',
    'unicode-range': 'unicodeRange',
    unitsperem: 'unitsPerEm',
    'units-per-em': 'unitsPerEm',
    unselectable: 'unselectable',
    valphabetic: 'vAlphabetic',
    'v-alphabetic': 'vAlphabetic',
    values: 'values',
    vectoreffect: 'vectorEffect',
    'vector-effect': 'vectorEffect',
    version: 'version',
    vertadvy: 'vertAdvY',
    'vert-adv-y': 'vertAdvY',
    vertoriginx: 'vertOriginX',
    'vert-origin-x': 'vertOriginX',
    vertoriginy: 'vertOriginY',
    'vert-origin-y': 'vertOriginY',
    vhanging: 'vHanging',
    'v-hanging': 'vHanging',
    videographic: 'vIdeographic',
    'v-ideographic': 'vIdeographic',
    viewbox: 'viewBox',
    viewtarget: 'viewTarget',
    visibility: 'visibility',
    vmathematical: 'vMathematical',
    'v-mathematical': 'vMathematical',
    vocab: 'vocab',
    widths: 'widths',
    wordspacing: 'wordSpacing',
    'word-spacing': 'wordSpacing',
    writingmode: 'writingMode',
    'writing-mode': 'writingMode',
    x1: 'x1',
    x2: 'x2',
    x: 'x',
    xchannelselector: 'xChannelSelector',
    xheight: 'xHeight',
    'x-height': 'xHeight',
    xlinkactuate: 'xlinkActuate',
    'xlink:actuate': 'xlinkActuate',
    xlinkarcrole: 'xlinkArcrole',
    'xlink:arcrole': 'xlinkArcrole',
    xlinkhref: 'xlinkHref',
    'xlink:href': 'xlinkHref',
    xlinkrole: 'xlinkRole',
    'xlink:role': 'xlinkRole',
    xlinkshow: 'xlinkShow',
    'xlink:show': 'xlinkShow',
    xlinktitle: 'xlinkTitle',
    'xlink:title': 'xlinkTitle',
    xlinktype: 'xlinkType',
    'xlink:type': 'xlinkType',
    xmlbase: 'xmlBase',
    'xml:base': 'xmlBase',
    xmllang: 'xmlLang',
    'xml:lang': 'xmlLang',
    xmlns: 'xmlns',
    'xml:space': 'xmlSpace',
    xmlnsxlink: 'xmlnsXlink',
    'xmlns:xlink': 'xmlnsXlink',
    xmlspace: 'xmlSpace',
    y1: 'y1',
    y2: 'y2',
    y: 'y',
    ychannelselector: 'yChannelSelector',
    z: 'z',
    zoomandpan: 'zoomAndPan'
  };
  var ariaProperties = {
    'aria-current': 0,
    'aria-details': 0,
    'aria-disabled': 0,
    'aria-hidden': 0,
    'aria-invalid': 0,
    'aria-keyshortcuts': 0,
    'aria-label': 0,
    'aria-roledescription': 0,
    'aria-autocomplete': 0,
    'aria-checked': 0,
    'aria-expanded': 0,
    'aria-haspopup': 0,
    'aria-level': 0,
    'aria-modal': 0,
    'aria-multiline': 0,
    'aria-multiselectable': 0,
    'aria-orientation': 0,
    'aria-placeholder': 0,
    'aria-pressed': 0,
    'aria-readonly': 0,
    'aria-required': 0,
    'aria-selected': 0,
    'aria-sort': 0,
    'aria-valuemax': 0,
    'aria-valuemin': 0,
    'aria-valuenow': 0,
    'aria-valuetext': 0,
    'aria-atomic': 0,
    'aria-busy': 0,
    'aria-live': 0,
    'aria-relevant': 0,
    'aria-dropeffect': 0,
    'aria-grabbed': 0,
    'aria-activedescendant': 0,
    'aria-colcount': 0,
    'aria-colindex': 0,
    'aria-colspan': 0,
    'aria-controls': 0,
    'aria-describedby': 0,
    'aria-errormessage': 0,
    'aria-flowto': 0,
    'aria-labelledby': 0,
    'aria-owns': 0,
    'aria-posinset': 0,
    'aria-rowcount': 0,
    'aria-rowindex': 0,
    'aria-rowspan': 0,
    'aria-setsize': 0
  };
  var warnedProperties = {};
  var rARIA = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
  var rARIACamel = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');
  var hasOwnProperty$1 = Object.prototype.hasOwnProperty;
  function validateProperty(tagName, name) {
    {
      if (hasOwnProperty$1.call(warnedProperties, name) && warnedProperties[name]) {
        return true;
      }
      if (rARIACamel.test(name)) {
        var ariaName = 'aria-' + name.slice(4).toLowerCase();
        var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
        if (correctName == null) {
          error('Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.', name);
          warnedProperties[name] = true;
          return true;
        }
        if (name !== correctName) {
          error('Invalid ARIA attribute `%s`. Did you mean `%s`?', name, correctName);
          warnedProperties[name] = true;
          return true;
        }
      }
      if (rARIA.test(name)) {
        var lowerCasedName = name.toLowerCase();
        var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
        if (standardName == null) {
          warnedProperties[name] = true;
          return false;
        }
        if (name !== standardName) {
          error('Unknown ARIA attribute `%s`. Did you mean `%s`?', name, standardName);
          warnedProperties[name] = true;
          return true;
        }
      }
    }
    return true;
  }
  function warnInvalidARIAProps(type, props) {
    {
      var invalidProps = [];
      for (var key in props) {
        var isValid = validateProperty(type, key);
        if (!isValid) {
          invalidProps.push(key);
        }
      }
      var unknownPropString = invalidProps.map(function (prop) {
        return '`' + prop + '`';
      }).join(', ');
      if (invalidProps.length === 1) {
        error('Invalid aria prop %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop', unknownPropString, type);
      } else if (invalidProps.length > 1) {
        error('Invalid aria props %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop', unknownPropString, type);
      }
    }
  }
  function validateProperties(type, props) {
    if (isCustomComponent(type, props)) {
      return;
    }
    warnInvalidARIAProps(type, props);
  }
  var didWarnValueNull = false;
  function validateProperties$1(type, props) {
    {
      if (type !== 'input' && type !== 'textarea' && type !== 'select') {
        return;
      }
      if (props != null && props.value === null && !didWarnValueNull) {
        didWarnValueNull = true;
        if (type === 'select' && props.multiple) {
          error('`value` prop on `%s` should not be null. ' + 'Consider using an empty array when `multiple` is set to `true` ' + 'to clear the component or `undefined` for uncontrolled components.', type);
        } else {
          error('`value` prop on `%s` should not be null. ' + 'Consider using an empty string to clear the component or `undefined` ' + 'for uncontrolled components.', type);
        }
      }
    }
  }
  var validateProperty$1 = function () {};
  {
    var warnedProperties$1 = {};
    var _hasOwnProperty = Object.prototype.hasOwnProperty;
    var EVENT_NAME_REGEX = /^on./;
    var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
    var rARIA$1 = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
    var rARIACamel$1 = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');
    validateProperty$1 = function (tagName, name, value, canUseEventSystem) {
      if (_hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
        return true;
      }
      var lowerCasedName = name.toLowerCase();
      if (lowerCasedName === 'onfocusin' || lowerCasedName === 'onfocusout') {
        error('React uses onFocus and onBlur instead of onFocusIn and onFocusOut. ' + 'All React events are normalized to bubble, so onFocusIn and onFocusOut ' + 'are not needed/supported by React.');
        warnedProperties$1[name] = true;
        return true;
      }
      if (canUseEventSystem) {
        if (registrationNameModules.hasOwnProperty(name)) {
          return true;
        }
        var registrationName = possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames[lowerCasedName] : null;
        if (registrationName != null) {
          error('Invalid event handler property `%s`. Did you mean `%s`?', name, registrationName);
          warnedProperties$1[name] = true;
          return true;
        }
        if (EVENT_NAME_REGEX.test(name)) {
          error('Unknown event handler property `%s`. It will be ignored.', name);
          warnedProperties$1[name] = true;
          return true;
        }
      } else if (EVENT_NAME_REGEX.test(name)) {
        if (INVALID_EVENT_NAME_REGEX.test(name)) {
          error('Invalid event handler property `%s`. ' + 'React events use the camelCase naming convention, for example `onClick`.', name);
        }
        warnedProperties$1[name] = true;
        return true;
      }
      if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
        return true;
      }
      if (lowerCasedName === 'innerhtml') {
        error('Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.');
        warnedProperties$1[name] = true;
        return true;
      }
      if (lowerCasedName === 'aria') {
        error('The `aria` attribute is reserved for future use in React. ' + 'Pass individual `aria-` attributes instead.');
        warnedProperties$1[name] = true;
        return true;
      }
      if (lowerCasedName === 'is' && value !== null && value !== undefined && typeof value !== 'string') {
        error('Received a `%s` for a string attribute `is`. If this is expected, cast ' + 'the value to a string.', typeof value);
        warnedProperties$1[name] = true;
        return true;
      }
      if (typeof value === 'number' && isNaN(value)) {
        error('Received NaN for the `%s` attribute. If this is expected, cast ' + 'the value to a string.', name);
        warnedProperties$1[name] = true;
        return true;
      }
      var propertyInfo = getPropertyInfo(name);
      var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
      if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
        var standardName = possibleStandardNames[lowerCasedName];
        if (standardName !== name) {
          error('Invalid DOM property `%s`. Did you mean `%s`?', name, standardName);
          warnedProperties$1[name] = true;
          return true;
        }
      } else if (!isReserved && name !== lowerCasedName) {
        error('React does not recognize the `%s` prop on a DOM element. If you ' + 'intentionally want it to appear in the DOM as a custom ' + 'attribute, spell it as lowercase `%s` instead. ' + 'If you accidentally passed it from a parent component, remove ' + 'it from the DOM element.', name, lowerCasedName);
        warnedProperties$1[name] = true;
        return true;
      }
      if (typeof value === 'boolean' && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
        if (value) {
          error('Received `%s` for a non-boolean attribute `%s`.\n\n' + 'If you want to write it to the DOM, pass a string instead: ' + '%s="%s" or %s={value.toString()}.', value, name, name, value, name);
        } else {
          error('Received `%s` for a non-boolean attribute `%s`.\n\n' + 'If you want to write it to the DOM, pass a string instead: ' + '%s="%s" or %s={value.toString()}.\n\n' + 'If you used to conditionally omit it with %s={condition && value}, ' + 'pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
        }
        warnedProperties$1[name] = true;
        return true;
      }
      if (isReserved) {
        return true;
      }
      if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
        warnedProperties$1[name] = true;
        return false;
      }
      if ((value === 'false' || value === 'true') && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
        error('Received the string `%s` for the boolean attribute `%s`. ' + '%s ' + 'Did you mean %s={%s}?', value, name, value === 'false' ? 'The browser will interpret it as a truthy value.' : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
        warnedProperties$1[name] = true;
        return true;
      }
      return true;
    };
  }
  var warnUnknownProperties = function (type, props, canUseEventSystem) {
    {
      var unknownProps = [];
      for (var key in props) {
        var isValid = validateProperty$1(type, key, props[key], canUseEventSystem);
        if (!isValid) {
          unknownProps.push(key);
        }
      }
      var unknownPropString = unknownProps.map(function (prop) {
        return '`' + prop + '`';
      }).join(', ');
      if (unknownProps.length === 1) {
        error('Invalid value for prop %s on <%s> tag. Either remove it from the element, ' + 'or pass a string or number value to keep it in the DOM. ' + 'For details, see https://fb.me/react-attribute-behavior', unknownPropString, type);
      } else if (unknownProps.length > 1) {
        error('Invalid values for props %s on <%s> tag. Either remove them from the element, ' + 'or pass a string or number value to keep them in the DOM. ' + 'For details, see https://fb.me/react-attribute-behavior', unknownPropString, type);
      }
    }
  };
  function validateProperties$2(type, props, canUseEventSystem) {
    if (isCustomComponent(type, props)) {
      return;
    }
    warnUnknownProperties(type, props, canUseEventSystem);
  }
  var didWarnInvalidHydration = false;
  var DANGEROUSLY_SET_INNER_HTML = 'dangerouslySetInnerHTML';
  var SUPPRESS_CONTENT_EDITABLE_WARNING = 'suppressContentEditableWarning';
  var SUPPRESS_HYDRATION_WARNING = 'suppressHydrationWarning';
  var AUTOFOCUS = 'autoFocus';
  var CHILDREN = 'children';
  var STYLE = 'style';
  var HTML$1 = '__html';
  var HTML_NAMESPACE$1 = Namespaces.html;
  var warnedUnknownTags;
  var suppressHydrationWarning;
  var validatePropertiesInDevelopment;
  var warnForTextDifference;
  var warnForPropDifference;
  var warnForExtraAttributes;
  var warnForInvalidEventListener;
  var canDiffStyleForHydrationWarning;
  var normalizeMarkupForTextOrAttribute;
  var normalizeHTML;
  {
    warnedUnknownTags = {
      time: true,
      dialog: true,
      webview: true
    };
    validatePropertiesInDevelopment = function (type, props) {
      validateProperties(type, props);
      validateProperties$1(type, props);
      validateProperties$2(type, props, true);
    };
    canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode;
    var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
    var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
    normalizeMarkupForTextOrAttribute = function (markup) {
      var markupString = typeof markup === 'string' ? markup : '' + markup;
      return markupString.replace(NORMALIZE_NEWLINES_REGEX, '\n').replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, '');
    };
    warnForTextDifference = function (serverText, clientText) {
      if (didWarnInvalidHydration) {
        return;
      }
      var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
      var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
      if (normalizedServerText === normalizedClientText) {
        return;
      }
      didWarnInvalidHydration = true;
      error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
    };
    warnForPropDifference = function (propName, serverValue, clientValue) {
      if (didWarnInvalidHydration) {
        return;
      }
      var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
      var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
      if (normalizedServerValue === normalizedClientValue) {
        return;
      }
      didWarnInvalidHydration = true;
      error('Prop `%s` did not match. Server: %s Client: %s', propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
    };
    warnForExtraAttributes = function (attributeNames) {
      if (didWarnInvalidHydration) {
        return;
      }
      didWarnInvalidHydration = true;
      var names = [];
      attributeNames.forEach(function (name) {
        names.push(name);
      });
      error('Extra attributes from the server: %s', names);
    };
    warnForInvalidEventListener = function (registrationName, listener) {
      if (listener === false) {
        error('Expected `%s` listener to be a function, instead got `false`.\n\n' + 'If you used to conditionally omit it with %s={condition && value}, ' + 'pass %s={condition ? value : undefined} instead.', registrationName, registrationName, registrationName);
      } else {
        error('Expected `%s` listener to be a function, instead got a value of `%s` type.', registrationName, typeof listener);
      }
    };
    normalizeHTML = function (parent, html) {
      var testElement = parent.namespaceURI === HTML_NAMESPACE$1 ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
      testElement.innerHTML = html;
      return testElement.innerHTML;
    };
  }
  function ensureListeningTo(rootContainerElement, registrationName) {
    var isDocumentOrFragment = rootContainerElement.nodeType === DOCUMENT_NODE || rootContainerElement.nodeType === DOCUMENT_FRAGMENT_NODE;
    var doc = isDocumentOrFragment ? rootContainerElement : rootContainerElement.ownerDocument;
    legacyListenToEvent(registrationName, doc);
  }
  function getOwnerDocumentFromRootContainer(rootContainerElement) {
    return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
  }
  function noop() {}
  function trapClickOnNonInteractiveElement(node) {
    node.onclick = noop;
  }
  function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
    for (var propKey in nextProps) {
      if (!nextProps.hasOwnProperty(propKey)) {
        continue;
      }
      var nextProp = nextProps[propKey];
      if (propKey === STYLE) {
        {
          if (nextProp) {
            Object.freeze(nextProp);
          }
        }
        setValueForStyles(domElement, nextProp);
      } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
        var nextHtml = nextProp ? nextProp[HTML$1] : undefined;
        if (nextHtml != null) {
          setInnerHTML(domElement, nextHtml);
        }
      } else if (propKey === CHILDREN) {
        if (typeof nextProp === 'string') {
          var canSetTextContent = tag !== 'textarea' || nextProp !== '';
          if (canSetTextContent) {
            setTextContent(domElement, nextProp);
          }
        } else if (typeof nextProp === 'number') {
          setTextContent(domElement, '' + nextProp);
        }
      } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ; else if (propKey === AUTOFOCUS) ; else if (registrationNameModules.hasOwnProperty(propKey)) {
        if (nextProp != null) {
          if (typeof nextProp !== 'function') {
            warnForInvalidEventListener(propKey, nextProp);
          }
          ensureListeningTo(rootContainerElement, propKey);
        }
      } else if (nextProp != null) {
        setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
      }
    }
  }
  function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
    for (var i = 0; i < updatePayload.length; i += 2) {
      var propKey = updatePayload[i];
      var propValue = updatePayload[i + 1];
      if (propKey === STYLE) {
        setValueForStyles(domElement, propValue);
      } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
        setInnerHTML(domElement, propValue);
      } else if (propKey === CHILDREN) {
        setTextContent(domElement, propValue);
      } else {
        setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
      }
    }
  }
  function createElement(type, props, rootContainerElement, parentNamespace) {
    var isCustomComponentTag;
    var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
    var domElement;
    var namespaceURI = parentNamespace;
    if (namespaceURI === HTML_NAMESPACE$1) {
      namespaceURI = getIntrinsicNamespace(type);
    }
    if (namespaceURI === HTML_NAMESPACE$1) {
      {
        isCustomComponentTag = isCustomComponent(type, props);
        if (!isCustomComponentTag && type !== type.toLowerCase()) {
          error('<%s /> is using incorrect casing. ' + 'Use PascalCase for React components, ' + 'or lowercase for HTML elements.', type);
        }
      }
      if (type === 'script') {
        var div = ownerDocument.createElement('div');
        div.innerHTML = '<script><' + '/script>';
        var firstChild = div.firstChild;
        domElement = div.removeChild(firstChild);
      } else if (typeof props.is === 'string') {
        domElement = ownerDocument.createElement(type, {
          is: props.is
        });
      } else {
        domElement = ownerDocument.createElement(type);
        if (type === 'select') {
          var node = domElement;
          if (props.multiple) {
            node.multiple = true;
          } else if (props.size) {
            node.size = props.size;
          }
        }
      }
    } else {
      domElement = ownerDocument.createElementNS(namespaceURI, type);
    }
    {
      if (namespaceURI === HTML_NAMESPACE$1) {
        if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === '[object HTMLUnknownElement]' && !Object.prototype.hasOwnProperty.call(warnedUnknownTags, type)) {
          warnedUnknownTags[type] = true;
          error('The tag <%s> is unrecognized in this browser. ' + 'If you meant to render a React component, start its name with ' + 'an uppercase letter.', type);
        }
      }
    }
    return domElement;
  }
  function createTextNode(text, rootContainerElement) {
    return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
  }
  function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
    var isCustomComponentTag = isCustomComponent(tag, rawProps);
    {
      validatePropertiesInDevelopment(tag, rawProps);
    }
    var props;
    switch (tag) {
      case 'iframe':
      case 'object':
      case 'embed':
        trapBubbledEvent(TOP_LOAD, domElement);
        props = rawProps;
        break;
      case 'video':
      case 'audio':
        for (var i = 0; i < mediaEventTypes.length; i++) {
          trapBubbledEvent(mediaEventTypes[i], domElement);
        }
        props = rawProps;
        break;
      case 'source':
        trapBubbledEvent(TOP_ERROR, domElement);
        props = rawProps;
        break;
      case 'img':
      case 'image':
      case 'link':
        trapBubbledEvent(TOP_ERROR, domElement);
        trapBubbledEvent(TOP_LOAD, domElement);
        props = rawProps;
        break;
      case 'form':
        trapBubbledEvent(TOP_RESET, domElement);
        trapBubbledEvent(TOP_SUBMIT, domElement);
        props = rawProps;
        break;
      case 'details':
        trapBubbledEvent(TOP_TOGGLE, domElement);
        props = rawProps;
        break;
      case 'input':
        initWrapperState(domElement, rawProps);
        props = getHostProps(domElement, rawProps);
        trapBubbledEvent(TOP_INVALID, domElement);
        ensureListeningTo(rootContainerElement, 'onChange');
        break;
      case 'option':
        validateProps(domElement, rawProps);
        props = getHostProps$1(domElement, rawProps);
        break;
      case 'select':
        initWrapperState$1(domElement, rawProps);
        props = getHostProps$2(domElement, rawProps);
        trapBubbledEvent(TOP_INVALID, domElement);
        ensureListeningTo(rootContainerElement, 'onChange');
        break;
      case 'textarea':
        initWrapperState$2(domElement, rawProps);
        props = getHostProps$3(domElement, rawProps);
        trapBubbledEvent(TOP_INVALID, domElement);
        ensureListeningTo(rootContainerElement, 'onChange');
        break;
      default:
        props = rawProps;
    }
    assertValidProps(tag, props);
    setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
    switch (tag) {
      case 'input':
        track(domElement);
        postMountWrapper(domElement, rawProps, false);
        break;
      case 'textarea':
        track(domElement);
        postMountWrapper$3(domElement);
        break;
      case 'option':
        postMountWrapper$1(domElement, rawProps);
        break;
      case 'select':
        postMountWrapper$2(domElement, rawProps);
        break;
      default:
        if (typeof props.onClick === 'function') {
          trapClickOnNonInteractiveElement(domElement);
        }
        break;
    }
  }
  function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
    {
      validatePropertiesInDevelopment(tag, nextRawProps);
    }
    var updatePayload = null;
    var lastProps;
    var nextProps;
    switch (tag) {
      case 'input':
        lastProps = getHostProps(domElement, lastRawProps);
        nextProps = getHostProps(domElement, nextRawProps);
        updatePayload = [];
        break;
      case 'option':
        lastProps = getHostProps$1(domElement, lastRawProps);
        nextProps = getHostProps$1(domElement, nextRawProps);
        updatePayload = [];
        break;
      case 'select':
        lastProps = getHostProps$2(domElement, lastRawProps);
        nextProps = getHostProps$2(domElement, nextRawProps);
        updatePayload = [];
        break;
      case 'textarea':
        lastProps = getHostProps$3(domElement, lastRawProps);
        nextProps = getHostProps$3(domElement, nextRawProps);
        updatePayload = [];
        break;
      default:
        lastProps = lastRawProps;
        nextProps = nextRawProps;
        if (typeof lastProps.onClick !== 'function' && typeof nextProps.onClick === 'function') {
          trapClickOnNonInteractiveElement(domElement);
        }
        break;
    }
    assertValidProps(tag, nextProps);
    var propKey;
    var styleName;
    var styleUpdates = null;
    for (propKey in lastProps) {
      if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
        continue;
      }
      if (propKey === STYLE) {
        var lastStyle = lastProps[propKey];
        for (styleName in lastStyle) {
          if (lastStyle.hasOwnProperty(styleName)) {
            if (!styleUpdates) {
              styleUpdates = {};
            }
            styleUpdates[styleName] = '';
          }
        }
      } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN) ; else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ; else if (propKey === AUTOFOCUS) ; else if (registrationNameModules.hasOwnProperty(propKey)) {
        if (!updatePayload) {
          updatePayload = [];
        }
      } else {
        (updatePayload = updatePayload || []).push(propKey, null);
      }
    }
    for (propKey in nextProps) {
      var nextProp = nextProps[propKey];
      var lastProp = lastProps != null ? lastProps[propKey] : undefined;
      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
        continue;
      }
      if (propKey === STYLE) {
        {
          if (nextProp) {
            Object.freeze(nextProp);
          }
        }
        if (lastProp) {
          for (styleName in lastProp) {
            if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
              if (!styleUpdates) {
                styleUpdates = {};
              }
              styleUpdates[styleName] = '';
            }
          }
          for (styleName in nextProp) {
            if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
              if (!styleUpdates) {
                styleUpdates = {};
              }
              styleUpdates[styleName] = nextProp[styleName];
            }
          }
        } else {
          if (!styleUpdates) {
            if (!updatePayload) {
              updatePayload = [];
            }
            updatePayload.push(propKey, styleUpdates);
          }
          styleUpdates = nextProp;
        }
      } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
        var nextHtml = nextProp ? nextProp[HTML$1] : undefined;
        var lastHtml = lastProp ? lastProp[HTML$1] : undefined;
        if (nextHtml != null) {
          if (lastHtml !== nextHtml) {
            (updatePayload = updatePayload || []).push(propKey, nextHtml);
          }
        }
      } else if (propKey === CHILDREN) {
        if (lastProp !== nextProp && (typeof nextProp === 'string' || typeof nextProp === 'number')) {
          (updatePayload = updatePayload || []).push(propKey, '' + nextProp);
        }
      } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ; else if (registrationNameModules.hasOwnProperty(propKey)) {
        if (nextProp != null) {
          if (typeof nextProp !== 'function') {
            warnForInvalidEventListener(propKey, nextProp);
          }
          ensureListeningTo(rootContainerElement, propKey);
        }
        if (!updatePayload && lastProp !== nextProp) {
          updatePayload = [];
        }
      } else {
        (updatePayload = updatePayload || []).push(propKey, nextProp);
      }
    }
    if (styleUpdates) {
      {
        validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
      }
      (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
    }
    return updatePayload;
  }
  function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
    if (tag === 'input' && nextRawProps.type === 'radio' && nextRawProps.name != null) {
      updateChecked(domElement, nextRawProps);
    }
    var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
    var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
    updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);
    switch (tag) {
      case 'input':
        updateWrapper(domElement, nextRawProps);
        break;
      case 'textarea':
        updateWrapper$1(domElement, nextRawProps);
        break;
      case 'select':
        postUpdateWrapper(domElement, nextRawProps);
        break;
    }
  }
  function getPossibleStandardName(propName) {
    {
      var lowerCasedName = propName.toLowerCase();
      if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
        return null;
      }
      return possibleStandardNames[lowerCasedName] || null;
    }
  }
  function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement) {
    var isCustomComponentTag;
    var extraAttributeNames;
    {
      suppressHydrationWarning = rawProps[SUPPRESS_HYDRATION_WARNING] === true;
      isCustomComponentTag = isCustomComponent(tag, rawProps);
      validatePropertiesInDevelopment(tag, rawProps);
    }
    switch (tag) {
      case 'iframe':
      case 'object':
      case 'embed':
        trapBubbledEvent(TOP_LOAD, domElement);
        break;
      case 'video':
      case 'audio':
        for (var i = 0; i < mediaEventTypes.length; i++) {
          trapBubbledEvent(mediaEventTypes[i], domElement);
        }
        break;
      case 'source':
        trapBubbledEvent(TOP_ERROR, domElement);
        break;
      case 'img':
      case 'image':
      case 'link':
        trapBubbledEvent(TOP_ERROR, domElement);
        trapBubbledEvent(TOP_LOAD, domElement);
        break;
      case 'form':
        trapBubbledEvent(TOP_RESET, domElement);
        trapBubbledEvent(TOP_SUBMIT, domElement);
        break;
      case 'details':
        trapBubbledEvent(TOP_TOGGLE, domElement);
        break;
      case 'input':
        initWrapperState(domElement, rawProps);
        trapBubbledEvent(TOP_INVALID, domElement);
        ensureListeningTo(rootContainerElement, 'onChange');
        break;
      case 'option':
        validateProps(domElement, rawProps);
        break;
      case 'select':
        initWrapperState$1(domElement, rawProps);
        trapBubbledEvent(TOP_INVALID, domElement);
        ensureListeningTo(rootContainerElement, 'onChange');
        break;
      case 'textarea':
        initWrapperState$2(domElement, rawProps);
        trapBubbledEvent(TOP_INVALID, domElement);
        ensureListeningTo(rootContainerElement, 'onChange');
        break;
    }
    assertValidProps(tag, rawProps);
    {
      extraAttributeNames = new Set();
      var attributes = domElement.attributes;
      for (var _i = 0; _i < attributes.length; _i++) {
        var name = attributes[_i].name.toLowerCase();
        switch (name) {
          case 'data-reactroot':
            break;
          case 'value':
            break;
          case 'checked':
            break;
          case 'selected':
            break;
          default:
            extraAttributeNames.add(attributes[_i].name);
        }
      }
    }
    var updatePayload = null;
    for (var propKey in rawProps) {
      if (!rawProps.hasOwnProperty(propKey)) {
        continue;
      }
      var nextProp = rawProps[propKey];
      if (propKey === CHILDREN) {
        if (typeof nextProp === 'string') {
          if (domElement.textContent !== nextProp) {
            if (!suppressHydrationWarning) {
              warnForTextDifference(domElement.textContent, nextProp);
            }
            updatePayload = [CHILDREN, nextProp];
          }
        } else if (typeof nextProp === 'number') {
          if (domElement.textContent !== '' + nextProp) {
            if (!suppressHydrationWarning) {
              warnForTextDifference(domElement.textContent, nextProp);
            }
            updatePayload = [CHILDREN, '' + nextProp];
          }
        }
      } else if (registrationNameModules.hasOwnProperty(propKey)) {
        if (nextProp != null) {
          if (typeof nextProp !== 'function') {
            warnForInvalidEventListener(propKey, nextProp);
          }
          ensureListeningTo(rootContainerElement, propKey);
        }
      } else if (typeof isCustomComponentTag === 'boolean') {
        var serverValue = void 0;
        var propertyInfo = getPropertyInfo(propKey);
        if (suppressHydrationWarning) ; else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || propKey === 'value' || propKey === 'checked' || propKey === 'selected') ; else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
          var serverHTML = domElement.innerHTML;
          var nextHtml = nextProp ? nextProp[HTML$1] : undefined;
          var expectedHTML = normalizeHTML(domElement, nextHtml != null ? nextHtml : '');
          if (expectedHTML !== serverHTML) {
            warnForPropDifference(propKey, serverHTML, expectedHTML);
          }
        } else if (propKey === STYLE) {
          extraAttributeNames.delete(propKey);
          if (canDiffStyleForHydrationWarning) {
            var expectedStyle = createDangerousStringForStyles(nextProp);
            serverValue = domElement.getAttribute('style');
            if (expectedStyle !== serverValue) {
              warnForPropDifference(propKey, serverValue, expectedStyle);
            }
          }
        } else if (isCustomComponentTag) {
          extraAttributeNames.delete(propKey.toLowerCase());
          serverValue = getValueForAttribute(domElement, propKey, nextProp);
          if (nextProp !== serverValue) {
            warnForPropDifference(propKey, serverValue, nextProp);
          }
        } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
          var isMismatchDueToBadCasing = false;
          if (propertyInfo !== null) {
            extraAttributeNames.delete(propertyInfo.attributeName);
            serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
          } else {
            var ownNamespace = parentNamespace;
            if (ownNamespace === HTML_NAMESPACE$1) {
              ownNamespace = getIntrinsicNamespace(tag);
            }
            if (ownNamespace === HTML_NAMESPACE$1) {
              extraAttributeNames.delete(propKey.toLowerCase());
            } else {
              var standardName = getPossibleStandardName(propKey);
              if (standardName !== null && standardName !== propKey) {
                isMismatchDueToBadCasing = true;
                extraAttributeNames.delete(standardName);
              }
              extraAttributeNames.delete(propKey);
            }
            serverValue = getValueForAttribute(domElement, propKey, nextProp);
          }
          if (nextProp !== serverValue && !isMismatchDueToBadCasing) {
            warnForPropDifference(propKey, serverValue, nextProp);
          }
        }
      }
    }
    {
      if (extraAttributeNames.size > 0 && !suppressHydrationWarning) {
        warnForExtraAttributes(extraAttributeNames);
      }
    }
    switch (tag) {
      case 'input':
        track(domElement);
        postMountWrapper(domElement, rawProps, true);
        break;
      case 'textarea':
        track(domElement);
        postMountWrapper$3(domElement);
        break;
      case 'select':
      case 'option':
        break;
      default:
        if (typeof rawProps.onClick === 'function') {
          trapClickOnNonInteractiveElement(domElement);
        }
        break;
    }
    return updatePayload;
  }
  function diffHydratedText(textNode, text) {
    var isDifferent = textNode.nodeValue !== text;
    return isDifferent;
  }
  function warnForUnmatchedText(textNode, text) {
    {
      warnForTextDifference(textNode.nodeValue, text);
    }
  }
  function warnForDeletedHydratableElement(parentNode, child) {
    {
      if (didWarnInvalidHydration) {
        return;
      }
      didWarnInvalidHydration = true;
      error('Did not expect server HTML to contain a <%s> in <%s>.', child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
    }
  }
  function warnForDeletedHydratableText(parentNode, child) {
    {
      if (didWarnInvalidHydration) {
        return;
      }
      didWarnInvalidHydration = true;
      error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
    }
  }
  function warnForInsertedHydratedElement(parentNode, tag, props) {
    {
      if (didWarnInvalidHydration) {
        return;
      }
      didWarnInvalidHydration = true;
      error('Expected server HTML to contain a matching <%s> in <%s>.', tag, parentNode.nodeName.toLowerCase());
    }
  }
  function warnForInsertedHydratedText(parentNode, text) {
    {
      if (text === '') {
        return;
      }
      if (didWarnInvalidHydration) {
        return;
      }
      didWarnInvalidHydration = true;
      error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
    }
  }
  function restoreControlledState$3(domElement, tag, props) {
    switch (tag) {
      case 'input':
        restoreControlledState(domElement, props);
        return;
      case 'textarea':
        restoreControlledState$2(domElement, props);
        return;
      case 'select':
        restoreControlledState$1(domElement, props);
        return;
    }
  }
  function getActiveElement(doc) {
    doc = doc || (typeof document !== 'undefined' ? document : undefined);
    if (typeof doc === 'undefined') {
      return null;
    }
    try {
      return doc.activeElement || doc.body;
    } catch (e) {
      return doc.body;
    }
  }
  function getLeafNode(node) {
    while (node && node.firstChild) {
      node = node.firstChild;
    }
    return node;
  }
  function getSiblingNode(node) {
    while (node) {
      if (node.nextSibling) {
        return node.nextSibling;
      }
      node = node.parentNode;
    }
  }
  function getNodeForCharacterOffset(root, offset) {
    var node = getLeafNode(root);
    var nodeStart = 0;
    var nodeEnd = 0;
    while (node) {
      if (node.nodeType === TEXT_NODE) {
        nodeEnd = nodeStart + node.textContent.length;
        if (nodeStart <= offset && nodeEnd >= offset) {
          return {
            node: node,
            offset: offset - nodeStart
          };
        }
        nodeStart = nodeEnd;
      }
      node = getLeafNode(getSiblingNode(node));
    }
  }
  function getOffsets(outerNode) {
    var ownerDocument = outerNode.ownerDocument;
    var win = ownerDocument && ownerDocument.defaultView || window;
    var selection = win.getSelection && win.getSelection();
    if (!selection || selection.rangeCount === 0) {
      return null;
    }
    var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset;
    try {
      anchorNode.nodeType;
      focusNode.nodeType;
    } catch (e) {
      return null;
    }
    return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
  }
  function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
    var length = 0;
    var start = -1;
    var end = -1;
    var indexWithinAnchor = 0;
    var indexWithinFocus = 0;
    var node = outerNode;
    var parentNode = null;
    outer: while (true) {
      var next = null;
      while (true) {
        if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
          start = length + anchorOffset;
        }
        if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
          end = length + focusOffset;
        }
        if (node.nodeType === TEXT_NODE) {
          length += node.nodeValue.length;
        }
        if ((next = node.firstChild) === null) {
          break;
        }
        parentNode = node;
        node = next;
      }
      while (true) {
        if (node === outerNode) {
          break outer;
        }
        if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
          start = length;
        }
        if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
          end = length;
        }
        if ((next = node.nextSibling) !== null) {
          break;
        }
        node = parentNode;
        parentNode = node.parentNode;
      }
      node = next;
    }
    if (start === -1 || end === -1) {
      return null;
    }
    return {
      start: start,
      end: end
    };
  }
  function setOffsets(node, offsets) {
    var doc = node.ownerDocument || document;
    var win = doc && doc.defaultView || window;
    if (!win.getSelection) {
      return;
    }
    var selection = win.getSelection();
    var length = node.textContent.length;
    var start = Math.min(offsets.start, length);
    var end = offsets.end === undefined ? start : Math.min(offsets.end, length);
    if (!selection.extend && start > end) {
      var temp = end;
      end = start;
      start = temp;
    }
    var startMarker = getNodeForCharacterOffset(node, start);
    var endMarker = getNodeForCharacterOffset(node, end);
    if (startMarker && endMarker) {
      if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
        return;
      }
      var range = doc.createRange();
      range.setStart(startMarker.node, startMarker.offset);
      selection.removeAllRanges();
      if (start > end) {
        selection.addRange(range);
        selection.extend(endMarker.node, endMarker.offset);
      } else {
        range.setEnd(endMarker.node, endMarker.offset);
        selection.addRange(range);
      }
    }
  }
  function isTextNode(node) {
    return node && node.nodeType === TEXT_NODE;
  }
  function containsNode(outerNode, innerNode) {
    if (!outerNode || !innerNode) {
      return false;
    } else if (outerNode === innerNode) {
      return true;
    } else if (isTextNode(outerNode)) {
      return false;
    } else if (isTextNode(innerNode)) {
      return containsNode(outerNode, innerNode.parentNode);
    } else if (('contains' in outerNode)) {
      return outerNode.contains(innerNode);
    } else if (outerNode.compareDocumentPosition) {
      return !!(outerNode.compareDocumentPosition(innerNode) & 16);
    } else {
      return false;
    }
  }
  function isInDocument(node) {
    return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
  }
  function isSameOriginFrame(iframe) {
    try {
      return typeof iframe.contentWindow.location.href === 'string';
    } catch (err) {
      return false;
    }
  }
  function getActiveElementDeep() {
    var win = window;
    var element = getActiveElement();
    while (element instanceof win.HTMLIFrameElement) {
      if (isSameOriginFrame(element)) {
        win = element.contentWindow;
      } else {
        return element;
      }
      element = getActiveElement(win.document);
    }
    return element;
  }
  function hasSelectionCapabilities(elem) {
    var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
    return nodeName && (nodeName === 'input' && (elem.type === 'text' || elem.type === 'search' || elem.type === 'tel' || elem.type === 'url' || elem.type === 'password') || nodeName === 'textarea' || elem.contentEditable === 'true');
  }
  function getSelectionInformation() {
    var focusedElem = getActiveElementDeep();
    return {
      activeElementDetached: null,
      focusedElem: focusedElem,
      selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
    };
  }
  function restoreSelection(priorSelectionInformation) {
    var curFocusedElem = getActiveElementDeep();
    var priorFocusedElem = priorSelectionInformation.focusedElem;
    var priorSelectionRange = priorSelectionInformation.selectionRange;
    if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
      if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
        setSelection(priorFocusedElem, priorSelectionRange);
      }
      var ancestors = [];
      var ancestor = priorFocusedElem;
      while (ancestor = ancestor.parentNode) {
        if (ancestor.nodeType === ELEMENT_NODE) {
          ancestors.push({
            element: ancestor,
            left: ancestor.scrollLeft,
            top: ancestor.scrollTop
          });
        }
      }
      if (typeof priorFocusedElem.focus === 'function') {
        priorFocusedElem.focus();
      }
      for (var i = 0; i < ancestors.length; i++) {
        var info = ancestors[i];
        info.element.scrollLeft = info.left;
        info.element.scrollTop = info.top;
      }
    }
  }
  function getSelection(input) {
    var selection;
    if (('selectionStart' in input)) {
      selection = {
        start: input.selectionStart,
        end: input.selectionEnd
      };
    } else {
      selection = getOffsets(input);
    }
    return selection || ({
      start: 0,
      end: 0
    });
  }
  function setSelection(input, offsets) {
    var start = offsets.start, end = offsets.end;
    if (end === undefined) {
      end = start;
    }
    if (('selectionStart' in input)) {
      input.selectionStart = start;
      input.selectionEnd = Math.min(end, input.value.length);
    } else {
      setOffsets(input, offsets);
    }
  }
  var validateDOMNesting = function () {};
  var updatedAncestorInfo = function () {};
  {
    var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp'];
    var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template', 'foreignObject', 'desc', 'title'];
    var buttonScopeTags = inScopeTags.concat(['button']);
    var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];
    var emptyAncestorInfo = {
      current: null,
      formTag: null,
      aTagInScope: null,
      buttonTagInScope: null,
      nobrTagInScope: null,
      pTagInButtonScope: null,
      listItemTagAutoclosing: null,
      dlItemTagAutoclosing: null
    };
    updatedAncestorInfo = function (oldInfo, tag) {
      var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);
      var info = {
        tag: tag
      };
      if (inScopeTags.indexOf(tag) !== -1) {
        ancestorInfo.aTagInScope = null;
        ancestorInfo.buttonTagInScope = null;
        ancestorInfo.nobrTagInScope = null;
      }
      if (buttonScopeTags.indexOf(tag) !== -1) {
        ancestorInfo.pTagInButtonScope = null;
      }
      if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
        ancestorInfo.listItemTagAutoclosing = null;
        ancestorInfo.dlItemTagAutoclosing = null;
      }
      ancestorInfo.current = info;
      if (tag === 'form') {
        ancestorInfo.formTag = info;
      }
      if (tag === 'a') {
        ancestorInfo.aTagInScope = info;
      }
      if (tag === 'button') {
        ancestorInfo.buttonTagInScope = info;
      }
      if (tag === 'nobr') {
        ancestorInfo.nobrTagInScope = info;
      }
      if (tag === 'p') {
        ancestorInfo.pTagInButtonScope = info;
      }
      if (tag === 'li') {
        ancestorInfo.listItemTagAutoclosing = info;
      }
      if (tag === 'dd' || tag === 'dt') {
        ancestorInfo.dlItemTagAutoclosing = info;
      }
      return ancestorInfo;
    };
    var isTagValidWithParent = function (tag, parentTag) {
      switch (parentTag) {
        case 'select':
          return tag === 'option' || tag === 'optgroup' || tag === '#text';
        case 'optgroup':
          return tag === 'option' || tag === '#text';
        case 'option':
          return tag === '#text';
        case 'tr':
          return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';
        case 'tbody':
        case 'thead':
        case 'tfoot':
          return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';
        case 'colgroup':
          return tag === 'col' || tag === 'template';
        case 'table':
          return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';
        case 'head':
          return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';
        case 'html':
          return tag === 'head' || tag === 'body' || tag === 'frameset';
        case 'frameset':
          return tag === 'frame';
        case '#document':
          return tag === 'html';
      }
      switch (tag) {
        case 'h1':
        case 'h2':
        case 'h3':
        case 'h4':
        case 'h5':
        case 'h6':
          return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';
        case 'rp':
        case 'rt':
          return impliedEndTags.indexOf(parentTag) === -1;
        case 'body':
        case 'caption':
        case 'col':
        case 'colgroup':
        case 'frameset':
        case 'frame':
        case 'head':
        case 'html':
        case 'tbody':
        case 'td':
        case 'tfoot':
        case 'th':
        case 'thead':
        case 'tr':
          return parentTag == null;
      }
      return true;
    };
    var findInvalidAncestorForTag = function (tag, ancestorInfo) {
      switch (tag) {
        case 'address':
        case 'article':
        case 'aside':
        case 'blockquote':
        case 'center':
        case 'details':
        case 'dialog':
        case 'dir':
        case 'div':
        case 'dl':
        case 'fieldset':
        case 'figcaption':
        case 'figure':
        case 'footer':
        case 'header':
        case 'hgroup':
        case 'main':
        case 'menu':
        case 'nav':
        case 'ol':
        case 'p':
        case 'section':
        case 'summary':
        case 'ul':
        case 'pre':
        case 'listing':
        case 'table':
        case 'hr':
        case 'xmp':
        case 'h1':
        case 'h2':
        case 'h3':
        case 'h4':
        case 'h5':
        case 'h6':
          return ancestorInfo.pTagInButtonScope;
        case 'form':
          return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
        case 'li':
          return ancestorInfo.listItemTagAutoclosing;
        case 'dd':
        case 'dt':
          return ancestorInfo.dlItemTagAutoclosing;
        case 'button':
          return ancestorInfo.buttonTagInScope;
        case 'a':
          return ancestorInfo.aTagInScope;
        case 'nobr':
          return ancestorInfo.nobrTagInScope;
      }
      return null;
    };
    var didWarn$1 = {};
    validateDOMNesting = function (childTag, childText, ancestorInfo) {
      ancestorInfo = ancestorInfo || emptyAncestorInfo;
      var parentInfo = ancestorInfo.current;
      var parentTag = parentInfo && parentInfo.tag;
      if (childText != null) {
        if (childTag != null) {
          error('validateDOMNesting: when childText is passed, childTag should be null');
        }
        childTag = '#text';
      }
      var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
      var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
      var invalidParentOrAncestor = invalidParent || invalidAncestor;
      if (!invalidParentOrAncestor) {
        return;
      }
      var ancestorTag = invalidParentOrAncestor.tag;
      var addendum = getCurrentFiberStackInDev();
      var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + addendum;
      if (didWarn$1[warnKey]) {
        return;
      }
      didWarn$1[warnKey] = true;
      var tagDisplayName = childTag;
      var whitespaceInfo = '';
      if (childTag === '#text') {
        if ((/\S/).test(childText)) {
          tagDisplayName = 'Text nodes';
        } else {
          tagDisplayName = 'Whitespace text nodes';
          whitespaceInfo = " Make sure you don't have any extra whitespace between tags on " + 'each line of your source code.';
        }
      } else {
        tagDisplayName = '<' + childTag + '>';
      }
      if (invalidParent) {
        var info = '';
        if (ancestorTag === 'table' && childTag === 'tr') {
          info += ' Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by ' + 'the browser.';
        }
        error('validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s', tagDisplayName, ancestorTag, whitespaceInfo, info);
      } else {
        error('validateDOMNesting(...): %s cannot appear as a descendant of ' + '<%s>.', tagDisplayName, ancestorTag);
      }
    };
  }
  var SUPPRESS_HYDRATION_WARNING$1;
  {
    SUPPRESS_HYDRATION_WARNING$1 = 'suppressHydrationWarning';
  }
  var SUSPENSE_START_DATA = '$';
  var SUSPENSE_END_DATA = '/$';
  var SUSPENSE_PENDING_START_DATA = '$?';
  var SUSPENSE_FALLBACK_START_DATA = '$!';
  var STYLE$1 = 'style';
  var eventsEnabled = null;
  var selectionInformation = null;
  function shouldAutoFocusHostComponent(type, props) {
    switch (type) {
      case 'button':
      case 'input':
      case 'select':
      case 'textarea':
        return !!props.autoFocus;
    }
    return false;
  }
  function getRootHostContext(rootContainerInstance) {
    var type;
    var namespace;
    var nodeType = rootContainerInstance.nodeType;
    switch (nodeType) {
      case DOCUMENT_NODE:
      case DOCUMENT_FRAGMENT_NODE:
        {
          type = nodeType === DOCUMENT_NODE ? '#document' : '#fragment';
          var root = rootContainerInstance.documentElement;
          namespace = root ? root.namespaceURI : getChildNamespace(null, '');
          break;
        }
      default:
        {
          var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
          var ownNamespace = container.namespaceURI || null;
          type = container.tagName;
          namespace = getChildNamespace(ownNamespace, type);
          break;
        }
    }
    {
      var validatedTag = type.toLowerCase();
      var ancestorInfo = updatedAncestorInfo(null, validatedTag);
      return {
        namespace: namespace,
        ancestorInfo: ancestorInfo
      };
    }
  }
  function getChildHostContext(parentHostContext, type, rootContainerInstance) {
    {
      var parentHostContextDev = parentHostContext;
      var namespace = getChildNamespace(parentHostContextDev.namespace, type);
      var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
      return {
        namespace: namespace,
        ancestorInfo: ancestorInfo
      };
    }
  }
  function getPublicInstance(instance) {
    return instance;
  }
  function prepareForCommit(containerInfo) {
    eventsEnabled = isEnabled();
    selectionInformation = getSelectionInformation();
    setEnabled(false);
  }
  function resetAfterCommit(containerInfo) {
    restoreSelection(selectionInformation);
    setEnabled(eventsEnabled);
    eventsEnabled = null;
    selectionInformation = null;
  }
  function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
    var parentNamespace;
    {
      var hostContextDev = hostContext;
      validateDOMNesting(type, null, hostContextDev.ancestorInfo);
      if (typeof props.children === 'string' || typeof props.children === 'number') {
        var string = '' + props.children;
        var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
        validateDOMNesting(null, string, ownAncestorInfo);
      }
      parentNamespace = hostContextDev.namespace;
    }
    var domElement = createElement(type, props, rootContainerInstance, parentNamespace);
    precacheFiberNode(internalInstanceHandle, domElement);
    updateFiberProps(domElement, props);
    return domElement;
  }
  function appendInitialChild(parentInstance, child) {
    parentInstance.appendChild(child);
  }
  function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
    setInitialProperties(domElement, type, props, rootContainerInstance);
    return shouldAutoFocusHostComponent(type, props);
  }
  function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
    {
      var hostContextDev = hostContext;
      if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === 'string' || typeof newProps.children === 'number')) {
        var string = '' + newProps.children;
        var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
        validateDOMNesting(null, string, ownAncestorInfo);
      }
    }
    return diffProperties(domElement, type, oldProps, newProps, rootContainerInstance);
  }
  function shouldSetTextContent(type, props) {
    return type === 'textarea' || type === 'option' || type === 'noscript' || typeof props.children === 'string' || typeof props.children === 'number' || typeof props.dangerouslySetInnerHTML === 'object' && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
  }
  function shouldDeprioritizeSubtree(type, props) {
    return !!props.hidden;
  }
  function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
    {
      var hostContextDev = hostContext;
      validateDOMNesting(null, text, hostContextDev.ancestorInfo);
    }
    var textNode = createTextNode(text, rootContainerInstance);
    precacheFiberNode(internalInstanceHandle, textNode);
    return textNode;
  }
  var scheduleTimeout = typeof setTimeout === 'function' ? setTimeout : undefined;
  var cancelTimeout = typeof clearTimeout === 'function' ? clearTimeout : undefined;
  var noTimeout = -1;
  function commitMount(domElement, type, newProps, internalInstanceHandle) {
    if (shouldAutoFocusHostComponent(type, newProps)) {
      domElement.focus();
    }
  }
  function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
    updateFiberProps(domElement, newProps);
    updateProperties(domElement, updatePayload, type, oldProps, newProps);
  }
  function resetTextContent(domElement) {
    setTextContent(domElement, '');
  }
  function commitTextUpdate(textInstance, oldText, newText) {
    textInstance.nodeValue = newText;
  }
  function appendChild(parentInstance, child) {
    parentInstance.appendChild(child);
  }
  function appendChildToContainer(container, child) {
    var parentNode;
    if (container.nodeType === COMMENT_NODE) {
      parentNode = container.parentNode;
      parentNode.insertBefore(child, container);
    } else {
      parentNode = container;
      parentNode.appendChild(child);
    }
    var reactRootContainer = container._reactRootContainer;
    if ((reactRootContainer === null || reactRootContainer === undefined) && parentNode.onclick === null) {
      trapClickOnNonInteractiveElement(parentNode);
    }
  }
  function insertBefore(parentInstance, child, beforeChild) {
    parentInstance.insertBefore(child, beforeChild);
  }
  function insertInContainerBefore(container, child, beforeChild) {
    if (container.nodeType === COMMENT_NODE) {
      container.parentNode.insertBefore(child, beforeChild);
    } else {
      container.insertBefore(child, beforeChild);
    }
  }
  function removeChild(parentInstance, child) {
    parentInstance.removeChild(child);
  }
  function removeChildFromContainer(container, child) {
    if (container.nodeType === COMMENT_NODE) {
      container.parentNode.removeChild(child);
    } else {
      container.removeChild(child);
    }
  }
  function hideInstance(instance) {
    instance = instance;
    var style = instance.style;
    if (typeof style.setProperty === 'function') {
      style.setProperty('display', 'none', 'important');
    } else {
      style.display = 'none';
    }
  }
  function hideTextInstance(textInstance) {
    textInstance.nodeValue = '';
  }
  function unhideInstance(instance, props) {
    instance = instance;
    var styleProp = props[STYLE$1];
    var display = styleProp !== undefined && styleProp !== null && styleProp.hasOwnProperty('display') ? styleProp.display : null;
    instance.style.display = dangerousStyleValue('display', display);
  }
  function unhideTextInstance(textInstance, text) {
    textInstance.nodeValue = text;
  }
  function canHydrateInstance(instance, type, props) {
    if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
      return null;
    }
    return instance;
  }
  function canHydrateTextInstance(instance, text) {
    if (text === '' || instance.nodeType !== TEXT_NODE) {
      return null;
    }
    return instance;
  }
  function isSuspenseInstancePending(instance) {
    return instance.data === SUSPENSE_PENDING_START_DATA;
  }
  function isSuspenseInstanceFallback(instance) {
    return instance.data === SUSPENSE_FALLBACK_START_DATA;
  }
  function getNextHydratable(node) {
    for (; node != null; node = node.nextSibling) {
      var nodeType = node.nodeType;
      if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
        break;
      }
    }
    return node;
  }
  function getNextHydratableSibling(instance) {
    return getNextHydratable(instance.nextSibling);
  }
  function getFirstHydratableChild(parentInstance) {
    return getNextHydratable(parentInstance.firstChild);
  }
  function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
    precacheFiberNode(internalInstanceHandle, instance);
    updateFiberProps(instance, props);
    var parentNamespace;
    {
      var hostContextDev = hostContext;
      parentNamespace = hostContextDev.namespace;
    }
    return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance);
  }
  function hydrateTextInstance(textInstance, text, internalInstanceHandle) {
    precacheFiberNode(internalInstanceHandle, textInstance);
    return diffHydratedText(textInstance, text);
  }
  function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
    var node = suspenseInstance.nextSibling;
    var depth = 0;
    while (node) {
      if (node.nodeType === COMMENT_NODE) {
        var data = node.data;
        if (data === SUSPENSE_END_DATA) {
          if (depth === 0) {
            return getNextHydratableSibling(node);
          } else {
            depth--;
          }
        } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
          depth++;
        }
      }
      node = node.nextSibling;
    }
    return null;
  }
  function getParentSuspenseInstance(targetInstance) {
    var node = targetInstance.previousSibling;
    var depth = 0;
    while (node) {
      if (node.nodeType === COMMENT_NODE) {
        var data = node.data;
        if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
          if (depth === 0) {
            return node;
          } else {
            depth--;
          }
        } else if (data === SUSPENSE_END_DATA) {
          depth++;
        }
      }
      node = node.previousSibling;
    }
    return null;
  }
  function commitHydratedContainer(container) {
    retryIfBlockedOn(container);
  }
  function commitHydratedSuspenseInstance(suspenseInstance) {
    retryIfBlockedOn(suspenseInstance);
  }
  function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text) {
    {
      warnForUnmatchedText(textInstance, text);
    }
  }
  function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text) {
    if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
      warnForUnmatchedText(textInstance, text);
    }
  }
  function didNotHydrateContainerInstance(parentContainer, instance) {
    {
      if (instance.nodeType === ELEMENT_NODE) {
        warnForDeletedHydratableElement(parentContainer, instance);
      } else if (instance.nodeType === COMMENT_NODE) ; else {
        warnForDeletedHydratableText(parentContainer, instance);
      }
    }
  }
  function didNotHydrateInstance(parentType, parentProps, parentInstance, instance) {
    if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
      if (instance.nodeType === ELEMENT_NODE) {
        warnForDeletedHydratableElement(parentInstance, instance);
      } else if (instance.nodeType === COMMENT_NODE) ; else {
        warnForDeletedHydratableText(parentInstance, instance);
      }
    }
  }
  function didNotFindHydratableContainerInstance(parentContainer, type, props) {
    {
      warnForInsertedHydratedElement(parentContainer, type);
    }
  }
  function didNotFindHydratableContainerTextInstance(parentContainer, text) {
    {
      warnForInsertedHydratedText(parentContainer, text);
    }
  }
  function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props) {
    if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
      warnForInsertedHydratedElement(parentInstance, type);
    }
  }
  function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text) {
    if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
      warnForInsertedHydratedText(parentInstance, text);
    }
  }
  function didNotFindHydratableSuspenseInstance(parentType, parentProps, parentInstance) {
    if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) ;
  }
  var randomKey = Math.random().toString(36).slice(2);
  var internalInstanceKey = '__reactInternalInstance$' + randomKey;
  var internalEventHandlersKey = '__reactEventHandlers$' + randomKey;
  var internalContainerInstanceKey = '__reactContainere$' + randomKey;
  function precacheFiberNode(hostInst, node) {
    node[internalInstanceKey] = hostInst;
  }
  function markContainerAsRoot(hostRoot, node) {
    node[internalContainerInstanceKey] = hostRoot;
  }
  function unmarkContainerAsRoot(node) {
    node[internalContainerInstanceKey] = null;
  }
  function isContainerMarkedAsRoot(node) {
    return !!node[internalContainerInstanceKey];
  }
  function getClosestInstanceFromNode(targetNode) {
    var targetInst = targetNode[internalInstanceKey];
    if (targetInst) {
      return targetInst;
    }
    var parentNode = targetNode.parentNode;
    while (parentNode) {
      targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
      if (targetInst) {
        var alternate = targetInst.alternate;
        if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
          var suspenseInstance = getParentSuspenseInstance(targetNode);
          while (suspenseInstance !== null) {
            var targetSuspenseInst = suspenseInstance[internalInstanceKey];
            if (targetSuspenseInst) {
              return targetSuspenseInst;
            }
            suspenseInstance = getParentSuspenseInstance(suspenseInstance);
          }
        }
        return targetInst;
      }
      targetNode = parentNode;
      parentNode = targetNode.parentNode;
    }
    return null;
  }
  function getInstanceFromNode$1(node) {
    var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];
    if (inst) {
      if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
        return inst;
      } else {
        return null;
      }
    }
    return null;
  }
  function getNodeFromInstance$1(inst) {
    if (inst.tag === HostComponent || inst.tag === HostText) {
      return inst.stateNode;
    }
    {
      {
        throw Error("getNodeFromInstance: Invalid argument.");
      }
    }
  }
  function getFiberCurrentPropsFromNode$1(node) {
    return node[internalEventHandlersKey] || null;
  }
  function updateFiberProps(node, props) {
    node[internalEventHandlersKey] = props;
  }
  function getParent(inst) {
    do {
      inst = inst.return;
    } while (inst && inst.tag !== HostComponent);
    if (inst) {
      return inst;
    }
    return null;
  }
  function getLowestCommonAncestor(instA, instB) {
    var depthA = 0;
    for (var tempA = instA; tempA; tempA = getParent(tempA)) {
      depthA++;
    }
    var depthB = 0;
    for (var tempB = instB; tempB; tempB = getParent(tempB)) {
      depthB++;
    }
    while (depthA - depthB > 0) {
      instA = getParent(instA);
      depthA--;
    }
    while (depthB - depthA > 0) {
      instB = getParent(instB);
      depthB--;
    }
    var depth = depthA;
    while (depth--) {
      if (instA === instB || instA === instB.alternate) {
        return instA;
      }
      instA = getParent(instA);
      instB = getParent(instB);
    }
    return null;
  }
  function traverseTwoPhase(inst, fn, arg) {
    var path = [];
    while (inst) {
      path.push(inst);
      inst = getParent(inst);
    }
    var i;
    for (i = path.length; i-- > 0; ) {
      fn(path[i], 'captured', arg);
    }
    for (i = 0; i < path.length; i++) {
      fn(path[i], 'bubbled', arg);
    }
  }
  function traverseEnterLeave(from, to, fn, argFrom, argTo) {
    var common = from && to ? getLowestCommonAncestor(from, to) : null;
    var pathFrom = [];
    while (true) {
      if (!from) {
        break;
      }
      if (from === common) {
        break;
      }
      var alternate = from.alternate;
      if (alternate !== null && alternate === common) {
        break;
      }
      pathFrom.push(from);
      from = getParent(from);
    }
    var pathTo = [];
    while (true) {
      if (!to) {
        break;
      }
      if (to === common) {
        break;
      }
      var _alternate = to.alternate;
      if (_alternate !== null && _alternate === common) {
        break;
      }
      pathTo.push(to);
      to = getParent(to);
    }
    for (var i = 0; i < pathFrom.length; i++) {
      fn(pathFrom[i], 'bubbled', argFrom);
    }
    for (var _i = pathTo.length; _i-- > 0; ) {
      fn(pathTo[_i], 'captured', argTo);
    }
  }
  function isInteractive(tag) {
    return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
  }
  function shouldPreventMouseEvent(name, type, props) {
    switch (name) {
      case 'onClick':
      case 'onClickCapture':
      case 'onDoubleClick':
      case 'onDoubleClickCapture':
      case 'onMouseDown':
      case 'onMouseDownCapture':
      case 'onMouseMove':
      case 'onMouseMoveCapture':
      case 'onMouseUp':
      case 'onMouseUpCapture':
      case 'onMouseEnter':
        return !!(props.disabled && isInteractive(type));
      default:
        return false;
    }
  }
  function getListener(inst, registrationName) {
    var listener;
    var stateNode = inst.stateNode;
    if (!stateNode) {
      return null;
    }
    var props = getFiberCurrentPropsFromNode(stateNode);
    if (!props) {
      return null;
    }
    listener = props[registrationName];
    if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
      return null;
    }
    if (!(!listener || typeof listener === 'function')) {
      {
        throw Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
      }
    }
    return listener;
  }
  function listenerAtPhase(inst, event, propagationPhase) {
    var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
    return getListener(inst, registrationName);
  }
  function accumulateDirectionalDispatches(inst, phase, event) {
    {
      if (!inst) {
        error('Dispatching inst must not be null');
      }
    }
    var listener = listenerAtPhase(inst, event, phase);
    if (listener) {
      event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
      event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
    }
  }
  function accumulateTwoPhaseDispatchesSingle(event) {
    if (event && event.dispatchConfig.phasedRegistrationNames) {
      traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
    }
  }
  function accumulateDispatches(inst, ignoredDirection, event) {
    if (inst && event && event.dispatchConfig.registrationName) {
      var registrationName = event.dispatchConfig.registrationName;
      var listener = getListener(inst, registrationName);
      if (listener) {
        event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
        event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
      }
    }
  }
  function accumulateDirectDispatchesSingle(event) {
    if (event && event.dispatchConfig.registrationName) {
      accumulateDispatches(event._targetInst, null, event);
    }
  }
  function accumulateTwoPhaseDispatches(events) {
    forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
  }
  function accumulateEnterLeaveDispatches(leave, enter, from, to) {
    traverseEnterLeave(from, to, accumulateDispatches, leave, enter);
  }
  function accumulateDirectDispatches(events) {
    forEachAccumulated(events, accumulateDirectDispatchesSingle);
  }
  var root = null;
  var startText = null;
  var fallbackText = null;
  function initialize(nativeEventTarget) {
    root = nativeEventTarget;
    startText = getText();
    return true;
  }
  function reset() {
    root = null;
    startText = null;
    fallbackText = null;
  }
  function getData() {
    if (fallbackText) {
      return fallbackText;
    }
    var start;
    var startValue = startText;
    var startLength = startValue.length;
    var end;
    var endValue = getText();
    var endLength = endValue.length;
    for (start = 0; start < startLength; start++) {
      if (startValue[start] !== endValue[start]) {
        break;
      }
    }
    var minEnd = startLength - start;
    for (end = 1; end <= minEnd; end++) {
      if (startValue[startLength - end] !== endValue[endLength - end]) {
        break;
      }
    }
    var sliceTail = end > 1 ? 1 - end : undefined;
    fallbackText = endValue.slice(start, sliceTail);
    return fallbackText;
  }
  function getText() {
    if (('value' in root)) {
      return root.value;
    }
    return root.textContent;
  }
  var EVENT_POOL_SIZE = 10;
  var EventInterface = {
    type: null,
    target: null,
    currentTarget: function () {
      return null;
    },
    eventPhase: null,
    bubbles: null,
    cancelable: null,
    timeStamp: function (event) {
      return event.timeStamp || Date.now();
    },
    defaultPrevented: null,
    isTrusted: null
  };
  function functionThatReturnsTrue() {
    return true;
  }
  function functionThatReturnsFalse() {
    return false;
  }
  function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
    {
      delete this.nativeEvent;
      delete this.preventDefault;
      delete this.stopPropagation;
      delete this.isDefaultPrevented;
      delete this.isPropagationStopped;
    }
    this.dispatchConfig = dispatchConfig;
    this._targetInst = targetInst;
    this.nativeEvent = nativeEvent;
    var Interface = this.constructor.Interface;
    for (var propName in Interface) {
      if (!Interface.hasOwnProperty(propName)) {
        continue;
      }
      {
        delete this[propName];
      }
      var normalize = Interface[propName];
      if (normalize) {
        this[propName] = normalize(nativeEvent);
      } else {
        if (propName === 'target') {
          this.target = nativeEventTarget;
        } else {
          this[propName] = nativeEvent[propName];
        }
      }
    }
    var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
    if (defaultPrevented) {
      this.isDefaultPrevented = functionThatReturnsTrue;
    } else {
      this.isDefaultPrevented = functionThatReturnsFalse;
    }
    this.isPropagationStopped = functionThatReturnsFalse;
    return this;
  }
  _assign(SyntheticEvent.prototype, {
    preventDefault: function () {
      this.defaultPrevented = true;
      var event = this.nativeEvent;
      if (!event) {
        return;
      }
      if (event.preventDefault) {
        event.preventDefault();
      } else if (typeof event.returnValue !== 'unknown') {
        event.returnValue = false;
      }
      this.isDefaultPrevented = functionThatReturnsTrue;
    },
    stopPropagation: function () {
      var event = this.nativeEvent;
      if (!event) {
        return;
      }
      if (event.stopPropagation) {
        event.stopPropagation();
      } else if (typeof event.cancelBubble !== 'unknown') {
        event.cancelBubble = true;
      }
      this.isPropagationStopped = functionThatReturnsTrue;
    },
    persist: function () {
      this.isPersistent = functionThatReturnsTrue;
    },
    isPersistent: functionThatReturnsFalse,
    destructor: function () {
      var Interface = this.constructor.Interface;
      for (var propName in Interface) {
        {
          Object.defineProperty(this, propName, getPooledWarningPropertyDefinition(propName, Interface[propName]));
        }
      }
      this.dispatchConfig = null;
      this._targetInst = null;
      this.nativeEvent = null;
      this.isDefaultPrevented = functionThatReturnsFalse;
      this.isPropagationStopped = functionThatReturnsFalse;
      this._dispatchListeners = null;
      this._dispatchInstances = null;
      {
        Object.defineProperty(this, 'nativeEvent', getPooledWarningPropertyDefinition('nativeEvent', null));
        Object.defineProperty(this, 'isDefaultPrevented', getPooledWarningPropertyDefinition('isDefaultPrevented', functionThatReturnsFalse));
        Object.defineProperty(this, 'isPropagationStopped', getPooledWarningPropertyDefinition('isPropagationStopped', functionThatReturnsFalse));
        Object.defineProperty(this, 'preventDefault', getPooledWarningPropertyDefinition('preventDefault', function () {}));
        Object.defineProperty(this, 'stopPropagation', getPooledWarningPropertyDefinition('stopPropagation', function () {}));
      }
    }
  });
  SyntheticEvent.Interface = EventInterface;
  SyntheticEvent.extend = function (Interface) {
    var Super = this;
    var E = function () {};
    E.prototype = Super.prototype;
    var prototype = new E();
    function Class() {
      return Super.apply(this, arguments);
    }
    _assign(prototype, Class.prototype);
    Class.prototype = prototype;
    Class.prototype.constructor = Class;
    Class.Interface = _assign({}, Super.Interface, Interface);
    Class.extend = Super.extend;
    addEventPoolingTo(Class);
    return Class;
  };
  addEventPoolingTo(SyntheticEvent);
  function getPooledWarningPropertyDefinition(propName, getVal) {
    var isFunction = typeof getVal === 'function';
    return {
      configurable: true,
      set: set,
      get: get
    };
    function set(val) {
      var action = isFunction ? 'setting the method' : 'setting the property';
      warn(action, 'This is effectively a no-op');
      return val;
    }
    function get() {
      var action = isFunction ? 'accessing the method' : 'accessing the property';
      var result = isFunction ? 'This is a no-op function' : 'This is set to null';
      warn(action, result);
      return getVal;
    }
    function warn(action, result) {
      {
        error("This synthetic event is reused for performance reasons. If you're seeing this, " + "you're %s `%s` on a released/nullified synthetic event. %s. " + 'If you must keep the original synthetic event around, use event.persist(). ' + 'See https://fb.me/react-event-pooling for more information.', action, propName, result);
      }
    }
  }
  function getPooledEvent(dispatchConfig, targetInst, nativeEvent, nativeInst) {
    var EventConstructor = this;
    if (EventConstructor.eventPool.length) {
      var instance = EventConstructor.eventPool.pop();
      EventConstructor.call(instance, dispatchConfig, targetInst, nativeEvent, nativeInst);
      return instance;
    }
    return new EventConstructor(dispatchConfig, targetInst, nativeEvent, nativeInst);
  }
  function releasePooledEvent(event) {
    var EventConstructor = this;
    if (!(event instanceof EventConstructor)) {
      {
        throw Error("Trying to release an event instance into a pool of a different type.");
      }
    }
    event.destructor();
    if (EventConstructor.eventPool.length < EVENT_POOL_SIZE) {
      EventConstructor.eventPool.push(event);
    }
  }
  function addEventPoolingTo(EventConstructor) {
    EventConstructor.eventPool = [];
    EventConstructor.getPooled = getPooledEvent;
    EventConstructor.release = releasePooledEvent;
  }
  var SyntheticCompositionEvent = SyntheticEvent.extend({
    data: null
  });
  var SyntheticInputEvent = SyntheticEvent.extend({
    data: null
  });
  var END_KEYCODES = [9, 13, 27, 32];
  var START_KEYCODE = 229;
  var canUseCompositionEvent = canUseDOM && ('CompositionEvent' in window);
  var documentMode = null;
  if (canUseDOM && ('documentMode' in document)) {
    documentMode = document.documentMode;
  }
  var canUseTextInputEvent = canUseDOM && ('TextEvent' in window) && !documentMode;
  var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
  var SPACEBAR_CODE = 32;
  var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
  var eventTypes = {
    beforeInput: {
      phasedRegistrationNames: {
        bubbled: 'onBeforeInput',
        captured: 'onBeforeInputCapture'
      },
      dependencies: [TOP_COMPOSITION_END, TOP_KEY_PRESS, TOP_TEXT_INPUT, TOP_PASTE]
    },
    compositionEnd: {
      phasedRegistrationNames: {
        bubbled: 'onCompositionEnd',
        captured: 'onCompositionEndCapture'
      },
      dependencies: [TOP_BLUR, TOP_COMPOSITION_END, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_MOUSE_DOWN]
    },
    compositionStart: {
      phasedRegistrationNames: {
        bubbled: 'onCompositionStart',
        captured: 'onCompositionStartCapture'
      },
      dependencies: [TOP_BLUR, TOP_COMPOSITION_START, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_MOUSE_DOWN]
    },
    compositionUpdate: {
      phasedRegistrationNames: {
        bubbled: 'onCompositionUpdate',
        captured: 'onCompositionUpdateCapture'
      },
      dependencies: [TOP_BLUR, TOP_COMPOSITION_UPDATE, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_MOUSE_DOWN]
    }
  };
  var hasSpaceKeypress = false;
  function isKeypressCommand(nativeEvent) {
    return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && !(nativeEvent.ctrlKey && nativeEvent.altKey);
  }
  function getCompositionEventType(topLevelType) {
    switch (topLevelType) {
      case TOP_COMPOSITION_START:
        return eventTypes.compositionStart;
      case TOP_COMPOSITION_END:
        return eventTypes.compositionEnd;
      case TOP_COMPOSITION_UPDATE:
        return eventTypes.compositionUpdate;
    }
  }
  function isFallbackCompositionStart(topLevelType, nativeEvent) {
    return topLevelType === TOP_KEY_DOWN && nativeEvent.keyCode === START_KEYCODE;
  }
  function isFallbackCompositionEnd(topLevelType, nativeEvent) {
    switch (topLevelType) {
      case TOP_KEY_UP:
        return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
      case TOP_KEY_DOWN:
        return nativeEvent.keyCode !== START_KEYCODE;
      case TOP_KEY_PRESS:
      case TOP_MOUSE_DOWN:
      case TOP_BLUR:
        return true;
      default:
        return false;
    }
  }
  function getDataFromCustomEvent(nativeEvent) {
    var detail = nativeEvent.detail;
    if (typeof detail === 'object' && ('data' in detail)) {
      return detail.data;
    }
    return null;
  }
  function isUsingKoreanIME(nativeEvent) {
    return nativeEvent.locale === 'ko';
  }
  var isComposing = false;
  function extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    var eventType;
    var fallbackData;
    if (canUseCompositionEvent) {
      eventType = getCompositionEventType(topLevelType);
    } else if (!isComposing) {
      if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
        eventType = eventTypes.compositionStart;
      }
    } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
      eventType = eventTypes.compositionEnd;
    }
    if (!eventType) {
      return null;
    }
    if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
      if (!isComposing && eventType === eventTypes.compositionStart) {
        isComposing = initialize(nativeEventTarget);
      } else if (eventType === eventTypes.compositionEnd) {
        if (isComposing) {
          fallbackData = getData();
        }
      }
    }
    var event = SyntheticCompositionEvent.getPooled(eventType, targetInst, nativeEvent, nativeEventTarget);
    if (fallbackData) {
      event.data = fallbackData;
    } else {
      var customData = getDataFromCustomEvent(nativeEvent);
      if (customData !== null) {
        event.data = customData;
      }
    }
    accumulateTwoPhaseDispatches(event);
    return event;
  }
  function getNativeBeforeInputChars(topLevelType, nativeEvent) {
    switch (topLevelType) {
      case TOP_COMPOSITION_END:
        return getDataFromCustomEvent(nativeEvent);
      case TOP_KEY_PRESS:
        var which = nativeEvent.which;
        if (which !== SPACEBAR_CODE) {
          return null;
        }
        hasSpaceKeypress = true;
        return SPACEBAR_CHAR;
      case TOP_TEXT_INPUT:
        var chars = nativeEvent.data;
        if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
          return null;
        }
        return chars;
      default:
        return null;
    }
  }
  function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
    if (isComposing) {
      if (topLevelType === TOP_COMPOSITION_END || !canUseCompositionEvent && isFallbackCompositionEnd(topLevelType, nativeEvent)) {
        var chars = getData();
        reset();
        isComposing = false;
        return chars;
      }
      return null;
    }
    switch (topLevelType) {
      case TOP_PASTE:
        return null;
      case TOP_KEY_PRESS:
        if (!isKeypressCommand(nativeEvent)) {
          if (nativeEvent.char && nativeEvent.char.length > 1) {
            return nativeEvent.char;
          } else if (nativeEvent.which) {
            return String.fromCharCode(nativeEvent.which);
          }
        }
        return null;
      case TOP_COMPOSITION_END:
        return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
      default:
        return null;
    }
  }
  function extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    var chars;
    if (canUseTextInputEvent) {
      chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
    } else {
      chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
    }
    if (!chars) {
      return null;
    }
    var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, targetInst, nativeEvent, nativeEventTarget);
    event.data = chars;
    accumulateTwoPhaseDispatches(event);
    return event;
  }
  var BeforeInputEventPlugin = {
    eventTypes: eventTypes,
    extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
      var composition = extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget);
      var beforeInput = extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget);
      if (composition === null) {
        return beforeInput;
      }
      if (beforeInput === null) {
        return composition;
      }
      return [composition, beforeInput];
    }
  };
  var supportedInputTypes = {
    color: true,
    date: true,
    datetime: true,
    'datetime-local': true,
    email: true,
    month: true,
    number: true,
    password: true,
    range: true,
    search: true,
    tel: true,
    text: true,
    time: true,
    url: true,
    week: true
  };
  function isTextInputElement(elem) {
    var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
    if (nodeName === 'input') {
      return !!supportedInputTypes[elem.type];
    }
    if (nodeName === 'textarea') {
      return true;
    }
    return false;
  }
  var eventTypes$1 = {
    change: {
      phasedRegistrationNames: {
        bubbled: 'onChange',
        captured: 'onChangeCapture'
      },
      dependencies: [TOP_BLUR, TOP_CHANGE, TOP_CLICK, TOP_FOCUS, TOP_INPUT, TOP_KEY_DOWN, TOP_KEY_UP, TOP_SELECTION_CHANGE]
    }
  };
  function createAndAccumulateChangeEvent(inst, nativeEvent, target) {
    var event = SyntheticEvent.getPooled(eventTypes$1.change, inst, nativeEvent, target);
    event.type = 'change';
    enqueueStateRestore(target);
    accumulateTwoPhaseDispatches(event);
    return event;
  }
  var activeElement = null;
  var activeElementInst = null;
  function shouldUseChangeEvent(elem) {
    var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
    return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
  }
  function manualDispatchChangeEvent(nativeEvent) {
    var event = createAndAccumulateChangeEvent(activeElementInst, nativeEvent, getEventTarget(nativeEvent));
    batchedUpdates(runEventInBatch, event);
  }
  function runEventInBatch(event) {
    runEventsInBatch(event);
  }
  function getInstIfValueChanged(targetInst) {
    var targetNode = getNodeFromInstance$1(targetInst);
    if (updateValueIfChanged(targetNode)) {
      return targetInst;
    }
  }
  function getTargetInstForChangeEvent(topLevelType, targetInst) {
    if (topLevelType === TOP_CHANGE) {
      return targetInst;
    }
  }
  var isInputEventSupported = false;
  if (canUseDOM) {
    isInputEventSupported = isEventSupported('input') && (!document.documentMode || document.documentMode > 9);
  }
  function startWatchingForValueChange(target, targetInst) {
    activeElement = target;
    activeElementInst = targetInst;
    activeElement.attachEvent('onpropertychange', handlePropertyChange);
  }
  function stopWatchingForValueChange() {
    if (!activeElement) {
      return;
    }
    activeElement.detachEvent('onpropertychange', handlePropertyChange);
    activeElement = null;
    activeElementInst = null;
  }
  function handlePropertyChange(nativeEvent) {
    if (nativeEvent.propertyName !== 'value') {
      return;
    }
    if (getInstIfValueChanged(activeElementInst)) {
      manualDispatchChangeEvent(nativeEvent);
    }
  }
  function handleEventsForInputEventPolyfill(topLevelType, target, targetInst) {
    if (topLevelType === TOP_FOCUS) {
      stopWatchingForValueChange();
      startWatchingForValueChange(target, targetInst);
    } else if (topLevelType === TOP_BLUR) {
      stopWatchingForValueChange();
    }
  }
  function getTargetInstForInputEventPolyfill(topLevelType, targetInst) {
    if (topLevelType === TOP_SELECTION_CHANGE || topLevelType === TOP_KEY_UP || topLevelType === TOP_KEY_DOWN) {
      return getInstIfValueChanged(activeElementInst);
    }
  }
  function shouldUseClickEvent(elem) {
    var nodeName = elem.nodeName;
    return nodeName && nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
  }
  function getTargetInstForClickEvent(topLevelType, targetInst) {
    if (topLevelType === TOP_CLICK) {
      return getInstIfValueChanged(targetInst);
    }
  }
  function getTargetInstForInputOrChangeEvent(topLevelType, targetInst) {
    if (topLevelType === TOP_INPUT || topLevelType === TOP_CHANGE) {
      return getInstIfValueChanged(targetInst);
    }
  }
  function handleControlledInputBlur(node) {
    var state = node._wrapperState;
    if (!state || !state.controlled || node.type !== 'number') {
      return;
    }
    {
      setDefaultValue(node, 'number', node.value);
    }
  }
  var ChangeEventPlugin = {
    eventTypes: eventTypes$1,
    _isInputEventSupported: isInputEventSupported,
    extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
      var targetNode = targetInst ? getNodeFromInstance$1(targetInst) : window;
      var getTargetInstFunc, handleEventFunc;
      if (shouldUseChangeEvent(targetNode)) {
        getTargetInstFunc = getTargetInstForChangeEvent;
      } else if (isTextInputElement(targetNode)) {
        if (isInputEventSupported) {
          getTargetInstFunc = getTargetInstForInputOrChangeEvent;
        } else {
          getTargetInstFunc = getTargetInstForInputEventPolyfill;
          handleEventFunc = handleEventsForInputEventPolyfill;
        }
      } else if (shouldUseClickEvent(targetNode)) {
        getTargetInstFunc = getTargetInstForClickEvent;
      }
      if (getTargetInstFunc) {
        var inst = getTargetInstFunc(topLevelType, targetInst);
        if (inst) {
          var event = createAndAccumulateChangeEvent(inst, nativeEvent, nativeEventTarget);
          return event;
        }
      }
      if (handleEventFunc) {
        handleEventFunc(topLevelType, targetNode, targetInst);
      }
      if (topLevelType === TOP_BLUR) {
        handleControlledInputBlur(targetNode);
      }
    }
  };
  var SyntheticUIEvent = SyntheticEvent.extend({
    view: null,
    detail: null
  });
  var modifierKeyToProp = {
    Alt: 'altKey',
    Control: 'ctrlKey',
    Meta: 'metaKey',
    Shift: 'shiftKey'
  };
  function modifierStateGetter(keyArg) {
    var syntheticEvent = this;
    var nativeEvent = syntheticEvent.nativeEvent;
    if (nativeEvent.getModifierState) {
      return nativeEvent.getModifierState(keyArg);
    }
    var keyProp = modifierKeyToProp[keyArg];
    return keyProp ? !!nativeEvent[keyProp] : false;
  }
  function getEventModifierState(nativeEvent) {
    return modifierStateGetter;
  }
  var previousScreenX = 0;
  var previousScreenY = 0;
  var isMovementXSet = false;
  var isMovementYSet = false;
  var SyntheticMouseEvent = SyntheticUIEvent.extend({
    screenX: null,
    screenY: null,
    clientX: null,
    clientY: null,
    pageX: null,
    pageY: null,
    ctrlKey: null,
    shiftKey: null,
    altKey: null,
    metaKey: null,
    getModifierState: getEventModifierState,
    button: null,
    buttons: null,
    relatedTarget: function (event) {
      return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);
    },
    movementX: function (event) {
      if (('movementX' in event)) {
        return event.movementX;
      }
      var screenX = previousScreenX;
      previousScreenX = event.screenX;
      if (!isMovementXSet) {
        isMovementXSet = true;
        return 0;
      }
      return event.type === 'mousemove' ? event.screenX - screenX : 0;
    },
    movementY: function (event) {
      if (('movementY' in event)) {
        return event.movementY;
      }
      var screenY = previousScreenY;
      previousScreenY = event.screenY;
      if (!isMovementYSet) {
        isMovementYSet = true;
        return 0;
      }
      return event.type === 'mousemove' ? event.screenY - screenY : 0;
    }
  });
  var SyntheticPointerEvent = SyntheticMouseEvent.extend({
    pointerId: null,
    width: null,
    height: null,
    pressure: null,
    tangentialPressure: null,
    tiltX: null,
    tiltY: null,
    twist: null,
    pointerType: null,
    isPrimary: null
  });
  var eventTypes$2 = {
    mouseEnter: {
      registrationName: 'onMouseEnter',
      dependencies: [TOP_MOUSE_OUT, TOP_MOUSE_OVER]
    },
    mouseLeave: {
      registrationName: 'onMouseLeave',
      dependencies: [TOP_MOUSE_OUT, TOP_MOUSE_OVER]
    },
    pointerEnter: {
      registrationName: 'onPointerEnter',
      dependencies: [TOP_POINTER_OUT, TOP_POINTER_OVER]
    },
    pointerLeave: {
      registrationName: 'onPointerLeave',
      dependencies: [TOP_POINTER_OUT, TOP_POINTER_OVER]
    }
  };
  var EnterLeaveEventPlugin = {
    eventTypes: eventTypes$2,
    extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
      var isOverEvent = topLevelType === TOP_MOUSE_OVER || topLevelType === TOP_POINTER_OVER;
      var isOutEvent = topLevelType === TOP_MOUSE_OUT || topLevelType === TOP_POINTER_OUT;
      if (isOverEvent && (eventSystemFlags & IS_REPLAYED) === 0 && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
        return null;
      }
      if (!isOutEvent && !isOverEvent) {
        return null;
      }
      var win;
      if (nativeEventTarget.window === nativeEventTarget) {
        win = nativeEventTarget;
      } else {
        var doc = nativeEventTarget.ownerDocument;
        if (doc) {
          win = doc.defaultView || doc.parentWindow;
        } else {
          win = window;
        }
      }
      var from;
      var to;
      if (isOutEvent) {
        from = targetInst;
        var related = nativeEvent.relatedTarget || nativeEvent.toElement;
        to = related ? getClosestInstanceFromNode(related) : null;
        if (to !== null) {
          var nearestMounted = getNearestMountedFiber(to);
          if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
            to = null;
          }
        }
      } else {
        from = null;
        to = targetInst;
      }
      if (from === to) {
        return null;
      }
      var eventInterface, leaveEventType, enterEventType, eventTypePrefix;
      if (topLevelType === TOP_MOUSE_OUT || topLevelType === TOP_MOUSE_OVER) {
        eventInterface = SyntheticMouseEvent;
        leaveEventType = eventTypes$2.mouseLeave;
        enterEventType = eventTypes$2.mouseEnter;
        eventTypePrefix = 'mouse';
      } else if (topLevelType === TOP_POINTER_OUT || topLevelType === TOP_POINTER_OVER) {
        eventInterface = SyntheticPointerEvent;
        leaveEventType = eventTypes$2.pointerLeave;
        enterEventType = eventTypes$2.pointerEnter;
        eventTypePrefix = 'pointer';
      }
      var fromNode = from == null ? win : getNodeFromInstance$1(from);
      var toNode = to == null ? win : getNodeFromInstance$1(to);
      var leave = eventInterface.getPooled(leaveEventType, from, nativeEvent, nativeEventTarget);
      leave.type = eventTypePrefix + 'leave';
      leave.target = fromNode;
      leave.relatedTarget = toNode;
      var enter = eventInterface.getPooled(enterEventType, to, nativeEvent, nativeEventTarget);
      enter.type = eventTypePrefix + 'enter';
      enter.target = toNode;
      enter.relatedTarget = fromNode;
      accumulateEnterLeaveDispatches(leave, enter, from, to);
      if ((eventSystemFlags & IS_FIRST_ANCESTOR) === 0) {
        return [leave];
      }
      return [leave, enter];
    }
  };
  function is(x, y) {
    return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
  }
  var objectIs = typeof Object.is === 'function' ? Object.is : is;
  var hasOwnProperty$2 = Object.prototype.hasOwnProperty;
  function shallowEqual(objA, objB) {
    if (objectIs(objA, objB)) {
      return true;
    }
    if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
      return false;
    }
    var keysA = Object.keys(objA);
    var keysB = Object.keys(objB);
    if (keysA.length !== keysB.length) {
      return false;
    }
    for (var i = 0; i < keysA.length; i++) {
      if (!hasOwnProperty$2.call(objB, keysA[i]) || !objectIs(objA[keysA[i]], objB[keysA[i]])) {
        return false;
      }
    }
    return true;
  }
  var skipSelectionChangeEvent = canUseDOM && ('documentMode' in document) && document.documentMode <= 11;
  var eventTypes$3 = {
    select: {
      phasedRegistrationNames: {
        bubbled: 'onSelect',
        captured: 'onSelectCapture'
      },
      dependencies: [TOP_BLUR, TOP_CONTEXT_MENU, TOP_DRAG_END, TOP_FOCUS, TOP_KEY_DOWN, TOP_KEY_UP, TOP_MOUSE_DOWN, TOP_MOUSE_UP, TOP_SELECTION_CHANGE]
    }
  };
  var activeElement$1 = null;
  var activeElementInst$1 = null;
  var lastSelection = null;
  var mouseDown = false;
  function getSelection$1(node) {
    if (('selectionStart' in node) && hasSelectionCapabilities(node)) {
      return {
        start: node.selectionStart,
        end: node.selectionEnd
      };
    } else {
      var win = node.ownerDocument && node.ownerDocument.defaultView || window;
      var selection = win.getSelection();
      return {
        anchorNode: selection.anchorNode,
        anchorOffset: selection.anchorOffset,
        focusNode: selection.focusNode,
        focusOffset: selection.focusOffset
      };
    }
  }
  function getEventTargetDocument(eventTarget) {
    return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
  }
  function constructSelectEvent(nativeEvent, nativeEventTarget) {
    var doc = getEventTargetDocument(nativeEventTarget);
    if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
      return null;
    }
    var currentSelection = getSelection$1(activeElement$1);
    if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
      lastSelection = currentSelection;
      var syntheticEvent = SyntheticEvent.getPooled(eventTypes$3.select, activeElementInst$1, nativeEvent, nativeEventTarget);
      syntheticEvent.type = 'select';
      syntheticEvent.target = activeElement$1;
      accumulateTwoPhaseDispatches(syntheticEvent);
      return syntheticEvent;
    }
    return null;
  }
  var SelectEventPlugin = {
    eventTypes: eventTypes$3,
    extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, container) {
      var containerOrDoc = container || getEventTargetDocument(nativeEventTarget);
      if (!containerOrDoc || !isListeningToAllDependencies('onSelect', containerOrDoc)) {
        return null;
      }
      var targetNode = targetInst ? getNodeFromInstance$1(targetInst) : window;
      switch (topLevelType) {
        case TOP_FOCUS:
          if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {
            activeElement$1 = targetNode;
            activeElementInst$1 = targetInst;
            lastSelection = null;
          }
          break;
        case TOP_BLUR:
          activeElement$1 = null;
          activeElementInst$1 = null;
          lastSelection = null;
          break;
        case TOP_MOUSE_DOWN:
          mouseDown = true;
          break;
        case TOP_CONTEXT_MENU:
        case TOP_MOUSE_UP:
        case TOP_DRAG_END:
          mouseDown = false;
          return constructSelectEvent(nativeEvent, nativeEventTarget);
        case TOP_SELECTION_CHANGE:
          if (skipSelectionChangeEvent) {
            break;
          }
        case TOP_KEY_DOWN:
        case TOP_KEY_UP:
          return constructSelectEvent(nativeEvent, nativeEventTarget);
      }
      return null;
    }
  };
  var SyntheticAnimationEvent = SyntheticEvent.extend({
    animationName: null,
    elapsedTime: null,
    pseudoElement: null
  });
  var SyntheticClipboardEvent = SyntheticEvent.extend({
    clipboardData: function (event) {
      return ('clipboardData' in event) ? event.clipboardData : window.clipboardData;
    }
  });
  var SyntheticFocusEvent = SyntheticUIEvent.extend({
    relatedTarget: null
  });
  function getEventCharCode(nativeEvent) {
    var charCode;
    var keyCode = nativeEvent.keyCode;
    if (('charCode' in nativeEvent)) {
      charCode = nativeEvent.charCode;
      if (charCode === 0 && keyCode === 13) {
        charCode = 13;
      }
    } else {
      charCode = keyCode;
    }
    if (charCode === 10) {
      charCode = 13;
    }
    if (charCode >= 32 || charCode === 13) {
      return charCode;
    }
    return 0;
  }
  var normalizeKey = {
    Esc: 'Escape',
    Spacebar: ' ',
    Left: 'ArrowLeft',
    Up: 'ArrowUp',
    Right: 'ArrowRight',
    Down: 'ArrowDown',
    Del: 'Delete',
    Win: 'OS',
    Menu: 'ContextMenu',
    Apps: 'ContextMenu',
    Scroll: 'ScrollLock',
    MozPrintableKey: 'Unidentified'
  };
  var translateToKey = {
    '8': 'Backspace',
    '9': 'Tab',
    '12': 'Clear',
    '13': 'Enter',
    '16': 'Shift',
    '17': 'Control',
    '18': 'Alt',
    '19': 'Pause',
    '20': 'CapsLock',
    '27': 'Escape',
    '32': ' ',
    '33': 'PageUp',
    '34': 'PageDown',
    '35': 'End',
    '36': 'Home',
    '37': 'ArrowLeft',
    '38': 'ArrowUp',
    '39': 'ArrowRight',
    '40': 'ArrowDown',
    '45': 'Insert',
    '46': 'Delete',
    '112': 'F1',
    '113': 'F2',
    '114': 'F3',
    '115': 'F4',
    '116': 'F5',
    '117': 'F6',
    '118': 'F7',
    '119': 'F8',
    '120': 'F9',
    '121': 'F10',
    '122': 'F11',
    '123': 'F12',
    '144': 'NumLock',
    '145': 'ScrollLock',
    '224': 'Meta'
  };
  function getEventKey(nativeEvent) {
    if (nativeEvent.key) {
      var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
      if (key !== 'Unidentified') {
        return key;
      }
    }
    if (nativeEvent.type === 'keypress') {
      var charCode = getEventCharCode(nativeEvent);
      return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
    }
    if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
      return translateToKey[nativeEvent.keyCode] || 'Unidentified';
    }
    return '';
  }
  var SyntheticKeyboardEvent = SyntheticUIEvent.extend({
    key: getEventKey,
    location: null,
    ctrlKey: null,
    shiftKey: null,
    altKey: null,
    metaKey: null,
    repeat: null,
    locale: null,
    getModifierState: getEventModifierState,
    charCode: function (event) {
      if (event.type === 'keypress') {
        return getEventCharCode(event);
      }
      return 0;
    },
    keyCode: function (event) {
      if (event.type === 'keydown' || event.type === 'keyup') {
        return event.keyCode;
      }
      return 0;
    },
    which: function (event) {
      if (event.type === 'keypress') {
        return getEventCharCode(event);
      }
      if (event.type === 'keydown' || event.type === 'keyup') {
        return event.keyCode;
      }
      return 0;
    }
  });
  var SyntheticDragEvent = SyntheticMouseEvent.extend({
    dataTransfer: null
  });
  var SyntheticTouchEvent = SyntheticUIEvent.extend({
    touches: null,
    targetTouches: null,
    changedTouches: null,
    altKey: null,
    metaKey: null,
    ctrlKey: null,
    shiftKey: null,
    getModifierState: getEventModifierState
  });
  var SyntheticTransitionEvent = SyntheticEvent.extend({
    propertyName: null,
    elapsedTime: null,
    pseudoElement: null
  });
  var SyntheticWheelEvent = SyntheticMouseEvent.extend({
    deltaX: function (event) {
      return ('deltaX' in event) ? event.deltaX : ('wheelDeltaX' in event) ? -event.wheelDeltaX : 0;
    },
    deltaY: function (event) {
      return ('deltaY' in event) ? event.deltaY : ('wheelDeltaY' in event) ? -event.wheelDeltaY : ('wheelDelta' in event) ? -event.wheelDelta : 0;
    },
    deltaZ: null,
    deltaMode: null
  });
  var knownHTMLTopLevelTypes = [TOP_ABORT, TOP_CANCEL, TOP_CAN_PLAY, TOP_CAN_PLAY_THROUGH, TOP_CLOSE, TOP_DURATION_CHANGE, TOP_EMPTIED, TOP_ENCRYPTED, TOP_ENDED, TOP_ERROR, TOP_INPUT, TOP_INVALID, TOP_LOAD, TOP_LOADED_DATA, TOP_LOADED_METADATA, TOP_LOAD_START, TOP_PAUSE, TOP_PLAY, TOP_PLAYING, TOP_PROGRESS, TOP_RATE_CHANGE, TOP_RESET, TOP_SEEKED, TOP_SEEKING, TOP_STALLED, TOP_SUBMIT, TOP_SUSPEND, TOP_TIME_UPDATE, TOP_TOGGLE, TOP_VOLUME_CHANGE, TOP_WAITING];
  var SimpleEventPlugin = {
    eventTypes: simpleEventPluginEventTypes,
    extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
      var dispatchConfig = topLevelEventsToDispatchConfig.get(topLevelType);
      if (!dispatchConfig) {
        return null;
      }
      var EventConstructor;
      switch (topLevelType) {
        case TOP_KEY_PRESS:
          if (getEventCharCode(nativeEvent) === 0) {
            return null;
          }
        case TOP_KEY_DOWN:
        case TOP_KEY_UP:
          EventConstructor = SyntheticKeyboardEvent;
          break;
        case TOP_BLUR:
        case TOP_FOCUS:
          EventConstructor = SyntheticFocusEvent;
          break;
        case TOP_CLICK:
          if (nativeEvent.button === 2) {
            return null;
          }
        case TOP_AUX_CLICK:
        case TOP_DOUBLE_CLICK:
        case TOP_MOUSE_DOWN:
        case TOP_MOUSE_MOVE:
        case TOP_MOUSE_UP:
        case TOP_MOUSE_OUT:
        case TOP_MOUSE_OVER:
        case TOP_CONTEXT_MENU:
          EventConstructor = SyntheticMouseEvent;
          break;
        case TOP_DRAG:
        case TOP_DRAG_END:
        case TOP_DRAG_ENTER:
        case TOP_DRAG_EXIT:
        case TOP_DRAG_LEAVE:
        case TOP_DRAG_OVER:
        case TOP_DRAG_START:
        case TOP_DROP:
          EventConstructor = SyntheticDragEvent;
          break;
        case TOP_TOUCH_CANCEL:
        case TOP_TOUCH_END:
        case TOP_TOUCH_MOVE:
        case TOP_TOUCH_START:
          EventConstructor = SyntheticTouchEvent;
          break;
        case TOP_ANIMATION_END:
        case TOP_ANIMATION_ITERATION:
        case TOP_ANIMATION_START:
          EventConstructor = SyntheticAnimationEvent;
          break;
        case TOP_TRANSITION_END:
          EventConstructor = SyntheticTransitionEvent;
          break;
        case TOP_SCROLL:
          EventConstructor = SyntheticUIEvent;
          break;
        case TOP_WHEEL:
          EventConstructor = SyntheticWheelEvent;
          break;
        case TOP_COPY:
        case TOP_CUT:
        case TOP_PASTE:
          EventConstructor = SyntheticClipboardEvent;
          break;
        case TOP_GOT_POINTER_CAPTURE:
        case TOP_LOST_POINTER_CAPTURE:
        case TOP_POINTER_CANCEL:
        case TOP_POINTER_DOWN:
        case TOP_POINTER_MOVE:
        case TOP_POINTER_OUT:
        case TOP_POINTER_OVER:
        case TOP_POINTER_UP:
          EventConstructor = SyntheticPointerEvent;
          break;
        default:
          {
            if (knownHTMLTopLevelTypes.indexOf(topLevelType) === -1) {
              error('SimpleEventPlugin: Unhandled event type, `%s`. This warning ' + 'is likely caused by a bug in React. Please file an issue.', topLevelType);
            }
          }
          EventConstructor = SyntheticEvent;
          break;
      }
      var event = EventConstructor.getPooled(dispatchConfig, targetInst, nativeEvent, nativeEventTarget);
      accumulateTwoPhaseDispatches(event);
      return event;
    }
  };
  var DOMEventPluginOrder = ['ResponderEventPlugin', 'SimpleEventPlugin', 'EnterLeaveEventPlugin', 'ChangeEventPlugin', 'SelectEventPlugin', 'BeforeInputEventPlugin'];
  injectEventPluginOrder(DOMEventPluginOrder);
  setComponentTree(getFiberCurrentPropsFromNode$1, getInstanceFromNode$1, getNodeFromInstance$1);
  injectEventPluginsByName({
    SimpleEventPlugin: SimpleEventPlugin,
    EnterLeaveEventPlugin: EnterLeaveEventPlugin,
    ChangeEventPlugin: ChangeEventPlugin,
    SelectEventPlugin: SelectEventPlugin,
    BeforeInputEventPlugin: BeforeInputEventPlugin
  });
  var reactEmoji = "\u269B";
  var warningEmoji = "\u26D4";
  var supportsUserTiming = typeof performance !== 'undefined' && typeof performance.mark === 'function' && typeof performance.clearMarks === 'function' && typeof performance.measure === 'function' && typeof performance.clearMeasures === 'function';
  var currentFiber = null;
  var currentPhase = null;
  var currentPhaseFiber = null;
  var isCommitting = false;
  var hasScheduledUpdateInCurrentCommit = false;
  var hasScheduledUpdateInCurrentPhase = false;
  var commitCountInCurrentWorkLoop = 0;
  var effectCountInCurrentCommit = 0;
  var labelsInCurrentCommit = new Set();
  var formatMarkName = function (markName) {
    return reactEmoji + " " + markName;
  };
  var formatLabel = function (label, warning) {
    var prefix = warning ? warningEmoji + " " : reactEmoji + " ";
    var suffix = warning ? " Warning: " + warning : '';
    return "" + prefix + label + suffix;
  };
  var beginMark = function (markName) {
    performance.mark(formatMarkName(markName));
  };
  var clearMark = function (markName) {
    performance.clearMarks(formatMarkName(markName));
  };
  var endMark = function (label, markName, warning) {
    var formattedMarkName = formatMarkName(markName);
    var formattedLabel = formatLabel(label, warning);
    try {
      performance.measure(formattedLabel, formattedMarkName);
    } catch (err) {}
    performance.clearMarks(formattedMarkName);
    performance.clearMeasures(formattedLabel);
  };
  var getFiberMarkName = function (label, debugID) {
    return label + " (#" + debugID + ")";
  };
  var getFiberLabel = function (componentName, isMounted, phase) {
    if (phase === null) {
      return componentName + " [" + (isMounted ? 'update' : 'mount') + "]";
    } else {
      return componentName + "." + phase;
    }
  };
  var beginFiberMark = function (fiber, phase) {
    var componentName = getComponentName(fiber.type) || 'Unknown';
    var debugID = fiber._debugID;
    var isMounted = fiber.alternate !== null;
    var label = getFiberLabel(componentName, isMounted, phase);
    if (isCommitting && labelsInCurrentCommit.has(label)) {
      return false;
    }
    labelsInCurrentCommit.add(label);
    var markName = getFiberMarkName(label, debugID);
    beginMark(markName);
    return true;
  };
  var clearFiberMark = function (fiber, phase) {
    var componentName = getComponentName(fiber.type) || 'Unknown';
    var debugID = fiber._debugID;
    var isMounted = fiber.alternate !== null;
    var label = getFiberLabel(componentName, isMounted, phase);
    var markName = getFiberMarkName(label, debugID);
    clearMark(markName);
  };
  var endFiberMark = function (fiber, phase, warning) {
    var componentName = getComponentName(fiber.type) || 'Unknown';
    var debugID = fiber._debugID;
    var isMounted = fiber.alternate !== null;
    var label = getFiberLabel(componentName, isMounted, phase);
    var markName = getFiberMarkName(label, debugID);
    endMark(label, markName, warning);
  };
  var shouldIgnoreFiber = function (fiber) {
    switch (fiber.tag) {
      case HostRoot:
      case HostComponent:
      case HostText:
      case HostPortal:
      case Fragment:
      case ContextProvider:
      case ContextConsumer:
      case Mode:
        return true;
      default:
        return false;
    }
  };
  var clearPendingPhaseMeasurement = function () {
    if (currentPhase !== null && currentPhaseFiber !== null) {
      clearFiberMark(currentPhaseFiber, currentPhase);
    }
    currentPhaseFiber = null;
    currentPhase = null;
    hasScheduledUpdateInCurrentPhase = false;
  };
  var pauseTimers = function () {
    var fiber = currentFiber;
    while (fiber) {
      if (fiber._debugIsCurrentlyTiming) {
        endFiberMark(fiber, null, null);
      }
      fiber = fiber.return;
    }
  };
  var resumeTimersRecursively = function (fiber) {
    if (fiber.return !== null) {
      resumeTimersRecursively(fiber.return);
    }
    if (fiber._debugIsCurrentlyTiming) {
      beginFiberMark(fiber, null);
    }
  };
  var resumeTimers = function () {
    if (currentFiber !== null) {
      resumeTimersRecursively(currentFiber);
    }
  };
  function recordEffect() {
    {
      effectCountInCurrentCommit++;
    }
  }
  function recordScheduleUpdate() {
    {
      if (isCommitting) {
        hasScheduledUpdateInCurrentCommit = true;
      }
      if (currentPhase !== null && currentPhase !== 'componentWillMount' && currentPhase !== 'componentWillReceiveProps') {
        hasScheduledUpdateInCurrentPhase = true;
      }
    }
  }
  function startWorkTimer(fiber) {
    {
      if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
        return;
      }
      currentFiber = fiber;
      if (!beginFiberMark(fiber, null)) {
        return;
      }
      fiber._debugIsCurrentlyTiming = true;
    }
  }
  function cancelWorkTimer(fiber) {
    {
      if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
        return;
      }
      fiber._debugIsCurrentlyTiming = false;
      clearFiberMark(fiber, null);
    }
  }
  function stopWorkTimer(fiber) {
    {
      if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
        return;
      }
      currentFiber = fiber.return;
      if (!fiber._debugIsCurrentlyTiming) {
        return;
      }
      fiber._debugIsCurrentlyTiming = false;
      endFiberMark(fiber, null, null);
    }
  }
  function stopFailedWorkTimer(fiber) {
    {
      if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
        return;
      }
      currentFiber = fiber.return;
      if (!fiber._debugIsCurrentlyTiming) {
        return;
      }
      fiber._debugIsCurrentlyTiming = false;
      var warning = fiber.tag === SuspenseComponent ? 'Rendering was suspended' : 'An error was thrown inside this error boundary';
      endFiberMark(fiber, null, warning);
    }
  }
  function startPhaseTimer(fiber, phase) {
    {
      if (!supportsUserTiming) {
        return;
      }
      clearPendingPhaseMeasurement();
      if (!beginFiberMark(fiber, phase)) {
        return;
      }
      currentPhaseFiber = fiber;
      currentPhase = phase;
    }
  }
  function stopPhaseTimer() {
    {
      if (!supportsUserTiming) {
        return;
      }
      if (currentPhase !== null && currentPhaseFiber !== null) {
        var warning = hasScheduledUpdateInCurrentPhase ? 'Scheduled a cascading update' : null;
        endFiberMark(currentPhaseFiber, currentPhase, warning);
      }
      currentPhase = null;
      currentPhaseFiber = null;
    }
  }
  function startWorkLoopTimer(nextUnitOfWork) {
    {
      currentFiber = nextUnitOfWork;
      if (!supportsUserTiming) {
        return;
      }
      commitCountInCurrentWorkLoop = 0;
      beginMark('(React Tree Reconciliation)');
      resumeTimers();
    }
  }
  function stopWorkLoopTimer(interruptedBy, didCompleteRoot) {
    {
      if (!supportsUserTiming) {
        return;
      }
      var warning = null;
      if (interruptedBy !== null) {
        if (interruptedBy.tag === HostRoot) {
          warning = 'A top-level update interrupted the previous render';
        } else {
          var componentName = getComponentName(interruptedBy.type) || 'Unknown';
          warning = "An update to " + componentName + " interrupted the previous render";
        }
      } else if (commitCountInCurrentWorkLoop > 1) {
        warning = 'There were cascading updates';
      }
      commitCountInCurrentWorkLoop = 0;
      var label = didCompleteRoot ? '(React Tree Reconciliation: Completed Root)' : '(React Tree Reconciliation: Yielded)';
      pauseTimers();
      endMark(label, '(React Tree Reconciliation)', warning);
    }
  }
  function startCommitTimer() {
    {
      if (!supportsUserTiming) {
        return;
      }
      isCommitting = true;
      hasScheduledUpdateInCurrentCommit = false;
      labelsInCurrentCommit.clear();
      beginMark('(Committing Changes)');
    }
  }
  function stopCommitTimer() {
    {
      if (!supportsUserTiming) {
        return;
      }
      var warning = null;
      if (hasScheduledUpdateInCurrentCommit) {
        warning = 'Lifecycle hook scheduled a cascading update';
      } else if (commitCountInCurrentWorkLoop > 0) {
        warning = 'Caused by a cascading update in earlier commit';
      }
      hasScheduledUpdateInCurrentCommit = false;
      commitCountInCurrentWorkLoop++;
      isCommitting = false;
      labelsInCurrentCommit.clear();
      endMark('(Committing Changes)', '(Committing Changes)', warning);
    }
  }
  function startCommitSnapshotEffectsTimer() {
    {
      if (!supportsUserTiming) {
        return;
      }
      effectCountInCurrentCommit = 0;
      beginMark('(Committing Snapshot Effects)');
    }
  }
  function stopCommitSnapshotEffectsTimer() {
    {
      if (!supportsUserTiming) {
        return;
      }
      var count = effectCountInCurrentCommit;
      effectCountInCurrentCommit = 0;
      endMark("(Committing Snapshot Effects: " + count + " Total)", '(Committing Snapshot Effects)', null);
    }
  }
  function startCommitHostEffectsTimer() {
    {
      if (!supportsUserTiming) {
        return;
      }
      effectCountInCurrentCommit = 0;
      beginMark('(Committing Host Effects)');
    }
  }
  function stopCommitHostEffectsTimer() {
    {
      if (!supportsUserTiming) {
        return;
      }
      var count = effectCountInCurrentCommit;
      effectCountInCurrentCommit = 0;
      endMark("(Committing Host Effects: " + count + " Total)", '(Committing Host Effects)', null);
    }
  }
  function startCommitLifeCyclesTimer() {
    {
      if (!supportsUserTiming) {
        return;
      }
      effectCountInCurrentCommit = 0;
      beginMark('(Calling Lifecycle Methods)');
    }
  }
  function stopCommitLifeCyclesTimer() {
    {
      if (!supportsUserTiming) {
        return;
      }
      var count = effectCountInCurrentCommit;
      effectCountInCurrentCommit = 0;
      endMark("(Calling Lifecycle Methods: " + count + " Total)", '(Calling Lifecycle Methods)', null);
    }
  }
  var valueStack = [];
  var fiberStack;
  {
    fiberStack = [];
  }
  var index = -1;
  function createCursor(defaultValue) {
    return {
      current: defaultValue
    };
  }
  function pop(cursor, fiber) {
    if (index < 0) {
      {
        error('Unexpected pop.');
      }
      return;
    }
    {
      if (fiber !== fiberStack[index]) {
        error('Unexpected Fiber popped.');
      }
    }
    cursor.current = valueStack[index];
    valueStack[index] = null;
    {
      fiberStack[index] = null;
    }
    index--;
  }
  function push(cursor, value, fiber) {
    index++;
    valueStack[index] = cursor.current;
    {
      fiberStack[index] = fiber;
    }
    cursor.current = value;
  }
  var warnedAboutMissingGetChildContext;
  {
    warnedAboutMissingGetChildContext = {};
  }
  var emptyContextObject = {};
  {
    Object.freeze(emptyContextObject);
  }
  var contextStackCursor = createCursor(emptyContextObject);
  var didPerformWorkStackCursor = createCursor(false);
  var previousContext = emptyContextObject;
  function getUnmaskedContext(workInProgress, Component, didPushOwnContextIfProvider) {
    {
      if (didPushOwnContextIfProvider && isContextProvider(Component)) {
        return previousContext;
      }
      return contextStackCursor.current;
    }
  }
  function cacheContext(workInProgress, unmaskedContext, maskedContext) {
    {
      var instance = workInProgress.stateNode;
      instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
      instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
    }
  }
  function getMaskedContext(workInProgress, unmaskedContext) {
    {
      var type = workInProgress.type;
      var contextTypes = type.contextTypes;
      if (!contextTypes) {
        return emptyContextObject;
      }
      var instance = workInProgress.stateNode;
      if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
        return instance.__reactInternalMemoizedMaskedChildContext;
      }
      var context = {};
      for (var key in contextTypes) {
        context[key] = unmaskedContext[key];
      }
      {
        var name = getComponentName(type) || 'Unknown';
        checkPropTypes(contextTypes, context, 'context', name, getCurrentFiberStackInDev);
      }
      if (instance) {
        cacheContext(workInProgress, unmaskedContext, context);
      }
      return context;
    }
  }
  function hasContextChanged() {
    {
      return didPerformWorkStackCursor.current;
    }
  }
  function isContextProvider(type) {
    {
      var childContextTypes = type.childContextTypes;
      return childContextTypes !== null && childContextTypes !== undefined;
    }
  }
  function popContext(fiber) {
    {
      pop(didPerformWorkStackCursor, fiber);
      pop(contextStackCursor, fiber);
    }
  }
  function popTopLevelContextObject(fiber) {
    {
      pop(didPerformWorkStackCursor, fiber);
      pop(contextStackCursor, fiber);
    }
  }
  function pushTopLevelContextObject(fiber, context, didChange) {
    {
      if (!(contextStackCursor.current === emptyContextObject)) {
        {
          throw Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
        }
      }
      push(contextStackCursor, context, fiber);
      push(didPerformWorkStackCursor, didChange, fiber);
    }
  }
  function processChildContext(fiber, type, parentContext) {
    {
      var instance = fiber.stateNode;
      var childContextTypes = type.childContextTypes;
      if (typeof instance.getChildContext !== 'function') {
        {
          var componentName = getComponentName(type) || 'Unknown';
          if (!warnedAboutMissingGetChildContext[componentName]) {
            warnedAboutMissingGetChildContext[componentName] = true;
            error('%s.childContextTypes is specified but there is no getChildContext() method ' + 'on the instance. You can either define getChildContext() on %s or remove ' + 'childContextTypes from it.', componentName, componentName);
          }
        }
        return parentContext;
      }
      var childContext;
      startPhaseTimer(fiber, 'getChildContext');
      childContext = instance.getChildContext();
      stopPhaseTimer();
      for (var contextKey in childContext) {
        if (!((contextKey in childContextTypes))) {
          {
            throw Error((getComponentName(type) || 'Unknown') + ".getChildContext(): key \"" + contextKey + "\" is not defined in childContextTypes.");
          }
        }
      }
      {
        var name = getComponentName(type) || 'Unknown';
        checkPropTypes(childContextTypes, childContext, 'child context', name, getCurrentFiberStackInDev);
      }
      return _assign({}, parentContext, {}, childContext);
    }
  }
  function pushContextProvider(workInProgress) {
    {
      var instance = workInProgress.stateNode;
      var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
      previousContext = contextStackCursor.current;
      push(contextStackCursor, memoizedMergedChildContext, workInProgress);
      push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);
      return true;
    }
  }
  function invalidateContextProvider(workInProgress, type, didChange) {
    {
      var instance = workInProgress.stateNode;
      if (!instance) {
        {
          throw Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
        }
      }
      if (didChange) {
        var mergedContext = processChildContext(workInProgress, type, previousContext);
        instance.__reactInternalMemoizedMergedChildContext = mergedContext;
        pop(didPerformWorkStackCursor, workInProgress);
        pop(contextStackCursor, workInProgress);
        push(contextStackCursor, mergedContext, workInProgress);
        push(didPerformWorkStackCursor, didChange, workInProgress);
      } else {
        pop(didPerformWorkStackCursor, workInProgress);
        push(didPerformWorkStackCursor, didChange, workInProgress);
      }
    }
  }
  function findCurrentUnmaskedContext(fiber) {
    {
      if (!(isFiberMounted(fiber) && fiber.tag === ClassComponent)) {
        {
          throw Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
        }
      }
      var node = fiber;
      do {
        switch (node.tag) {
          case HostRoot:
            return node.stateNode.context;
          case ClassComponent:
            {
              var Component = node.type;
              if (isContextProvider(Component)) {
                return node.stateNode.__reactInternalMemoizedMergedChildContext;
              }
              break;
            }
        }
        node = node.return;
      } while (node !== null);
      {
        {
          throw Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
        }
      }
    }
  }
  var LegacyRoot = 0;
  var BlockingRoot = 1;
  var ConcurrentRoot = 2;
  var Scheduler_runWithPriority = Scheduler.unstable_runWithPriority, Scheduler_scheduleCallback = Scheduler.unstable_scheduleCallback, Scheduler_cancelCallback = Scheduler.unstable_cancelCallback, Scheduler_shouldYield = Scheduler.unstable_shouldYield, Scheduler_requestPaint = Scheduler.unstable_requestPaint, Scheduler_now = Scheduler.unstable_now, Scheduler_getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel, Scheduler_ImmediatePriority = Scheduler.unstable_ImmediatePriority, Scheduler_UserBlockingPriority = Scheduler.unstable_UserBlockingPriority, Scheduler_NormalPriority = Scheduler.unstable_NormalPriority, Scheduler_LowPriority = Scheduler.unstable_LowPriority, Scheduler_IdlePriority = Scheduler.unstable_IdlePriority;
  {
    if (!(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null)) {
      {
        throw Error("It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at http://fb.me/react-profiling");
      }
    }
  }
  var fakeCallbackNode = {};
  var ImmediatePriority = 99;
  var UserBlockingPriority$1 = 98;
  var NormalPriority = 97;
  var LowPriority = 96;
  var IdlePriority = 95;
  var NoPriority = 90;
  var shouldYield = Scheduler_shouldYield;
  var requestPaint = Scheduler_requestPaint !== undefined ? Scheduler_requestPaint : function () {};
  var syncQueue = null;
  var immediateQueueCallbackNode = null;
  var isFlushingSyncQueue = false;
  var initialTimeMs = Scheduler_now();
  var now = initialTimeMs < 10000 ? Scheduler_now : function () {
    return Scheduler_now() - initialTimeMs;
  };
  function getCurrentPriorityLevel() {
    switch (Scheduler_getCurrentPriorityLevel()) {
      case Scheduler_ImmediatePriority:
        return ImmediatePriority;
      case Scheduler_UserBlockingPriority:
        return UserBlockingPriority$1;
      case Scheduler_NormalPriority:
        return NormalPriority;
      case Scheduler_LowPriority:
        return LowPriority;
      case Scheduler_IdlePriority:
        return IdlePriority;
      default:
        {
          {
            throw Error("Unknown priority level.");
          }
        }
    }
  }
  function reactPriorityToSchedulerPriority(reactPriorityLevel) {
    switch (reactPriorityLevel) {
      case ImmediatePriority:
        return Scheduler_ImmediatePriority;
      case UserBlockingPriority$1:
        return Scheduler_UserBlockingPriority;
      case NormalPriority:
        return Scheduler_NormalPriority;
      case LowPriority:
        return Scheduler_LowPriority;
      case IdlePriority:
        return Scheduler_IdlePriority;
      default:
        {
          {
            throw Error("Unknown priority level.");
          }
        }
    }
  }
  function runWithPriority$1(reactPriorityLevel, fn) {
    var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
    return Scheduler_runWithPriority(priorityLevel, fn);
  }
  function scheduleCallback(reactPriorityLevel, callback, options) {
    var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
    return Scheduler_scheduleCallback(priorityLevel, callback, options);
  }
  function scheduleSyncCallback(callback) {
    if (syncQueue === null) {
      syncQueue = [callback];
      immediateQueueCallbackNode = Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueueImpl);
    } else {
      syncQueue.push(callback);
    }
    return fakeCallbackNode;
  }
  function cancelCallback(callbackNode) {
    if (callbackNode !== fakeCallbackNode) {
      Scheduler_cancelCallback(callbackNode);
    }
  }
  function flushSyncCallbackQueue() {
    if (immediateQueueCallbackNode !== null) {
      var node = immediateQueueCallbackNode;
      immediateQueueCallbackNode = null;
      Scheduler_cancelCallback(node);
    }
    flushSyncCallbackQueueImpl();
  }
  function flushSyncCallbackQueueImpl() {
    if (!isFlushingSyncQueue && syncQueue !== null) {
      isFlushingSyncQueue = true;
      var i = 0;
      try {
        var _isSync = true;
        var queue = syncQueue;
        runWithPriority$1(ImmediatePriority, function () {
          for (; i < queue.length; i++) {
            var callback = queue[i];
            do {
              callback = callback(_isSync);
            } while (callback !== null);
          }
        });
        syncQueue = null;
      } catch (error) {
        if (syncQueue !== null) {
          syncQueue = syncQueue.slice(i + 1);
        }
        Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueue);
        throw error;
      } finally {
        isFlushingSyncQueue = false;
      }
    }
  }
  var NoMode = 0;
  var StrictMode = 1;
  var BlockingMode = 2;
  var ConcurrentMode = 4;
  var ProfileMode = 8;
  var MAX_SIGNED_31_BIT_INT = 1073741823;
  var NoWork = 0;
  var Never = 1;
  var Idle = 2;
  var ContinuousHydration = 3;
  var Sync = MAX_SIGNED_31_BIT_INT;
  var Batched = Sync - 1;
  var UNIT_SIZE = 10;
  var MAGIC_NUMBER_OFFSET = Batched - 1;
  function msToExpirationTime(ms) {
    return MAGIC_NUMBER_OFFSET - (ms / UNIT_SIZE | 0);
  }
  function expirationTimeToMs(expirationTime) {
    return (MAGIC_NUMBER_OFFSET - expirationTime) * UNIT_SIZE;
  }
  function ceiling(num, precision) {
    return ((num / precision | 0) + 1) * precision;
  }
  function computeExpirationBucket(currentTime, expirationInMs, bucketSizeMs) {
    return MAGIC_NUMBER_OFFSET - ceiling(MAGIC_NUMBER_OFFSET - currentTime + expirationInMs / UNIT_SIZE, bucketSizeMs / UNIT_SIZE);
  }
  var LOW_PRIORITY_EXPIRATION = 5000;
  var LOW_PRIORITY_BATCH_SIZE = 250;
  function computeAsyncExpiration(currentTime) {
    return computeExpirationBucket(currentTime, LOW_PRIORITY_EXPIRATION, LOW_PRIORITY_BATCH_SIZE);
  }
  function computeSuspenseExpiration(currentTime, timeoutMs) {
    return computeExpirationBucket(currentTime, timeoutMs, LOW_PRIORITY_BATCH_SIZE);
  }
  var HIGH_PRIORITY_EXPIRATION = 500;
  var HIGH_PRIORITY_BATCH_SIZE = 100;
  function computeInteractiveExpiration(currentTime) {
    return computeExpirationBucket(currentTime, HIGH_PRIORITY_EXPIRATION, HIGH_PRIORITY_BATCH_SIZE);
  }
  function inferPriorityFromExpirationTime(currentTime, expirationTime) {
    if (expirationTime === Sync) {
      return ImmediatePriority;
    }
    if (expirationTime === Never || expirationTime === Idle) {
      return IdlePriority;
    }
    var msUntil = expirationTimeToMs(expirationTime) - expirationTimeToMs(currentTime);
    if (msUntil <= 0) {
      return ImmediatePriority;
    }
    if (msUntil <= HIGH_PRIORITY_EXPIRATION + HIGH_PRIORITY_BATCH_SIZE) {
      return UserBlockingPriority$1;
    }
    if (msUntil <= LOW_PRIORITY_EXPIRATION + LOW_PRIORITY_BATCH_SIZE) {
      return NormalPriority;
    }
    return IdlePriority;
  }
  var ReactStrictModeWarnings = {
    recordUnsafeLifecycleWarnings: function (fiber, instance) {},
    flushPendingUnsafeLifecycleWarnings: function () {},
    recordLegacyContextWarning: function (fiber, instance) {},
    flushLegacyContextWarning: function () {},
    discardPendingWarnings: function () {}
  };
  {
    var findStrictRoot = function (fiber) {
      var maybeStrictRoot = null;
      var node = fiber;
      while (node !== null) {
        if (node.mode & StrictMode) {
          maybeStrictRoot = node;
        }
        node = node.return;
      }
      return maybeStrictRoot;
    };
    var setToSortedString = function (set) {
      var array = [];
      set.forEach(function (value) {
        array.push(value);
      });
      return array.sort().join(', ');
    };
    var pendingComponentWillMountWarnings = [];
    var pendingUNSAFE_ComponentWillMountWarnings = [];
    var pendingComponentWillReceivePropsWarnings = [];
    var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
    var pendingComponentWillUpdateWarnings = [];
    var pendingUNSAFE_ComponentWillUpdateWarnings = [];
    var didWarnAboutUnsafeLifecycles = new Set();
    ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function (fiber, instance) {
      if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
        return;
      }
      if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true) {
        pendingComponentWillMountWarnings.push(fiber);
      }
      if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillMount === 'function') {
        pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
      }
      if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
        pendingComponentWillReceivePropsWarnings.push(fiber);
      }
      if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
        pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
      }
      if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
        pendingComponentWillUpdateWarnings.push(fiber);
      }
      if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillUpdate === 'function') {
        pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
      }
    };
    ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function () {
      var componentWillMountUniqueNames = new Set();
      if (pendingComponentWillMountWarnings.length > 0) {
        pendingComponentWillMountWarnings.forEach(function (fiber) {
          componentWillMountUniqueNames.add(getComponentName(fiber.type) || 'Component');
          didWarnAboutUnsafeLifecycles.add(fiber.type);
        });
        pendingComponentWillMountWarnings = [];
      }
      var UNSAFE_componentWillMountUniqueNames = new Set();
      if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
        pendingUNSAFE_ComponentWillMountWarnings.forEach(function (fiber) {
          UNSAFE_componentWillMountUniqueNames.add(getComponentName(fiber.type) || 'Component');
          didWarnAboutUnsafeLifecycles.add(fiber.type);
        });
        pendingUNSAFE_ComponentWillMountWarnings = [];
      }
      var componentWillReceivePropsUniqueNames = new Set();
      if (pendingComponentWillReceivePropsWarnings.length > 0) {
        pendingComponentWillReceivePropsWarnings.forEach(function (fiber) {
          componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || 'Component');
          didWarnAboutUnsafeLifecycles.add(fiber.type);
        });
        pendingComponentWillReceivePropsWarnings = [];
      }
      var UNSAFE_componentWillReceivePropsUniqueNames = new Set();
      if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
        pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function (fiber) {
          UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || 'Component');
          didWarnAboutUnsafeLifecycles.add(fiber.type);
        });
        pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
      }
      var componentWillUpdateUniqueNames = new Set();
      if (pendingComponentWillUpdateWarnings.length > 0) {
        pendingComponentWillUpdateWarnings.forEach(function (fiber) {
          componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || 'Component');
          didWarnAboutUnsafeLifecycles.add(fiber.type);
        });
        pendingComponentWillUpdateWarnings = [];
      }
      var UNSAFE_componentWillUpdateUniqueNames = new Set();
      if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
        pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function (fiber) {
          UNSAFE_componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || 'Component');
          didWarnAboutUnsafeLifecycles.add(fiber.type);
        });
        pendingUNSAFE_ComponentWillUpdateWarnings = [];
      }
      if (UNSAFE_componentWillMountUniqueNames.size > 0) {
        var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
        error('Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. ' + 'See https://fb.me/react-unsafe-component-lifecycles for details.\n\n' + '* Move code with side effects to componentDidMount, and set initial state in the constructor.\n' + '\nPlease update the following components: %s', sortedNames);
      }
      if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
        var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
        error('Using UNSAFE_componentWillReceiveProps in strict mode is not recommended ' + 'and may indicate bugs in your code. ' + 'See https://fb.me/react-unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + "* If you're updating state whenever props change, " + 'refactor your code to use memoization techniques or move it to ' + 'static getDerivedStateFromProps. Learn more at: https://fb.me/react-derived-state\n' + '\nPlease update the following components: %s', _sortedNames);
      }
      if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
        var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
        error('Using UNSAFE_componentWillUpdate in strict mode is not recommended ' + 'and may indicate bugs in your code. ' + 'See https://fb.me/react-unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + '\nPlease update the following components: %s', _sortedNames2);
      }
      if (componentWillMountUniqueNames.size > 0) {
        var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
        warn('componentWillMount has been renamed, and is not recommended for use. ' + 'See https://fb.me/react-unsafe-component-lifecycles for details.\n\n' + '* Move code with side effects to componentDidMount, and set initial state in the constructor.\n' + '* Rename componentWillMount to UNSAFE_componentWillMount to suppress ' + 'this warning in non-strict mode. In React 17.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n' + '\nPlease update the following components: %s', _sortedNames3);
      }
      if (componentWillReceivePropsUniqueNames.size > 0) {
        var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
        warn('componentWillReceiveProps has been renamed, and is not recommended for use. ' + 'See https://fb.me/react-unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + "* If you're updating state whenever props change, refactor your " + 'code to use memoization techniques or move it to ' + 'static getDerivedStateFromProps. Learn more at: https://fb.me/react-derived-state\n' + '* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress ' + 'this warning in non-strict mode. In React 17.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n' + '\nPlease update the following components: %s', _sortedNames4);
      }
      if (componentWillUpdateUniqueNames.size > 0) {
        var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
        warn('componentWillUpdate has been renamed, and is not recommended for use. ' + 'See https://fb.me/react-unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + '* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress ' + 'this warning in non-strict mode. In React 17.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n' + '\nPlease update the following components: %s', _sortedNames5);
      }
    };
    var pendingLegacyContextWarning = new Map();
    var didWarnAboutLegacyContext = new Set();
    ReactStrictModeWarnings.recordLegacyContextWarning = function (fiber, instance) {
      var strictRoot = findStrictRoot(fiber);
      if (strictRoot === null) {
        error('Expected to find a StrictMode component in a strict mode tree. ' + 'This error is likely caused by a bug in React. Please file an issue.');
        return;
      }
      if (didWarnAboutLegacyContext.has(fiber.type)) {
        return;
      }
      var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
      if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === 'function') {
        if (warningsForRoot === undefined) {
          warningsForRoot = [];
          pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
        }
        warningsForRoot.push(fiber);
      }
    };
    ReactStrictModeWarnings.flushLegacyContextWarning = function () {
      pendingLegacyContextWarning.forEach(function (fiberArray, strictRoot) {
        if (fiberArray.length === 0) {
          return;
        }
        var firstFiber = fiberArray[0];
        var uniqueNames = new Set();
        fiberArray.forEach(function (fiber) {
          uniqueNames.add(getComponentName(fiber.type) || 'Component');
          didWarnAboutLegacyContext.add(fiber.type);
        });
        var sortedNames = setToSortedString(uniqueNames);
        var firstComponentStack = getStackByFiberInDevAndProd(firstFiber);
        error('Legacy context API has been detected within a strict-mode tree.' + '\n\nThe old API will be supported in all 16.x releases, but applications ' + 'using it should migrate to the new version.' + '\n\nPlease update the following components: %s' + '\n\nLearn more about this warning here: https://fb.me/react-legacy-context' + '%s', sortedNames, firstComponentStack);
      });
    };
    ReactStrictModeWarnings.discardPendingWarnings = function () {
      pendingComponentWillMountWarnings = [];
      pendingUNSAFE_ComponentWillMountWarnings = [];
      pendingComponentWillReceivePropsWarnings = [];
      pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
      pendingComponentWillUpdateWarnings = [];
      pendingUNSAFE_ComponentWillUpdateWarnings = [];
      pendingLegacyContextWarning = new Map();
    };
  }
  var resolveFamily = null;
  var failedBoundaries = null;
  var setRefreshHandler = function (handler) {
    {
      resolveFamily = handler;
    }
  };
  function resolveFunctionForHotReloading(type) {
    {
      if (resolveFamily === null) {
        return type;
      }
      var family = resolveFamily(type);
      if (family === undefined) {
        return type;
      }
      return family.current;
    }
  }
  function resolveClassForHotReloading(type) {
    return resolveFunctionForHotReloading(type);
  }
  function resolveForwardRefForHotReloading(type) {
    {
      if (resolveFamily === null) {
        return type;
      }
      var family = resolveFamily(type);
      if (family === undefined) {
        if (type !== null && type !== undefined && typeof type.render === 'function') {
          var currentRender = resolveFunctionForHotReloading(type.render);
          if (type.render !== currentRender) {
            var syntheticType = {
              $$typeof: REACT_FORWARD_REF_TYPE,
              render: currentRender
            };
            if (type.displayName !== undefined) {
              syntheticType.displayName = type.displayName;
            }
            return syntheticType;
          }
        }
        return type;
      }
      return family.current;
    }
  }
  function isCompatibleFamilyForHotReloading(fiber, element) {
    {
      if (resolveFamily === null) {
        return false;
      }
      var prevType = fiber.elementType;
      var nextType = element.type;
      var needsCompareFamilies = false;
      var $$typeofNextType = typeof nextType === 'object' && nextType !== null ? nextType.$$typeof : null;
      switch (fiber.tag) {
        case ClassComponent:
          {
            if (typeof nextType === 'function') {
              needsCompareFamilies = true;
            }
            break;
          }
        case FunctionComponent:
          {
            if (typeof nextType === 'function') {
              needsCompareFamilies = true;
            } else if ($$typeofNextType === REACT_LAZY_TYPE) {
              needsCompareFamilies = true;
            }
            break;
          }
        case ForwardRef:
          {
            if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
              needsCompareFamilies = true;
            } else if ($$typeofNextType === REACT_LAZY_TYPE) {
              needsCompareFamilies = true;
            }
            break;
          }
        case MemoComponent:
        case SimpleMemoComponent:
          {
            if ($$typeofNextType === REACT_MEMO_TYPE) {
              needsCompareFamilies = true;
            } else if ($$typeofNextType === REACT_LAZY_TYPE) {
              needsCompareFamilies = true;
            }
            break;
          }
        default:
          return false;
      }
      if (needsCompareFamilies) {
        var prevFamily = resolveFamily(prevType);
        if (prevFamily !== undefined && prevFamily === resolveFamily(nextType)) {
          return true;
        }
      }
      return false;
    }
  }
  function markFailedErrorBoundaryForHotReloading(fiber) {
    {
      if (resolveFamily === null) {
        return;
      }
      if (typeof WeakSet !== 'function') {
        return;
      }
      if (failedBoundaries === null) {
        failedBoundaries = new WeakSet();
      }
      failedBoundaries.add(fiber);
    }
  }
  var scheduleRefresh = function (root, update) {
    {
      if (resolveFamily === null) {
        return;
      }
      var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;
      flushPassiveEffects();
      flushSync(function () {
        scheduleFibersWithFamiliesRecursively(root.current, updatedFamilies, staleFamilies);
      });
    }
  };
  var scheduleRoot = function (root, element) {
    {
      if (root.context !== emptyContextObject) {
        return;
      }
      flushPassiveEffects();
      syncUpdates(function () {
        updateContainer(element, root, null, null);
      });
    }
  };
  function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
    {
      var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
      var candidateType = null;
      switch (tag) {
        case FunctionComponent:
        case SimpleMemoComponent:
        case ClassComponent:
          candidateType = type;
          break;
        case ForwardRef:
          candidateType = type.render;
          break;
      }
      if (resolveFamily === null) {
        throw new Error('Expected resolveFamily to be set during hot reload.');
      }
      var needsRender = false;
      var needsRemount = false;
      if (candidateType !== null) {
        var family = resolveFamily(candidateType);
        if (family !== undefined) {
          if (staleFamilies.has(family)) {
            needsRemount = true;
          } else if (updatedFamilies.has(family)) {
            if (tag === ClassComponent) {
              needsRemount = true;
            } else {
              needsRender = true;
            }
          }
        }
      }
      if (failedBoundaries !== null) {
        if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
          needsRemount = true;
        }
      }
      if (needsRemount) {
        fiber._debugNeedsRemount = true;
      }
      if (needsRemount || needsRender) {
        scheduleWork(fiber, Sync);
      }
      if (child !== null && !needsRemount) {
        scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
      }
      if (sibling !== null) {
        scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
      }
    }
  }
  var findHostInstancesForRefresh = function (root, families) {
    {
      var hostInstances = new Set();
      var types = new Set(families.map(function (family) {
        return family.current;
      }));
      findHostInstancesForMatchingFibersRecursively(root.current, types, hostInstances);
      return hostInstances;
    }
  };
  function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
    {
      var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
      var candidateType = null;
      switch (tag) {
        case FunctionComponent:
        case SimpleMemoComponent:
        case ClassComponent:
          candidateType = type;
          break;
        case ForwardRef:
          candidateType = type.render;
          break;
      }
      var didMatch = false;
      if (candidateType !== null) {
        if (types.has(candidateType)) {
          didMatch = true;
        }
      }
      if (didMatch) {
        findHostInstancesForFiberShallowly(fiber, hostInstances);
      } else {
        if (child !== null) {
          findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
        }
      }
      if (sibling !== null) {
        findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
      }
    }
  }
  function findHostInstancesForFiberShallowly(fiber, hostInstances) {
    {
      var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
      if (foundHostInstances) {
        return;
      }
      var node = fiber;
      while (true) {
        switch (node.tag) {
          case HostComponent:
            hostInstances.add(node.stateNode);
            return;
          case HostPortal:
            hostInstances.add(node.stateNode.containerInfo);
            return;
          case HostRoot:
            hostInstances.add(node.stateNode.containerInfo);
            return;
        }
        if (node.return === null) {
          throw new Error('Expected to reach root first.');
        }
        node = node.return;
      }
    }
  }
  function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
    {
      var node = fiber;
      var foundHostInstances = false;
      while (true) {
        if (node.tag === HostComponent) {
          foundHostInstances = true;
          hostInstances.add(node.stateNode);
        } else if (node.child !== null) {
          node.child.return = node;
          node = node.child;
          continue;
        }
        if (node === fiber) {
          return foundHostInstances;
        }
        while (node.sibling === null) {
          if (node.return === null || node.return === fiber) {
            return foundHostInstances;
          }
          node = node.return;
        }
        node.sibling.return = node.return;
        node = node.sibling;
      }
    }
    return false;
  }
  function resolveDefaultProps(Component, baseProps) {
    if (Component && Component.defaultProps) {
      var props = _assign({}, baseProps);
      var defaultProps = Component.defaultProps;
      for (var propName in defaultProps) {
        if (props[propName] === undefined) {
          props[propName] = defaultProps[propName];
        }
      }
      return props;
    }
    return baseProps;
  }
  function readLazyComponentType(lazyComponent) {
    initializeLazyComponentType(lazyComponent);
    if (lazyComponent._status !== Resolved) {
      throw lazyComponent._result;
    }
    return lazyComponent._result;
  }
  var valueCursor = createCursor(null);
  var rendererSigil;
  {
    rendererSigil = {};
  }
  var currentlyRenderingFiber = null;
  var lastContextDependency = null;
  var lastContextWithAllBitsObserved = null;
  var isDisallowedContextReadInDEV = false;
  function resetContextDependencies() {
    currentlyRenderingFiber = null;
    lastContextDependency = null;
    lastContextWithAllBitsObserved = null;
    {
      isDisallowedContextReadInDEV = false;
    }
  }
  function enterDisallowedContextReadInDEV() {
    {
      isDisallowedContextReadInDEV = true;
    }
  }
  function exitDisallowedContextReadInDEV() {
    {
      isDisallowedContextReadInDEV = false;
    }
  }
  function pushProvider(providerFiber, nextValue) {
    var context = providerFiber.type._context;
    {
      push(valueCursor, context._currentValue, providerFiber);
      context._currentValue = nextValue;
      {
        if (context._currentRenderer !== undefined && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
          error('Detected multiple renderers concurrently rendering the ' + 'same context provider. This is currently unsupported.');
        }
        context._currentRenderer = rendererSigil;
      }
    }
  }
  function popProvider(providerFiber) {
    var currentValue = valueCursor.current;
    pop(valueCursor, providerFiber);
    var context = providerFiber.type._context;
    {
      context._currentValue = currentValue;
    }
  }
  function calculateChangedBits(context, newValue, oldValue) {
    if (objectIs(oldValue, newValue)) {
      return 0;
    } else {
      var changedBits = typeof context._calculateChangedBits === 'function' ? context._calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT;
      {
        if ((changedBits & MAX_SIGNED_31_BIT_INT) !== changedBits) {
          error('calculateChangedBits: Expected the return value to be a ' + '31-bit integer. Instead received: %s', changedBits);
        }
      }
      return changedBits | 0;
    }
  }
  function scheduleWorkOnParentPath(parent, renderExpirationTime) {
    var node = parent;
    while (node !== null) {
      var alternate = node.alternate;
      if (node.childExpirationTime < renderExpirationTime) {
        node.childExpirationTime = renderExpirationTime;
        if (alternate !== null && alternate.childExpirationTime < renderExpirationTime) {
          alternate.childExpirationTime = renderExpirationTime;
        }
      } else if (alternate !== null && alternate.childExpirationTime < renderExpirationTime) {
        alternate.childExpirationTime = renderExpirationTime;
      } else {
        break;
      }
      node = node.return;
    }
  }
  function propagateContextChange(workInProgress, context, changedBits, renderExpirationTime) {
    var fiber = workInProgress.child;
    if (fiber !== null) {
      fiber.return = workInProgress;
    }
    while (fiber !== null) {
      var nextFiber = void 0;
      var list = fiber.dependencies;
      if (list !== null) {
        nextFiber = fiber.child;
        var dependency = list.firstContext;
        while (dependency !== null) {
          if (dependency.context === context && (dependency.observedBits & changedBits) !== 0) {
            if (fiber.tag === ClassComponent) {
              var update = createUpdate(renderExpirationTime, null);
              update.tag = ForceUpdate;
              enqueueUpdate(fiber, update);
            }
            if (fiber.expirationTime < renderExpirationTime) {
              fiber.expirationTime = renderExpirationTime;
            }
            var alternate = fiber.alternate;
            if (alternate !== null && alternate.expirationTime < renderExpirationTime) {
              alternate.expirationTime = renderExpirationTime;
            }
            scheduleWorkOnParentPath(fiber.return, renderExpirationTime);
            if (list.expirationTime < renderExpirationTime) {
              list.expirationTime = renderExpirationTime;
            }
            break;
          }
          dependency = dependency.next;
        }
      } else if (fiber.tag === ContextProvider) {
        nextFiber = fiber.type === workInProgress.type ? null : fiber.child;
      } else {
        nextFiber = fiber.child;
      }
      if (nextFiber !== null) {
        nextFiber.return = fiber;
      } else {
        nextFiber = fiber;
        while (nextFiber !== null) {
          if (nextFiber === workInProgress) {
            nextFiber = null;
            break;
          }
          var sibling = nextFiber.sibling;
          if (sibling !== null) {
            sibling.return = nextFiber.return;
            nextFiber = sibling;
            break;
          }
          nextFiber = nextFiber.return;
        }
      }
      fiber = nextFiber;
    }
  }
  function prepareToReadContext(workInProgress, renderExpirationTime) {
    currentlyRenderingFiber = workInProgress;
    lastContextDependency = null;
    lastContextWithAllBitsObserved = null;
    var dependencies = workInProgress.dependencies;
    if (dependencies !== null) {
      var firstContext = dependencies.firstContext;
      if (firstContext !== null) {
        if (dependencies.expirationTime >= renderExpirationTime) {
          markWorkInProgressReceivedUpdate();
        }
        dependencies.firstContext = null;
      }
    }
  }
  function readContext(context, observedBits) {
    {
      if (isDisallowedContextReadInDEV) {
        error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');
      }
    }
    if (lastContextWithAllBitsObserved === context) ; else if (observedBits === false || observedBits === 0) ; else {
      var resolvedObservedBits;
      if (typeof observedBits !== 'number' || observedBits === MAX_SIGNED_31_BIT_INT) {
        lastContextWithAllBitsObserved = context;
        resolvedObservedBits = MAX_SIGNED_31_BIT_INT;
      } else {
        resolvedObservedBits = observedBits;
      }
      var contextItem = {
        context: context,
        observedBits: resolvedObservedBits,
        next: null
      };
      if (lastContextDependency === null) {
        if (!(currentlyRenderingFiber !== null)) {
          {
            throw Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
          }
        }
        lastContextDependency = contextItem;
        currentlyRenderingFiber.dependencies = {
          expirationTime: NoWork,
          firstContext: contextItem,
          responders: null
        };
      } else {
        lastContextDependency = lastContextDependency.next = contextItem;
      }
    }
    return context._currentValue;
  }
  var UpdateState = 0;
  var ReplaceState = 1;
  var ForceUpdate = 2;
  var CaptureUpdate = 3;
  var hasForceUpdate = false;
  var didWarnUpdateInsideUpdate;
  var currentlyProcessingQueue;
  {
    didWarnUpdateInsideUpdate = false;
    currentlyProcessingQueue = null;
  }
  function initializeUpdateQueue(fiber) {
    var queue = {
      baseState: fiber.memoizedState,
      baseQueue: null,
      shared: {
        pending: null
      },
      effects: null
    };
    fiber.updateQueue = queue;
  }
  function cloneUpdateQueue(current, workInProgress) {
    var queue = workInProgress.updateQueue;
    var currentQueue = current.updateQueue;
    if (queue === currentQueue) {
      var clone = {
        baseState: currentQueue.baseState,
        baseQueue: currentQueue.baseQueue,
        shared: currentQueue.shared,
        effects: currentQueue.effects
      };
      workInProgress.updateQueue = clone;
    }
  }
  function createUpdate(expirationTime, suspenseConfig) {
    var update = {
      expirationTime: expirationTime,
      suspenseConfig: suspenseConfig,
      tag: UpdateState,
      payload: null,
      callback: null,
      next: null
    };
    update.next = update;
    {
      update.priority = getCurrentPriorityLevel();
    }
    return update;
  }
  function enqueueUpdate(fiber, update) {
    var updateQueue = fiber.updateQueue;
    if (updateQueue === null) {
      return;
    }
    var sharedQueue = updateQueue.shared;
    var pending = sharedQueue.pending;
    if (pending === null) {
      update.next = update;
    } else {
      update.next = pending.next;
      pending.next = update;
    }
    sharedQueue.pending = update;
    {
      if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
        error('An update (setState, replaceState, or forceUpdate) was scheduled ' + 'from inside an update function. Update functions should be pure, ' + 'with zero side-effects. Consider using componentDidUpdate or a ' + 'callback.');
        didWarnUpdateInsideUpdate = true;
      }
    }
  }
  function enqueueCapturedUpdate(workInProgress, update) {
    var current = workInProgress.alternate;
    if (current !== null) {
      cloneUpdateQueue(current, workInProgress);
    }
    var queue = workInProgress.updateQueue;
    var last = queue.baseQueue;
    if (last === null) {
      queue.baseQueue = update.next = update;
      update.next = update;
    } else {
      update.next = last.next;
      last.next = update;
    }
  }
  function getStateFromUpdate(workInProgress, queue, update, prevState, nextProps, instance) {
    switch (update.tag) {
      case ReplaceState:
        {
          var payload = update.payload;
          if (typeof payload === 'function') {
            {
              enterDisallowedContextReadInDEV();
              if (workInProgress.mode & StrictMode) {
                payload.call(instance, prevState, nextProps);
              }
            }
            var nextState = payload.call(instance, prevState, nextProps);
            {
              exitDisallowedContextReadInDEV();
            }
            return nextState;
          }
          return payload;
        }
      case CaptureUpdate:
        {
          workInProgress.effectTag = workInProgress.effectTag & ~ShouldCapture | DidCapture;
        }
      case UpdateState:
        {
          var _payload = update.payload;
          var partialState;
          if (typeof _payload === 'function') {
            {
              enterDisallowedContextReadInDEV();
              if (workInProgress.mode & StrictMode) {
                _payload.call(instance, prevState, nextProps);
              }
            }
            partialState = _payload.call(instance, prevState, nextProps);
            {
              exitDisallowedContextReadInDEV();
            }
          } else {
            partialState = _payload;
          }
          if (partialState === null || partialState === undefined) {
            return prevState;
          }
          return _assign({}, prevState, partialState);
        }
      case ForceUpdate:
        {
          hasForceUpdate = true;
          return prevState;
        }
    }
    return prevState;
  }
  function processUpdateQueue(workInProgress, props, instance, renderExpirationTime) {
    var queue = workInProgress.updateQueue;
    hasForceUpdate = false;
    {
      currentlyProcessingQueue = queue.shared;
    }
    var baseQueue = queue.baseQueue;
    var pendingQueue = queue.shared.pending;
    if (pendingQueue !== null) {
      if (baseQueue !== null) {
        var baseFirst = baseQueue.next;
        var pendingFirst = pendingQueue.next;
        baseQueue.next = pendingFirst;
        pendingQueue.next = baseFirst;
      }
      baseQueue = pendingQueue;
      queue.shared.pending = null;
      var current = workInProgress.alternate;
      if (current !== null) {
        var currentQueue = current.updateQueue;
        if (currentQueue !== null) {
          currentQueue.baseQueue = pendingQueue;
        }
      }
    }
    if (baseQueue !== null) {
      var first = baseQueue.next;
      var newState = queue.baseState;
      var newExpirationTime = NoWork;
      var newBaseState = null;
      var newBaseQueueFirst = null;
      var newBaseQueueLast = null;
      if (first !== null) {
        var update = first;
        do {
          var updateExpirationTime = update.expirationTime;
          if (updateExpirationTime < renderExpirationTime) {
            var clone = {
              expirationTime: update.expirationTime,
              suspenseConfig: update.suspenseConfig,
              tag: update.tag,
              payload: update.payload,
              callback: update.callback,
              next: null
            };
            if (newBaseQueueLast === null) {
              newBaseQueueFirst = newBaseQueueLast = clone;
              newBaseState = newState;
            } else {
              newBaseQueueLast = newBaseQueueLast.next = clone;
            }
            if (updateExpirationTime > newExpirationTime) {
              newExpirationTime = updateExpirationTime;
            }
          } else {
            if (newBaseQueueLast !== null) {
              var _clone = {
                expirationTime: Sync,
                suspenseConfig: update.suspenseConfig,
                tag: update.tag,
                payload: update.payload,
                callback: update.callback,
                next: null
              };
              newBaseQueueLast = newBaseQueueLast.next = _clone;
            }
            markRenderEventTimeAndConfig(updateExpirationTime, update.suspenseConfig);
            newState = getStateFromUpdate(workInProgress, queue, update, newState, props, instance);
            var callback = update.callback;
            if (callback !== null) {
              workInProgress.effectTag |= Callback;
              var effects = queue.effects;
              if (effects === null) {
                queue.effects = [update];
              } else {
                effects.push(update);
              }
            }
          }
          update = update.next;
          if (update === null || update === first) {
            pendingQueue = queue.shared.pending;
            if (pendingQueue === null) {
              break;
            } else {
              update = baseQueue.next = pendingQueue.next;
              pendingQueue.next = first;
              queue.baseQueue = baseQueue = pendingQueue;
              queue.shared.pending = null;
            }
          }
        } while (true);
      }
      if (newBaseQueueLast === null) {
        newBaseState = newState;
      } else {
        newBaseQueueLast.next = newBaseQueueFirst;
      }
      queue.baseState = newBaseState;
      queue.baseQueue = newBaseQueueLast;
      markUnprocessedUpdateTime(newExpirationTime);
      workInProgress.expirationTime = newExpirationTime;
      workInProgress.memoizedState = newState;
    }
    {
      currentlyProcessingQueue = null;
    }
  }
  function callCallback(callback, context) {
    if (!(typeof callback === 'function')) {
      {
        throw Error("Invalid argument passed as callback. Expected a function. Instead received: " + callback);
      }
    }
    callback.call(context);
  }
  function resetHasForceUpdateBeforeProcessing() {
    hasForceUpdate = false;
  }
  function checkHasForceUpdateAfterProcessing() {
    return hasForceUpdate;
  }
  function commitUpdateQueue(finishedWork, finishedQueue, instance) {
    var effects = finishedQueue.effects;
    finishedQueue.effects = null;
    if (effects !== null) {
      for (var i = 0; i < effects.length; i++) {
        var effect = effects[i];
        var callback = effect.callback;
        if (callback !== null) {
          effect.callback = null;
          callCallback(callback, instance);
        }
      }
    }
  }
  var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
  function requestCurrentSuspenseConfig() {
    return ReactCurrentBatchConfig.suspense;
  }
  var fakeInternalInstance = {};
  var isArray = Array.isArray;
  var emptyRefsObject = new React.Component().refs;
  var didWarnAboutStateAssignmentForComponent;
  var didWarnAboutUninitializedState;
  var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
  var didWarnAboutLegacyLifecyclesAndDerivedState;
  var didWarnAboutUndefinedDerivedState;
  var warnOnUndefinedDerivedState;
  var warnOnInvalidCallback;
  var didWarnAboutDirectlyAssigningPropsToState;
  var didWarnAboutContextTypeAndContextTypes;
  var didWarnAboutInvalidateContextType;
  {
    didWarnAboutStateAssignmentForComponent = new Set();
    didWarnAboutUninitializedState = new Set();
    didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();
    didWarnAboutLegacyLifecyclesAndDerivedState = new Set();
    didWarnAboutDirectlyAssigningPropsToState = new Set();
    didWarnAboutUndefinedDerivedState = new Set();
    didWarnAboutContextTypeAndContextTypes = new Set();
    didWarnAboutInvalidateContextType = new Set();
    var didWarnOnInvalidCallback = new Set();
    warnOnInvalidCallback = function (callback, callerName) {
      if (callback === null || typeof callback === 'function') {
        return;
      }
      var key = callerName + "_" + callback;
      if (!didWarnOnInvalidCallback.has(key)) {
        didWarnOnInvalidCallback.add(key);
        error('%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback);
      }
    };
    warnOnUndefinedDerivedState = function (type, partialState) {
      if (partialState === undefined) {
        var componentName = getComponentName(type) || 'Component';
        if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
          didWarnAboutUndefinedDerivedState.add(componentName);
          error('%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. ' + 'You have returned undefined.', componentName);
        }
      }
    };
    Object.defineProperty(fakeInternalInstance, '_processChildContext', {
      enumerable: false,
      value: function () {
        {
          {
            throw Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
          }
        }
      }
    });
    Object.freeze(fakeInternalInstance);
  }
  function applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, nextProps) {
    var prevState = workInProgress.memoizedState;
    {
      if (workInProgress.mode & StrictMode) {
        getDerivedStateFromProps(nextProps, prevState);
      }
    }
    var partialState = getDerivedStateFromProps(nextProps, prevState);
    {
      warnOnUndefinedDerivedState(ctor, partialState);
    }
    var memoizedState = partialState === null || partialState === undefined ? prevState : _assign({}, prevState, partialState);
    workInProgress.memoizedState = memoizedState;
    if (workInProgress.expirationTime === NoWork) {
      var updateQueue = workInProgress.updateQueue;
      updateQueue.baseState = memoizedState;
    }
  }
  var classComponentUpdater = {
    isMounted: isMounted,
    enqueueSetState: function (inst, payload, callback) {
      var fiber = get(inst);
      var currentTime = requestCurrentTimeForUpdate();
      var suspenseConfig = requestCurrentSuspenseConfig();
      var expirationTime = computeExpirationForFiber(currentTime, fiber, suspenseConfig);
      var update = createUpdate(expirationTime, suspenseConfig);
      update.payload = payload;
      if (callback !== undefined && callback !== null) {
        {
          warnOnInvalidCallback(callback, 'setState');
        }
        update.callback = callback;
      }
      enqueueUpdate(fiber, update);
      scheduleWork(fiber, expirationTime);
    },
    enqueueReplaceState: function (inst, payload, callback) {
      var fiber = get(inst);
      var currentTime = requestCurrentTimeForUpdate();
      var suspenseConfig = requestCurrentSuspenseConfig();
      var expirationTime = computeExpirationForFiber(currentTime, fiber, suspenseConfig);
      var update = createUpdate(expirationTime, suspenseConfig);
      update.tag = ReplaceState;
      update.payload = payload;
      if (callback !== undefined && callback !== null) {
        {
          warnOnInvalidCallback(callback, 'replaceState');
        }
        update.callback = callback;
      }
      enqueueUpdate(fiber, update);
      scheduleWork(fiber, expirationTime);
    },
    enqueueForceUpdate: function (inst, callback) {
      var fiber = get(inst);
      var currentTime = requestCurrentTimeForUpdate();
      var suspenseConfig = requestCurrentSuspenseConfig();
      var expirationTime = computeExpirationForFiber(currentTime, fiber, suspenseConfig);
      var update = createUpdate(expirationTime, suspenseConfig);
      update.tag = ForceUpdate;
      if (callback !== undefined && callback !== null) {
        {
          warnOnInvalidCallback(callback, 'forceUpdate');
        }
        update.callback = callback;
      }
      enqueueUpdate(fiber, update);
      scheduleWork(fiber, expirationTime);
    }
  };
  function checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) {
    var instance = workInProgress.stateNode;
    if (typeof instance.shouldComponentUpdate === 'function') {
      {
        if (workInProgress.mode & StrictMode) {
          instance.shouldComponentUpdate(newProps, newState, nextContext);
        }
      }
      startPhaseTimer(workInProgress, 'shouldComponentUpdate');
      var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
      stopPhaseTimer();
      {
        if (shouldUpdate === undefined) {
          error('%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', getComponentName(ctor) || 'Component');
        }
      }
      return shouldUpdate;
    }
    if (ctor.prototype && ctor.prototype.isPureReactComponent) {
      return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
    }
    return true;
  }
  function checkClassInstance(workInProgress, ctor, newProps) {
    var instance = workInProgress.stateNode;
    {
      var name = getComponentName(ctor) || 'Component';
      var renderPresent = instance.render;
      if (!renderPresent) {
        if (ctor.prototype && typeof ctor.prototype.render === 'function') {
          error('%s(...): No `render` method found on the returned component ' + 'instance: did you accidentally return an object from the constructor?', name);
        } else {
          error('%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', name);
        }
      }
      if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
        error('getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', name);
      }
      if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
        error('getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', name);
      }
      if (instance.propTypes) {
        error('propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', name);
      }
      if (instance.contextType) {
        error('contextType was defined as an instance property on %s. Use a static ' + 'property to define contextType instead.', name);
      }
      {
        if (instance.contextTypes) {
          error('contextTypes was defined as an instance property on %s. Use a static ' + 'property to define contextTypes instead.', name);
        }
        if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
          didWarnAboutContextTypeAndContextTypes.add(ctor);
          error('%s declares both contextTypes and contextType static properties. ' + 'The legacy contextTypes property will be ignored.', name);
        }
      }
      if (typeof instance.componentShouldUpdate === 'function') {
        error('%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', name);
      }
      if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== 'undefined') {
        error('%s has a method called shouldComponentUpdate(). ' + 'shouldComponentUpdate should not be used when extending React.PureComponent. ' + 'Please extend React.Component if shouldComponentUpdate is used.', getComponentName(ctor) || 'A pure component');
      }
      if (typeof instance.componentDidUnmount === 'function') {
        error('%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', name);
      }
      if (typeof instance.componentDidReceiveProps === 'function') {
        error('%s has a method called ' + 'componentDidReceiveProps(). But there is no such lifecycle method. ' + 'If you meant to update the state in response to changing props, ' + 'use componentWillReceiveProps(). If you meant to fetch data or ' + 'run side-effects or mutations after React has updated the UI, use componentDidUpdate().', name);
      }
      if (typeof instance.componentWillRecieveProps === 'function') {
        error('%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', name);
      }
      if (typeof instance.UNSAFE_componentWillRecieveProps === 'function') {
        error('%s has a method called ' + 'UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?', name);
      }
      var hasMutatedProps = instance.props !== newProps;
      if (instance.props !== undefined && hasMutatedProps) {
        error('%s(...): When calling super() in `%s`, make sure to pass ' + "up the same props that your component's constructor was passed.", name, name);
      }
      if (instance.defaultProps) {
        error('Setting defaultProps as an instance property on %s is not supported and will be ignored.' + ' Instead, define defaultProps as a static property on %s.', name, name);
      }
      if (typeof instance.getSnapshotBeforeUpdate === 'function' && typeof instance.componentDidUpdate !== 'function' && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
        didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
        error('%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). ' + 'This component defines getSnapshotBeforeUpdate() only.', getComponentName(ctor));
      }
      if (typeof instance.getDerivedStateFromProps === 'function') {
        error('%s: getDerivedStateFromProps() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name);
      }
      if (typeof instance.getDerivedStateFromError === 'function') {
        error('%s: getDerivedStateFromError() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name);
      }
      if (typeof ctor.getSnapshotBeforeUpdate === 'function') {
        error('%s: getSnapshotBeforeUpdate() is defined as a static method ' + 'and will be ignored. Instead, declare it as an instance method.', name);
      }
      var _state = instance.state;
      if (_state && (typeof _state !== 'object' || isArray(_state))) {
        error('%s.state: must be set to an object or null', name);
      }
      if (typeof instance.getChildContext === 'function' && typeof ctor.childContextTypes !== 'object') {
        error('%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', name);
      }
    }
  }
  function adoptClassInstance(workInProgress, instance) {
    instance.updater = classComponentUpdater;
    workInProgress.stateNode = instance;
    set(instance, workInProgress);
    {
      instance._reactInternalInstance = fakeInternalInstance;
    }
  }
  function constructClassInstance(workInProgress, ctor, props) {
    var isLegacyContextConsumer = false;
    var unmaskedContext = emptyContextObject;
    var context = emptyContextObject;
    var contextType = ctor.contextType;
    {
      if (('contextType' in ctor)) {
        var isValid = contextType === null || contextType !== undefined && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === undefined;
        if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
          didWarnAboutInvalidateContextType.add(ctor);
          var addendum = '';
          if (contextType === undefined) {
            addendum = ' However, it is set to undefined. ' + 'This can be caused by a typo or by mixing up named and default imports. ' + 'This can also happen due to a circular dependency, so ' + 'try moving the createContext() call to a separate file.';
          } else if (typeof contextType !== 'object') {
            addendum = ' However, it is set to a ' + typeof contextType + '.';
          } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
            addendum = ' Did you accidentally pass the Context.Provider instead?';
          } else if (contextType._context !== undefined) {
            addendum = ' Did you accidentally pass the Context.Consumer instead?';
          } else {
            addendum = ' However, it is set to an object with keys {' + Object.keys(contextType).join(', ') + '}.';
          }
          error('%s defines an invalid contextType. ' + 'contextType should point to the Context object returned by React.createContext().%s', getComponentName(ctor) || 'Component', addendum);
        }
      }
    }
    if (typeof contextType === 'object' && contextType !== null) {
      context = readContext(contextType);
    } else {
      unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
      var contextTypes = ctor.contextTypes;
      isLegacyContextConsumer = contextTypes !== null && contextTypes !== undefined;
      context = isLegacyContextConsumer ? getMaskedContext(workInProgress, unmaskedContext) : emptyContextObject;
    }
    {
      if (workInProgress.mode & StrictMode) {
        new ctor(props, context);
      }
    }
    var instance = new ctor(props, context);
    var state = workInProgress.memoizedState = instance.state !== null && instance.state !== undefined ? instance.state : null;
    adoptClassInstance(workInProgress, instance);
    {
      if (typeof ctor.getDerivedStateFromProps === 'function' && state === null) {
        var componentName = getComponentName(ctor) || 'Component';
        if (!didWarnAboutUninitializedState.has(componentName)) {
          didWarnAboutUninitializedState.add(componentName);
          error('`%s` uses `getDerivedStateFromProps` but its initial state is ' + '%s. This is not recommended. Instead, define the initial state by ' + 'assigning an object to `this.state` in the constructor of `%s`. ' + 'This ensures that `getDerivedStateFromProps` arguments have a consistent shape.', componentName, instance.state === null ? 'null' : 'undefined', componentName);
        }
      }
      if (typeof ctor.getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function') {
        var foundWillMountName = null;
        var foundWillReceivePropsName = null;
        var foundWillUpdateName = null;
        if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true) {
          foundWillMountName = 'componentWillMount';
        } else if (typeof instance.UNSAFE_componentWillMount === 'function') {
          foundWillMountName = 'UNSAFE_componentWillMount';
        }
        if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
          foundWillReceivePropsName = 'componentWillReceiveProps';
        } else if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
          foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';
        }
        if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
          foundWillUpdateName = 'componentWillUpdate';
        } else if (typeof instance.UNSAFE_componentWillUpdate === 'function') {
          foundWillUpdateName = 'UNSAFE_componentWillUpdate';
        }
        if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
          var _componentName = getComponentName(ctor) || 'Component';
          var newApiName = typeof ctor.getDerivedStateFromProps === 'function' ? 'getDerivedStateFromProps()' : 'getSnapshotBeforeUpdate()';
          if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
            didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
            error('Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n' + '%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\n' + 'The above lifecycles should be removed. Learn more about this warning here:\n' + 'https://fb.me/react-unsafe-component-lifecycles', _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : '', foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : '', foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : '');
          }
        }
      }
    }
    if (isLegacyContextConsumer) {
      cacheContext(workInProgress, unmaskedContext, context);
    }
    return instance;
  }
  function callComponentWillMount(workInProgress, instance) {
    startPhaseTimer(workInProgress, 'componentWillMount');
    var oldState = instance.state;
    if (typeof instance.componentWillMount === 'function') {
      instance.componentWillMount();
    }
    if (typeof instance.UNSAFE_componentWillMount === 'function') {
      instance.UNSAFE_componentWillMount();
    }
    stopPhaseTimer();
    if (oldState !== instance.state) {
      {
        error('%s.componentWillMount(): Assigning directly to this.state is ' + "deprecated (except inside a component's " + 'constructor). Use setState instead.', getComponentName(workInProgress.type) || 'Component');
      }
      classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
    }
  }
  function callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext) {
    var oldState = instance.state;
    startPhaseTimer(workInProgress, 'componentWillReceiveProps');
    if (typeof instance.componentWillReceiveProps === 'function') {
      instance.componentWillReceiveProps(newProps, nextContext);
    }
    if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
      instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
    }
    stopPhaseTimer();
    if (instance.state !== oldState) {
      {
        var componentName = getComponentName(workInProgress.type) || 'Component';
        if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
          didWarnAboutStateAssignmentForComponent.add(componentName);
          error('%s.componentWillReceiveProps(): Assigning directly to ' + "this.state is deprecated (except inside a component's " + 'constructor). Use setState instead.', componentName);
        }
      }
      classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
    }
  }
  function mountClassInstance(workInProgress, ctor, newProps, renderExpirationTime) {
    {
      checkClassInstance(workInProgress, ctor, newProps);
    }
    var instance = workInProgress.stateNode;
    instance.props = newProps;
    instance.state = workInProgress.memoizedState;
    instance.refs = emptyRefsObject;
    initializeUpdateQueue(workInProgress);
    var contextType = ctor.contextType;
    if (typeof contextType === 'object' && contextType !== null) {
      instance.context = readContext(contextType);
    } else {
      var unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
      instance.context = getMaskedContext(workInProgress, unmaskedContext);
    }
    {
      if (instance.state === newProps) {
        var componentName = getComponentName(ctor) || 'Component';
        if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
          didWarnAboutDirectlyAssigningPropsToState.add(componentName);
          error('%s: It is not recommended to assign props directly to state ' + "because updates to props won't be reflected in state. " + 'In most cases, it is better to use props directly.', componentName);
        }
      }
      if (workInProgress.mode & StrictMode) {
        ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, instance);
      }
      {
        ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress, instance);
      }
    }
    processUpdateQueue(workInProgress, newProps, instance, renderExpirationTime);
    instance.state = workInProgress.memoizedState;
    var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
    if (typeof getDerivedStateFromProps === 'function') {
      applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
      instance.state = workInProgress.memoizedState;
    }
    if (typeof ctor.getDerivedStateFromProps !== 'function' && typeof instance.getSnapshotBeforeUpdate !== 'function' && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
      callComponentWillMount(workInProgress, instance);
      processUpdateQueue(workInProgress, newProps, instance, renderExpirationTime);
      instance.state = workInProgress.memoizedState;
    }
    if (typeof instance.componentDidMount === 'function') {
      workInProgress.effectTag |= Update;
    }
  }
  function resumeMountClassInstance(workInProgress, ctor, newProps, renderExpirationTime) {
    var instance = workInProgress.stateNode;
    var oldProps = workInProgress.memoizedProps;
    instance.props = oldProps;
    var oldContext = instance.context;
    var contextType = ctor.contextType;
    var nextContext = emptyContextObject;
    if (typeof contextType === 'object' && contextType !== null) {
      nextContext = readContext(contextType);
    } else {
      var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
      nextContext = getMaskedContext(workInProgress, nextLegacyUnmaskedContext);
    }
    var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
    var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function';
    if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
      if (oldProps !== newProps || oldContext !== nextContext) {
        callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
      }
    }
    resetHasForceUpdateBeforeProcessing();
    var oldState = workInProgress.memoizedState;
    var newState = instance.state = oldState;
    processUpdateQueue(workInProgress, newProps, instance, renderExpirationTime);
    newState = workInProgress.memoizedState;
    if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
      if (typeof instance.componentDidMount === 'function') {
        workInProgress.effectTag |= Update;
      }
      return false;
    }
    if (typeof getDerivedStateFromProps === 'function') {
      applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
      newState = workInProgress.memoizedState;
    }
    var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);
    if (shouldUpdate) {
      if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
        startPhaseTimer(workInProgress, 'componentWillMount');
        if (typeof instance.componentWillMount === 'function') {
          instance.componentWillMount();
        }
        if (typeof instance.UNSAFE_componentWillMount === 'function') {
          instance.UNSAFE_componentWillMount();
        }
        stopPhaseTimer();
      }
      if (typeof instance.componentDidMount === 'function') {
        workInProgress.effectTag |= Update;
      }
    } else {
      if (typeof instance.componentDidMount === 'function') {
        workInProgress.effectTag |= Update;
      }
      workInProgress.memoizedProps = newProps;
      workInProgress.memoizedState = newState;
    }
    instance.props = newProps;
    instance.state = newState;
    instance.context = nextContext;
    return shouldUpdate;
  }
  function updateClassInstance(current, workInProgress, ctor, newProps, renderExpirationTime) {
    var instance = workInProgress.stateNode;
    cloneUpdateQueue(current, workInProgress);
    var oldProps = workInProgress.memoizedProps;
    instance.props = workInProgress.type === workInProgress.elementType ? oldProps : resolveDefaultProps(workInProgress.type, oldProps);
    var oldContext = instance.context;
    var contextType = ctor.contextType;
    var nextContext = emptyContextObject;
    if (typeof contextType === 'object' && contextType !== null) {
      nextContext = readContext(contextType);
    } else {
      var nextUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
      nextContext = getMaskedContext(workInProgress, nextUnmaskedContext);
    }
    var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
    var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function';
    if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
      if (oldProps !== newProps || oldContext !== nextContext) {
        callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
      }
    }
    resetHasForceUpdateBeforeProcessing();
    var oldState = workInProgress.memoizedState;
    var newState = instance.state = oldState;
    processUpdateQueue(workInProgress, newProps, instance, renderExpirationTime);
    newState = workInProgress.memoizedState;
    if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
      if (typeof instance.componentDidUpdate === 'function') {
        if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
          workInProgress.effectTag |= Update;
        }
      }
      if (typeof instance.getSnapshotBeforeUpdate === 'function') {
        if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
          workInProgress.effectTag |= Snapshot;
        }
      }
      return false;
    }
    if (typeof getDerivedStateFromProps === 'function') {
      applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
      newState = workInProgress.memoizedState;
    }
    var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);
    if (shouldUpdate) {
      if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === 'function' || typeof instance.componentWillUpdate === 'function')) {
        startPhaseTimer(workInProgress, 'componentWillUpdate');
        if (typeof instance.componentWillUpdate === 'function') {
          instance.componentWillUpdate(newProps, newState, nextContext);
        }
        if (typeof instance.UNSAFE_componentWillUpdate === 'function') {
          instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
        }
        stopPhaseTimer();
      }
      if (typeof instance.componentDidUpdate === 'function') {
        workInProgress.effectTag |= Update;
      }
      if (typeof instance.getSnapshotBeforeUpdate === 'function') {
        workInProgress.effectTag |= Snapshot;
      }
    } else {
      if (typeof instance.componentDidUpdate === 'function') {
        if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
          workInProgress.effectTag |= Update;
        }
      }
      if (typeof instance.getSnapshotBeforeUpdate === 'function') {
        if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
          workInProgress.effectTag |= Snapshot;
        }
      }
      workInProgress.memoizedProps = newProps;
      workInProgress.memoizedState = newState;
    }
    instance.props = newProps;
    instance.state = newState;
    instance.context = nextContext;
    return shouldUpdate;
  }
  var didWarnAboutMaps;
  var didWarnAboutGenerators;
  var didWarnAboutStringRefs;
  var ownerHasKeyUseWarning;
  var ownerHasFunctionTypeWarning;
  var warnForMissingKey = function (child) {};
  {
    didWarnAboutMaps = false;
    didWarnAboutGenerators = false;
    didWarnAboutStringRefs = {};
    ownerHasKeyUseWarning = {};
    ownerHasFunctionTypeWarning = {};
    warnForMissingKey = function (child) {
      if (child === null || typeof child !== 'object') {
        return;
      }
      if (!child._store || child._store.validated || child.key != null) {
        return;
      }
      if (!(typeof child._store === 'object')) {
        {
          throw Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
        }
      }
      child._store.validated = true;
      var currentComponentErrorInfo = 'Each child in a list should have a unique ' + '"key" prop. See https://fb.me/react-warning-keys for ' + 'more information.' + getCurrentFiberStackInDev();
      if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
        return;
      }
      ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
      error('Each child in a list should have a unique ' + '"key" prop. See https://fb.me/react-warning-keys for ' + 'more information.');
    };
  }
  var isArray$1 = Array.isArray;
  function coerceRef(returnFiber, current, element) {
    var mixedRef = element.ref;
    if (mixedRef !== null && typeof mixedRef !== 'function' && typeof mixedRef !== 'object') {
      {
        if ((returnFiber.mode & StrictMode || warnAboutStringRefs) && !(element._owner && element._self && element._owner.stateNode !== element._self)) {
          var componentName = getComponentName(returnFiber.type) || 'Component';
          if (!didWarnAboutStringRefs[componentName]) {
            {
              error('A string ref, "%s", has been found within a strict mode tree. ' + 'String refs are a source of potential bugs and should be avoided. ' + 'We recommend using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://fb.me/react-strict-mode-string-ref%s', mixedRef, getStackByFiberInDevAndProd(returnFiber));
            }
            didWarnAboutStringRefs[componentName] = true;
          }
        }
      }
      if (element._owner) {
        var owner = element._owner;
        var inst;
        if (owner) {
          var ownerFiber = owner;
          if (!(ownerFiber.tag === ClassComponent)) {
            {
              throw Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://fb.me/react-strict-mode-string-ref");
            }
          }
          inst = ownerFiber.stateNode;
        }
        if (!inst) {
          {
            throw Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        var stringRef = '' + mixedRef;
        if (current !== null && current.ref !== null && typeof current.ref === 'function' && current.ref._stringRef === stringRef) {
          return current.ref;
        }
        var ref = function (value) {
          var refs = inst.refs;
          if (refs === emptyRefsObject) {
            refs = inst.refs = {};
          }
          if (value === null) {
            delete refs[stringRef];
          } else {
            refs[stringRef] = value;
          }
        };
        ref._stringRef = stringRef;
        return ref;
      } else {
        if (!(typeof mixedRef === 'string')) {
          {
            throw Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
          }
        }
        if (!element._owner) {
          {
            throw Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://fb.me/react-refs-must-have-owner for more information.");
          }
        }
      }
    }
    return mixedRef;
  }
  function throwOnInvalidObjectType(returnFiber, newChild) {
    if (returnFiber.type !== 'textarea') {
      var addendum = '';
      {
        addendum = ' If you meant to render a collection of children, use an array ' + 'instead.' + getCurrentFiberStackInDev();
      }
      {
        {
          throw Error("Objects are not valid as a React child (found: " + (Object.prototype.toString.call(newChild) === '[object Object]' ? 'object with keys {' + Object.keys(newChild).join(', ') + '}' : newChild) + ")." + addendum);
        }
      }
    }
  }
  function warnOnFunctionType() {
    {
      var currentComponentErrorInfo = 'Functions are not valid as a React child. This may happen if ' + 'you return a Component instead of <Component /> from render. ' + 'Or maybe you meant to call this function rather than return it.' + getCurrentFiberStackInDev();
      if (ownerHasFunctionTypeWarning[currentComponentErrorInfo]) {
        return;
      }
      ownerHasFunctionTypeWarning[currentComponentErrorInfo] = true;
      error('Functions are not valid as a React child. This may happen if ' + 'you return a Component instead of <Component /> from render. ' + 'Or maybe you meant to call this function rather than return it.');
    }
  }
  function ChildReconciler(shouldTrackSideEffects) {
    function deleteChild(returnFiber, childToDelete) {
      if (!shouldTrackSideEffects) {
        return;
      }
      var last = returnFiber.lastEffect;
      if (last !== null) {
        last.nextEffect = childToDelete;
        returnFiber.lastEffect = childToDelete;
      } else {
        returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
      }
      childToDelete.nextEffect = null;
      childToDelete.effectTag = Deletion;
    }
    function deleteRemainingChildren(returnFiber, currentFirstChild) {
      if (!shouldTrackSideEffects) {
        return null;
      }
      var childToDelete = currentFirstChild;
      while (childToDelete !== null) {
        deleteChild(returnFiber, childToDelete);
        childToDelete = childToDelete.sibling;
      }
      return null;
    }
    function mapRemainingChildren(returnFiber, currentFirstChild) {
      var existingChildren = new Map();
      var existingChild = currentFirstChild;
      while (existingChild !== null) {
        if (existingChild.key !== null) {
          existingChildren.set(existingChild.key, existingChild);
        } else {
          existingChildren.set(existingChild.index, existingChild);
        }
        existingChild = existingChild.sibling;
      }
      return existingChildren;
    }
    function useFiber(fiber, pendingProps) {
      var clone = createWorkInProgress(fiber, pendingProps);
      clone.index = 0;
      clone.sibling = null;
      return clone;
    }
    function placeChild(newFiber, lastPlacedIndex, newIndex) {
      newFiber.index = newIndex;
      if (!shouldTrackSideEffects) {
        return lastPlacedIndex;
      }
      var current = newFiber.alternate;
      if (current !== null) {
        var oldIndex = current.index;
        if (oldIndex < lastPlacedIndex) {
          newFiber.effectTag = Placement;
          return lastPlacedIndex;
        } else {
          return oldIndex;
        }
      } else {
        newFiber.effectTag = Placement;
        return lastPlacedIndex;
      }
    }
    function placeSingleChild(newFiber) {
      if (shouldTrackSideEffects && newFiber.alternate === null) {
        newFiber.effectTag = Placement;
      }
      return newFiber;
    }
    function updateTextNode(returnFiber, current, textContent, expirationTime) {
      if (current === null || current.tag !== HostText) {
        var created = createFiberFromText(textContent, returnFiber.mode, expirationTime);
        created.return = returnFiber;
        return created;
      } else {
        var existing = useFiber(current, textContent);
        existing.return = returnFiber;
        return existing;
      }
    }
    function updateElement(returnFiber, current, element, expirationTime) {
      if (current !== null) {
        if (current.elementType === element.type || isCompatibleFamilyForHotReloading(current, element)) {
          var existing = useFiber(current, element.props);
          existing.ref = coerceRef(returnFiber, current, element);
          existing.return = returnFiber;
          {
            existing._debugSource = element._source;
            existing._debugOwner = element._owner;
          }
          return existing;
        }
      }
      var created = createFiberFromElement(element, returnFiber.mode, expirationTime);
      created.ref = coerceRef(returnFiber, current, element);
      created.return = returnFiber;
      return created;
    }
    function updatePortal(returnFiber, current, portal, expirationTime) {
      if (current === null || current.tag !== HostPortal || current.stateNode.containerInfo !== portal.containerInfo || current.stateNode.implementation !== portal.implementation) {
        var created = createFiberFromPortal(portal, returnFiber.mode, expirationTime);
        created.return = returnFiber;
        return created;
      } else {
        var existing = useFiber(current, portal.children || []);
        existing.return = returnFiber;
        return existing;
      }
    }
    function updateFragment(returnFiber, current, fragment, expirationTime, key) {
      if (current === null || current.tag !== Fragment) {
        var created = createFiberFromFragment(fragment, returnFiber.mode, expirationTime, key);
        created.return = returnFiber;
        return created;
      } else {
        var existing = useFiber(current, fragment);
        existing.return = returnFiber;
        return existing;
      }
    }
    function createChild(returnFiber, newChild, expirationTime) {
      if (typeof newChild === 'string' || typeof newChild === 'number') {
        var created = createFiberFromText('' + newChild, returnFiber.mode, expirationTime);
        created.return = returnFiber;
        return created;
      }
      if (typeof newChild === 'object' && newChild !== null) {
        switch (newChild.$$typeof) {
          case REACT_ELEMENT_TYPE:
            {
              var _created = createFiberFromElement(newChild, returnFiber.mode, expirationTime);
              _created.ref = coerceRef(returnFiber, null, newChild);
              _created.return = returnFiber;
              return _created;
            }
          case REACT_PORTAL_TYPE:
            {
              var _created2 = createFiberFromPortal(newChild, returnFiber.mode, expirationTime);
              _created2.return = returnFiber;
              return _created2;
            }
        }
        if (isArray$1(newChild) || getIteratorFn(newChild)) {
          var _created3 = createFiberFromFragment(newChild, returnFiber.mode, expirationTime, null);
          _created3.return = returnFiber;
          return _created3;
        }
        throwOnInvalidObjectType(returnFiber, newChild);
      }
      {
        if (typeof newChild === 'function') {
          warnOnFunctionType();
        }
      }
      return null;
    }
    function updateSlot(returnFiber, oldFiber, newChild, expirationTime) {
      var key = oldFiber !== null ? oldFiber.key : null;
      if (typeof newChild === 'string' || typeof newChild === 'number') {
        if (key !== null) {
          return null;
        }
        return updateTextNode(returnFiber, oldFiber, '' + newChild, expirationTime);
      }
      if (typeof newChild === 'object' && newChild !== null) {
        switch (newChild.$$typeof) {
          case REACT_ELEMENT_TYPE:
            {
              if (newChild.key === key) {
                if (newChild.type === REACT_FRAGMENT_TYPE) {
                  return updateFragment(returnFiber, oldFiber, newChild.props.children, expirationTime, key);
                }
                return updateElement(returnFiber, oldFiber, newChild, expirationTime);
              } else {
                return null;
              }
            }
          case REACT_PORTAL_TYPE:
            {
              if (newChild.key === key) {
                return updatePortal(returnFiber, oldFiber, newChild, expirationTime);
              } else {
                return null;
              }
            }
        }
        if (isArray$1(newChild) || getIteratorFn(newChild)) {
          if (key !== null) {
            return null;
          }
          return updateFragment(returnFiber, oldFiber, newChild, expirationTime, null);
        }
        throwOnInvalidObjectType(returnFiber, newChild);
      }
      {
        if (typeof newChild === 'function') {
          warnOnFunctionType();
        }
      }
      return null;
    }
    function updateFromMap(existingChildren, returnFiber, newIdx, newChild, expirationTime) {
      if (typeof newChild === 'string' || typeof newChild === 'number') {
        var matchedFiber = existingChildren.get(newIdx) || null;
        return updateTextNode(returnFiber, matchedFiber, '' + newChild, expirationTime);
      }
      if (typeof newChild === 'object' && newChild !== null) {
        switch (newChild.$$typeof) {
          case REACT_ELEMENT_TYPE:
            {
              var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
              if (newChild.type === REACT_FRAGMENT_TYPE) {
                return updateFragment(returnFiber, _matchedFiber, newChild.props.children, expirationTime, newChild.key);
              }
              return updateElement(returnFiber, _matchedFiber, newChild, expirationTime);
            }
          case REACT_PORTAL_TYPE:
            {
              var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
              return updatePortal(returnFiber, _matchedFiber2, newChild, expirationTime);
            }
        }
        if (isArray$1(newChild) || getIteratorFn(newChild)) {
          var _matchedFiber3 = existingChildren.get(newIdx) || null;
          return updateFragment(returnFiber, _matchedFiber3, newChild, expirationTime, null);
        }
        throwOnInvalidObjectType(returnFiber, newChild);
      }
      {
        if (typeof newChild === 'function') {
          warnOnFunctionType();
        }
      }
      return null;
    }
    function warnOnInvalidKey(child, knownKeys) {
      {
        if (typeof child !== 'object' || child === null) {
          return knownKeys;
        }
        switch (child.$$typeof) {
          case REACT_ELEMENT_TYPE:
          case REACT_PORTAL_TYPE:
            warnForMissingKey(child);
            var key = child.key;
            if (typeof key !== 'string') {
              break;
            }
            if (knownKeys === null) {
              knownKeys = new Set();
              knownKeys.add(key);
              break;
            }
            if (!knownKeys.has(key)) {
              knownKeys.add(key);
              break;
            }
            error('Encountered two children with the same key, `%s`. ' + 'Keys should be unique so that components maintain their identity ' + 'across updates. Non-unique keys may cause children to be ' + 'duplicated and/or omitted — the behavior is unsupported and ' + 'could change in a future version.', key);
            break;
        }
      }
      return knownKeys;
    }
    function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, expirationTime) {
      {
        var knownKeys = null;
        for (var i = 0; i < newChildren.length; i++) {
          var child = newChildren[i];
          knownKeys = warnOnInvalidKey(child, knownKeys);
        }
      }
      var resultingFirstChild = null;
      var previousNewFiber = null;
      var oldFiber = currentFirstChild;
      var lastPlacedIndex = 0;
      var newIdx = 0;
      var nextOldFiber = null;
      for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
        if (oldFiber.index > newIdx) {
          nextOldFiber = oldFiber;
          oldFiber = null;
        } else {
          nextOldFiber = oldFiber.sibling;
        }
        var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], expirationTime);
        if (newFiber === null) {
          if (oldFiber === null) {
            oldFiber = nextOldFiber;
          }
          break;
        }
        if (shouldTrackSideEffects) {
          if (oldFiber && newFiber.alternate === null) {
            deleteChild(returnFiber, oldFiber);
          }
        }
        lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
        if (previousNewFiber === null) {
          resultingFirstChild = newFiber;
        } else {
          previousNewFiber.sibling = newFiber;
        }
        previousNewFiber = newFiber;
        oldFiber = nextOldFiber;
      }
      if (newIdx === newChildren.length) {
        deleteRemainingChildren(returnFiber, oldFiber);
        return resultingFirstChild;
      }
      if (oldFiber === null) {
        for (; newIdx < newChildren.length; newIdx++) {
          var _newFiber = createChild(returnFiber, newChildren[newIdx], expirationTime);
          if (_newFiber === null) {
            continue;
          }
          lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
          if (previousNewFiber === null) {
            resultingFirstChild = _newFiber;
          } else {
            previousNewFiber.sibling = _newFiber;
          }
          previousNewFiber = _newFiber;
        }
        return resultingFirstChild;
      }
      var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
      for (; newIdx < newChildren.length; newIdx++) {
        var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], expirationTime);
        if (_newFiber2 !== null) {
          if (shouldTrackSideEffects) {
            if (_newFiber2.alternate !== null) {
              existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
            }
          }
          lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
          if (previousNewFiber === null) {
            resultingFirstChild = _newFiber2;
          } else {
            previousNewFiber.sibling = _newFiber2;
          }
          previousNewFiber = _newFiber2;
        }
      }
      if (shouldTrackSideEffects) {
        existingChildren.forEach(function (child) {
          return deleteChild(returnFiber, child);
        });
      }
      return resultingFirstChild;
    }
    function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, expirationTime) {
      var iteratorFn = getIteratorFn(newChildrenIterable);
      if (!(typeof iteratorFn === 'function')) {
        {
          throw Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
        }
      }
      {
        if (typeof Symbol === 'function' && newChildrenIterable[Symbol.toStringTag] === 'Generator') {
          if (!didWarnAboutGenerators) {
            error('Using Generators as children is unsupported and will likely yield ' + 'unexpected results because enumerating a generator mutates it. ' + 'You may convert it to an array with `Array.from()` or the ' + '`[...spread]` operator before rendering. Keep in mind ' + 'you might need to polyfill these features for older browsers.');
          }
          didWarnAboutGenerators = true;
        }
        if (newChildrenIterable.entries === iteratorFn) {
          if (!didWarnAboutMaps) {
            error('Using Maps as children is unsupported and will likely yield ' + 'unexpected results. Convert it to a sequence/iterable of keyed ' + 'ReactElements instead.');
          }
          didWarnAboutMaps = true;
        }
        var _newChildren = iteratorFn.call(newChildrenIterable);
        if (_newChildren) {
          var knownKeys = null;
          var _step = _newChildren.next();
          for (; !_step.done; _step = _newChildren.next()) {
            var child = _step.value;
            knownKeys = warnOnInvalidKey(child, knownKeys);
          }
        }
      }
      var newChildren = iteratorFn.call(newChildrenIterable);
      if (!(newChildren != null)) {
        {
          throw Error("An iterable object provided no iterator.");
        }
      }
      var resultingFirstChild = null;
      var previousNewFiber = null;
      var oldFiber = currentFirstChild;
      var lastPlacedIndex = 0;
      var newIdx = 0;
      var nextOldFiber = null;
      var step = newChildren.next();
      for (; oldFiber !== null && !step.done; (newIdx++, step = newChildren.next())) {
        if (oldFiber.index > newIdx) {
          nextOldFiber = oldFiber;
          oldFiber = null;
        } else {
          nextOldFiber = oldFiber.sibling;
        }
        var newFiber = updateSlot(returnFiber, oldFiber, step.value, expirationTime);
        if (newFiber === null) {
          if (oldFiber === null) {
            oldFiber = nextOldFiber;
          }
          break;
        }
        if (shouldTrackSideEffects) {
          if (oldFiber && newFiber.alternate === null) {
            deleteChild(returnFiber, oldFiber);
          }
        }
        lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
        if (previousNewFiber === null) {
          resultingFirstChild = newFiber;
        } else {
          previousNewFiber.sibling = newFiber;
        }
        previousNewFiber = newFiber;
        oldFiber = nextOldFiber;
      }
      if (step.done) {
        deleteRemainingChildren(returnFiber, oldFiber);
        return resultingFirstChild;
      }
      if (oldFiber === null) {
        for (; !step.done; (newIdx++, step = newChildren.next())) {
          var _newFiber3 = createChild(returnFiber, step.value, expirationTime);
          if (_newFiber3 === null) {
            continue;
          }
          lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
          if (previousNewFiber === null) {
            resultingFirstChild = _newFiber3;
          } else {
            previousNewFiber.sibling = _newFiber3;
          }
          previousNewFiber = _newFiber3;
        }
        return resultingFirstChild;
      }
      var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
      for (; !step.done; (newIdx++, step = newChildren.next())) {
        var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, expirationTime);
        if (_newFiber4 !== null) {
          if (shouldTrackSideEffects) {
            if (_newFiber4.alternate !== null) {
              existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
            }
          }
          lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
          if (previousNewFiber === null) {
            resultingFirstChild = _newFiber4;
          } else {
            previousNewFiber.sibling = _newFiber4;
          }
          previousNewFiber = _newFiber4;
        }
      }
      if (shouldTrackSideEffects) {
        existingChildren.forEach(function (child) {
          return deleteChild(returnFiber, child);
        });
      }
      return resultingFirstChild;
    }
    function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, expirationTime) {
      if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
        deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
        var existing = useFiber(currentFirstChild, textContent);
        existing.return = returnFiber;
        return existing;
      }
      deleteRemainingChildren(returnFiber, currentFirstChild);
      var created = createFiberFromText(textContent, returnFiber.mode, expirationTime);
      created.return = returnFiber;
      return created;
    }
    function reconcileSingleElement(returnFiber, currentFirstChild, element, expirationTime) {
      var key = element.key;
      var child = currentFirstChild;
      while (child !== null) {
        if (child.key === key) {
          switch (child.tag) {
            case Fragment:
              {
                if (element.type === REACT_FRAGMENT_TYPE) {
                  deleteRemainingChildren(returnFiber, child.sibling);
                  var existing = useFiber(child, element.props.children);
                  existing.return = returnFiber;
                  {
                    existing._debugSource = element._source;
                    existing._debugOwner = element._owner;
                  }
                  return existing;
                }
                break;
              }
            case Block:
            default:
              {
                if (child.elementType === element.type || isCompatibleFamilyForHotReloading(child, element)) {
                  deleteRemainingChildren(returnFiber, child.sibling);
                  var _existing3 = useFiber(child, element.props);
                  _existing3.ref = coerceRef(returnFiber, child, element);
                  _existing3.return = returnFiber;
                  {
                    _existing3._debugSource = element._source;
                    _existing3._debugOwner = element._owner;
                  }
                  return _existing3;
                }
                break;
              }
          }
          deleteRemainingChildren(returnFiber, child);
          break;
        } else {
          deleteChild(returnFiber, child);
        }
        child = child.sibling;
      }
      if (element.type === REACT_FRAGMENT_TYPE) {
        var created = createFiberFromFragment(element.props.children, returnFiber.mode, expirationTime, element.key);
        created.return = returnFiber;
        return created;
      } else {
        var _created4 = createFiberFromElement(element, returnFiber.mode, expirationTime);
        _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
        _created4.return = returnFiber;
        return _created4;
      }
    }
    function reconcileSinglePortal(returnFiber, currentFirstChild, portal, expirationTime) {
      var key = portal.key;
      var child = currentFirstChild;
      while (child !== null) {
        if (child.key === key) {
          if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
            deleteRemainingChildren(returnFiber, child.sibling);
            var existing = useFiber(child, portal.children || []);
            existing.return = returnFiber;
            return existing;
          } else {
            deleteRemainingChildren(returnFiber, child);
            break;
          }
        } else {
          deleteChild(returnFiber, child);
        }
        child = child.sibling;
      }
      var created = createFiberFromPortal(portal, returnFiber.mode, expirationTime);
      created.return = returnFiber;
      return created;
    }
    function reconcileChildFibers(returnFiber, currentFirstChild, newChild, expirationTime) {
      var isUnkeyedTopLevelFragment = typeof newChild === 'object' && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
      if (isUnkeyedTopLevelFragment) {
        newChild = newChild.props.children;
      }
      var isObject = typeof newChild === 'object' && newChild !== null;
      if (isObject) {
        switch (newChild.$$typeof) {
          case REACT_ELEMENT_TYPE:
            return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, expirationTime));
          case REACT_PORTAL_TYPE:
            return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, expirationTime));
        }
      }
      if (typeof newChild === 'string' || typeof newChild === 'number') {
        return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, '' + newChild, expirationTime));
      }
      if (isArray$1(newChild)) {
        return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, expirationTime);
      }
      if (getIteratorFn(newChild)) {
        return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, expirationTime);
      }
      if (isObject) {
        throwOnInvalidObjectType(returnFiber, newChild);
      }
      {
        if (typeof newChild === 'function') {
          warnOnFunctionType();
        }
      }
      if (typeof newChild === 'undefined' && !isUnkeyedTopLevelFragment) {
        switch (returnFiber.tag) {
          case ClassComponent:
            {
              {
                var instance = returnFiber.stateNode;
                if (instance.render._isMockFunction) {
                  break;
                }
              }
            }
          case FunctionComponent:
            {
              var Component = returnFiber.type;
              {
                {
                  throw Error((Component.displayName || Component.name || 'Component') + "(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.");
                }
              }
            }
        }
      }
      return deleteRemainingChildren(returnFiber, currentFirstChild);
    }
    return reconcileChildFibers;
  }
  var reconcileChildFibers = ChildReconciler(true);
  var mountChildFibers = ChildReconciler(false);
  function cloneChildFibers(current, workInProgress) {
    if (!(current === null || workInProgress.child === current.child)) {
      {
        throw Error("Resuming work not yet implemented.");
      }
    }
    if (workInProgress.child === null) {
      return;
    }
    var currentChild = workInProgress.child;
    var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
    workInProgress.child = newChild;
    newChild.return = workInProgress;
    while (currentChild.sibling !== null) {
      currentChild = currentChild.sibling;
      newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
      newChild.return = workInProgress;
    }
    newChild.sibling = null;
  }
  function resetChildFibers(workInProgress, renderExpirationTime) {
    var child = workInProgress.child;
    while (child !== null) {
      resetWorkInProgress(child, renderExpirationTime);
      child = child.sibling;
    }
  }
  var NO_CONTEXT = {};
  var contextStackCursor$1 = createCursor(NO_CONTEXT);
  var contextFiberStackCursor = createCursor(NO_CONTEXT);
  var rootInstanceStackCursor = createCursor(NO_CONTEXT);
  function requiredContext(c) {
    if (!(c !== NO_CONTEXT)) {
      {
        throw Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
      }
    }
    return c;
  }
  function getRootHostContainer() {
    var rootInstance = requiredContext(rootInstanceStackCursor.current);
    return rootInstance;
  }
  function pushHostContainer(fiber, nextRootInstance) {
    push(rootInstanceStackCursor, nextRootInstance, fiber);
    push(contextFiberStackCursor, fiber, fiber);
    push(contextStackCursor$1, NO_CONTEXT, fiber);
    var nextRootContext = getRootHostContext(nextRootInstance);
    pop(contextStackCursor$1, fiber);
    push(contextStackCursor$1, nextRootContext, fiber);
  }
  function popHostContainer(fiber) {
    pop(contextStackCursor$1, fiber);
    pop(contextFiberStackCursor, fiber);
    pop(rootInstanceStackCursor, fiber);
  }
  function getHostContext() {
    var context = requiredContext(contextStackCursor$1.current);
    return context;
  }
  function pushHostContext(fiber) {
    var rootInstance = requiredContext(rootInstanceStackCursor.current);
    var context = requiredContext(contextStackCursor$1.current);
    var nextContext = getChildHostContext(context, fiber.type);
    if (context === nextContext) {
      return;
    }
    push(contextFiberStackCursor, fiber, fiber);
    push(contextStackCursor$1, nextContext, fiber);
  }
  function popHostContext(fiber) {
    if (contextFiberStackCursor.current !== fiber) {
      return;
    }
    pop(contextStackCursor$1, fiber);
    pop(contextFiberStackCursor, fiber);
  }
  var DefaultSuspenseContext = 0;
  var SubtreeSuspenseContextMask = 1;
  var InvisibleParentSuspenseContext = 1;
  var ForceSuspenseFallback = 2;
  var suspenseStackCursor = createCursor(DefaultSuspenseContext);
  function hasSuspenseContext(parentContext, flag) {
    return (parentContext & flag) !== 0;
  }
  function setDefaultShallowSuspenseContext(parentContext) {
    return parentContext & SubtreeSuspenseContextMask;
  }
  function setShallowSuspenseContext(parentContext, shallowContext) {
    return parentContext & SubtreeSuspenseContextMask | shallowContext;
  }
  function addSubtreeSuspenseContext(parentContext, subtreeContext) {
    return parentContext | subtreeContext;
  }
  function pushSuspenseContext(fiber, newContext) {
    push(suspenseStackCursor, newContext, fiber);
  }
  function popSuspenseContext(fiber) {
    pop(suspenseStackCursor, fiber);
  }
  function shouldCaptureSuspense(workInProgress, hasInvisibleParent) {
    var nextState = workInProgress.memoizedState;
    if (nextState !== null) {
      if (nextState.dehydrated !== null) {
        return true;
      }
      return false;
    }
    var props = workInProgress.memoizedProps;
    if (props.fallback === undefined) {
      return false;
    }
    if (props.unstable_avoidThisFallback !== true) {
      return true;
    }
    if (hasInvisibleParent) {
      return false;
    }
    return true;
  }
  function findFirstSuspended(row) {
    var node = row;
    while (node !== null) {
      if (node.tag === SuspenseComponent) {
        var state = node.memoizedState;
        if (state !== null) {
          var dehydrated = state.dehydrated;
          if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
            return node;
          }
        }
      } else if (node.tag === SuspenseListComponent && node.memoizedProps.revealOrder !== undefined) {
        var didSuspend = (node.effectTag & DidCapture) !== NoEffect;
        if (didSuspend) {
          return node;
        }
      } else if (node.child !== null) {
        node.child.return = node;
        node = node.child;
        continue;
      }
      if (node === row) {
        return null;
      }
      while (node.sibling === null) {
        if (node.return === null || node.return === row) {
          return null;
        }
        node = node.return;
      }
      node.sibling.return = node.return;
      node = node.sibling;
    }
    return null;
  }
  function createDeprecatedResponderListener(responder, props) {
    var eventResponderListener = {
      responder: responder,
      props: props
    };
    {
      Object.freeze(eventResponderListener);
    }
    return eventResponderListener;
  }
  var HasEffect = 1;
  var Layout = 2;
  var Passive$1 = 4;
  var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
  var didWarnAboutMismatchedHooksForComponent;
  {
    didWarnAboutMismatchedHooksForComponent = new Set();
  }
  var renderExpirationTime = NoWork;
  var currentlyRenderingFiber$1 = null;
  var currentHook = null;
  var workInProgressHook = null;
  var didScheduleRenderPhaseUpdate = false;
  var RE_RENDER_LIMIT = 25;
  var currentHookNameInDev = null;
  var hookTypesDev = null;
  var hookTypesUpdateIndexDev = -1;
  var ignorePreviousDependencies = false;
  function mountHookTypesDev() {
    {
      var hookName = currentHookNameInDev;
      if (hookTypesDev === null) {
        hookTypesDev = [hookName];
      } else {
        hookTypesDev.push(hookName);
      }
    }
  }
  function updateHookTypesDev() {
    {
      var hookName = currentHookNameInDev;
      if (hookTypesDev !== null) {
        hookTypesUpdateIndexDev++;
        if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
          warnOnHookMismatchInDev(hookName);
        }
      }
    }
  }
  function checkDepsAreArrayDev(deps) {
    {
      if (deps !== undefined && deps !== null && !Array.isArray(deps)) {
        error('%s received a final argument that is not an array (instead, received `%s`). When ' + 'specified, the final argument must be an array.', currentHookNameInDev, typeof deps);
      }
    }
  }
  function warnOnHookMismatchInDev(currentHookName) {
    {
      var componentName = getComponentName(currentlyRenderingFiber$1.type);
      if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
        didWarnAboutMismatchedHooksForComponent.add(componentName);
        if (hookTypesDev !== null) {
          var table = '';
          var secondColumnStart = 30;
          for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {
            var oldHookName = hookTypesDev[i];
            var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
            var row = i + 1 + ". " + oldHookName;
            while (row.length < secondColumnStart) {
              row += ' ';
            }
            row += newHookName + '\n';
            table += row;
          }
          error('React has detected a change in the order of Hooks called by %s. ' + 'This will lead to bugs and errors if not fixed. ' + 'For more information, read the Rules of Hooks: https://fb.me/rules-of-hooks\n\n' + '   Previous render            Next render\n' + '   ------------------------------------------------------\n' + '%s' + '   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n', componentName, table);
        }
      }
    }
  }
  function throwInvalidHookError() {
    {
      {
        throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://fb.me/react-invalid-hook-call for tips about how to debug and fix this problem.");
      }
    }
  }
  function areHookInputsEqual(nextDeps, prevDeps) {
    {
      if (ignorePreviousDependencies) {
        return false;
      }
    }
    if (prevDeps === null) {
      {
        error('%s received a final argument during this render, but not during ' + 'the previous render. Even though the final argument is optional, ' + 'its type cannot change between renders.', currentHookNameInDev);
      }
      return false;
    }
    {
      if (nextDeps.length !== prevDeps.length) {
        error('The final argument passed to %s changed size between renders. The ' + 'order and size of this array must remain constant.\n\n' + 'Previous: %s\n' + 'Incoming: %s', currentHookNameInDev, "[" + prevDeps.join(', ') + "]", "[" + nextDeps.join(', ') + "]");
      }
    }
    for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
      if (objectIs(nextDeps[i], prevDeps[i])) {
        continue;
      }
      return false;
    }
    return true;
  }
  function renderWithHooks(current, workInProgress, Component, props, secondArg, nextRenderExpirationTime) {
    renderExpirationTime = nextRenderExpirationTime;
    currentlyRenderingFiber$1 = workInProgress;
    {
      hookTypesDev = current !== null ? current._debugHookTypes : null;
      hookTypesUpdateIndexDev = -1;
      ignorePreviousDependencies = current !== null && current.type !== workInProgress.type;
    }
    workInProgress.memoizedState = null;
    workInProgress.updateQueue = null;
    workInProgress.expirationTime = NoWork;
    {
      if (current !== null && current.memoizedState !== null) {
        ReactCurrentDispatcher.current = HooksDispatcherOnUpdateInDEV;
      } else if (hookTypesDev !== null) {
        ReactCurrentDispatcher.current = HooksDispatcherOnMountWithHookTypesInDEV;
      } else {
        ReactCurrentDispatcher.current = HooksDispatcherOnMountInDEV;
      }
    }
    var children = Component(props, secondArg);
    if (workInProgress.expirationTime === renderExpirationTime) {
      var numberOfReRenders = 0;
      do {
        workInProgress.expirationTime = NoWork;
        if (!(numberOfReRenders < RE_RENDER_LIMIT)) {
          {
            throw Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
          }
        }
        numberOfReRenders += 1;
        {
          ignorePreviousDependencies = false;
        }
        currentHook = null;
        workInProgressHook = null;
        workInProgress.updateQueue = null;
        {
          hookTypesUpdateIndexDev = -1;
        }
        ReactCurrentDispatcher.current = HooksDispatcherOnRerenderInDEV;
        children = Component(props, secondArg);
      } while (workInProgress.expirationTime === renderExpirationTime);
    }
    ReactCurrentDispatcher.current = ContextOnlyDispatcher;
    {
      workInProgress._debugHookTypes = hookTypesDev;
    }
    var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
    renderExpirationTime = NoWork;
    currentlyRenderingFiber$1 = null;
    currentHook = null;
    workInProgressHook = null;
    {
      currentHookNameInDev = null;
      hookTypesDev = null;
      hookTypesUpdateIndexDev = -1;
    }
    didScheduleRenderPhaseUpdate = false;
    if (!!didRenderTooFewHooks) {
      {
        throw Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
      }
    }
    return children;
  }
  function bailoutHooks(current, workInProgress, expirationTime) {
    workInProgress.updateQueue = current.updateQueue;
    workInProgress.effectTag &= ~(Passive | Update);
    if (current.expirationTime <= expirationTime) {
      current.expirationTime = NoWork;
    }
  }
  function resetHooksAfterThrow() {
    ReactCurrentDispatcher.current = ContextOnlyDispatcher;
    if (didScheduleRenderPhaseUpdate) {
      var hook = currentlyRenderingFiber$1.memoizedState;
      while (hook !== null) {
        var queue = hook.queue;
        if (queue !== null) {
          queue.pending = null;
        }
        hook = hook.next;
      }
    }
    renderExpirationTime = NoWork;
    currentlyRenderingFiber$1 = null;
    currentHook = null;
    workInProgressHook = null;
    {
      hookTypesDev = null;
      hookTypesUpdateIndexDev = -1;
      currentHookNameInDev = null;
    }
    didScheduleRenderPhaseUpdate = false;
  }
  function mountWorkInProgressHook() {
    var hook = {
      memoizedState: null,
      baseState: null,
      baseQueue: null,
      queue: null,
      next: null
    };
    if (workInProgressHook === null) {
      currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
    } else {
      workInProgressHook = workInProgressHook.next = hook;
    }
    return workInProgressHook;
  }
  function updateWorkInProgressHook() {
    var nextCurrentHook;
    if (currentHook === null) {
      var current = currentlyRenderingFiber$1.alternate;
      if (current !== null) {
        nextCurrentHook = current.memoizedState;
      } else {
        nextCurrentHook = null;
      }
    } else {
      nextCurrentHook = currentHook.next;
    }
    var nextWorkInProgressHook;
    if (workInProgressHook === null) {
      nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
    } else {
      nextWorkInProgressHook = workInProgressHook.next;
    }
    if (nextWorkInProgressHook !== null) {
      workInProgressHook = nextWorkInProgressHook;
      nextWorkInProgressHook = workInProgressHook.next;
      currentHook = nextCurrentHook;
    } else {
      if (!(nextCurrentHook !== null)) {
        {
          throw Error("Rendered more hooks than during the previous render.");
        }
      }
      currentHook = nextCurrentHook;
      var newHook = {
        memoizedState: currentHook.memoizedState,
        baseState: currentHook.baseState,
        baseQueue: currentHook.baseQueue,
        queue: currentHook.queue,
        next: null
      };
      if (workInProgressHook === null) {
        currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
      } else {
        workInProgressHook = workInProgressHook.next = newHook;
      }
    }
    return workInProgressHook;
  }
  function createFunctionComponentUpdateQueue() {
    return {
      lastEffect: null
    };
  }
  function basicStateReducer(state, action) {
    return typeof action === 'function' ? action(state) : action;
  }
  function mountReducer(reducer, initialArg, init) {
    var hook = mountWorkInProgressHook();
    var initialState;
    if (init !== undefined) {
      initialState = init(initialArg);
    } else {
      initialState = initialArg;
    }
    hook.memoizedState = hook.baseState = initialState;
    var queue = hook.queue = {
      pending: null,
      dispatch: null,
      lastRenderedReducer: reducer,
      lastRenderedState: initialState
    };
    var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
    return [hook.memoizedState, dispatch];
  }
  function updateReducer(reducer, initialArg, init) {
    var hook = updateWorkInProgressHook();
    var queue = hook.queue;
    if (!(queue !== null)) {
      {
        throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
      }
    }
    queue.lastRenderedReducer = reducer;
    var current = currentHook;
    var baseQueue = current.baseQueue;
    var pendingQueue = queue.pending;
    if (pendingQueue !== null) {
      if (baseQueue !== null) {
        var baseFirst = baseQueue.next;
        var pendingFirst = pendingQueue.next;
        baseQueue.next = pendingFirst;
        pendingQueue.next = baseFirst;
      }
      current.baseQueue = baseQueue = pendingQueue;
      queue.pending = null;
    }
    if (baseQueue !== null) {
      var first = baseQueue.next;
      var newState = current.baseState;
      var newBaseState = null;
      var newBaseQueueFirst = null;
      var newBaseQueueLast = null;
      var update = first;
      do {
        var updateExpirationTime = update.expirationTime;
        if (updateExpirationTime < renderExpirationTime) {
          var clone = {
            expirationTime: update.expirationTime,
            suspenseConfig: update.suspenseConfig,
            action: update.action,
            eagerReducer: update.eagerReducer,
            eagerState: update.eagerState,
            next: null
          };
          if (newBaseQueueLast === null) {
            newBaseQueueFirst = newBaseQueueLast = clone;
            newBaseState = newState;
          } else {
            newBaseQueueLast = newBaseQueueLast.next = clone;
          }
          if (updateExpirationTime > currentlyRenderingFiber$1.expirationTime) {
            currentlyRenderingFiber$1.expirationTime = updateExpirationTime;
            markUnprocessedUpdateTime(updateExpirationTime);
          }
        } else {
          if (newBaseQueueLast !== null) {
            var _clone = {
              expirationTime: Sync,
              suspenseConfig: update.suspenseConfig,
              action: update.action,
              eagerReducer: update.eagerReducer,
              eagerState: update.eagerState,
              next: null
            };
            newBaseQueueLast = newBaseQueueLast.next = _clone;
          }
          markRenderEventTimeAndConfig(updateExpirationTime, update.suspenseConfig);
          if (update.eagerReducer === reducer) {
            newState = update.eagerState;
          } else {
            var action = update.action;
            newState = reducer(newState, action);
          }
        }
        update = update.next;
      } while (update !== null && update !== first);
      if (newBaseQueueLast === null) {
        newBaseState = newState;
      } else {
        newBaseQueueLast.next = newBaseQueueFirst;
      }
      if (!objectIs(newState, hook.memoizedState)) {
        markWorkInProgressReceivedUpdate();
      }
      hook.memoizedState = newState;
      hook.baseState = newBaseState;
      hook.baseQueue = newBaseQueueLast;
      queue.lastRenderedState = newState;
    }
    var dispatch = queue.dispatch;
    return [hook.memoizedState, dispatch];
  }
  function rerenderReducer(reducer, initialArg, init) {
    var hook = updateWorkInProgressHook();
    var queue = hook.queue;
    if (!(queue !== null)) {
      {
        throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
      }
    }
    queue.lastRenderedReducer = reducer;
    var dispatch = queue.dispatch;
    var lastRenderPhaseUpdate = queue.pending;
    var newState = hook.memoizedState;
    if (lastRenderPhaseUpdate !== null) {
      queue.pending = null;
      var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
      var update = firstRenderPhaseUpdate;
      do {
        var action = update.action;
        newState = reducer(newState, action);
        update = update.next;
      } while (update !== firstRenderPhaseUpdate);
      if (!objectIs(newState, hook.memoizedState)) {
        markWorkInProgressReceivedUpdate();
      }
      hook.memoizedState = newState;
      if (hook.baseQueue === null) {
        hook.baseState = newState;
      }
      queue.lastRenderedState = newState;
    }
    return [newState, dispatch];
  }
  function mountState(initialState) {
    var hook = mountWorkInProgressHook();
    if (typeof initialState === 'function') {
      initialState = initialState();
    }
    hook.memoizedState = hook.baseState = initialState;
    var queue = hook.queue = {
      pending: null,
      dispatch: null,
      lastRenderedReducer: basicStateReducer,
      lastRenderedState: initialState
    };
    var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
    return [hook.memoizedState, dispatch];
  }
  function updateState(initialState) {
    return updateReducer(basicStateReducer);
  }
  function rerenderState(initialState) {
    return rerenderReducer(basicStateReducer);
  }
  function pushEffect(tag, create, destroy, deps) {
    var effect = {
      tag: tag,
      create: create,
      destroy: destroy,
      deps: deps,
      next: null
    };
    var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
    if (componentUpdateQueue === null) {
      componentUpdateQueue = createFunctionComponentUpdateQueue();
      currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
      componentUpdateQueue.lastEffect = effect.next = effect;
    } else {
      var lastEffect = componentUpdateQueue.lastEffect;
      if (lastEffect === null) {
        componentUpdateQueue.lastEffect = effect.next = effect;
      } else {
        var firstEffect = lastEffect.next;
        lastEffect.next = effect;
        effect.next = firstEffect;
        componentUpdateQueue.lastEffect = effect;
      }
    }
    return effect;
  }
  function mountRef(initialValue) {
    var hook = mountWorkInProgressHook();
    var ref = {
      current: initialValue
    };
    {
      Object.seal(ref);
    }
    hook.memoizedState = ref;
    return ref;
  }
  function updateRef(initialValue) {
    var hook = updateWorkInProgressHook();
    return hook.memoizedState;
  }
  function mountEffectImpl(fiberEffectTag, hookEffectTag, create, deps) {
    var hook = mountWorkInProgressHook();
    var nextDeps = deps === undefined ? null : deps;
    currentlyRenderingFiber$1.effectTag |= fiberEffectTag;
    hook.memoizedState = pushEffect(HasEffect | hookEffectTag, create, undefined, nextDeps);
  }
  function updateEffectImpl(fiberEffectTag, hookEffectTag, create, deps) {
    var hook = updateWorkInProgressHook();
    var nextDeps = deps === undefined ? null : deps;
    var destroy = undefined;
    if (currentHook !== null) {
      var prevEffect = currentHook.memoizedState;
      destroy = prevEffect.destroy;
      if (nextDeps !== null) {
        var prevDeps = prevEffect.deps;
        if (areHookInputsEqual(nextDeps, prevDeps)) {
          pushEffect(hookEffectTag, create, destroy, nextDeps);
          return;
        }
      }
    }
    currentlyRenderingFiber$1.effectTag |= fiberEffectTag;
    hook.memoizedState = pushEffect(HasEffect | hookEffectTag, create, destroy, nextDeps);
  }
  function mountEffect(create, deps) {
    {
      if ('undefined' !== typeof jest) {
        warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
      }
    }
    return mountEffectImpl(Update | Passive, Passive$1, create, deps);
  }
  function updateEffect(create, deps) {
    {
      if ('undefined' !== typeof jest) {
        warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
      }
    }
    return updateEffectImpl(Update | Passive, Passive$1, create, deps);
  }
  function mountLayoutEffect(create, deps) {
    return mountEffectImpl(Update, Layout, create, deps);
  }
  function updateLayoutEffect(create, deps) {
    return updateEffectImpl(Update, Layout, create, deps);
  }
  function imperativeHandleEffect(create, ref) {
    if (typeof ref === 'function') {
      var refCallback = ref;
      var _inst = create();
      refCallback(_inst);
      return function () {
        refCallback(null);
      };
    } else if (ref !== null && ref !== undefined) {
      var refObject = ref;
      {
        if (!refObject.hasOwnProperty('current')) {
          error('Expected useImperativeHandle() first argument to either be a ' + 'ref callback or React.createRef() object. Instead received: %s.', 'an object with keys {' + Object.keys(refObject).join(', ') + '}');
        }
      }
      var _inst2 = create();
      refObject.current = _inst2;
      return function () {
        refObject.current = null;
      };
    }
  }
  function mountImperativeHandle(ref, create, deps) {
    {
      if (typeof create !== 'function') {
        error('Expected useImperativeHandle() second argument to be a function ' + 'that creates a handle. Instead received: %s.', create !== null ? typeof create : 'null');
      }
    }
    var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;
    return mountEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
  }
  function updateImperativeHandle(ref, create, deps) {
    {
      if (typeof create !== 'function') {
        error('Expected useImperativeHandle() second argument to be a function ' + 'that creates a handle. Instead received: %s.', create !== null ? typeof create : 'null');
      }
    }
    var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;
    return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
  }
  function mountDebugValue(value, formatterFn) {}
  var updateDebugValue = mountDebugValue;
  function mountCallback(callback, deps) {
    var hook = mountWorkInProgressHook();
    var nextDeps = deps === undefined ? null : deps;
    hook.memoizedState = [callback, nextDeps];
    return callback;
  }
  function updateCallback(callback, deps) {
    var hook = updateWorkInProgressHook();
    var nextDeps = deps === undefined ? null : deps;
    var prevState = hook.memoizedState;
    if (prevState !== null) {
      if (nextDeps !== null) {
        var prevDeps = prevState[1];
        if (areHookInputsEqual(nextDeps, prevDeps)) {
          return prevState[0];
        }
      }
    }
    hook.memoizedState = [callback, nextDeps];
    return callback;
  }
  function mountMemo(nextCreate, deps) {
    var hook = mountWorkInProgressHook();
    var nextDeps = deps === undefined ? null : deps;
    var nextValue = nextCreate();
    hook.memoizedState = [nextValue, nextDeps];
    return nextValue;
  }
  function updateMemo(nextCreate, deps) {
    var hook = updateWorkInProgressHook();
    var nextDeps = deps === undefined ? null : deps;
    var prevState = hook.memoizedState;
    if (prevState !== null) {
      if (nextDeps !== null) {
        var prevDeps = prevState[1];
        if (areHookInputsEqual(nextDeps, prevDeps)) {
          return prevState[0];
        }
      }
    }
    var nextValue = nextCreate();
    hook.memoizedState = [nextValue, nextDeps];
    return nextValue;
  }
  function mountDeferredValue(value, config) {
    var _mountState = mountState(value), prevValue = _mountState[0], setValue = _mountState[1];
    mountEffect(function () {
      var previousConfig = ReactCurrentBatchConfig$1.suspense;
      ReactCurrentBatchConfig$1.suspense = config === undefined ? null : config;
      try {
        setValue(value);
      } finally {
        ReactCurrentBatchConfig$1.suspense = previousConfig;
      }
    }, [value, config]);
    return prevValue;
  }
  function updateDeferredValue(value, config) {
    var _updateState = updateState(), prevValue = _updateState[0], setValue = _updateState[1];
    updateEffect(function () {
      var previousConfig = ReactCurrentBatchConfig$1.suspense;
      ReactCurrentBatchConfig$1.suspense = config === undefined ? null : config;
      try {
        setValue(value);
      } finally {
        ReactCurrentBatchConfig$1.suspense = previousConfig;
      }
    }, [value, config]);
    return prevValue;
  }
  function rerenderDeferredValue(value, config) {
    var _rerenderState = rerenderState(), prevValue = _rerenderState[0], setValue = _rerenderState[1];
    updateEffect(function () {
      var previousConfig = ReactCurrentBatchConfig$1.suspense;
      ReactCurrentBatchConfig$1.suspense = config === undefined ? null : config;
      try {
        setValue(value);
      } finally {
        ReactCurrentBatchConfig$1.suspense = previousConfig;
      }
    }, [value, config]);
    return prevValue;
  }
  function startTransition(setPending, config, callback) {
    var priorityLevel = getCurrentPriorityLevel();
    runWithPriority$1(priorityLevel < UserBlockingPriority$1 ? UserBlockingPriority$1 : priorityLevel, function () {
      setPending(true);
    });
    runWithPriority$1(priorityLevel > NormalPriority ? NormalPriority : priorityLevel, function () {
      var previousConfig = ReactCurrentBatchConfig$1.suspense;
      ReactCurrentBatchConfig$1.suspense = config === undefined ? null : config;
      try {
        setPending(false);
        callback();
      } finally {
        ReactCurrentBatchConfig$1.suspense = previousConfig;
      }
    });
  }
  function mountTransition(config) {
    var _mountState2 = mountState(false), isPending = _mountState2[0], setPending = _mountState2[1];
    var start = mountCallback(startTransition.bind(null, setPending, config), [setPending, config]);
    return [start, isPending];
  }
  function updateTransition(config) {
    var _updateState2 = updateState(), isPending = _updateState2[0], setPending = _updateState2[1];
    var start = updateCallback(startTransition.bind(null, setPending, config), [setPending, config]);
    return [start, isPending];
  }
  function rerenderTransition(config) {
    var _rerenderState2 = rerenderState(), isPending = _rerenderState2[0], setPending = _rerenderState2[1];
    var start = updateCallback(startTransition.bind(null, setPending, config), [setPending, config]);
    return [start, isPending];
  }
  function dispatchAction(fiber, queue, action) {
    {
      if (typeof arguments[3] === 'function') {
        error("State updates from the useState() and useReducer() Hooks don't support the " + 'second callback argument. To execute a side effect after ' + 'rendering, declare it in the component body with useEffect().');
      }
    }
    var currentTime = requestCurrentTimeForUpdate();
    var suspenseConfig = requestCurrentSuspenseConfig();
    var expirationTime = computeExpirationForFiber(currentTime, fiber, suspenseConfig);
    var update = {
      expirationTime: expirationTime,
      suspenseConfig: suspenseConfig,
      action: action,
      eagerReducer: null,
      eagerState: null,
      next: null
    };
    {
      update.priority = getCurrentPriorityLevel();
    }
    var pending = queue.pending;
    if (pending === null) {
      update.next = update;
    } else {
      update.next = pending.next;
      pending.next = update;
    }
    queue.pending = update;
    var alternate = fiber.alternate;
    if (fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1) {
      didScheduleRenderPhaseUpdate = true;
      update.expirationTime = renderExpirationTime;
      currentlyRenderingFiber$1.expirationTime = renderExpirationTime;
    } else {
      if (fiber.expirationTime === NoWork && (alternate === null || alternate.expirationTime === NoWork)) {
        var lastRenderedReducer = queue.lastRenderedReducer;
        if (lastRenderedReducer !== null) {
          var prevDispatcher;
          {
            prevDispatcher = ReactCurrentDispatcher.current;
            ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
          }
          try {
            var currentState = queue.lastRenderedState;
            var eagerState = lastRenderedReducer(currentState, action);
            update.eagerReducer = lastRenderedReducer;
            update.eagerState = eagerState;
            if (objectIs(eagerState, currentState)) {
              return;
            }
          } catch (error) {} finally {
            {
              ReactCurrentDispatcher.current = prevDispatcher;
            }
          }
        }
      }
      {
        if ('undefined' !== typeof jest) {
          warnIfNotScopedWithMatchingAct(fiber);
          warnIfNotCurrentlyActingUpdatesInDev(fiber);
        }
      }
      scheduleWork(fiber, expirationTime);
    }
  }
  var ContextOnlyDispatcher = {
    readContext: readContext,
    useCallback: throwInvalidHookError,
    useContext: throwInvalidHookError,
    useEffect: throwInvalidHookError,
    useImperativeHandle: throwInvalidHookError,
    useLayoutEffect: throwInvalidHookError,
    useMemo: throwInvalidHookError,
    useReducer: throwInvalidHookError,
    useRef: throwInvalidHookError,
    useState: throwInvalidHookError,
    useDebugValue: throwInvalidHookError,
    useResponder: throwInvalidHookError,
    useDeferredValue: throwInvalidHookError,
    useTransition: throwInvalidHookError
  };
  var HooksDispatcherOnMountInDEV = null;
  var HooksDispatcherOnMountWithHookTypesInDEV = null;
  var HooksDispatcherOnUpdateInDEV = null;
  var HooksDispatcherOnRerenderInDEV = null;
  var InvalidNestedHooksDispatcherOnMountInDEV = null;
  var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
  var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
  {
    var warnInvalidContextAccess = function () {
      error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');
    };
    var warnInvalidHookAccess = function () {
      error('Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. ' + 'You can only call Hooks at the top level of your React function. ' + 'For more information, see ' + 'https://fb.me/rules-of-hooks');
    };
    HooksDispatcherOnMountInDEV = {
      readContext: function (context, observedBits) {
        return readContext(context, observedBits);
      },
      useCallback: function (callback, deps) {
        currentHookNameInDev = 'useCallback';
        mountHookTypesDev();
        checkDepsAreArrayDev(deps);
        return mountCallback(callback, deps);
      },
      useContext: function (context, observedBits) {
        currentHookNameInDev = 'useContext';
        mountHookTypesDev();
        return readContext(context, observedBits);
      },
      useEffect: function (create, deps) {
        currentHookNameInDev = 'useEffect';
        mountHookTypesDev();
        checkDepsAreArrayDev(deps);
        return mountEffect(create, deps);
      },
      useImperativeHandle: function (ref, create, deps) {
        currentHookNameInDev = 'useImperativeHandle';
        mountHookTypesDev();
        checkDepsAreArrayDev(deps);
        return mountImperativeHandle(ref, create, deps);
      },
      useLayoutEffect: function (create, deps) {
        currentHookNameInDev = 'useLayoutEffect';
        mountHookTypesDev();
        checkDepsAreArrayDev(deps);
        return mountLayoutEffect(create, deps);
      },
      useMemo: function (create, deps) {
        currentHookNameInDev = 'useMemo';
        mountHookTypesDev();
        checkDepsAreArrayDev(deps);
        var prevDispatcher = ReactCurrentDispatcher.current;
        ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;
        try {
          return mountMemo(create, deps);
        } finally {
          ReactCurrentDispatcher.current = prevDispatcher;
        }
      },
      useReducer: function (reducer, initialArg, init) {
        currentHookNameInDev = 'useReducer';
        mountHookTypesDev();
        var prevDispatcher = ReactCurrentDispatcher.current;
        ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;
        try {
          return mountReducer(reducer, initialArg, init);
        } finally {
          ReactCurrentDispatcher.current = prevDispatcher;
        }
      },
      useRef: function (initialValue) {
        currentHookNameInDev = 'useRef';
        mountHookTypesDev();
        return mountRef(initialValue);
      },
      useState: function (initialState) {
        currentHookNameInDev = 'useState';
        mountHookTypesDev();
        var prevDispatcher = ReactCurrentDispatcher.current;
        ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;
        try {
          return mountState(initialState);
        } finally {
          ReactCurrentDispatcher.current = prevDispatcher;
        }
      },
      useDebugValue: function (value, formatterFn) {
        currentHookNameInDev = 'useDebugValue';
        mountHookTypesDev();
        return mountDebugValue();
      },
      useResponder: function (responder, props) {
        currentHookNameInDev = 'useResponder';
        mountHookTypesDev();
        return createDeprecatedResponderListener(responder, props);
      },
      useDeferredValue: function (value, config) {
        currentHookNameInDev = 'useDeferredValue';
        mountHookTypesDev();
        return mountDeferredValue(value, config);
      },
      useTransition: function (config) {
        currentHookNameInDev = 'useTransition';
        mountHookTypesDev();
        return mountTransition(config);
      }
    };
    HooksDispatcherOnMountWithHookTypesInDEV = {
      readContext: function (context, observedBits) {
        return readContext(context, observedBits);
      },
      useCallback: function (callback, deps) {
        currentHookNameInDev = 'useCallback';
        updateHookTypesDev();
        return mountCallback(callback, deps);
      },
      useContext: function (context, observedBits) {
        currentHookNameInDev = 'useContext';
        updateHookTypesDev();
        return readContext(context, observedBits);
      },
      useEffect: function (create, deps) {
        currentHookNameInDev = 'useEffect';
        updateHookTypesDev();
        return mountEffect(create, deps);
      },
      useImperativeHandle: function (ref, create, deps) {
        currentHookNameInDev = 'useImperativeHandle';
        updateHookTypesDev();
        return mountImperativeHandle(ref, create, deps);
      },
      useLayoutEffect: function (create, deps) {
        currentHookNameInDev = 'useLayoutEffect';
        updateHookTypesDev();
        return mountLayoutEffect(create, deps);
      },
      useMemo: function (create, deps) {
        currentHookNameInDev = 'useMemo';
        updateHookTypesDev();
        var prevDispatcher = ReactCurrentDispatcher.current;
        ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;
        try {
          return mountMemo(create, deps);
        } finally {
          ReactCurrentDispatcher.current = prevDispatcher;
        }
      },
      useReducer: function (reducer, initialArg, init) {
        currentHookNameInDev = 'useReducer';
        updateHookTypesDev();
        var prevDispatcher = ReactCurrentDispatcher.current;
        ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;
        try {
          return mountReducer(reducer, initialArg, init);
        } finally {
          ReactCurrentDispatcher.current = prevDispatcher;
        }
      },
      useRef: function (initialValue) {
        currentHookNameInDev = 'useRef';
        updateHookTypesDev();
        return mountRef(initialValue);
      },
      useState: function (initialState) {
        currentHookNameInDev = 'useState';
        updateHookTypesDev();
        var prevDispatcher = ReactCurrentDispatcher.current;
        ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;
        try {
          return mountState(initialState);
        } finally {
          ReactCurrentDispatcher.current = prevDispatcher;
        }
      },
      useDebugValue: function (value, formatterFn) {
        currentHookNameInDev = 'useDebugValue';
        updateHookTypesDev();
        return mountDebugValue();
      },
      useResponder: function (responder, props) {
        currentHookNameInDev = 'useResponder';
        updateHookTypesDev();
        return createDeprecatedResponderListener(responder, props);
      },
      useDeferredValue: function (value, config) {
        currentHookNameInDev = 'useDeferredValue';
        updateHookTypesDev();
        return mountDeferredValue(value, config);
      },
      useTransition: function (config) {
        currentHookNameInDev = 'useTransition';
        updateHookTypesDev();
        return mountTransition(config);
      }
    };
    HooksDispatcherOnUpdateInDEV = {
      readContext: function (context, observedBits) {
        return readContext(context, observedBits);
      },
      useCallback: function (callback, deps) {
        currentHookNameInDev = 'useCallback';
        updateHookTypesDev();
        return updateCallback(callback, deps);
      },
      useContext: function (context, observedBits) {
        currentHookNameInDev = 'useContext';
        updateHookTypesDev();
        return readContext(context, observedBits);
      },
      useEffect: function (create, deps) {
        currentHookNameInDev = 'useEffect';
        updateHookTypesDev();
        return updateEffect(create, deps);
      },
      useImperativeHandle: function (ref, create, deps) {
        currentHookNameInDev = 'useImperativeHandle';
        updateHookTypesDev();
        return updateImperativeHandle(ref, create, deps);
      },
      useLayoutEffect: function (create, deps) {
        currentHookNameInDev = 'useLayoutEffect';
        updateHookTypesDev();
        return updateLayoutEffect(create, deps);
      },
      useMemo: function (create, deps) {
        currentHookNameInDev = 'useMemo';
        updateHookTypesDev();
        var prevDispatcher = ReactCurrentDispatcher.current;
        ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
        try {
          return updateMemo(create, deps);
        } finally {
          ReactCurrentDispatcher.current = prevDispatcher;
        }
      },
      useReducer: function (reducer, initialArg, init) {
        currentHookNameInDev = 'useReducer';
        updateHookTypesDev();
        var prevDispatcher = ReactCurrentDispatcher.current;
        ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
        try {
          return updateReducer(reducer, initialArg, init);
        } finally {
          ReactCurrentDispatcher.current = prevDispatcher;
        }
      },
      useRef: function (initialValue) {
        currentHookNameInDev = 'useRef';
        updateHookTypesDev();
        return updateRef();
      },
      useState: function (initialState) {
        currentHookNameInDev = 'useState';
        updateHookTypesDev();
        var prevDispatcher = ReactCurrentDispatcher.current;
        ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
        try {
          return updateState(initialState);
        } finally {
          ReactCurrentDispatcher.current = prevDispatcher;
        }
      },
      useDebugValue: function (value, formatterFn) {
        currentHookNameInDev = 'useDebugValue';
        updateHookTypesDev();
        return updateDebugValue();
      },
      useResponder: function (responder, props) {
        currentHookNameInDev = 'useResponder';
        updateHookTypesDev();
        return createDeprecatedResponderListener(responder, props);
      },
      useDeferredValue: function (value, config) {
        currentHookNameInDev = 'useDeferredValue';
        updateHookTypesDev();
        return updateDeferredValue(value, config);
      },
      useTransition: function (config) {
        currentHookNameInDev = 'useTransition';
        updateHookTypesDev();
        return updateTransition(config);
      }
    };
    HooksDispatcherOnRerenderInDEV = {
      readContext: function (context, observedBits) {
        return readContext(context, observedBits);
      },
      useCallback: function (callback, deps) {
        currentHookNameInDev = 'useCallback';
        updateHookTypesDev();
        return updateCallback(callback, deps);
      },
      useContext: function (context, observedBits) {
        currentHookNameInDev = 'useContext';
        updateHookTypesDev();
        return readContext(context, observedBits);
      },
      useEffect: function (create, deps) {
        currentHookNameInDev = 'useEffect';
        updateHookTypesDev();
        return updateEffect(create, deps);
      },
      useImperativeHandle: function (ref, create, deps) {
        currentHookNameInDev = 'useImperativeHandle';
        updateHookTypesDev();
        return updateImperativeHandle(ref, create, deps);
      },
      useLayoutEffect: function (create, deps) {
        currentHookNameInDev = 'useLayoutEffect';
        updateHookTypesDev();
        return updateLayoutEffect(create, deps);
      },
      useMemo: function (create, deps) {
        currentHookNameInDev = 'useMemo';
        updateHookTypesDev();
        var prevDispatcher = ReactCurrentDispatcher.current;
        ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
        try {
          return updateMemo(create, deps);
        } finally {
          ReactCurrentDispatcher.current = prevDispatcher;
        }
      },
      useReducer: function (reducer, initialArg, init) {
        currentHookNameInDev = 'useReducer';
        updateHookTypesDev();
        var prevDispatcher = ReactCurrentDispatcher.current;
        ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
        try {
          return rerenderReducer(reducer, initialArg, init);
        } finally {
          ReactCurrentDispatcher.current = prevDispatcher;
        }
      },
      useRef: function (initialValue) {
        currentHookNameInDev = 'useRef';
        updateHookTypesDev();
        return updateRef();
      },
      useState: function (initialState) {
        currentHookNameInDev = 'useState';
        updateHookTypesDev();
        var prevDispatcher = ReactCurrentDispatcher.current;
        ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
        try {
          return rerenderState(initialState);
        } finally {
          ReactCurrentDispatcher.current = prevDispatcher;
        }
      },
      useDebugValue: function (value, formatterFn) {
        currentHookNameInDev = 'useDebugValue';
        updateHookTypesDev();
        return updateDebugValue();
      },
      useResponder: function (responder, props) {
        currentHookNameInDev = 'useResponder';
        updateHookTypesDev();
        return createDeprecatedResponderListener(responder, props);
      },
      useDeferredValue: function (value, config) {
        currentHookNameInDev = 'useDeferredValue';
        updateHookTypesDev();
        return rerenderDeferredValue(value, config);
      },
      useTransition: function (config) {
        currentHookNameInDev = 'useTransition';
        updateHookTypesDev();
        return rerenderTransition(config);
      }
    };
    InvalidNestedHooksDispatcherOnMountInDEV = {
      readContext: function (context, observedBits) {
        warnInvalidContextAccess();
        return readContext(context, observedBits);
      },
      useCallback: function (callback, deps) {
        currentHookNameInDev = 'useCallback';
        warnInvalidHookAccess();
        mountHookTypesDev();
        return mountCallback(callback, deps);
      },
      useContext: function (context, observedBits) {
        currentHookNameInDev = 'useContext';
        warnInvalidHookAccess();
        mountHookTypesDev();
        return readContext(context, observedBits);
      },
      useEffect: function (create, deps) {
        currentHookNameInDev = 'useEffect';
        warnInvalidHookAccess();
        mountHookTypesDev();
        return mountEffect(create, deps);
      },
      useImperativeHandle: function (ref, create, deps) {
        currentHookNameInDev = 'useImperativeHandle';
        warnInvalidHookAccess();
        mountHookTypesDev();
        return mountImperativeHandle(ref, create, deps);
      },
      useLayoutEffect: function (create, deps) {
        currentHookNameInDev = 'useLayoutEffect';
        warnInvalidHookAccess();
        mountHookTypesDev();
        return mountLayoutEffect(create, deps);
      },
      useMemo: function (create, deps) {
        currentHookNameInDev = 'useMemo';
        warnInvalidHookAccess();
        mountHookTypesDev();
        var prevDispatcher = ReactCurrentDispatcher.current;
        ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;
        try {
          return mountMemo(create, deps);
        } finally {
          ReactCurrentDispatcher.current = prevDispatcher;
        }
      },
      useReducer: function (reducer, initialArg, init) {
        currentHookNameInDev = 'useReducer';
        warnInvalidHookAccess();
        mountHookTypesDev();
        var prevDispatcher = ReactCurrentDispatcher.current;
        ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;
        try {
          return mountReducer(reducer, initialArg, init);
        } finally {
          ReactCurrentDispatcher.current = prevDispatcher;
        }
      },
      useRef: function (initialValue) {
        currentHookNameInDev = 'useRef';
        warnInvalidHookAccess();
        mountHookTypesDev();
        return mountRef(initialValue);
      },
      useState: function (initialState) {
        currentHookNameInDev = 'useState';
        warnInvalidHookAccess();
        mountHookTypesDev();
        var prevDispatcher = ReactCurrentDispatcher.current;
        ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;
        try {
          return mountState(initialState);
        } finally {
          ReactCurrentDispatcher.current = prevDispatcher;
        }
      },
      useDebugValue: function (value, formatterFn) {
        currentHookNameInDev = 'useDebugValue';
        warnInvalidHookAccess();
        mountHookTypesDev();
        return mountDebugValue();
      },
      useResponder: function (responder, props) {
        currentHookNameInDev = 'useResponder';
        warnInvalidHookAccess();
        mountHookTypesDev();
        return createDeprecatedResponderListener(responder, props);
      },
      useDeferredValue: function (value, config) {
        currentHookNameInDev = 'useDeferredValue';
        warnInvalidHookAccess();
        mountHookTypesDev();
        return mountDeferredValue(value, config);
      },
      useTransition: function (config) {
        currentHookNameInDev = 'useTransition';
        warnInvalidHookAccess();
        mountHookTypesDev();
        return mountTransition(config);
      }
    };
    InvalidNestedHooksDispatcherOnUpdateInDEV = {
      readContext: function (context, observedBits) {
        warnInvalidContextAccess();
        return readContext(context, observedBits);
      },
      useCallback: function (callback, deps) {
        currentHookNameInDev = 'useCallback';
        warnInvalidHookAccess();
        updateHookTypesDev();
        return updateCallback(callback, deps);
      },
      useContext: function (context, observedBits) {
        currentHookNameInDev = 'useContext';
        warnInvalidHookAccess();
        updateHookTypesDev();
        return readContext(context, observedBits);
      },
      useEffect: function (create, deps) {
        currentHookNameInDev = 'useEffect';
        warnInvalidHookAccess();
        updateHookTypesDev();
        return updateEffect(create, deps);
      },
      useImperativeHandle: function (ref, create, deps) {
        currentHookNameInDev = 'useImperativeHandle';
        warnInvalidHookAccess();
        updateHookTypesDev();
        return updateImperativeHandle(ref, create, deps);
      },
      useLayoutEffect: function (create, deps) {
        currentHookNameInDev = 'useLayoutEffect';
        warnInvalidHookAccess();
        updateHookTypesDev();
        return updateLayoutEffect(create, deps);
      },
      useMemo: function (create, deps) {
        currentHookNameInDev = 'useMemo';
        warnInvalidHookAccess();
        updateHookTypesDev();
        var prevDispatcher = ReactCurrentDispatcher.current;
        ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
        try {
          return updateMemo(create, deps);
        } finally {
          ReactCurrentDispatcher.current = prevDispatcher;
        }
      },
      useReducer: function (reducer, initialArg, init) {
        currentHookNameInDev = 'useReducer';
        warnInvalidHookAccess();
        updateHookTypesDev();
        var prevDispatcher = ReactCurrentDispatcher.current;
        ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
        try {
          return updateReducer(reducer, initialArg, init);
        } finally {
          ReactCurrentDispatcher.current = prevDispatcher;
        }
      },
      useRef: function (initialValue) {
        currentHookNameInDev = 'useRef';
        warnInvalidHookAccess();
        updateHookTypesDev();
        return updateRef();
      },
      useState: function (initialState) {
        currentHookNameInDev = 'useState';
        warnInvalidHookAccess();
        updateHookTypesDev();
        var prevDispatcher = ReactCurrentDispatcher.current;
        ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
        try {
          return updateState(initialState);
        } finally {
          ReactCurrentDispatcher.current = prevDispatcher;
        }
      },
      useDebugValue: function (value, formatterFn) {
        currentHookNameInDev = 'useDebugValue';
        warnInvalidHookAccess();
        updateHookTypesDev();
        return updateDebugValue();
      },
      useResponder: function (responder, props) {
        currentHookNameInDev = 'useResponder';
        warnInvalidHookAccess();
        updateHookTypesDev();
        return createDeprecatedResponderListener(responder, props);
      },
      useDeferredValue: function (value, config) {
        currentHookNameInDev = 'useDeferredValue';
        warnInvalidHookAccess();
        updateHookTypesDev();
        return updateDeferredValue(value, config);
      },
      useTransition: function (config) {
        currentHookNameInDev = 'useTransition';
        warnInvalidHookAccess();
        updateHookTypesDev();
        return updateTransition(config);
      }
    };
    InvalidNestedHooksDispatcherOnRerenderInDEV = {
      readContext: function (context, observedBits) {
        warnInvalidContextAccess();
        return readContext(context, observedBits);
      },
      useCallback: function (callback, deps) {
        currentHookNameInDev = 'useCallback';
        warnInvalidHookAccess();
        updateHookTypesDev();
        return updateCallback(callback, deps);
      },
      useContext: function (context, observedBits) {
        currentHookNameInDev = 'useContext';
        warnInvalidHookAccess();
        updateHookTypesDev();
        return readContext(context, observedBits);
      },
      useEffect: function (create, deps) {
        currentHookNameInDev = 'useEffect';
        warnInvalidHookAccess();
        updateHookTypesDev();
        return updateEffect(create, deps);
      },
      useImperativeHandle: function (ref, create, deps) {
        currentHookNameInDev = 'useImperativeHandle';
        warnInvalidHookAccess();
        updateHookTypesDev();
        return updateImperativeHandle(ref, create, deps);
      },
      useLayoutEffect: function (create, deps) {
        currentHookNameInDev = 'useLayoutEffect';
        warnInvalidHookAccess();
        updateHookTypesDev();
        return updateLayoutEffect(create, deps);
      },
      useMemo: function (create, deps) {
        currentHookNameInDev = 'useMemo';
        warnInvalidHookAccess();
        updateHookTypesDev();
        var prevDispatcher = ReactCurrentDispatcher.current;
        ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
        try {
          return updateMemo(create, deps);
        } finally {
          ReactCurrentDispatcher.current = prevDispatcher;
        }
      },
      useReducer: function (reducer, initialArg, init) {
        currentHookNameInDev = 'useReducer';
        warnInvalidHookAccess();
        updateHookTypesDev();
        var prevDispatcher = ReactCurrentDispatcher.current;
        ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
        try {
          return rerenderReducer(reducer, initialArg, init);
        } finally {
          ReactCurrentDispatcher.current = prevDispatcher;
        }
      },
      useRef: function (initialValue) {
        currentHookNameInDev = 'useRef';
        warnInvalidHookAccess();
        updateHookTypesDev();
        return updateRef();
      },
      useState: function (initialState) {
        currentHookNameInDev = 'useState';
        warnInvalidHookAccess();
        updateHookTypesDev();
        var prevDispatcher = ReactCurrentDispatcher.current;
        ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
        try {
          return rerenderState(initialState);
        } finally {
          ReactCurrentDispatcher.current = prevDispatcher;
        }
      },
      useDebugValue: function (value, formatterFn) {
        currentHookNameInDev = 'useDebugValue';
        warnInvalidHookAccess();
        updateHookTypesDev();
        return updateDebugValue();
      },
      useResponder: function (responder, props) {
        currentHookNameInDev = 'useResponder';
        warnInvalidHookAccess();
        updateHookTypesDev();
        return createDeprecatedResponderListener(responder, props);
      },
      useDeferredValue: function (value, config) {
        currentHookNameInDev = 'useDeferredValue';
        warnInvalidHookAccess();
        updateHookTypesDev();
        return rerenderDeferredValue(value, config);
      },
      useTransition: function (config) {
        currentHookNameInDev = 'useTransition';
        warnInvalidHookAccess();
        updateHookTypesDev();
        return rerenderTransition(config);
      }
    };
  }
  var now$1 = Scheduler.unstable_now;
  var commitTime = 0;
  var profilerStartTime = -1;
  function getCommitTime() {
    return commitTime;
  }
  function recordCommitTime() {
    commitTime = now$1();
  }
  function startProfilerTimer(fiber) {
    profilerStartTime = now$1();
    if (fiber.actualStartTime < 0) {
      fiber.actualStartTime = now$1();
    }
  }
  function stopProfilerTimerIfRunning(fiber) {
    profilerStartTime = -1;
  }
  function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
    if (profilerStartTime >= 0) {
      var elapsedTime = now$1() - profilerStartTime;
      fiber.actualDuration += elapsedTime;
      if (overrideBaseTime) {
        fiber.selfBaseDuration = elapsedTime;
      }
      profilerStartTime = -1;
    }
  }
  var hydrationParentFiber = null;
  var nextHydratableInstance = null;
  var isHydrating = false;
  function enterHydrationState(fiber) {
    var parentInstance = fiber.stateNode.containerInfo;
    nextHydratableInstance = getFirstHydratableChild(parentInstance);
    hydrationParentFiber = fiber;
    isHydrating = true;
    return true;
  }
  function deleteHydratableInstance(returnFiber, instance) {
    {
      switch (returnFiber.tag) {
        case HostRoot:
          didNotHydrateContainerInstance(returnFiber.stateNode.containerInfo, instance);
          break;
        case HostComponent:
          didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance);
          break;
      }
    }
    var childToDelete = createFiberFromHostInstanceForDeletion();
    childToDelete.stateNode = instance;
    childToDelete.return = returnFiber;
    childToDelete.effectTag = Deletion;
    if (returnFiber.lastEffect !== null) {
      returnFiber.lastEffect.nextEffect = childToDelete;
      returnFiber.lastEffect = childToDelete;
    } else {
      returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
    }
  }
  function insertNonHydratedInstance(returnFiber, fiber) {
    fiber.effectTag = fiber.effectTag & ~Hydrating | Placement;
    {
      switch (returnFiber.tag) {
        case HostRoot:
          {
            var parentContainer = returnFiber.stateNode.containerInfo;
            switch (fiber.tag) {
              case HostComponent:
                var type = fiber.type;
                var props = fiber.pendingProps;
                didNotFindHydratableContainerInstance(parentContainer, type);
                break;
              case HostText:
                var text = fiber.pendingProps;
                didNotFindHydratableContainerTextInstance(parentContainer, text);
                break;
            }
            break;
          }
        case HostComponent:
          {
            var parentType = returnFiber.type;
            var parentProps = returnFiber.memoizedProps;
            var parentInstance = returnFiber.stateNode;
            switch (fiber.tag) {
              case HostComponent:
                var _type = fiber.type;
                var _props = fiber.pendingProps;
                didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type);
                break;
              case HostText:
                var _text = fiber.pendingProps;
                didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text);
                break;
              case SuspenseComponent:
                didNotFindHydratableSuspenseInstance(parentType, parentProps);
                break;
            }
            break;
          }
        default:
          return;
      }
    }
  }
  function tryHydrate(fiber, nextInstance) {
    switch (fiber.tag) {
      case HostComponent:
        {
          var type = fiber.type;
          var props = fiber.pendingProps;
          var instance = canHydrateInstance(nextInstance, type);
          if (instance !== null) {
            fiber.stateNode = instance;
            return true;
          }
          return false;
        }
      case HostText:
        {
          var text = fiber.pendingProps;
          var textInstance = canHydrateTextInstance(nextInstance, text);
          if (textInstance !== null) {
            fiber.stateNode = textInstance;
            return true;
          }
          return false;
        }
      case SuspenseComponent:
        {
          return false;
        }
      default:
        return false;
    }
  }
  function tryToClaimNextHydratableInstance(fiber) {
    if (!isHydrating) {
      return;
    }
    var nextInstance = nextHydratableInstance;
    if (!nextInstance) {
      insertNonHydratedInstance(hydrationParentFiber, fiber);
      isHydrating = false;
      hydrationParentFiber = fiber;
      return;
    }
    var firstAttemptedInstance = nextInstance;
    if (!tryHydrate(fiber, nextInstance)) {
      nextInstance = getNextHydratableSibling(firstAttemptedInstance);
      if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
        insertNonHydratedInstance(hydrationParentFiber, fiber);
        isHydrating = false;
        hydrationParentFiber = fiber;
        return;
      }
      deleteHydratableInstance(hydrationParentFiber, firstAttemptedInstance);
    }
    hydrationParentFiber = fiber;
    nextHydratableInstance = getFirstHydratableChild(nextInstance);
  }
  function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
    var instance = fiber.stateNode;
    var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber);
    fiber.updateQueue = updatePayload;
    if (updatePayload !== null) {
      return true;
    }
    return false;
  }
  function prepareToHydrateHostTextInstance(fiber) {
    var textInstance = fiber.stateNode;
    var textContent = fiber.memoizedProps;
    var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
    {
      if (shouldUpdate) {
        var returnFiber = hydrationParentFiber;
        if (returnFiber !== null) {
          switch (returnFiber.tag) {
            case HostRoot:
              {
                var parentContainer = returnFiber.stateNode.containerInfo;
                didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent);
                break;
              }
            case HostComponent:
              {
                var parentType = returnFiber.type;
                var parentProps = returnFiber.memoizedProps;
                var parentInstance = returnFiber.stateNode;
                didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent);
                break;
              }
          }
        }
      }
    }
    return shouldUpdate;
  }
  function skipPastDehydratedSuspenseInstance(fiber) {
    var suspenseState = fiber.memoizedState;
    var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
    if (!suspenseInstance) {
      {
        throw Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
      }
    }
    return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
  }
  function popToNextHostParent(fiber) {
    var parent = fiber.return;
    while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
      parent = parent.return;
    }
    hydrationParentFiber = parent;
  }
  function popHydrationState(fiber) {
    if (fiber !== hydrationParentFiber) {
      return false;
    }
    if (!isHydrating) {
      popToNextHostParent(fiber);
      isHydrating = true;
      return false;
    }
    var type = fiber.type;
    if (fiber.tag !== HostComponent || type !== 'head' && type !== 'body' && !shouldSetTextContent(type, fiber.memoizedProps)) {
      var nextInstance = nextHydratableInstance;
      while (nextInstance) {
        deleteHydratableInstance(fiber, nextInstance);
        nextInstance = getNextHydratableSibling(nextInstance);
      }
    }
    popToNextHostParent(fiber);
    if (fiber.tag === SuspenseComponent) {
      nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
    } else {
      nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
    }
    return true;
  }
  function resetHydrationState() {
    hydrationParentFiber = null;
    nextHydratableInstance = null;
    isHydrating = false;
  }
  var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
  var didReceiveUpdate = false;
  var didWarnAboutBadClass;
  var didWarnAboutModulePatternComponent;
  var didWarnAboutContextTypeOnFunctionComponent;
  var didWarnAboutGetDerivedStateOnFunctionComponent;
  var didWarnAboutFunctionRefs;
  var didWarnAboutReassigningProps;
  var didWarnAboutRevealOrder;
  var didWarnAboutTailOptions;
  {
    didWarnAboutBadClass = {};
    didWarnAboutModulePatternComponent = {};
    didWarnAboutContextTypeOnFunctionComponent = {};
    didWarnAboutGetDerivedStateOnFunctionComponent = {};
    didWarnAboutFunctionRefs = {};
    didWarnAboutReassigningProps = false;
    didWarnAboutRevealOrder = {};
    didWarnAboutTailOptions = {};
  }
  function reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime) {
    if (current === null) {
      workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
    } else {
      workInProgress.child = reconcileChildFibers(workInProgress, current.child, nextChildren, renderExpirationTime);
    }
  }
  function forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderExpirationTime) {
    workInProgress.child = reconcileChildFibers(workInProgress, current.child, null, renderExpirationTime);
    workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
  }
  function updateForwardRef(current, workInProgress, Component, nextProps, renderExpirationTime) {
    {
      if (workInProgress.type !== workInProgress.elementType) {
        var innerPropTypes = Component.propTypes;
        if (innerPropTypes) {
          checkPropTypes(innerPropTypes, nextProps, 'prop', getComponentName(Component), getCurrentFiberStackInDev);
        }
      }
    }
    var render = Component.render;
    var ref = workInProgress.ref;
    var nextChildren;
    prepareToReadContext(workInProgress, renderExpirationTime);
    {
      ReactCurrentOwner$1.current = workInProgress;
      setIsRendering(true);
      nextChildren = renderWithHooks(current, workInProgress, render, nextProps, ref, renderExpirationTime);
      if (workInProgress.mode & StrictMode) {
        if (workInProgress.memoizedState !== null) {
          nextChildren = renderWithHooks(current, workInProgress, render, nextProps, ref, renderExpirationTime);
        }
      }
      setIsRendering(false);
    }
    if (current !== null && !didReceiveUpdate) {
      bailoutHooks(current, workInProgress, renderExpirationTime);
      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);
    }
    workInProgress.effectTag |= PerformedWork;
    reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime);
    return workInProgress.child;
  }
  function updateMemoComponent(current, workInProgress, Component, nextProps, updateExpirationTime, renderExpirationTime) {
    if (current === null) {
      var type = Component.type;
      if (isSimpleFunctionComponent(type) && Component.compare === null && Component.defaultProps === undefined) {
        var resolvedType = type;
        {
          resolvedType = resolveFunctionForHotReloading(type);
        }
        workInProgress.tag = SimpleMemoComponent;
        workInProgress.type = resolvedType;
        {
          validateFunctionComponentInDev(workInProgress, type);
        }
        return updateSimpleMemoComponent(current, workInProgress, resolvedType, nextProps, updateExpirationTime, renderExpirationTime);
      }
      {
        var innerPropTypes = type.propTypes;
        if (innerPropTypes) {
          checkPropTypes(innerPropTypes, nextProps, 'prop', getComponentName(type), getCurrentFiberStackInDev);
        }
      }
      var child = createFiberFromTypeAndProps(Component.type, null, nextProps, null, workInProgress.mode, renderExpirationTime);
      child.ref = workInProgress.ref;
      child.return = workInProgress;
      workInProgress.child = child;
      return child;
    }
    {
      var _type = Component.type;
      var _innerPropTypes = _type.propTypes;
      if (_innerPropTypes) {
        checkPropTypes(_innerPropTypes, nextProps, 'prop', getComponentName(_type), getCurrentFiberStackInDev);
      }
    }
    var currentChild = current.child;
    if (updateExpirationTime < renderExpirationTime) {
      var prevProps = currentChild.memoizedProps;
      var compare = Component.compare;
      compare = compare !== null ? compare : shallowEqual;
      if (compare(prevProps, nextProps) && current.ref === workInProgress.ref) {
        return bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);
      }
    }
    workInProgress.effectTag |= PerformedWork;
    var newChild = createWorkInProgress(currentChild, nextProps);
    newChild.ref = workInProgress.ref;
    newChild.return = workInProgress;
    workInProgress.child = newChild;
    return newChild;
  }
  function updateSimpleMemoComponent(current, workInProgress, Component, nextProps, updateExpirationTime, renderExpirationTime) {
    {
      if (workInProgress.type !== workInProgress.elementType) {
        var outerMemoType = workInProgress.elementType;
        if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
          outerMemoType = refineResolvedLazyComponent(outerMemoType);
        }
        var outerPropTypes = outerMemoType && outerMemoType.propTypes;
        if (outerPropTypes) {
          checkPropTypes(outerPropTypes, nextProps, 'prop', getComponentName(outerMemoType), getCurrentFiberStackInDev);
        }
      }
    }
    if (current !== null) {
      var prevProps = current.memoizedProps;
      if (shallowEqual(prevProps, nextProps) && current.ref === workInProgress.ref && workInProgress.type === current.type) {
        didReceiveUpdate = false;
        if (updateExpirationTime < renderExpirationTime) {
          workInProgress.expirationTime = current.expirationTime;
          return bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);
        }
      }
    }
    return updateFunctionComponent(current, workInProgress, Component, nextProps, renderExpirationTime);
  }
  function updateFragment(current, workInProgress, renderExpirationTime) {
    var nextChildren = workInProgress.pendingProps;
    reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime);
    return workInProgress.child;
  }
  function updateMode(current, workInProgress, renderExpirationTime) {
    var nextChildren = workInProgress.pendingProps.children;
    reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime);
    return workInProgress.child;
  }
  function updateProfiler(current, workInProgress, renderExpirationTime) {
    {
      workInProgress.effectTag |= Update;
    }
    var nextProps = workInProgress.pendingProps;
    var nextChildren = nextProps.children;
    reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime);
    return workInProgress.child;
  }
  function markRef(current, workInProgress) {
    var ref = workInProgress.ref;
    if (current === null && ref !== null || current !== null && current.ref !== ref) {
      workInProgress.effectTag |= Ref;
    }
  }
  function updateFunctionComponent(current, workInProgress, Component, nextProps, renderExpirationTime) {
    {
      if (workInProgress.type !== workInProgress.elementType) {
        var innerPropTypes = Component.propTypes;
        if (innerPropTypes) {
          checkPropTypes(innerPropTypes, nextProps, 'prop', getComponentName(Component), getCurrentFiberStackInDev);
        }
      }
    }
    var context;
    {
      var unmaskedContext = getUnmaskedContext(workInProgress, Component, true);
      context = getMaskedContext(workInProgress, unmaskedContext);
    }
    var nextChildren;
    prepareToReadContext(workInProgress, renderExpirationTime);
    {
      ReactCurrentOwner$1.current = workInProgress;
      setIsRendering(true);
      nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, context, renderExpirationTime);
      if (workInProgress.mode & StrictMode) {
        if (workInProgress.memoizedState !== null) {
          nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, context, renderExpirationTime);
        }
      }
      setIsRendering(false);
    }
    if (current !== null && !didReceiveUpdate) {
      bailoutHooks(current, workInProgress, renderExpirationTime);
      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);
    }
    workInProgress.effectTag |= PerformedWork;
    reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime);
    return workInProgress.child;
  }
  function updateClassComponent(current, workInProgress, Component, nextProps, renderExpirationTime) {
    {
      if (workInProgress.type !== workInProgress.elementType) {
        var innerPropTypes = Component.propTypes;
        if (innerPropTypes) {
          checkPropTypes(innerPropTypes, nextProps, 'prop', getComponentName(Component), getCurrentFiberStackInDev);
        }
      }
    }
    var hasContext;
    if (isContextProvider(Component)) {
      hasContext = true;
      pushContextProvider(workInProgress);
    } else {
      hasContext = false;
    }
    prepareToReadContext(workInProgress, renderExpirationTime);
    var instance = workInProgress.stateNode;
    var shouldUpdate;
    if (instance === null) {
      if (current !== null) {
        current.alternate = null;
        workInProgress.alternate = null;
        workInProgress.effectTag |= Placement;
      }
      constructClassInstance(workInProgress, Component, nextProps);
      mountClassInstance(workInProgress, Component, nextProps, renderExpirationTime);
      shouldUpdate = true;
    } else if (current === null) {
      shouldUpdate = resumeMountClassInstance(workInProgress, Component, nextProps, renderExpirationTime);
    } else {
      shouldUpdate = updateClassInstance(current, workInProgress, Component, nextProps, renderExpirationTime);
    }
    var nextUnitOfWork = finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderExpirationTime);
    {
      var inst = workInProgress.stateNode;
      if (inst.props !== nextProps) {
        if (!didWarnAboutReassigningProps) {
          error('It looks like %s is reassigning its own `this.props` while rendering. ' + 'This is not supported and can lead to confusing bugs.', getComponentName(workInProgress.type) || 'a component');
        }
        didWarnAboutReassigningProps = true;
      }
    }
    return nextUnitOfWork;
  }
  function finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderExpirationTime) {
    markRef(current, workInProgress);
    var didCaptureError = (workInProgress.effectTag & DidCapture) !== NoEffect;
    if (!shouldUpdate && !didCaptureError) {
      if (hasContext) {
        invalidateContextProvider(workInProgress, Component, false);
      }
      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);
    }
    var instance = workInProgress.stateNode;
    ReactCurrentOwner$1.current = workInProgress;
    var nextChildren;
    if (didCaptureError && typeof Component.getDerivedStateFromError !== 'function') {
      nextChildren = null;
      {
        stopProfilerTimerIfRunning();
      }
    } else {
      {
        setIsRendering(true);
        nextChildren = instance.render();
        if (workInProgress.mode & StrictMode) {
          instance.render();
        }
        setIsRendering(false);
      }
    }
    workInProgress.effectTag |= PerformedWork;
    if (current !== null && didCaptureError) {
      forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderExpirationTime);
    } else {
      reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime);
    }
    workInProgress.memoizedState = instance.state;
    if (hasContext) {
      invalidateContextProvider(workInProgress, Component, true);
    }
    return workInProgress.child;
  }
  function pushHostRootContext(workInProgress) {
    var root = workInProgress.stateNode;
    if (root.pendingContext) {
      pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context);
    } else if (root.context) {
      pushTopLevelContextObject(workInProgress, root.context, false);
    }
    pushHostContainer(workInProgress, root.containerInfo);
  }
  function updateHostRoot(current, workInProgress, renderExpirationTime) {
    pushHostRootContext(workInProgress);
    var updateQueue = workInProgress.updateQueue;
    if (!(current !== null && updateQueue !== null)) {
      {
        throw Error("If the root does not have an updateQueue, we should have already bailed out. This error is likely caused by a bug in React. Please file an issue.");
      }
    }
    var nextProps = workInProgress.pendingProps;
    var prevState = workInProgress.memoizedState;
    var prevChildren = prevState !== null ? prevState.element : null;
    cloneUpdateQueue(current, workInProgress);
    processUpdateQueue(workInProgress, nextProps, null, renderExpirationTime);
    var nextState = workInProgress.memoizedState;
    var nextChildren = nextState.element;
    if (nextChildren === prevChildren) {
      resetHydrationState();
      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);
    }
    var root = workInProgress.stateNode;
    if (root.hydrate && enterHydrationState(workInProgress)) {
      var child = mountChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
      workInProgress.child = child;
      var node = child;
      while (node) {
        node.effectTag = node.effectTag & ~Placement | Hydrating;
        node = node.sibling;
      }
    } else {
      reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime);
      resetHydrationState();
    }
    return workInProgress.child;
  }
  function updateHostComponent(current, workInProgress, renderExpirationTime) {
    pushHostContext(workInProgress);
    if (current === null) {
      tryToClaimNextHydratableInstance(workInProgress);
    }
    var type = workInProgress.type;
    var nextProps = workInProgress.pendingProps;
    var prevProps = current !== null ? current.memoizedProps : null;
    var nextChildren = nextProps.children;
    var isDirectTextChild = shouldSetTextContent(type, nextProps);
    if (isDirectTextChild) {
      nextChildren = null;
    } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
      workInProgress.effectTag |= ContentReset;
    }
    markRef(current, workInProgress);
    if (workInProgress.mode & ConcurrentMode && renderExpirationTime !== Never && shouldDeprioritizeSubtree(type, nextProps)) {
      {
        markSpawnedWork(Never);
      }
      workInProgress.expirationTime = workInProgress.childExpirationTime = Never;
      return null;
    }
    reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime);
    return workInProgress.child;
  }
  function updateHostText(current, workInProgress) {
    if (current === null) {
      tryToClaimNextHydratableInstance(workInProgress);
    }
    return null;
  }
  function mountLazyComponent(_current, workInProgress, elementType, updateExpirationTime, renderExpirationTime) {
    if (_current !== null) {
      _current.alternate = null;
      workInProgress.alternate = null;
      workInProgress.effectTag |= Placement;
    }
    var props = workInProgress.pendingProps;
    cancelWorkTimer(workInProgress);
    var Component = readLazyComponentType(elementType);
    workInProgress.type = Component;
    var resolvedTag = workInProgress.tag = resolveLazyComponentTag(Component);
    startWorkTimer(workInProgress);
    var resolvedProps = resolveDefaultProps(Component, props);
    var child;
    switch (resolvedTag) {
      case FunctionComponent:
        {
          {
            validateFunctionComponentInDev(workInProgress, Component);
            workInProgress.type = Component = resolveFunctionForHotReloading(Component);
          }
          child = updateFunctionComponent(null, workInProgress, Component, resolvedProps, renderExpirationTime);
          return child;
        }
      case ClassComponent:
        {
          {
            workInProgress.type = Component = resolveClassForHotReloading(Component);
          }
          child = updateClassComponent(null, workInProgress, Component, resolvedProps, renderExpirationTime);
          return child;
        }
      case ForwardRef:
        {
          {
            workInProgress.type = Component = resolveForwardRefForHotReloading(Component);
          }
          child = updateForwardRef(null, workInProgress, Component, resolvedProps, renderExpirationTime);
          return child;
        }
      case MemoComponent:
        {
          {
            if (workInProgress.type !== workInProgress.elementType) {
              var outerPropTypes = Component.propTypes;
              if (outerPropTypes) {
                checkPropTypes(outerPropTypes, resolvedProps, 'prop', getComponentName(Component), getCurrentFiberStackInDev);
              }
            }
          }
          child = updateMemoComponent(null, workInProgress, Component, resolveDefaultProps(Component.type, resolvedProps), updateExpirationTime, renderExpirationTime);
          return child;
        }
    }
    var hint = '';
    {
      if (Component !== null && typeof Component === 'object' && Component.$$typeof === REACT_LAZY_TYPE) {
        hint = ' Did you wrap a component in React.lazy() more than once?';
      }
    }
    {
      {
        throw Error("Element type is invalid. Received a promise that resolves to: " + Component + ". Lazy element type must resolve to a class or function." + hint);
      }
    }
  }
  function mountIncompleteClassComponent(_current, workInProgress, Component, nextProps, renderExpirationTime) {
    if (_current !== null) {
      _current.alternate = null;
      workInProgress.alternate = null;
      workInProgress.effectTag |= Placement;
    }
    workInProgress.tag = ClassComponent;
    var hasContext;
    if (isContextProvider(Component)) {
      hasContext = true;
      pushContextProvider(workInProgress);
    } else {
      hasContext = false;
    }
    prepareToReadContext(workInProgress, renderExpirationTime);
    constructClassInstance(workInProgress, Component, nextProps);
    mountClassInstance(workInProgress, Component, nextProps, renderExpirationTime);
    return finishClassComponent(null, workInProgress, Component, true, hasContext, renderExpirationTime);
  }
  function mountIndeterminateComponent(_current, workInProgress, Component, renderExpirationTime) {
    if (_current !== null) {
      _current.alternate = null;
      workInProgress.alternate = null;
      workInProgress.effectTag |= Placement;
    }
    var props = workInProgress.pendingProps;
    var context;
    {
      var unmaskedContext = getUnmaskedContext(workInProgress, Component, false);
      context = getMaskedContext(workInProgress, unmaskedContext);
    }
    prepareToReadContext(workInProgress, renderExpirationTime);
    var value;
    {
      if (Component.prototype && typeof Component.prototype.render === 'function') {
        var componentName = getComponentName(Component) || 'Unknown';
        if (!didWarnAboutBadClass[componentName]) {
          error("The <%s /> component appears to have a render method, but doesn't extend React.Component. " + 'This is likely to cause errors. Change %s to extend React.Component instead.', componentName, componentName);
          didWarnAboutBadClass[componentName] = true;
        }
      }
      if (workInProgress.mode & StrictMode) {
        ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, null);
      }
      setIsRendering(true);
      ReactCurrentOwner$1.current = workInProgress;
      value = renderWithHooks(null, workInProgress, Component, props, context, renderExpirationTime);
      setIsRendering(false);
    }
    workInProgress.effectTag |= PerformedWork;
    if (typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {
      {
        var _componentName = getComponentName(Component) || 'Unknown';
        if (!didWarnAboutModulePatternComponent[_componentName]) {
          error('The <%s /> component appears to be a function component that returns a class instance. ' + 'Change %s to a class that extends React.Component instead. ' + "If you can't use a class try assigning the prototype on the function as a workaround. " + "`%s.prototype = React.Component.prototype`. Don't use an arrow function since it " + 'cannot be called with `new` by React.', _componentName, _componentName, _componentName);
          didWarnAboutModulePatternComponent[_componentName] = true;
        }
      }
      workInProgress.tag = ClassComponent;
      workInProgress.memoizedState = null;
      workInProgress.updateQueue = null;
      var hasContext = false;
      if (isContextProvider(Component)) {
        hasContext = true;
        pushContextProvider(workInProgress);
      } else {
        hasContext = false;
      }
      workInProgress.memoizedState = value.state !== null && value.state !== undefined ? value.state : null;
      initializeUpdateQueue(workInProgress);
      var getDerivedStateFromProps = Component.getDerivedStateFromProps;
      if (typeof getDerivedStateFromProps === 'function') {
        applyDerivedStateFromProps(workInProgress, Component, getDerivedStateFromProps, props);
      }
      adoptClassInstance(workInProgress, value);
      mountClassInstance(workInProgress, Component, props, renderExpirationTime);
      return finishClassComponent(null, workInProgress, Component, true, hasContext, renderExpirationTime);
    } else {
      workInProgress.tag = FunctionComponent;
      {
        if (workInProgress.mode & StrictMode) {
          if (workInProgress.memoizedState !== null) {
            value = renderWithHooks(null, workInProgress, Component, props, context, renderExpirationTime);
          }
        }
      }
      reconcileChildren(null, workInProgress, value, renderExpirationTime);
      {
        validateFunctionComponentInDev(workInProgress, Component);
      }
      return workInProgress.child;
    }
  }
  function validateFunctionComponentInDev(workInProgress, Component) {
    {
      if (Component) {
        if (Component.childContextTypes) {
          error('%s(...): childContextTypes cannot be defined on a function component.', Component.displayName || Component.name || 'Component');
        }
      }
      if (workInProgress.ref !== null) {
        var info = '';
        var ownerName = getCurrentFiberOwnerNameInDevOrNull();
        if (ownerName) {
          info += '\n\nCheck the render method of `' + ownerName + '`.';
        }
        var warningKey = ownerName || workInProgress._debugID || '';
        var debugSource = workInProgress._debugSource;
        if (debugSource) {
          warningKey = debugSource.fileName + ':' + debugSource.lineNumber;
        }
        if (!didWarnAboutFunctionRefs[warningKey]) {
          didWarnAboutFunctionRefs[warningKey] = true;
          error('Function components cannot be given refs. ' + 'Attempts to access this ref will fail. ' + 'Did you mean to use React.forwardRef()?%s', info);
        }
      }
      if (typeof Component.getDerivedStateFromProps === 'function') {
        var _componentName2 = getComponentName(Component) || 'Unknown';
        if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName2]) {
          error('%s: Function components do not support getDerivedStateFromProps.', _componentName2);
          didWarnAboutGetDerivedStateOnFunctionComponent[_componentName2] = true;
        }
      }
      if (typeof Component.contextType === 'object' && Component.contextType !== null) {
        var _componentName3 = getComponentName(Component) || 'Unknown';
        if (!didWarnAboutContextTypeOnFunctionComponent[_componentName3]) {
          error('%s: Function components do not support contextType.', _componentName3);
          didWarnAboutContextTypeOnFunctionComponent[_componentName3] = true;
        }
      }
    }
  }
  var SUSPENDED_MARKER = {
    dehydrated: null,
    retryTime: NoWork
  };
  function shouldRemainOnFallback(suspenseContext, current, workInProgress) {
    return hasSuspenseContext(suspenseContext, ForceSuspenseFallback) && (current === null || current.memoizedState !== null);
  }
  function updateSuspenseComponent(current, workInProgress, renderExpirationTime) {
    var mode = workInProgress.mode;
    var nextProps = workInProgress.pendingProps;
    {
      if (shouldSuspend(workInProgress)) {
        workInProgress.effectTag |= DidCapture;
      }
    }
    var suspenseContext = suspenseStackCursor.current;
    var nextDidTimeout = false;
    var didSuspend = (workInProgress.effectTag & DidCapture) !== NoEffect;
    if (didSuspend || shouldRemainOnFallback(suspenseContext, current)) {
      nextDidTimeout = true;
      workInProgress.effectTag &= ~DidCapture;
    } else {
      if (current === null || current.memoizedState !== null) {
        if (nextProps.fallback !== undefined && nextProps.unstable_avoidThisFallback !== true) {
          suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
        }
      }
    }
    suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
    pushSuspenseContext(workInProgress, suspenseContext);
    if (current === null) {
      if (nextProps.fallback !== undefined) {
        tryToClaimNextHydratableInstance(workInProgress);
      }
      if (nextDidTimeout) {
        var nextFallbackChildren = nextProps.fallback;
        var primaryChildFragment = createFiberFromFragment(null, mode, NoWork, null);
        primaryChildFragment.return = workInProgress;
        if ((workInProgress.mode & BlockingMode) === NoMode) {
          var progressedState = workInProgress.memoizedState;
          var progressedPrimaryChild = progressedState !== null ? workInProgress.child.child : workInProgress.child;
          primaryChildFragment.child = progressedPrimaryChild;
          var progressedChild = progressedPrimaryChild;
          while (progressedChild !== null) {
            progressedChild.return = primaryChildFragment;
            progressedChild = progressedChild.sibling;
          }
        }
        var fallbackChildFragment = createFiberFromFragment(nextFallbackChildren, mode, renderExpirationTime, null);
        fallbackChildFragment.return = workInProgress;
        primaryChildFragment.sibling = fallbackChildFragment;
        workInProgress.memoizedState = SUSPENDED_MARKER;
        workInProgress.child = primaryChildFragment;
        return fallbackChildFragment;
      } else {
        var nextPrimaryChildren = nextProps.children;
        workInProgress.memoizedState = null;
        return workInProgress.child = mountChildFibers(workInProgress, null, nextPrimaryChildren, renderExpirationTime);
      }
    } else {
      var prevState = current.memoizedState;
      if (prevState !== null) {
        var currentPrimaryChildFragment = current.child;
        var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
        if (nextDidTimeout) {
          var _nextFallbackChildren2 = nextProps.fallback;
          var _primaryChildFragment2 = createWorkInProgress(currentPrimaryChildFragment, currentPrimaryChildFragment.pendingProps);
          _primaryChildFragment2.return = workInProgress;
          if ((workInProgress.mode & BlockingMode) === NoMode) {
            var _progressedState = workInProgress.memoizedState;
            var _progressedPrimaryChild = _progressedState !== null ? workInProgress.child.child : workInProgress.child;
            if (_progressedPrimaryChild !== currentPrimaryChildFragment.child) {
              _primaryChildFragment2.child = _progressedPrimaryChild;
              var _progressedChild2 = _progressedPrimaryChild;
              while (_progressedChild2 !== null) {
                _progressedChild2.return = _primaryChildFragment2;
                _progressedChild2 = _progressedChild2.sibling;
              }
            }
          }
          if (workInProgress.mode & ProfileMode) {
            var _treeBaseDuration = 0;
            var _hiddenChild = _primaryChildFragment2.child;
            while (_hiddenChild !== null) {
              _treeBaseDuration += _hiddenChild.treeBaseDuration;
              _hiddenChild = _hiddenChild.sibling;
            }
            _primaryChildFragment2.treeBaseDuration = _treeBaseDuration;
          }
          var _fallbackChildFragment2 = createWorkInProgress(currentFallbackChildFragment, _nextFallbackChildren2);
          _fallbackChildFragment2.return = workInProgress;
          _primaryChildFragment2.sibling = _fallbackChildFragment2;
          _primaryChildFragment2.childExpirationTime = NoWork;
          workInProgress.memoizedState = SUSPENDED_MARKER;
          workInProgress.child = _primaryChildFragment2;
          return _fallbackChildFragment2;
        } else {
          var _nextPrimaryChildren = nextProps.children;
          var currentPrimaryChild = currentPrimaryChildFragment.child;
          var primaryChild = reconcileChildFibers(workInProgress, currentPrimaryChild, _nextPrimaryChildren, renderExpirationTime);
          workInProgress.memoizedState = null;
          return workInProgress.child = primaryChild;
        }
      } else {
        var _currentPrimaryChild = current.child;
        if (nextDidTimeout) {
          var _nextFallbackChildren3 = nextProps.fallback;
          var _primaryChildFragment3 = createFiberFromFragment(null, mode, NoWork, null);
          _primaryChildFragment3.return = workInProgress;
          _primaryChildFragment3.child = _currentPrimaryChild;
          if (_currentPrimaryChild !== null) {
            _currentPrimaryChild.return = _primaryChildFragment3;
          }
          if ((workInProgress.mode & BlockingMode) === NoMode) {
            var _progressedState2 = workInProgress.memoizedState;
            var _progressedPrimaryChild2 = _progressedState2 !== null ? workInProgress.child.child : workInProgress.child;
            _primaryChildFragment3.child = _progressedPrimaryChild2;
            var _progressedChild3 = _progressedPrimaryChild2;
            while (_progressedChild3 !== null) {
              _progressedChild3.return = _primaryChildFragment3;
              _progressedChild3 = _progressedChild3.sibling;
            }
          }
          if (workInProgress.mode & ProfileMode) {
            var _treeBaseDuration2 = 0;
            var _hiddenChild2 = _primaryChildFragment3.child;
            while (_hiddenChild2 !== null) {
              _treeBaseDuration2 += _hiddenChild2.treeBaseDuration;
              _hiddenChild2 = _hiddenChild2.sibling;
            }
            _primaryChildFragment3.treeBaseDuration = _treeBaseDuration2;
          }
          var _fallbackChildFragment3 = createFiberFromFragment(_nextFallbackChildren3, mode, renderExpirationTime, null);
          _fallbackChildFragment3.return = workInProgress;
          _primaryChildFragment3.sibling = _fallbackChildFragment3;
          _fallbackChildFragment3.effectTag |= Placement;
          _primaryChildFragment3.childExpirationTime = NoWork;
          workInProgress.memoizedState = SUSPENDED_MARKER;
          workInProgress.child = _primaryChildFragment3;
          return _fallbackChildFragment3;
        } else {
          workInProgress.memoizedState = null;
          var _nextPrimaryChildren2 = nextProps.children;
          return workInProgress.child = reconcileChildFibers(workInProgress, _currentPrimaryChild, _nextPrimaryChildren2, renderExpirationTime);
        }
      }
    }
  }
  function scheduleWorkOnFiber(fiber, renderExpirationTime) {
    if (fiber.expirationTime < renderExpirationTime) {
      fiber.expirationTime = renderExpirationTime;
    }
    var alternate = fiber.alternate;
    if (alternate !== null && alternate.expirationTime < renderExpirationTime) {
      alternate.expirationTime = renderExpirationTime;
    }
    scheduleWorkOnParentPath(fiber.return, renderExpirationTime);
  }
  function propagateSuspenseContextChange(workInProgress, firstChild, renderExpirationTime) {
    var node = firstChild;
    while (node !== null) {
      if (node.tag === SuspenseComponent) {
        var state = node.memoizedState;
        if (state !== null) {
          scheduleWorkOnFiber(node, renderExpirationTime);
        }
      } else if (node.tag === SuspenseListComponent) {
        scheduleWorkOnFiber(node, renderExpirationTime);
      } else if (node.child !== null) {
        node.child.return = node;
        node = node.child;
        continue;
      }
      if (node === workInProgress) {
        return;
      }
      while (node.sibling === null) {
        if (node.return === null || node.return === workInProgress) {
          return;
        }
        node = node.return;
      }
      node.sibling.return = node.return;
      node = node.sibling;
    }
  }
  function findLastContentRow(firstChild) {
    var row = firstChild;
    var lastContentRow = null;
    while (row !== null) {
      var currentRow = row.alternate;
      if (currentRow !== null && findFirstSuspended(currentRow) === null) {
        lastContentRow = row;
      }
      row = row.sibling;
    }
    return lastContentRow;
  }
  function validateRevealOrder(revealOrder) {
    {
      if (revealOrder !== undefined && revealOrder !== 'forwards' && revealOrder !== 'backwards' && revealOrder !== 'together' && !didWarnAboutRevealOrder[revealOrder]) {
        didWarnAboutRevealOrder[revealOrder] = true;
        if (typeof revealOrder === 'string') {
          switch (revealOrder.toLowerCase()) {
            case 'together':
            case 'forwards':
            case 'backwards':
              {
                error('"%s" is not a valid value for revealOrder on <SuspenseList />. ' + 'Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                break;
              }
            case 'forward':
            case 'backward':
              {
                error('"%s" is not a valid value for revealOrder on <SuspenseList />. ' + 'React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                break;
              }
            default:
              error('"%s" is not a supported revealOrder on <SuspenseList />. ' + 'Did you mean "together", "forwards" or "backwards"?', revealOrder);
              break;
          }
        } else {
          error('%s is not a supported value for revealOrder on <SuspenseList />. ' + 'Did you mean "together", "forwards" or "backwards"?', revealOrder);
        }
      }
    }
  }
  function validateTailOptions(tailMode, revealOrder) {
    {
      if (tailMode !== undefined && !didWarnAboutTailOptions[tailMode]) {
        if (tailMode !== 'collapsed' && tailMode !== 'hidden') {
          didWarnAboutTailOptions[tailMode] = true;
          error('"%s" is not a supported value for tail on <SuspenseList />. ' + 'Did you mean "collapsed" or "hidden"?', tailMode);
        } else if (revealOrder !== 'forwards' && revealOrder !== 'backwards') {
          didWarnAboutTailOptions[tailMode] = true;
          error('<SuspenseList tail="%s" /> is only valid if revealOrder is ' + '"forwards" or "backwards". ' + 'Did you mean to specify revealOrder="forwards"?', tailMode);
        }
      }
    }
  }
  function validateSuspenseListNestedChild(childSlot, index) {
    {
      var isArray = Array.isArray(childSlot);
      var isIterable = !isArray && typeof getIteratorFn(childSlot) === 'function';
      if (isArray || isIterable) {
        var type = isArray ? 'array' : 'iterable';
        error('A nested %s was passed to row #%s in <SuspenseList />. Wrap it in ' + 'an additional SuspenseList to configure its revealOrder: ' + '<SuspenseList revealOrder=...> ... ' + '<SuspenseList revealOrder=...>{%s}</SuspenseList> ... ' + '</SuspenseList>', type, index, type);
        return false;
      }
    }
    return true;
  }
  function validateSuspenseListChildren(children, revealOrder) {
    {
      if ((revealOrder === 'forwards' || revealOrder === 'backwards') && children !== undefined && children !== null && children !== false) {
        if (Array.isArray(children)) {
          for (var i = 0; i < children.length; i++) {
            if (!validateSuspenseListNestedChild(children[i], i)) {
              return;
            }
          }
        } else {
          var iteratorFn = getIteratorFn(children);
          if (typeof iteratorFn === 'function') {
            var childrenIterator = iteratorFn.call(children);
            if (childrenIterator) {
              var step = childrenIterator.next();
              var _i = 0;
              for (; !step.done; step = childrenIterator.next()) {
                if (!validateSuspenseListNestedChild(step.value, _i)) {
                  return;
                }
                _i++;
              }
            }
          } else {
            error('A single row was passed to a <SuspenseList revealOrder="%s" />. ' + 'This is not useful since it needs multiple rows. ' + 'Did you mean to pass multiple children or an array?', revealOrder);
          }
        }
      }
    }
  }
  function initSuspenseListRenderState(workInProgress, isBackwards, tail, lastContentRow, tailMode, lastEffectBeforeRendering) {
    var renderState = workInProgress.memoizedState;
    if (renderState === null) {
      workInProgress.memoizedState = {
        isBackwards: isBackwards,
        rendering: null,
        renderingStartTime: 0,
        last: lastContentRow,
        tail: tail,
        tailExpiration: 0,
        tailMode: tailMode,
        lastEffect: lastEffectBeforeRendering
      };
    } else {
      renderState.isBackwards = isBackwards;
      renderState.rendering = null;
      renderState.renderingStartTime = 0;
      renderState.last = lastContentRow;
      renderState.tail = tail;
      renderState.tailExpiration = 0;
      renderState.tailMode = tailMode;
      renderState.lastEffect = lastEffectBeforeRendering;
    }
  }
  function updateSuspenseListComponent(current, workInProgress, renderExpirationTime) {
    var nextProps = workInProgress.pendingProps;
    var revealOrder = nextProps.revealOrder;
    var tailMode = nextProps.tail;
    var newChildren = nextProps.children;
    validateRevealOrder(revealOrder);
    validateTailOptions(tailMode, revealOrder);
    validateSuspenseListChildren(newChildren, revealOrder);
    reconcileChildren(current, workInProgress, newChildren, renderExpirationTime);
    var suspenseContext = suspenseStackCursor.current;
    var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
    if (shouldForceFallback) {
      suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
      workInProgress.effectTag |= DidCapture;
    } else {
      var didSuspendBefore = current !== null && (current.effectTag & DidCapture) !== NoEffect;
      if (didSuspendBefore) {
        propagateSuspenseContextChange(workInProgress, workInProgress.child, renderExpirationTime);
      }
      suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
    }
    pushSuspenseContext(workInProgress, suspenseContext);
    if ((workInProgress.mode & BlockingMode) === NoMode) {
      workInProgress.memoizedState = null;
    } else {
      switch (revealOrder) {
        case 'forwards':
          {
            var lastContentRow = findLastContentRow(workInProgress.child);
            var tail;
            if (lastContentRow === null) {
              tail = workInProgress.child;
              workInProgress.child = null;
            } else {
              tail = lastContentRow.sibling;
              lastContentRow.sibling = null;
            }
            initSuspenseListRenderState(workInProgress, false, tail, lastContentRow, tailMode, workInProgress.lastEffect);
            break;
          }
        case 'backwards':
          {
            var _tail = null;
            var row = workInProgress.child;
            workInProgress.child = null;
            while (row !== null) {
              var currentRow = row.alternate;
              if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                workInProgress.child = row;
                break;
              }
              var nextRow = row.sibling;
              row.sibling = _tail;
              _tail = row;
              row = nextRow;
            }
            initSuspenseListRenderState(workInProgress, true, _tail, null, tailMode, workInProgress.lastEffect);
            break;
          }
        case 'together':
          {
            initSuspenseListRenderState(workInProgress, false, null, null, undefined, workInProgress.lastEffect);
            break;
          }
        default:
          {
            workInProgress.memoizedState = null;
          }
      }
    }
    return workInProgress.child;
  }
  function updatePortalComponent(current, workInProgress, renderExpirationTime) {
    pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
    var nextChildren = workInProgress.pendingProps;
    if (current === null) {
      workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
    } else {
      reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime);
    }
    return workInProgress.child;
  }
  function updateContextProvider(current, workInProgress, renderExpirationTime) {
    var providerType = workInProgress.type;
    var context = providerType._context;
    var newProps = workInProgress.pendingProps;
    var oldProps = workInProgress.memoizedProps;
    var newValue = newProps.value;
    {
      var providerPropTypes = workInProgress.type.propTypes;
      if (providerPropTypes) {
        checkPropTypes(providerPropTypes, newProps, 'prop', 'Context.Provider', getCurrentFiberStackInDev);
      }
    }
    pushProvider(workInProgress, newValue);
    if (oldProps !== null) {
      var oldValue = oldProps.value;
      var changedBits = calculateChangedBits(context, newValue, oldValue);
      if (changedBits === 0) {
        if (oldProps.children === newProps.children && !hasContextChanged()) {
          return bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);
        }
      } else {
        propagateContextChange(workInProgress, context, changedBits, renderExpirationTime);
      }
    }
    var newChildren = newProps.children;
    reconcileChildren(current, workInProgress, newChildren, renderExpirationTime);
    return workInProgress.child;
  }
  var hasWarnedAboutUsingContextAsConsumer = false;
  function updateContextConsumer(current, workInProgress, renderExpirationTime) {
    var context = workInProgress.type;
    {
      if (context._context === undefined) {
        if (context !== context.Consumer) {
          if (!hasWarnedAboutUsingContextAsConsumer) {
            hasWarnedAboutUsingContextAsConsumer = true;
            error('Rendering <Context> directly is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');
          }
        }
      } else {
        context = context._context;
      }
    }
    var newProps = workInProgress.pendingProps;
    var render = newProps.children;
    {
      if (typeof render !== 'function') {
        error('A context consumer was rendered with multiple children, or a child ' + "that isn't a function. A context consumer expects a single child " + 'that is a function. If you did pass a function, make sure there ' + 'is no trailing or leading whitespace around it.');
      }
    }
    prepareToReadContext(workInProgress, renderExpirationTime);
    var newValue = readContext(context, newProps.unstable_observedBits);
    var newChildren;
    {
      ReactCurrentOwner$1.current = workInProgress;
      setIsRendering(true);
      newChildren = render(newValue);
      setIsRendering(false);
    }
    workInProgress.effectTag |= PerformedWork;
    reconcileChildren(current, workInProgress, newChildren, renderExpirationTime);
    return workInProgress.child;
  }
  function markWorkInProgressReceivedUpdate() {
    didReceiveUpdate = true;
  }
  function bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime) {
    cancelWorkTimer(workInProgress);
    if (current !== null) {
      workInProgress.dependencies = current.dependencies;
    }
    {
      stopProfilerTimerIfRunning();
    }
    var updateExpirationTime = workInProgress.expirationTime;
    if (updateExpirationTime !== NoWork) {
      markUnprocessedUpdateTime(updateExpirationTime);
    }
    var childExpirationTime = workInProgress.childExpirationTime;
    if (childExpirationTime < renderExpirationTime) {
      return null;
    } else {
      cloneChildFibers(current, workInProgress);
      return workInProgress.child;
    }
  }
  function remountFiber(current, oldWorkInProgress, newWorkInProgress) {
    {
      var returnFiber = oldWorkInProgress.return;
      if (returnFiber === null) {
        throw new Error('Cannot swap the root fiber.');
      }
      current.alternate = null;
      oldWorkInProgress.alternate = null;
      newWorkInProgress.index = oldWorkInProgress.index;
      newWorkInProgress.sibling = oldWorkInProgress.sibling;
      newWorkInProgress.return = oldWorkInProgress.return;
      newWorkInProgress.ref = oldWorkInProgress.ref;
      if (oldWorkInProgress === returnFiber.child) {
        returnFiber.child = newWorkInProgress;
      } else {
        var prevSibling = returnFiber.child;
        if (prevSibling === null) {
          throw new Error('Expected parent to have a child.');
        }
        while (prevSibling.sibling !== oldWorkInProgress) {
          prevSibling = prevSibling.sibling;
          if (prevSibling === null) {
            throw new Error('Expected to find the previous sibling.');
          }
        }
        prevSibling.sibling = newWorkInProgress;
      }
      var last = returnFiber.lastEffect;
      if (last !== null) {
        last.nextEffect = current;
        returnFiber.lastEffect = current;
      } else {
        returnFiber.firstEffect = returnFiber.lastEffect = current;
      }
      current.nextEffect = null;
      current.effectTag = Deletion;
      newWorkInProgress.effectTag |= Placement;
      return newWorkInProgress;
    }
  }
  function beginWork(current, workInProgress, renderExpirationTime) {
    var updateExpirationTime = workInProgress.expirationTime;
    {
      if (workInProgress._debugNeedsRemount && current !== null) {
        return remountFiber(current, workInProgress, createFiberFromTypeAndProps(workInProgress.type, workInProgress.key, workInProgress.pendingProps, workInProgress._debugOwner || null, workInProgress.mode, workInProgress.expirationTime));
      }
    }
    if (current !== null) {
      var oldProps = current.memoizedProps;
      var newProps = workInProgress.pendingProps;
      if (oldProps !== newProps || hasContextChanged() || workInProgress.type !== current.type) {
        didReceiveUpdate = true;
      } else if (updateExpirationTime < renderExpirationTime) {
        didReceiveUpdate = false;
        switch (workInProgress.tag) {
          case HostRoot:
            pushHostRootContext(workInProgress);
            resetHydrationState();
            break;
          case HostComponent:
            pushHostContext(workInProgress);
            if (workInProgress.mode & ConcurrentMode && renderExpirationTime !== Never && shouldDeprioritizeSubtree(workInProgress.type, newProps)) {
              {
                markSpawnedWork(Never);
              }
              workInProgress.expirationTime = workInProgress.childExpirationTime = Never;
              return null;
            }
            break;
          case ClassComponent:
            {
              var Component = workInProgress.type;
              if (isContextProvider(Component)) {
                pushContextProvider(workInProgress);
              }
              break;
            }
          case HostPortal:
            pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
            break;
          case ContextProvider:
            {
              var newValue = workInProgress.memoizedProps.value;
              pushProvider(workInProgress, newValue);
              break;
            }
          case Profiler:
            {
              var hasChildWork = workInProgress.childExpirationTime >= renderExpirationTime;
              if (hasChildWork) {
                workInProgress.effectTag |= Update;
              }
            }
            break;
          case SuspenseComponent:
            {
              var state = workInProgress.memoizedState;
              if (state !== null) {
                var primaryChildFragment = workInProgress.child;
                var primaryChildExpirationTime = primaryChildFragment.childExpirationTime;
                if (primaryChildExpirationTime !== NoWork && primaryChildExpirationTime >= renderExpirationTime) {
                  return updateSuspenseComponent(current, workInProgress, renderExpirationTime);
                } else {
                  pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                  var child = bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);
                  if (child !== null) {
                    return child.sibling;
                  } else {
                    return null;
                  }
                }
              } else {
                pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
              }
              break;
            }
          case SuspenseListComponent:
            {
              var didSuspendBefore = (current.effectTag & DidCapture) !== NoEffect;
              var _hasChildWork = workInProgress.childExpirationTime >= renderExpirationTime;
              if (didSuspendBefore) {
                if (_hasChildWork) {
                  return updateSuspenseListComponent(current, workInProgress, renderExpirationTime);
                }
                workInProgress.effectTag |= DidCapture;
              }
              var renderState = workInProgress.memoizedState;
              if (renderState !== null) {
                renderState.rendering = null;
                renderState.tail = null;
              }
              pushSuspenseContext(workInProgress, suspenseStackCursor.current);
              if (_hasChildWork) {
                break;
              } else {
                return null;
              }
            }
        }
        return bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);
      } else {
        didReceiveUpdate = false;
      }
    } else {
      didReceiveUpdate = false;
    }
    workInProgress.expirationTime = NoWork;
    switch (workInProgress.tag) {
      case IndeterminateComponent:
        {
          return mountIndeterminateComponent(current, workInProgress, workInProgress.type, renderExpirationTime);
        }
      case LazyComponent:
        {
          var elementType = workInProgress.elementType;
          return mountLazyComponent(current, workInProgress, elementType, updateExpirationTime, renderExpirationTime);
        }
      case FunctionComponent:
        {
          var _Component = workInProgress.type;
          var unresolvedProps = workInProgress.pendingProps;
          var resolvedProps = workInProgress.elementType === _Component ? unresolvedProps : resolveDefaultProps(_Component, unresolvedProps);
          return updateFunctionComponent(current, workInProgress, _Component, resolvedProps, renderExpirationTime);
        }
      case ClassComponent:
        {
          var _Component2 = workInProgress.type;
          var _unresolvedProps = workInProgress.pendingProps;
          var _resolvedProps = workInProgress.elementType === _Component2 ? _unresolvedProps : resolveDefaultProps(_Component2, _unresolvedProps);
          return updateClassComponent(current, workInProgress, _Component2, _resolvedProps, renderExpirationTime);
        }
      case HostRoot:
        return updateHostRoot(current, workInProgress, renderExpirationTime);
      case HostComponent:
        return updateHostComponent(current, workInProgress, renderExpirationTime);
      case HostText:
        return updateHostText(current, workInProgress);
      case SuspenseComponent:
        return updateSuspenseComponent(current, workInProgress, renderExpirationTime);
      case HostPortal:
        return updatePortalComponent(current, workInProgress, renderExpirationTime);
      case ForwardRef:
        {
          var type = workInProgress.type;
          var _unresolvedProps2 = workInProgress.pendingProps;
          var _resolvedProps2 = workInProgress.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
          return updateForwardRef(current, workInProgress, type, _resolvedProps2, renderExpirationTime);
        }
      case Fragment:
        return updateFragment(current, workInProgress, renderExpirationTime);
      case Mode:
        return updateMode(current, workInProgress, renderExpirationTime);
      case Profiler:
        return updateProfiler(current, workInProgress, renderExpirationTime);
      case ContextProvider:
        return updateContextProvider(current, workInProgress, renderExpirationTime);
      case ContextConsumer:
        return updateContextConsumer(current, workInProgress, renderExpirationTime);
      case MemoComponent:
        {
          var _type2 = workInProgress.type;
          var _unresolvedProps3 = workInProgress.pendingProps;
          var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
          {
            if (workInProgress.type !== workInProgress.elementType) {
              var outerPropTypes = _type2.propTypes;
              if (outerPropTypes) {
                checkPropTypes(outerPropTypes, _resolvedProps3, 'prop', getComponentName(_type2), getCurrentFiberStackInDev);
              }
            }
          }
          _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
          return updateMemoComponent(current, workInProgress, _type2, _resolvedProps3, updateExpirationTime, renderExpirationTime);
        }
      case SimpleMemoComponent:
        {
          return updateSimpleMemoComponent(current, workInProgress, workInProgress.type, workInProgress.pendingProps, updateExpirationTime, renderExpirationTime);
        }
      case IncompleteClassComponent:
        {
          var _Component3 = workInProgress.type;
          var _unresolvedProps4 = workInProgress.pendingProps;
          var _resolvedProps4 = workInProgress.elementType === _Component3 ? _unresolvedProps4 : resolveDefaultProps(_Component3, _unresolvedProps4);
          return mountIncompleteClassComponent(current, workInProgress, _Component3, _resolvedProps4, renderExpirationTime);
        }
      case SuspenseListComponent:
        {
          return updateSuspenseListComponent(current, workInProgress, renderExpirationTime);
        }
    }
    {
      {
        throw Error("Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in React. Please file an issue.");
      }
    }
  }
  function markUpdate(workInProgress) {
    workInProgress.effectTag |= Update;
  }
  function markRef$1(workInProgress) {
    workInProgress.effectTag |= Ref;
  }
  var appendAllChildren;
  var updateHostContainer;
  var updateHostComponent$1;
  var updateHostText$1;
  {
    appendAllChildren = function (parent, workInProgress, needsVisibilityToggle, isHidden) {
      var node = workInProgress.child;
      while (node !== null) {
        if (node.tag === HostComponent || node.tag === HostText) {
          appendInitialChild(parent, node.stateNode);
        } else if (node.tag === HostPortal) ; else if (node.child !== null) {
          node.child.return = node;
          node = node.child;
          continue;
        }
        if (node === workInProgress) {
          return;
        }
        while (node.sibling === null) {
          if (node.return === null || node.return === workInProgress) {
            return;
          }
          node = node.return;
        }
        node.sibling.return = node.return;
        node = node.sibling;
      }
    };
    updateHostContainer = function (workInProgress) {};
    updateHostComponent$1 = function (current, workInProgress, type, newProps, rootContainerInstance) {
      var oldProps = current.memoizedProps;
      if (oldProps === newProps) {
        return;
      }
      var instance = workInProgress.stateNode;
      var currentHostContext = getHostContext();
      var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
      workInProgress.updateQueue = updatePayload;
      if (updatePayload) {
        markUpdate(workInProgress);
      }
    };
    updateHostText$1 = function (current, workInProgress, oldText, newText) {
      if (oldText !== newText) {
        markUpdate(workInProgress);
      }
    };
  }
  function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
    switch (renderState.tailMode) {
      case 'hidden':
        {
          var tailNode = renderState.tail;
          var lastTailNode = null;
          while (tailNode !== null) {
            if (tailNode.alternate !== null) {
              lastTailNode = tailNode;
            }
            tailNode = tailNode.sibling;
          }
          if (lastTailNode === null) {
            renderState.tail = null;
          } else {
            lastTailNode.sibling = null;
          }
          break;
        }
      case 'collapsed':
        {
          var _tailNode = renderState.tail;
          var _lastTailNode = null;
          while (_tailNode !== null) {
            if (_tailNode.alternate !== null) {
              _lastTailNode = _tailNode;
            }
            _tailNode = _tailNode.sibling;
          }
          if (_lastTailNode === null) {
            if (!hasRenderedATailFallback && renderState.tail !== null) {
              renderState.tail.sibling = null;
            } else {
              renderState.tail = null;
            }
          } else {
            _lastTailNode.sibling = null;
          }
          break;
        }
    }
  }
  function completeWork(current, workInProgress, renderExpirationTime) {
    var newProps = workInProgress.pendingProps;
    switch (workInProgress.tag) {
      case IndeterminateComponent:
      case LazyComponent:
      case SimpleMemoComponent:
      case FunctionComponent:
      case ForwardRef:
      case Fragment:
      case Mode:
      case Profiler:
      case ContextConsumer:
      case MemoComponent:
        return null;
      case ClassComponent:
        {
          var Component = workInProgress.type;
          if (isContextProvider(Component)) {
            popContext(workInProgress);
          }
          return null;
        }
      case HostRoot:
        {
          popHostContainer(workInProgress);
          popTopLevelContextObject(workInProgress);
          var fiberRoot = workInProgress.stateNode;
          if (fiberRoot.pendingContext) {
            fiberRoot.context = fiberRoot.pendingContext;
            fiberRoot.pendingContext = null;
          }
          if (current === null || current.child === null) {
            var wasHydrated = popHydrationState(workInProgress);
            if (wasHydrated) {
              markUpdate(workInProgress);
            }
          }
          updateHostContainer(workInProgress);
          return null;
        }
      case HostComponent:
        {
          popHostContext(workInProgress);
          var rootContainerInstance = getRootHostContainer();
          var type = workInProgress.type;
          if (current !== null && workInProgress.stateNode != null) {
            updateHostComponent$1(current, workInProgress, type, newProps, rootContainerInstance);
            if (current.ref !== workInProgress.ref) {
              markRef$1(workInProgress);
            }
          } else {
            if (!newProps) {
              if (!(workInProgress.stateNode !== null)) {
                {
                  throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              return null;
            }
            var currentHostContext = getHostContext();
            var _wasHydrated = popHydrationState(workInProgress);
            if (_wasHydrated) {
              if (prepareToHydrateHostInstance(workInProgress, rootContainerInstance, currentHostContext)) {
                markUpdate(workInProgress);
              }
            } else {
              var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress);
              appendAllChildren(instance, workInProgress, false, false);
              workInProgress.stateNode = instance;
              if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
                markUpdate(workInProgress);
              }
            }
            if (workInProgress.ref !== null) {
              markRef$1(workInProgress);
            }
          }
          return null;
        }
      case HostText:
        {
          var newText = newProps;
          if (current && workInProgress.stateNode != null) {
            var oldText = current.memoizedProps;
            updateHostText$1(current, workInProgress, oldText, newText);
          } else {
            if (typeof newText !== 'string') {
              if (!(workInProgress.stateNode !== null)) {
                {
                  throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
            }
            var _rootContainerInstance = getRootHostContainer();
            var _currentHostContext = getHostContext();
            var _wasHydrated2 = popHydrationState(workInProgress);
            if (_wasHydrated2) {
              if (prepareToHydrateHostTextInstance(workInProgress)) {
                markUpdate(workInProgress);
              }
            } else {
              workInProgress.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress);
            }
          }
          return null;
        }
      case SuspenseComponent:
        {
          popSuspenseContext(workInProgress);
          var nextState = workInProgress.memoizedState;
          if ((workInProgress.effectTag & DidCapture) !== NoEffect) {
            workInProgress.expirationTime = renderExpirationTime;
            return workInProgress;
          }
          var nextDidTimeout = nextState !== null;
          var prevDidTimeout = false;
          if (current === null) {
            if (workInProgress.memoizedProps.fallback !== undefined) {
              popHydrationState(workInProgress);
            }
          } else {
            var prevState = current.memoizedState;
            prevDidTimeout = prevState !== null;
            if (!nextDidTimeout && prevState !== null) {
              var currentFallbackChild = current.child.sibling;
              if (currentFallbackChild !== null) {
                var first = workInProgress.firstEffect;
                if (first !== null) {
                  workInProgress.firstEffect = currentFallbackChild;
                  currentFallbackChild.nextEffect = first;
                } else {
                  workInProgress.firstEffect = workInProgress.lastEffect = currentFallbackChild;
                  currentFallbackChild.nextEffect = null;
                }
                currentFallbackChild.effectTag = Deletion;
              }
            }
          }
          if (nextDidTimeout && !prevDidTimeout) {
            if ((workInProgress.mode & BlockingMode) !== NoMode) {
              var hasInvisibleChildContext = current === null && workInProgress.memoizedProps.unstable_avoidThisFallback !== true;
              if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                renderDidSuspend();
              } else {
                renderDidSuspendDelayIfPossible();
              }
            }
          }
          {
            if (nextDidTimeout || prevDidTimeout) {
              workInProgress.effectTag |= Update;
            }
          }
          return null;
        }
      case HostPortal:
        popHostContainer(workInProgress);
        updateHostContainer(workInProgress);
        return null;
      case ContextProvider:
        popProvider(workInProgress);
        return null;
      case IncompleteClassComponent:
        {
          var _Component = workInProgress.type;
          if (isContextProvider(_Component)) {
            popContext(workInProgress);
          }
          return null;
        }
      case SuspenseListComponent:
        {
          popSuspenseContext(workInProgress);
          var renderState = workInProgress.memoizedState;
          if (renderState === null) {
            return null;
          }
          var didSuspendAlready = (workInProgress.effectTag & DidCapture) !== NoEffect;
          var renderedTail = renderState.rendering;
          if (renderedTail === null) {
            if (!didSuspendAlready) {
              var cannotBeSuspended = renderHasNotSuspendedYet() && (current === null || (current.effectTag & DidCapture) === NoEffect);
              if (!cannotBeSuspended) {
                var row = workInProgress.child;
                while (row !== null) {
                  var suspended = findFirstSuspended(row);
                  if (suspended !== null) {
                    didSuspendAlready = true;
                    workInProgress.effectTag |= DidCapture;
                    cutOffTailIfNeeded(renderState, false);
                    var newThennables = suspended.updateQueue;
                    if (newThennables !== null) {
                      workInProgress.updateQueue = newThennables;
                      workInProgress.effectTag |= Update;
                    }
                    if (renderState.lastEffect === null) {
                      workInProgress.firstEffect = null;
                    }
                    workInProgress.lastEffect = renderState.lastEffect;
                    resetChildFibers(workInProgress, renderExpirationTime);
                    pushSuspenseContext(workInProgress, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                    return workInProgress.child;
                  }
                  row = row.sibling;
                }
              }
            } else {
              cutOffTailIfNeeded(renderState, false);
            }
          } else {
            if (!didSuspendAlready) {
              var _suspended = findFirstSuspended(renderedTail);
              if (_suspended !== null) {
                workInProgress.effectTag |= DidCapture;
                didSuspendAlready = true;
                var _newThennables = _suspended.updateQueue;
                if (_newThennables !== null) {
                  workInProgress.updateQueue = _newThennables;
                  workInProgress.effectTag |= Update;
                }
                cutOffTailIfNeeded(renderState, true);
                if (renderState.tail === null && renderState.tailMode === 'hidden' && !renderedTail.alternate) {
                  var lastEffect = workInProgress.lastEffect = renderState.lastEffect;
                  if (lastEffect !== null) {
                    lastEffect.nextEffect = null;
                  }
                  return null;
                }
              } else if (now() * 2 - renderState.renderingStartTime > renderState.tailExpiration && renderExpirationTime > Never) {
                workInProgress.effectTag |= DidCapture;
                didSuspendAlready = true;
                cutOffTailIfNeeded(renderState, false);
                var nextPriority = renderExpirationTime - 1;
                workInProgress.expirationTime = workInProgress.childExpirationTime = nextPriority;
                {
                  markSpawnedWork(nextPriority);
                }
              }
            }
            if (renderState.isBackwards) {
              renderedTail.sibling = workInProgress.child;
              workInProgress.child = renderedTail;
            } else {
              var previousSibling = renderState.last;
              if (previousSibling !== null) {
                previousSibling.sibling = renderedTail;
              } else {
                workInProgress.child = renderedTail;
              }
              renderState.last = renderedTail;
            }
          }
          if (renderState.tail !== null) {
            if (renderState.tailExpiration === 0) {
              var TAIL_EXPIRATION_TIMEOUT_MS = 500;
              renderState.tailExpiration = now() + TAIL_EXPIRATION_TIMEOUT_MS;
            }
            var next = renderState.tail;
            renderState.rendering = next;
            renderState.tail = next.sibling;
            renderState.lastEffect = workInProgress.lastEffect;
            renderState.renderingStartTime = now();
            next.sibling = null;
            var suspenseContext = suspenseStackCursor.current;
            if (didSuspendAlready) {
              suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
            } else {
              suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            }
            pushSuspenseContext(workInProgress, suspenseContext);
            return next;
          }
          return null;
        }
    }
    {
      {
        throw Error("Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in React. Please file an issue.");
      }
    }
  }
  function unwindWork(workInProgress, renderExpirationTime) {
    switch (workInProgress.tag) {
      case ClassComponent:
        {
          var Component = workInProgress.type;
          if (isContextProvider(Component)) {
            popContext(workInProgress);
          }
          var effectTag = workInProgress.effectTag;
          if (effectTag & ShouldCapture) {
            workInProgress.effectTag = effectTag & ~ShouldCapture | DidCapture;
            return workInProgress;
          }
          return null;
        }
      case HostRoot:
        {
          popHostContainer(workInProgress);
          popTopLevelContextObject(workInProgress);
          var _effectTag = workInProgress.effectTag;
          if (!((_effectTag & DidCapture) === NoEffect)) {
            {
              throw Error("The root failed to unmount after an error. This is likely a bug in React. Please file an issue.");
            }
          }
          workInProgress.effectTag = _effectTag & ~ShouldCapture | DidCapture;
          return workInProgress;
        }
      case HostComponent:
        {
          popHostContext(workInProgress);
          return null;
        }
      case SuspenseComponent:
        {
          popSuspenseContext(workInProgress);
          var _effectTag2 = workInProgress.effectTag;
          if (_effectTag2 & ShouldCapture) {
            workInProgress.effectTag = _effectTag2 & ~ShouldCapture | DidCapture;
            return workInProgress;
          }
          return null;
        }
      case SuspenseListComponent:
        {
          popSuspenseContext(workInProgress);
          return null;
        }
      case HostPortal:
        popHostContainer(workInProgress);
        return null;
      case ContextProvider:
        popProvider(workInProgress);
        return null;
      default:
        return null;
    }
  }
  function unwindInterruptedWork(interruptedWork) {
    switch (interruptedWork.tag) {
      case ClassComponent:
        {
          var childContextTypes = interruptedWork.type.childContextTypes;
          if (childContextTypes !== null && childContextTypes !== undefined) {
            popContext(interruptedWork);
          }
          break;
        }
      case HostRoot:
        {
          popHostContainer(interruptedWork);
          popTopLevelContextObject(interruptedWork);
          break;
        }
      case HostComponent:
        {
          popHostContext(interruptedWork);
          break;
        }
      case HostPortal:
        popHostContainer(interruptedWork);
        break;
      case SuspenseComponent:
        popSuspenseContext(interruptedWork);
        break;
      case SuspenseListComponent:
        popSuspenseContext(interruptedWork);
        break;
      case ContextProvider:
        popProvider(interruptedWork);
        break;
    }
  }
  function createCapturedValue(value, source) {
    return {
      value: value,
      source: source,
      stack: getStackByFiberInDevAndProd(source)
    };
  }
  function logCapturedError(capturedError) {
    var error = capturedError.error;
    {
      var componentName = capturedError.componentName, componentStack = capturedError.componentStack, errorBoundaryName = capturedError.errorBoundaryName, errorBoundaryFound = capturedError.errorBoundaryFound, willRetry = capturedError.willRetry;
      if (error != null && error._suppressLogging) {
        if (errorBoundaryFound && willRetry) {
          return;
        }
        console['error'](error);
      }
      var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : 'The above error occurred in one of your React components:';
      var errorBoundaryMessage;
      if (errorBoundaryFound && errorBoundaryName) {
        if (willRetry) {
          errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
        } else {
          errorBoundaryMessage = "This error was initially handled by the error boundary " + errorBoundaryName + ".\n" + "Recreating the tree from scratch failed so React will unmount the tree.";
        }
      } else {
        errorBoundaryMessage = 'Consider adding an error boundary to your tree to customize error handling behavior.\n' + 'Visit https://fb.me/react-error-boundaries to learn more about error boundaries.';
      }
      var combinedMessage = "" + componentNameMessage + componentStack + "\n\n" + ("" + errorBoundaryMessage);
      console['error'](combinedMessage);
    }
  }
  var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
  {
    didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();
  }
  var PossiblyWeakSet = typeof WeakSet === 'function' ? WeakSet : Set;
  function logError(boundary, errorInfo) {
    var source = errorInfo.source;
    var stack = errorInfo.stack;
    if (stack === null && source !== null) {
      stack = getStackByFiberInDevAndProd(source);
    }
    var capturedError = {
      componentName: source !== null ? getComponentName(source.type) : null,
      componentStack: stack !== null ? stack : '',
      error: errorInfo.value,
      errorBoundary: null,
      errorBoundaryName: null,
      errorBoundaryFound: false,
      willRetry: false
    };
    if (boundary !== null && boundary.tag === ClassComponent) {
      capturedError.errorBoundary = boundary.stateNode;
      capturedError.errorBoundaryName = getComponentName(boundary.type);
      capturedError.errorBoundaryFound = true;
      capturedError.willRetry = true;
    }
    try {
      logCapturedError(capturedError);
    } catch (e) {
      setTimeout(function () {
        throw e;
      });
    }
  }
  var callComponentWillUnmountWithTimer = function (current, instance) {
    startPhaseTimer(current, 'componentWillUnmount');
    instance.props = current.memoizedProps;
    instance.state = current.memoizedState;
    instance.componentWillUnmount();
    stopPhaseTimer();
  };
  function safelyCallComponentWillUnmount(current, instance) {
    {
      invokeGuardedCallback(null, callComponentWillUnmountWithTimer, null, current, instance);
      if (hasCaughtError()) {
        var unmountError = clearCaughtError();
        captureCommitPhaseError(current, unmountError);
      }
    }
  }
  function safelyDetachRef(current) {
    var ref = current.ref;
    if (ref !== null) {
      if (typeof ref === 'function') {
        {
          invokeGuardedCallback(null, ref, null, null);
          if (hasCaughtError()) {
            var refError = clearCaughtError();
            captureCommitPhaseError(current, refError);
          }
        }
      } else {
        ref.current = null;
      }
    }
  }
  function safelyCallDestroy(current, destroy) {
    {
      invokeGuardedCallback(null, destroy, null);
      if (hasCaughtError()) {
        var error = clearCaughtError();
        captureCommitPhaseError(current, error);
      }
    }
  }
  function commitBeforeMutationLifeCycles(current, finishedWork) {
    switch (finishedWork.tag) {
      case FunctionComponent:
      case ForwardRef:
      case SimpleMemoComponent:
      case Block:
        {
          return;
        }
      case ClassComponent:
        {
          if (finishedWork.effectTag & Snapshot) {
            if (current !== null) {
              var prevProps = current.memoizedProps;
              var prevState = current.memoizedState;
              startPhaseTimer(finishedWork, 'getSnapshotBeforeUpdate');
              var instance = finishedWork.stateNode;
              {
                if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                  if (instance.props !== finishedWork.memoizedProps) {
                    error('Expected %s props to match memoized props before ' + 'getSnapshotBeforeUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                  }
                  if (instance.state !== finishedWork.memoizedState) {
                    error('Expected %s state to match memoized state before ' + 'getSnapshotBeforeUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                  }
                }
              }
              var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
              {
                var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                if (snapshot === undefined && !didWarnSet.has(finishedWork.type)) {
                  didWarnSet.add(finishedWork.type);
                  error('%s.getSnapshotBeforeUpdate(): A snapshot value (or null) ' + 'must be returned. You have returned undefined.', getComponentName(finishedWork.type));
                }
              }
              instance.__reactInternalSnapshotBeforeUpdate = snapshot;
              stopPhaseTimer();
            }
          }
          return;
        }
      case HostRoot:
      case HostComponent:
      case HostText:
      case HostPortal:
      case IncompleteClassComponent:
        return;
    }
    {
      {
        throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
      }
    }
  }
  function commitHookEffectListUnmount(tag, finishedWork) {
    var updateQueue = finishedWork.updateQueue;
    var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
    if (lastEffect !== null) {
      var firstEffect = lastEffect.next;
      var effect = firstEffect;
      do {
        if ((effect.tag & tag) === tag) {
          var destroy = effect.destroy;
          effect.destroy = undefined;
          if (destroy !== undefined) {
            destroy();
          }
        }
        effect = effect.next;
      } while (effect !== firstEffect);
    }
  }
  function commitHookEffectListMount(tag, finishedWork) {
    var updateQueue = finishedWork.updateQueue;
    var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
    if (lastEffect !== null) {
      var firstEffect = lastEffect.next;
      var effect = firstEffect;
      do {
        if ((effect.tag & tag) === tag) {
          var create = effect.create;
          effect.destroy = create();
          {
            var destroy = effect.destroy;
            if (destroy !== undefined && typeof destroy !== 'function') {
              var addendum = void 0;
              if (destroy === null) {
                addendum = ' You returned null. If your effect does not require clean ' + 'up, return undefined (or nothing).';
              } else if (typeof destroy.then === 'function') {
                addendum = '\n\nIt looks like you wrote useEffect(async () => ...) or returned a Promise. ' + 'Instead, write the async function inside your effect ' + 'and call it immediately:\n\n' + 'useEffect(() => {\n' + '  async function fetchData() {\n' + '    // You can await here\n' + '    const response = await MyAPI.getData(someId);\n' + '    // ...\n' + '  }\n' + '  fetchData();\n' + "}, [someId]); // Or [] if effect doesn't need props or state\n\n" + 'Learn more about data fetching with Hooks: https://fb.me/react-hooks-data-fetching';
              } else {
                addendum = ' You returned: ' + destroy;
              }
              error('An effect function must not return anything besides a function, ' + 'which is used for clean-up.%s%s', addendum, getStackByFiberInDevAndProd(finishedWork));
            }
          }
        }
        effect = effect.next;
      } while (effect !== firstEffect);
    }
  }
  function commitPassiveHookEffects(finishedWork) {
    if ((finishedWork.effectTag & Passive) !== NoEffect) {
      switch (finishedWork.tag) {
        case FunctionComponent:
        case ForwardRef:
        case SimpleMemoComponent:
        case Block:
          {
            commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork);
            commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
            break;
          }
      }
    }
  }
  function commitLifeCycles(finishedRoot, current, finishedWork, committedExpirationTime) {
    switch (finishedWork.tag) {
      case FunctionComponent:
      case ForwardRef:
      case SimpleMemoComponent:
      case Block:
        {
          commitHookEffectListMount(Layout | HasEffect, finishedWork);
          return;
        }
      case ClassComponent:
        {
          var instance = finishedWork.stateNode;
          if (finishedWork.effectTag & Update) {
            if (current === null) {
              startPhaseTimer(finishedWork, 'componentDidMount');
              {
                if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                  if (instance.props !== finishedWork.memoizedProps) {
                    error('Expected %s props to match memoized props before ' + 'componentDidMount. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                  }
                  if (instance.state !== finishedWork.memoizedState) {
                    error('Expected %s state to match memoized state before ' + 'componentDidMount. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                  }
                }
              }
              instance.componentDidMount();
              stopPhaseTimer();
            } else {
              var prevProps = finishedWork.elementType === finishedWork.type ? current.memoizedProps : resolveDefaultProps(finishedWork.type, current.memoizedProps);
              var prevState = current.memoizedState;
              startPhaseTimer(finishedWork, 'componentDidUpdate');
              {
                if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                  if (instance.props !== finishedWork.memoizedProps) {
                    error('Expected %s props to match memoized props before ' + 'componentDidUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                  }
                  if (instance.state !== finishedWork.memoizedState) {
                    error('Expected %s state to match memoized state before ' + 'componentDidUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                  }
                }
              }
              instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
              stopPhaseTimer();
            }
          }
          var updateQueue = finishedWork.updateQueue;
          if (updateQueue !== null) {
            {
              if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                if (instance.props !== finishedWork.memoizedProps) {
                  error('Expected %s props to match memoized props before ' + 'processing the update queue. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                }
                if (instance.state !== finishedWork.memoizedState) {
                  error('Expected %s state to match memoized state before ' + 'processing the update queue. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                }
              }
            }
            commitUpdateQueue(finishedWork, updateQueue, instance);
          }
          return;
        }
      case HostRoot:
        {
          var _updateQueue = finishedWork.updateQueue;
          if (_updateQueue !== null) {
            var _instance = null;
            if (finishedWork.child !== null) {
              switch (finishedWork.child.tag) {
                case HostComponent:
                  _instance = getPublicInstance(finishedWork.child.stateNode);
                  break;
                case ClassComponent:
                  _instance = finishedWork.child.stateNode;
                  break;
              }
            }
            commitUpdateQueue(finishedWork, _updateQueue, _instance);
          }
          return;
        }
      case HostComponent:
        {
          var _instance2 = finishedWork.stateNode;
          if (current === null && finishedWork.effectTag & Update) {
            var type = finishedWork.type;
            var props = finishedWork.memoizedProps;
            commitMount(_instance2, type, props);
          }
          return;
        }
      case HostText:
        {
          return;
        }
      case HostPortal:
        {
          return;
        }
      case Profiler:
        {
          {
            var onRender = finishedWork.memoizedProps.onRender;
            if (typeof onRender === 'function') {
              {
                onRender(finishedWork.memoizedProps.id, current === null ? 'mount' : 'update', finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, getCommitTime(), finishedRoot.memoizedInteractions);
              }
            }
          }
          return;
        }
      case SuspenseComponent:
        {
          commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
          return;
        }
      case SuspenseListComponent:
      case IncompleteClassComponent:
      case FundamentalComponent:
      case ScopeComponent:
        return;
    }
    {
      {
        throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
      }
    }
  }
  function hideOrUnhideAllChildren(finishedWork, isHidden) {
    {
      var node = finishedWork;
      while (true) {
        if (node.tag === HostComponent) {
          var instance = node.stateNode;
          if (isHidden) {
            hideInstance(instance);
          } else {
            unhideInstance(node.stateNode, node.memoizedProps);
          }
        } else if (node.tag === HostText) {
          var _instance3 = node.stateNode;
          if (isHidden) {
            hideTextInstance(_instance3);
          } else {
            unhideTextInstance(_instance3, node.memoizedProps);
          }
        } else if (node.tag === SuspenseComponent && node.memoizedState !== null && node.memoizedState.dehydrated === null) {
          var fallbackChildFragment = node.child.sibling;
          fallbackChildFragment.return = node;
          node = fallbackChildFragment;
          continue;
        } else if (node.child !== null) {
          node.child.return = node;
          node = node.child;
          continue;
        }
        if (node === finishedWork) {
          return;
        }
        while (node.sibling === null) {
          if (node.return === null || node.return === finishedWork) {
            return;
          }
          node = node.return;
        }
        node.sibling.return = node.return;
        node = node.sibling;
      }
    }
  }
  function commitAttachRef(finishedWork) {
    var ref = finishedWork.ref;
    if (ref !== null) {
      var instance = finishedWork.stateNode;
      var instanceToUse;
      switch (finishedWork.tag) {
        case HostComponent:
          instanceToUse = getPublicInstance(instance);
          break;
        default:
          instanceToUse = instance;
      }
      if (typeof ref === 'function') {
        ref(instanceToUse);
      } else {
        {
          if (!ref.hasOwnProperty('current')) {
            error('Unexpected ref object provided for %s. ' + 'Use either a ref-setter function or React.createRef().%s', getComponentName(finishedWork.type), getStackByFiberInDevAndProd(finishedWork));
          }
        }
        ref.current = instanceToUse;
      }
    }
  }
  function commitDetachRef(current) {
    var currentRef = current.ref;
    if (currentRef !== null) {
      if (typeof currentRef === 'function') {
        currentRef(null);
      } else {
        currentRef.current = null;
      }
    }
  }
  function commitUnmount(finishedRoot, current, renderPriorityLevel) {
    onCommitUnmount(current);
    switch (current.tag) {
      case FunctionComponent:
      case ForwardRef:
      case MemoComponent:
      case SimpleMemoComponent:
      case Block:
        {
          var updateQueue = current.updateQueue;
          if (updateQueue !== null) {
            var lastEffect = updateQueue.lastEffect;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              {
                var priorityLevel = renderPriorityLevel > NormalPriority ? NormalPriority : renderPriorityLevel;
                runWithPriority$1(priorityLevel, function () {
                  var effect = firstEffect;
                  do {
                    var _destroy = effect.destroy;
                    if (_destroy !== undefined) {
                      safelyCallDestroy(current, _destroy);
                    }
                    effect = effect.next;
                  } while (effect !== firstEffect);
                });
              }
            }
          }
          return;
        }
      case ClassComponent:
        {
          safelyDetachRef(current);
          var instance = current.stateNode;
          if (typeof instance.componentWillUnmount === 'function') {
            safelyCallComponentWillUnmount(current, instance);
          }
          return;
        }
      case HostComponent:
        {
          safelyDetachRef(current);
          return;
        }
      case HostPortal:
        {
          {
            unmountHostComponents(finishedRoot, current, renderPriorityLevel);
          }
          return;
        }
      case FundamentalComponent:
        {
          return;
        }
      case DehydratedFragment:
        {
          return;
        }
      case ScopeComponent:
        {
          return;
        }
    }
  }
  function commitNestedUnmounts(finishedRoot, root, renderPriorityLevel) {
    var node = root;
    while (true) {
      commitUnmount(finishedRoot, node, renderPriorityLevel);
      if (node.child !== null && node.tag !== HostPortal) {
        node.child.return = node;
        node = node.child;
        continue;
      }
      if (node === root) {
        return;
      }
      while (node.sibling === null) {
        if (node.return === null || node.return === root) {
          return;
        }
        node = node.return;
      }
      node.sibling.return = node.return;
      node = node.sibling;
    }
  }
  function detachFiber(current) {
    var alternate = current.alternate;
    current.return = null;
    current.child = null;
    current.memoizedState = null;
    current.updateQueue = null;
    current.dependencies = null;
    current.alternate = null;
    current.firstEffect = null;
    current.lastEffect = null;
    current.pendingProps = null;
    current.memoizedProps = null;
    current.stateNode = null;
    if (alternate !== null) {
      detachFiber(alternate);
    }
  }
  function getHostParentFiber(fiber) {
    var parent = fiber.return;
    while (parent !== null) {
      if (isHostParent(parent)) {
        return parent;
      }
      parent = parent.return;
    }
    {
      {
        throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
      }
    }
  }
  function isHostParent(fiber) {
    return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
  }
  function getHostSibling(fiber) {
    var node = fiber;
    siblings: while (true) {
      while (node.sibling === null) {
        if (node.return === null || isHostParent(node.return)) {
          return null;
        }
        node = node.return;
      }
      node.sibling.return = node.return;
      node = node.sibling;
      while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {
        if (node.effectTag & Placement) {
          continue siblings;
        }
        if (node.child === null || node.tag === HostPortal) {
          continue siblings;
        } else {
          node.child.return = node;
          node = node.child;
        }
      }
      if (!(node.effectTag & Placement)) {
        return node.stateNode;
      }
    }
  }
  function commitPlacement(finishedWork) {
    var parentFiber = getHostParentFiber(finishedWork);
    var parent;
    var isContainer;
    var parentStateNode = parentFiber.stateNode;
    switch (parentFiber.tag) {
      case HostComponent:
        parent = parentStateNode;
        isContainer = false;
        break;
      case HostRoot:
        parent = parentStateNode.containerInfo;
        isContainer = true;
        break;
      case HostPortal:
        parent = parentStateNode.containerInfo;
        isContainer = true;
        break;
      case FundamentalComponent:
      default:
        {
          {
            throw Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
    }
    if (parentFiber.effectTag & ContentReset) {
      resetTextContent(parent);
      parentFiber.effectTag &= ~ContentReset;
    }
    var before = getHostSibling(finishedWork);
    if (isContainer) {
      insertOrAppendPlacementNodeIntoContainer(finishedWork, before, parent);
    } else {
      insertOrAppendPlacementNode(finishedWork, before, parent);
    }
  }
  function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
    var tag = node.tag;
    var isHost = tag === HostComponent || tag === HostText;
    if (isHost || enableFundamentalAPI) {
      var stateNode = isHost ? node.stateNode : node.stateNode.instance;
      if (before) {
        insertInContainerBefore(parent, stateNode, before);
      } else {
        appendChildToContainer(parent, stateNode);
      }
    } else if (tag === HostPortal) ; else {
      var child = node.child;
      if (child !== null) {
        insertOrAppendPlacementNodeIntoContainer(child, before, parent);
        var sibling = child.sibling;
        while (sibling !== null) {
          insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
          sibling = sibling.sibling;
        }
      }
    }
  }
  function insertOrAppendPlacementNode(node, before, parent) {
    var tag = node.tag;
    var isHost = tag === HostComponent || tag === HostText;
    if (isHost || enableFundamentalAPI) {
      var stateNode = isHost ? node.stateNode : node.stateNode.instance;
      if (before) {
        insertBefore(parent, stateNode, before);
      } else {
        appendChild(parent, stateNode);
      }
    } else if (tag === HostPortal) ; else {
      var child = node.child;
      if (child !== null) {
        insertOrAppendPlacementNode(child, before, parent);
        var sibling = child.sibling;
        while (sibling !== null) {
          insertOrAppendPlacementNode(sibling, before, parent);
          sibling = sibling.sibling;
        }
      }
    }
  }
  function unmountHostComponents(finishedRoot, current, renderPriorityLevel) {
    var node = current;
    var currentParentIsValid = false;
    var currentParent;
    var currentParentIsContainer;
    while (true) {
      if (!currentParentIsValid) {
        var parent = node.return;
        findParent: while (true) {
          if (!(parent !== null)) {
            {
              throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          var parentStateNode = parent.stateNode;
          switch (parent.tag) {
            case HostComponent:
              currentParent = parentStateNode;
              currentParentIsContainer = false;
              break findParent;
            case HostRoot:
              currentParent = parentStateNode.containerInfo;
              currentParentIsContainer = true;
              break findParent;
            case HostPortal:
              currentParent = parentStateNode.containerInfo;
              currentParentIsContainer = true;
              break findParent;
          }
          parent = parent.return;
        }
        currentParentIsValid = true;
      }
      if (node.tag === HostComponent || node.tag === HostText) {
        commitNestedUnmounts(finishedRoot, node, renderPriorityLevel);
        if (currentParentIsContainer) {
          removeChildFromContainer(currentParent, node.stateNode);
        } else {
          removeChild(currentParent, node.stateNode);
        }
      } else if (node.tag === HostPortal) {
        if (node.child !== null) {
          currentParent = node.stateNode.containerInfo;
          currentParentIsContainer = true;
          node.child.return = node;
          node = node.child;
          continue;
        }
      } else {
        commitUnmount(finishedRoot, node, renderPriorityLevel);
        if (node.child !== null) {
          node.child.return = node;
          node = node.child;
          continue;
        }
      }
      if (node === current) {
        return;
      }
      while (node.sibling === null) {
        if (node.return === null || node.return === current) {
          return;
        }
        node = node.return;
        if (node.tag === HostPortal) {
          currentParentIsValid = false;
        }
      }
      node.sibling.return = node.return;
      node = node.sibling;
    }
  }
  function commitDeletion(finishedRoot, current, renderPriorityLevel) {
    {
      unmountHostComponents(finishedRoot, current, renderPriorityLevel);
    }
    detachFiber(current);
  }
  function commitWork(current, finishedWork) {
    switch (finishedWork.tag) {
      case FunctionComponent:
      case ForwardRef:
      case MemoComponent:
      case SimpleMemoComponent:
      case Block:
        {
          commitHookEffectListUnmount(Layout | HasEffect, finishedWork);
          return;
        }
      case ClassComponent:
        {
          return;
        }
      case HostComponent:
        {
          var instance = finishedWork.stateNode;
          if (instance != null) {
            var newProps = finishedWork.memoizedProps;
            var oldProps = current !== null ? current.memoizedProps : newProps;
            var type = finishedWork.type;
            var updatePayload = finishedWork.updateQueue;
            finishedWork.updateQueue = null;
            if (updatePayload !== null) {
              commitUpdate(instance, updatePayload, type, oldProps, newProps);
            }
          }
          return;
        }
      case HostText:
        {
          if (!(finishedWork.stateNode !== null)) {
            {
              throw Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          var textInstance = finishedWork.stateNode;
          var newText = finishedWork.memoizedProps;
          var oldText = current !== null ? current.memoizedProps : newText;
          commitTextUpdate(textInstance, oldText, newText);
          return;
        }
      case HostRoot:
        {
          {
            var _root = finishedWork.stateNode;
            if (_root.hydrate) {
              _root.hydrate = false;
              commitHydratedContainer(_root.containerInfo);
            }
          }
          return;
        }
      case Profiler:
        {
          return;
        }
      case SuspenseComponent:
        {
          commitSuspenseComponent(finishedWork);
          attachSuspenseRetryListeners(finishedWork);
          return;
        }
      case SuspenseListComponent:
        {
          attachSuspenseRetryListeners(finishedWork);
          return;
        }
      case IncompleteClassComponent:
        {
          return;
        }
    }
    {
      {
        throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
      }
    }
  }
  function commitSuspenseComponent(finishedWork) {
    var newState = finishedWork.memoizedState;
    var newDidTimeout;
    var primaryChildParent = finishedWork;
    if (newState === null) {
      newDidTimeout = false;
    } else {
      newDidTimeout = true;
      primaryChildParent = finishedWork.child;
      markCommitTimeOfFallback();
    }
    if (primaryChildParent !== null) {
      hideOrUnhideAllChildren(primaryChildParent, newDidTimeout);
    }
  }
  function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
    var newState = finishedWork.memoizedState;
    if (newState === null) {
      var current = finishedWork.alternate;
      if (current !== null) {
        var prevState = current.memoizedState;
        if (prevState !== null) {
          var suspenseInstance = prevState.dehydrated;
          if (suspenseInstance !== null) {
            commitHydratedSuspenseInstance(suspenseInstance);
          }
        }
      }
    }
  }
  function attachSuspenseRetryListeners(finishedWork) {
    var thenables = finishedWork.updateQueue;
    if (thenables !== null) {
      finishedWork.updateQueue = null;
      var retryCache = finishedWork.stateNode;
      if (retryCache === null) {
        retryCache = finishedWork.stateNode = new PossiblyWeakSet();
      }
      thenables.forEach(function (thenable) {
        var retry = resolveRetryThenable.bind(null, finishedWork, thenable);
        if (!retryCache.has(thenable)) {
          {
            if (thenable.__reactDoNotTraceInteractions !== true) {
              retry = tracing.unstable_wrap(retry);
            }
          }
          retryCache.add(thenable);
          thenable.then(retry, retry);
        }
      });
    }
  }
  function commitResetTextContent(current) {
    resetTextContent(current.stateNode);
  }
  var PossiblyWeakMap$1 = typeof WeakMap === 'function' ? WeakMap : Map;
  function createRootErrorUpdate(fiber, errorInfo, expirationTime) {
    var update = createUpdate(expirationTime, null);
    update.tag = CaptureUpdate;
    update.payload = {
      element: null
    };
    var error = errorInfo.value;
    update.callback = function () {
      onUncaughtError(error);
      logError(fiber, errorInfo);
    };
    return update;
  }
  function createClassErrorUpdate(fiber, errorInfo, expirationTime) {
    var update = createUpdate(expirationTime, null);
    update.tag = CaptureUpdate;
    var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
    if (typeof getDerivedStateFromError === 'function') {
      var error$1 = errorInfo.value;
      update.payload = function () {
        logError(fiber, errorInfo);
        return getDerivedStateFromError(error$1);
      };
    }
    var inst = fiber.stateNode;
    if (inst !== null && typeof inst.componentDidCatch === 'function') {
      update.callback = function callback() {
        {
          markFailedErrorBoundaryForHotReloading(fiber);
        }
        if (typeof getDerivedStateFromError !== 'function') {
          markLegacyErrorBoundaryAsFailed(this);
          logError(fiber, errorInfo);
        }
        var error$1 = errorInfo.value;
        var stack = errorInfo.stack;
        this.componentDidCatch(error$1, {
          componentStack: stack !== null ? stack : ''
        });
        {
          if (typeof getDerivedStateFromError !== 'function') {
            if (fiber.expirationTime !== Sync) {
              error('%s: Error boundaries should implement getDerivedStateFromError(). ' + 'In that method, return a state update to display an error message or fallback UI.', getComponentName(fiber.type) || 'Unknown');
            }
          }
        }
      };
    } else {
      update.callback = function () {
        markFailedErrorBoundaryForHotReloading(fiber);
      };
    }
    return update;
  }
  function attachPingListener(root, renderExpirationTime, thenable) {
    var pingCache = root.pingCache;
    var threadIDs;
    if (pingCache === null) {
      pingCache = root.pingCache = new PossiblyWeakMap$1();
      threadIDs = new Set();
      pingCache.set(thenable, threadIDs);
    } else {
      threadIDs = pingCache.get(thenable);
      if (threadIDs === undefined) {
        threadIDs = new Set();
        pingCache.set(thenable, threadIDs);
      }
    }
    if (!threadIDs.has(renderExpirationTime)) {
      threadIDs.add(renderExpirationTime);
      var ping = pingSuspendedRoot.bind(null, root, thenable, renderExpirationTime);
      thenable.then(ping, ping);
    }
  }
  function throwException(root, returnFiber, sourceFiber, value, renderExpirationTime) {
    sourceFiber.effectTag |= Incomplete;
    sourceFiber.firstEffect = sourceFiber.lastEffect = null;
    if (value !== null && typeof value === 'object' && typeof value.then === 'function') {
      var thenable = value;
      if ((sourceFiber.mode & BlockingMode) === NoMode) {
        var currentSource = sourceFiber.alternate;
        if (currentSource) {
          sourceFiber.updateQueue = currentSource.updateQueue;
          sourceFiber.memoizedState = currentSource.memoizedState;
          sourceFiber.expirationTime = currentSource.expirationTime;
        } else {
          sourceFiber.updateQueue = null;
          sourceFiber.memoizedState = null;
        }
      }
      var hasInvisibleParentBoundary = hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext);
      var _workInProgress = returnFiber;
      do {
        if (_workInProgress.tag === SuspenseComponent && shouldCaptureSuspense(_workInProgress, hasInvisibleParentBoundary)) {
          var thenables = _workInProgress.updateQueue;
          if (thenables === null) {
            var updateQueue = new Set();
            updateQueue.add(thenable);
            _workInProgress.updateQueue = updateQueue;
          } else {
            thenables.add(thenable);
          }
          if ((_workInProgress.mode & BlockingMode) === NoMode) {
            _workInProgress.effectTag |= DidCapture;
            sourceFiber.effectTag &= ~(LifecycleEffectMask | Incomplete);
            if (sourceFiber.tag === ClassComponent) {
              var currentSourceFiber = sourceFiber.alternate;
              if (currentSourceFiber === null) {
                sourceFiber.tag = IncompleteClassComponent;
              } else {
                var update = createUpdate(Sync, null);
                update.tag = ForceUpdate;
                enqueueUpdate(sourceFiber, update);
              }
            }
            sourceFiber.expirationTime = Sync;
            return;
          }
          attachPingListener(root, renderExpirationTime, thenable);
          _workInProgress.effectTag |= ShouldCapture;
          _workInProgress.expirationTime = renderExpirationTime;
          return;
        }
        _workInProgress = _workInProgress.return;
      } while (_workInProgress !== null);
      value = new Error((getComponentName(sourceFiber.type) || 'A React component') + ' suspended while rendering, but no fallback UI was specified.\n' + '\n' + 'Add a <Suspense fallback=...> component higher in the tree to ' + 'provide a loading indicator or placeholder to display.' + getStackByFiberInDevAndProd(sourceFiber));
    }
    renderDidError();
    value = createCapturedValue(value, sourceFiber);
    var workInProgress = returnFiber;
    do {
      switch (workInProgress.tag) {
        case HostRoot:
          {
            var _errorInfo = value;
            workInProgress.effectTag |= ShouldCapture;
            workInProgress.expirationTime = renderExpirationTime;
            var _update = createRootErrorUpdate(workInProgress, _errorInfo, renderExpirationTime);
            enqueueCapturedUpdate(workInProgress, _update);
            return;
          }
        case ClassComponent:
          var errorInfo = value;
          var ctor = workInProgress.type;
          var instance = workInProgress.stateNode;
          if ((workInProgress.effectTag & DidCapture) === NoEffect && (typeof ctor.getDerivedStateFromError === 'function' || instance !== null && typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance))) {
            workInProgress.effectTag |= ShouldCapture;
            workInProgress.expirationTime = renderExpirationTime;
            var _update2 = createClassErrorUpdate(workInProgress, errorInfo, renderExpirationTime);
            enqueueCapturedUpdate(workInProgress, _update2);
            return;
          }
          break;
      }
      workInProgress = workInProgress.return;
    } while (workInProgress !== null);
  }
  var ceil = Math.ceil;
  var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, IsSomeRendererActing = ReactSharedInternals.IsSomeRendererActing;
  var NoContext = 0;
  var BatchedContext = 1;
  var EventContext = 2;
  var DiscreteEventContext = 4;
  var LegacyUnbatchedContext = 8;
  var RenderContext = 16;
  var CommitContext = 32;
  var RootIncomplete = 0;
  var RootFatalErrored = 1;
  var RootErrored = 2;
  var RootSuspended = 3;
  var RootSuspendedWithDelay = 4;
  var RootCompleted = 5;
  var executionContext = NoContext;
  var workInProgressRoot = null;
  var workInProgress = null;
  var renderExpirationTime$1 = NoWork;
  var workInProgressRootExitStatus = RootIncomplete;
  var workInProgressRootFatalError = null;
  var workInProgressRootLatestProcessedExpirationTime = Sync;
  var workInProgressRootLatestSuspenseTimeout = Sync;
  var workInProgressRootCanSuspendUsingConfig = null;
  var workInProgressRootNextUnprocessedUpdateTime = NoWork;
  var workInProgressRootHasPendingPing = false;
  var globalMostRecentFallbackTime = 0;
  var FALLBACK_THROTTLE_MS = 500;
  var nextEffect = null;
  var hasUncaughtError = false;
  var firstUncaughtError = null;
  var legacyErrorBoundariesThatAlreadyFailed = null;
  var rootDoesHavePassiveEffects = false;
  var rootWithPendingPassiveEffects = null;
  var pendingPassiveEffectsRenderPriority = NoPriority;
  var pendingPassiveEffectsExpirationTime = NoWork;
  var rootsWithPendingDiscreteUpdates = null;
  var NESTED_UPDATE_LIMIT = 50;
  var nestedUpdateCount = 0;
  var rootWithNestedUpdates = null;
  var NESTED_PASSIVE_UPDATE_LIMIT = 50;
  var nestedPassiveUpdateCount = 0;
  var interruptedBy = null;
  var spawnedWorkDuringRender = null;
  var currentEventTime = NoWork;
  function requestCurrentTimeForUpdate() {
    if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
      return msToExpirationTime(now());
    }
    if (currentEventTime !== NoWork) {
      return currentEventTime;
    }
    currentEventTime = msToExpirationTime(now());
    return currentEventTime;
  }
  function getCurrentTime() {
    return msToExpirationTime(now());
  }
  function computeExpirationForFiber(currentTime, fiber, suspenseConfig) {
    var mode = fiber.mode;
    if ((mode & BlockingMode) === NoMode) {
      return Sync;
    }
    var priorityLevel = getCurrentPriorityLevel();
    if ((mode & ConcurrentMode) === NoMode) {
      return priorityLevel === ImmediatePriority ? Sync : Batched;
    }
    if ((executionContext & RenderContext) !== NoContext) {
      return renderExpirationTime$1;
    }
    var expirationTime;
    if (suspenseConfig !== null) {
      expirationTime = computeSuspenseExpiration(currentTime, suspenseConfig.timeoutMs | 0 || LOW_PRIORITY_EXPIRATION);
    } else {
      switch (priorityLevel) {
        case ImmediatePriority:
          expirationTime = Sync;
          break;
        case UserBlockingPriority$1:
          expirationTime = computeInteractiveExpiration(currentTime);
          break;
        case NormalPriority:
        case LowPriority:
          expirationTime = computeAsyncExpiration(currentTime);
          break;
        case IdlePriority:
          expirationTime = Idle;
          break;
        default:
          {
            {
              throw Error("Expected a valid priority level");
            }
          }
      }
    }
    if (workInProgressRoot !== null && expirationTime === renderExpirationTime$1) {
      expirationTime -= 1;
    }
    return expirationTime;
  }
  function scheduleUpdateOnFiber(fiber, expirationTime) {
    checkForNestedUpdates();
    warnAboutRenderPhaseUpdatesInDEV(fiber);
    var root = markUpdateTimeFromFiberToRoot(fiber, expirationTime);
    if (root === null) {
      warnAboutUpdateOnUnmountedFiberInDEV(fiber);
      return;
    }
    checkForInterruption(fiber, expirationTime);
    recordScheduleUpdate();
    var priorityLevel = getCurrentPriorityLevel();
    if (expirationTime === Sync) {
      if ((executionContext & LegacyUnbatchedContext) !== NoContext && (executionContext & (RenderContext | CommitContext)) === NoContext) {
        schedulePendingInteractions(root, expirationTime);
        performSyncWorkOnRoot(root);
      } else {
        ensureRootIsScheduled(root);
        schedulePendingInteractions(root, expirationTime);
        if (executionContext === NoContext) {
          flushSyncCallbackQueue();
        }
      }
    } else {
      ensureRootIsScheduled(root);
      schedulePendingInteractions(root, expirationTime);
    }
    if ((executionContext & DiscreteEventContext) !== NoContext && (priorityLevel === UserBlockingPriority$1 || priorityLevel === ImmediatePriority)) {
      if (rootsWithPendingDiscreteUpdates === null) {
        rootsWithPendingDiscreteUpdates = new Map([[root, expirationTime]]);
      } else {
        var lastDiscreteTime = rootsWithPendingDiscreteUpdates.get(root);
        if (lastDiscreteTime === undefined || lastDiscreteTime > expirationTime) {
          rootsWithPendingDiscreteUpdates.set(root, expirationTime);
        }
      }
    }
  }
  var scheduleWork = scheduleUpdateOnFiber;
  function markUpdateTimeFromFiberToRoot(fiber, expirationTime) {
    if (fiber.expirationTime < expirationTime) {
      fiber.expirationTime = expirationTime;
    }
    var alternate = fiber.alternate;
    if (alternate !== null && alternate.expirationTime < expirationTime) {
      alternate.expirationTime = expirationTime;
    }
    var node = fiber.return;
    var root = null;
    if (node === null && fiber.tag === HostRoot) {
      root = fiber.stateNode;
    } else {
      while (node !== null) {
        alternate = node.alternate;
        if (node.childExpirationTime < expirationTime) {
          node.childExpirationTime = expirationTime;
          if (alternate !== null && alternate.childExpirationTime < expirationTime) {
            alternate.childExpirationTime = expirationTime;
          }
        } else if (alternate !== null && alternate.childExpirationTime < expirationTime) {
          alternate.childExpirationTime = expirationTime;
        }
        if (node.return === null && node.tag === HostRoot) {
          root = node.stateNode;
          break;
        }
        node = node.return;
      }
    }
    if (root !== null) {
      if (workInProgressRoot === root) {
        markUnprocessedUpdateTime(expirationTime);
        if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
          markRootSuspendedAtTime(root, renderExpirationTime$1);
        }
      }
      markRootUpdatedAtTime(root, expirationTime);
    }
    return root;
  }
  function getNextRootExpirationTimeToWorkOn(root) {
    var lastExpiredTime = root.lastExpiredTime;
    if (lastExpiredTime !== NoWork) {
      return lastExpiredTime;
    }
    var firstPendingTime = root.firstPendingTime;
    if (!isRootSuspendedAtTime(root, firstPendingTime)) {
      return firstPendingTime;
    }
    var lastPingedTime = root.lastPingedTime;
    var nextKnownPendingLevel = root.nextKnownPendingLevel;
    var nextLevel = lastPingedTime > nextKnownPendingLevel ? lastPingedTime : nextKnownPendingLevel;
    if (nextLevel <= Idle && firstPendingTime !== nextLevel) {
      return NoWork;
    }
    return nextLevel;
  }
  function ensureRootIsScheduled(root) {
    var lastExpiredTime = root.lastExpiredTime;
    if (lastExpiredTime !== NoWork) {
      root.callbackExpirationTime = Sync;
      root.callbackPriority = ImmediatePriority;
      root.callbackNode = scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root));
      return;
    }
    var expirationTime = getNextRootExpirationTimeToWorkOn(root);
    var existingCallbackNode = root.callbackNode;
    if (expirationTime === NoWork) {
      if (existingCallbackNode !== null) {
        root.callbackNode = null;
        root.callbackExpirationTime = NoWork;
        root.callbackPriority = NoPriority;
      }
      return;
    }
    var currentTime = requestCurrentTimeForUpdate();
    var priorityLevel = inferPriorityFromExpirationTime(currentTime, expirationTime);
    if (existingCallbackNode !== null) {
      var existingCallbackPriority = root.callbackPriority;
      var existingCallbackExpirationTime = root.callbackExpirationTime;
      if (existingCallbackExpirationTime === expirationTime && existingCallbackPriority >= priorityLevel) {
        return;
      }
      cancelCallback(existingCallbackNode);
    }
    root.callbackExpirationTime = expirationTime;
    root.callbackPriority = priorityLevel;
    var callbackNode;
    if (expirationTime === Sync) {
      callbackNode = scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root));
    } else {
      callbackNode = scheduleCallback(priorityLevel, performConcurrentWorkOnRoot.bind(null, root), {
        timeout: expirationTimeToMs(expirationTime) - now()
      });
    }
    root.callbackNode = callbackNode;
  }
  function performConcurrentWorkOnRoot(root, didTimeout) {
    currentEventTime = NoWork;
    if (didTimeout) {
      var currentTime = requestCurrentTimeForUpdate();
      markRootExpiredAtTime(root, currentTime);
      ensureRootIsScheduled(root);
      return null;
    }
    var expirationTime = getNextRootExpirationTimeToWorkOn(root);
    if (expirationTime !== NoWork) {
      var originalCallbackNode = root.callbackNode;
      if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
        {
          throw Error("Should not already be working.");
        }
      }
      flushPassiveEffects();
      if (root !== workInProgressRoot || expirationTime !== renderExpirationTime$1) {
        prepareFreshStack(root, expirationTime);
        startWorkOnPendingInteractions(root, expirationTime);
      }
      if (workInProgress !== null) {
        var prevExecutionContext = executionContext;
        executionContext |= RenderContext;
        var prevDispatcher = pushDispatcher();
        var prevInteractions = pushInteractions(root);
        startWorkLoopTimer(workInProgress);
        do {
          try {
            workLoopConcurrent();
            break;
          } catch (thrownValue) {
            handleError(root, thrownValue);
          }
        } while (true);
        resetContextDependencies();
        executionContext = prevExecutionContext;
        popDispatcher(prevDispatcher);
        {
          popInteractions(prevInteractions);
        }
        if (workInProgressRootExitStatus === RootFatalErrored) {
          var fatalError = workInProgressRootFatalError;
          stopInterruptedWorkLoopTimer();
          prepareFreshStack(root, expirationTime);
          markRootSuspendedAtTime(root, expirationTime);
          ensureRootIsScheduled(root);
          throw fatalError;
        }
        if (workInProgress !== null) {
          stopInterruptedWorkLoopTimer();
        } else {
          stopFinishedWorkLoopTimer();
          var finishedWork = root.finishedWork = root.current.alternate;
          root.finishedExpirationTime = expirationTime;
          finishConcurrentRender(root, finishedWork, workInProgressRootExitStatus, expirationTime);
        }
        ensureRootIsScheduled(root);
        if (root.callbackNode === originalCallbackNode) {
          return performConcurrentWorkOnRoot.bind(null, root);
        }
      }
    }
    return null;
  }
  function finishConcurrentRender(root, finishedWork, exitStatus, expirationTime) {
    workInProgressRoot = null;
    switch (exitStatus) {
      case RootIncomplete:
      case RootFatalErrored:
        {
          {
            {
              throw Error("Root did not complete. This is a bug in React.");
            }
          }
        }
      case RootErrored:
        {
          markRootExpiredAtTime(root, expirationTime > Idle ? Idle : expirationTime);
          break;
        }
      case RootSuspended:
        {
          markRootSuspendedAtTime(root, expirationTime);
          var lastSuspendedTime = root.lastSuspendedTime;
          if (expirationTime === lastSuspendedTime) {
            root.nextKnownPendingLevel = getRemainingExpirationTime(finishedWork);
          }
          var hasNotProcessedNewUpdates = workInProgressRootLatestProcessedExpirationTime === Sync;
          if (hasNotProcessedNewUpdates && !IsThisRendererActing.current) {
            var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now();
            if (msUntilTimeout > 10) {
              if (workInProgressRootHasPendingPing) {
                var lastPingedTime = root.lastPingedTime;
                if (lastPingedTime === NoWork || lastPingedTime >= expirationTime) {
                  root.lastPingedTime = expirationTime;
                  prepareFreshStack(root, expirationTime);
                  break;
                }
              }
              var nextTime = getNextRootExpirationTimeToWorkOn(root);
              if (nextTime !== NoWork && nextTime !== expirationTime) {
                break;
              }
              if (lastSuspendedTime !== NoWork && lastSuspendedTime !== expirationTime) {
                root.lastPingedTime = lastSuspendedTime;
                break;
              }
              root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root), msUntilTimeout);
              break;
            }
          }
          commitRoot(root);
          break;
        }
      case RootSuspendedWithDelay:
        {
          markRootSuspendedAtTime(root, expirationTime);
          var _lastSuspendedTime = root.lastSuspendedTime;
          if (expirationTime === _lastSuspendedTime) {
            root.nextKnownPendingLevel = getRemainingExpirationTime(finishedWork);
          }
          if (!IsThisRendererActing.current) {
            if (workInProgressRootHasPendingPing) {
              var _lastPingedTime = root.lastPingedTime;
              if (_lastPingedTime === NoWork || _lastPingedTime >= expirationTime) {
                root.lastPingedTime = expirationTime;
                prepareFreshStack(root, expirationTime);
                break;
              }
            }
            var _nextTime = getNextRootExpirationTimeToWorkOn(root);
            if (_nextTime !== NoWork && _nextTime !== expirationTime) {
              break;
            }
            if (_lastSuspendedTime !== NoWork && _lastSuspendedTime !== expirationTime) {
              root.lastPingedTime = _lastSuspendedTime;
              break;
            }
            var _msUntilTimeout;
            if (workInProgressRootLatestSuspenseTimeout !== Sync) {
              _msUntilTimeout = expirationTimeToMs(workInProgressRootLatestSuspenseTimeout) - now();
            } else if (workInProgressRootLatestProcessedExpirationTime === Sync) {
              _msUntilTimeout = 0;
            } else {
              var eventTimeMs = inferTimeFromExpirationTime(workInProgressRootLatestProcessedExpirationTime);
              var currentTimeMs = now();
              var timeUntilExpirationMs = expirationTimeToMs(expirationTime) - currentTimeMs;
              var timeElapsed = currentTimeMs - eventTimeMs;
              if (timeElapsed < 0) {
                timeElapsed = 0;
              }
              _msUntilTimeout = jnd(timeElapsed) - timeElapsed;
              if (timeUntilExpirationMs < _msUntilTimeout) {
                _msUntilTimeout = timeUntilExpirationMs;
              }
            }
            if (_msUntilTimeout > 10) {
              root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root), _msUntilTimeout);
              break;
            }
          }
          commitRoot(root);
          break;
        }
      case RootCompleted:
        {
          if (!IsThisRendererActing.current && workInProgressRootLatestProcessedExpirationTime !== Sync && workInProgressRootCanSuspendUsingConfig !== null) {
            var _msUntilTimeout2 = computeMsUntilSuspenseLoadingDelay(workInProgressRootLatestProcessedExpirationTime, expirationTime, workInProgressRootCanSuspendUsingConfig);
            if (_msUntilTimeout2 > 10) {
              markRootSuspendedAtTime(root, expirationTime);
              root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root), _msUntilTimeout2);
              break;
            }
          }
          commitRoot(root);
          break;
        }
      default:
        {
          {
            {
              throw Error("Unknown root exit status.");
            }
          }
        }
    }
  }
  function performSyncWorkOnRoot(root) {
    var lastExpiredTime = root.lastExpiredTime;
    var expirationTime = lastExpiredTime !== NoWork ? lastExpiredTime : Sync;
    if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
      {
        throw Error("Should not already be working.");
      }
    }
    flushPassiveEffects();
    if (root !== workInProgressRoot || expirationTime !== renderExpirationTime$1) {
      prepareFreshStack(root, expirationTime);
      startWorkOnPendingInteractions(root, expirationTime);
    }
    if (workInProgress !== null) {
      var prevExecutionContext = executionContext;
      executionContext |= RenderContext;
      var prevDispatcher = pushDispatcher();
      var prevInteractions = pushInteractions(root);
      startWorkLoopTimer(workInProgress);
      do {
        try {
          workLoopSync();
          break;
        } catch (thrownValue) {
          handleError(root, thrownValue);
        }
      } while (true);
      resetContextDependencies();
      executionContext = prevExecutionContext;
      popDispatcher(prevDispatcher);
      {
        popInteractions(prevInteractions);
      }
      if (workInProgressRootExitStatus === RootFatalErrored) {
        var fatalError = workInProgressRootFatalError;
        stopInterruptedWorkLoopTimer();
        prepareFreshStack(root, expirationTime);
        markRootSuspendedAtTime(root, expirationTime);
        ensureRootIsScheduled(root);
        throw fatalError;
      }
      if (workInProgress !== null) {
        {
          {
            throw Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
      } else {
        stopFinishedWorkLoopTimer();
        root.finishedWork = root.current.alternate;
        root.finishedExpirationTime = expirationTime;
        finishSyncRender(root);
      }
      ensureRootIsScheduled(root);
    }
    return null;
  }
  function finishSyncRender(root) {
    workInProgressRoot = null;
    commitRoot(root);
  }
  function flushDiscreteUpdates() {
    if ((executionContext & (BatchedContext | RenderContext | CommitContext)) !== NoContext) {
      {
        if ((executionContext & RenderContext) !== NoContext) {
          error('unstable_flushDiscreteUpdates: Cannot flush updates when React is ' + 'already rendering.');
        }
      }
      return;
    }
    flushPendingDiscreteUpdates();
    flushPassiveEffects();
  }
  function syncUpdates(fn, a, b, c) {
    return runWithPriority$1(ImmediatePriority, fn.bind(null, a, b, c));
  }
  function flushPendingDiscreteUpdates() {
    if (rootsWithPendingDiscreteUpdates !== null) {
      var roots = rootsWithPendingDiscreteUpdates;
      rootsWithPendingDiscreteUpdates = null;
      roots.forEach(function (expirationTime, root) {
        markRootExpiredAtTime(root, expirationTime);
        ensureRootIsScheduled(root);
      });
      flushSyncCallbackQueue();
    }
  }
  function batchedUpdates$1(fn, a) {
    var prevExecutionContext = executionContext;
    executionContext |= BatchedContext;
    try {
      return fn(a);
    } finally {
      executionContext = prevExecutionContext;
      if (executionContext === NoContext) {
        flushSyncCallbackQueue();
      }
    }
  }
  function batchedEventUpdates$1(fn, a) {
    var prevExecutionContext = executionContext;
    executionContext |= EventContext;
    try {
      return fn(a);
    } finally {
      executionContext = prevExecutionContext;
      if (executionContext === NoContext) {
        flushSyncCallbackQueue();
      }
    }
  }
  function discreteUpdates$1(fn, a, b, c, d) {
    var prevExecutionContext = executionContext;
    executionContext |= DiscreteEventContext;
    try {
      return runWithPriority$1(UserBlockingPriority$1, fn.bind(null, a, b, c, d));
    } finally {
      executionContext = prevExecutionContext;
      if (executionContext === NoContext) {
        flushSyncCallbackQueue();
      }
    }
  }
  function unbatchedUpdates(fn, a) {
    var prevExecutionContext = executionContext;
    executionContext &= ~BatchedContext;
    executionContext |= LegacyUnbatchedContext;
    try {
      return fn(a);
    } finally {
      executionContext = prevExecutionContext;
      if (executionContext === NoContext) {
        flushSyncCallbackQueue();
      }
    }
  }
  function flushSync(fn, a) {
    if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
      {
        {
          throw Error("flushSync was called from inside a lifecycle method. It cannot be called when React is already rendering.");
        }
      }
    }
    var prevExecutionContext = executionContext;
    executionContext |= BatchedContext;
    try {
      return runWithPriority$1(ImmediatePriority, fn.bind(null, a));
    } finally {
      executionContext = prevExecutionContext;
      flushSyncCallbackQueue();
    }
  }
  function prepareFreshStack(root, expirationTime) {
    root.finishedWork = null;
    root.finishedExpirationTime = NoWork;
    var timeoutHandle = root.timeoutHandle;
    if (timeoutHandle !== noTimeout) {
      root.timeoutHandle = noTimeout;
      cancelTimeout(timeoutHandle);
    }
    if (workInProgress !== null) {
      var interruptedWork = workInProgress.return;
      while (interruptedWork !== null) {
        unwindInterruptedWork(interruptedWork);
        interruptedWork = interruptedWork.return;
      }
    }
    workInProgressRoot = root;
    workInProgress = createWorkInProgress(root.current, null);
    renderExpirationTime$1 = expirationTime;
    workInProgressRootExitStatus = RootIncomplete;
    workInProgressRootFatalError = null;
    workInProgressRootLatestProcessedExpirationTime = Sync;
    workInProgressRootLatestSuspenseTimeout = Sync;
    workInProgressRootCanSuspendUsingConfig = null;
    workInProgressRootNextUnprocessedUpdateTime = NoWork;
    workInProgressRootHasPendingPing = false;
    {
      spawnedWorkDuringRender = null;
    }
    {
      ReactStrictModeWarnings.discardPendingWarnings();
    }
  }
  function handleError(root, thrownValue) {
    do {
      try {
        resetContextDependencies();
        resetHooksAfterThrow();
        resetCurrentFiber();
        if (workInProgress === null || workInProgress.return === null) {
          workInProgressRootExitStatus = RootFatalErrored;
          workInProgressRootFatalError = thrownValue;
          workInProgress = null;
          return null;
        }
        if (enableProfilerTimer && workInProgress.mode & ProfileMode) {
          stopProfilerTimerIfRunningAndRecordDelta(workInProgress, true);
        }
        throwException(root, workInProgress.return, workInProgress, thrownValue, renderExpirationTime$1);
        workInProgress = completeUnitOfWork(workInProgress);
      } catch (yetAnotherThrownValue) {
        thrownValue = yetAnotherThrownValue;
        continue;
      }
      return;
    } while (true);
  }
  function pushDispatcher(root) {
    var prevDispatcher = ReactCurrentDispatcher$1.current;
    ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
    if (prevDispatcher === null) {
      return ContextOnlyDispatcher;
    } else {
      return prevDispatcher;
    }
  }
  function popDispatcher(prevDispatcher) {
    ReactCurrentDispatcher$1.current = prevDispatcher;
  }
  function pushInteractions(root) {
    {
      var prevInteractions = tracing.__interactionsRef.current;
      tracing.__interactionsRef.current = root.memoizedInteractions;
      return prevInteractions;
    }
  }
  function popInteractions(prevInteractions) {
    {
      tracing.__interactionsRef.current = prevInteractions;
    }
  }
  function markCommitTimeOfFallback() {
    globalMostRecentFallbackTime = now();
  }
  function markRenderEventTimeAndConfig(expirationTime, suspenseConfig) {
    if (expirationTime < workInProgressRootLatestProcessedExpirationTime && expirationTime > Idle) {
      workInProgressRootLatestProcessedExpirationTime = expirationTime;
    }
    if (suspenseConfig !== null) {
      if (expirationTime < workInProgressRootLatestSuspenseTimeout && expirationTime > Idle) {
        workInProgressRootLatestSuspenseTimeout = expirationTime;
        workInProgressRootCanSuspendUsingConfig = suspenseConfig;
      }
    }
  }
  function markUnprocessedUpdateTime(expirationTime) {
    if (expirationTime > workInProgressRootNextUnprocessedUpdateTime) {
      workInProgressRootNextUnprocessedUpdateTime = expirationTime;
    }
  }
  function renderDidSuspend() {
    if (workInProgressRootExitStatus === RootIncomplete) {
      workInProgressRootExitStatus = RootSuspended;
    }
  }
  function renderDidSuspendDelayIfPossible() {
    if (workInProgressRootExitStatus === RootIncomplete || workInProgressRootExitStatus === RootSuspended) {
      workInProgressRootExitStatus = RootSuspendedWithDelay;
    }
    if (workInProgressRootNextUnprocessedUpdateTime !== NoWork && workInProgressRoot !== null) {
      markRootSuspendedAtTime(workInProgressRoot, renderExpirationTime$1);
      markRootUpdatedAtTime(workInProgressRoot, workInProgressRootNextUnprocessedUpdateTime);
    }
  }
  function renderDidError() {
    if (workInProgressRootExitStatus !== RootCompleted) {
      workInProgressRootExitStatus = RootErrored;
    }
  }
  function renderHasNotSuspendedYet() {
    return workInProgressRootExitStatus === RootIncomplete;
  }
  function inferTimeFromExpirationTime(expirationTime) {
    var earliestExpirationTimeMs = expirationTimeToMs(expirationTime);
    return earliestExpirationTimeMs - LOW_PRIORITY_EXPIRATION;
  }
  function inferTimeFromExpirationTimeWithSuspenseConfig(expirationTime, suspenseConfig) {
    var earliestExpirationTimeMs = expirationTimeToMs(expirationTime);
    return earliestExpirationTimeMs - (suspenseConfig.timeoutMs | 0 || LOW_PRIORITY_EXPIRATION);
  }
  function workLoopSync() {
    while (workInProgress !== null) {
      workInProgress = performUnitOfWork(workInProgress);
    }
  }
  function workLoopConcurrent() {
    while (workInProgress !== null && !shouldYield()) {
      workInProgress = performUnitOfWork(workInProgress);
    }
  }
  function performUnitOfWork(unitOfWork) {
    var current = unitOfWork.alternate;
    startWorkTimer(unitOfWork);
    setCurrentFiber(unitOfWork);
    var next;
    if ((unitOfWork.mode & ProfileMode) !== NoMode) {
      startProfilerTimer(unitOfWork);
      next = beginWork$1(current, unitOfWork, renderExpirationTime$1);
      stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
    } else {
      next = beginWork$1(current, unitOfWork, renderExpirationTime$1);
    }
    resetCurrentFiber();
    unitOfWork.memoizedProps = unitOfWork.pendingProps;
    if (next === null) {
      next = completeUnitOfWork(unitOfWork);
    }
    ReactCurrentOwner$2.current = null;
    return next;
  }
  function completeUnitOfWork(unitOfWork) {
    workInProgress = unitOfWork;
    do {
      var current = workInProgress.alternate;
      var returnFiber = workInProgress.return;
      if ((workInProgress.effectTag & Incomplete) === NoEffect) {
        setCurrentFiber(workInProgress);
        var next = void 0;
        if ((workInProgress.mode & ProfileMode) === NoMode) {
          next = completeWork(current, workInProgress, renderExpirationTime$1);
        } else {
          startProfilerTimer(workInProgress);
          next = completeWork(current, workInProgress, renderExpirationTime$1);
          stopProfilerTimerIfRunningAndRecordDelta(workInProgress, false);
        }
        stopWorkTimer(workInProgress);
        resetCurrentFiber();
        resetChildExpirationTime(workInProgress);
        if (next !== null) {
          return next;
        }
        if (returnFiber !== null && (returnFiber.effectTag & Incomplete) === NoEffect) {
          if (returnFiber.firstEffect === null) {
            returnFiber.firstEffect = workInProgress.firstEffect;
          }
          if (workInProgress.lastEffect !== null) {
            if (returnFiber.lastEffect !== null) {
              returnFiber.lastEffect.nextEffect = workInProgress.firstEffect;
            }
            returnFiber.lastEffect = workInProgress.lastEffect;
          }
          var effectTag = workInProgress.effectTag;
          if (effectTag > PerformedWork) {
            if (returnFiber.lastEffect !== null) {
              returnFiber.lastEffect.nextEffect = workInProgress;
            } else {
              returnFiber.firstEffect = workInProgress;
            }
            returnFiber.lastEffect = workInProgress;
          }
        }
      } else {
        var _next = unwindWork(workInProgress);
        if ((workInProgress.mode & ProfileMode) !== NoMode) {
          stopProfilerTimerIfRunningAndRecordDelta(workInProgress, false);
          var actualDuration = workInProgress.actualDuration;
          var child = workInProgress.child;
          while (child !== null) {
            actualDuration += child.actualDuration;
            child = child.sibling;
          }
          workInProgress.actualDuration = actualDuration;
        }
        if (_next !== null) {
          stopFailedWorkTimer(workInProgress);
          _next.effectTag &= HostEffectMask;
          return _next;
        }
        stopWorkTimer(workInProgress);
        if (returnFiber !== null) {
          returnFiber.firstEffect = returnFiber.lastEffect = null;
          returnFiber.effectTag |= Incomplete;
        }
      }
      var siblingFiber = workInProgress.sibling;
      if (siblingFiber !== null) {
        return siblingFiber;
      }
      workInProgress = returnFiber;
    } while (workInProgress !== null);
    if (workInProgressRootExitStatus === RootIncomplete) {
      workInProgressRootExitStatus = RootCompleted;
    }
    return null;
  }
  function getRemainingExpirationTime(fiber) {
    var updateExpirationTime = fiber.expirationTime;
    var childExpirationTime = fiber.childExpirationTime;
    return updateExpirationTime > childExpirationTime ? updateExpirationTime : childExpirationTime;
  }
  function resetChildExpirationTime(completedWork) {
    if (renderExpirationTime$1 !== Never && completedWork.childExpirationTime === Never) {
      return;
    }
    var newChildExpirationTime = NoWork;
    if ((completedWork.mode & ProfileMode) !== NoMode) {
      var actualDuration = completedWork.actualDuration;
      var treeBaseDuration = completedWork.selfBaseDuration;
      var shouldBubbleActualDurations = completedWork.alternate === null || completedWork.child !== completedWork.alternate.child;
      var child = completedWork.child;
      while (child !== null) {
        var childUpdateExpirationTime = child.expirationTime;
        var childChildExpirationTime = child.childExpirationTime;
        if (childUpdateExpirationTime > newChildExpirationTime) {
          newChildExpirationTime = childUpdateExpirationTime;
        }
        if (childChildExpirationTime > newChildExpirationTime) {
          newChildExpirationTime = childChildExpirationTime;
        }
        if (shouldBubbleActualDurations) {
          actualDuration += child.actualDuration;
        }
        treeBaseDuration += child.treeBaseDuration;
        child = child.sibling;
      }
      completedWork.actualDuration = actualDuration;
      completedWork.treeBaseDuration = treeBaseDuration;
    } else {
      var _child = completedWork.child;
      while (_child !== null) {
        var _childUpdateExpirationTime = _child.expirationTime;
        var _childChildExpirationTime = _child.childExpirationTime;
        if (_childUpdateExpirationTime > newChildExpirationTime) {
          newChildExpirationTime = _childUpdateExpirationTime;
        }
        if (_childChildExpirationTime > newChildExpirationTime) {
          newChildExpirationTime = _childChildExpirationTime;
        }
        _child = _child.sibling;
      }
    }
    completedWork.childExpirationTime = newChildExpirationTime;
  }
  function commitRoot(root) {
    var renderPriorityLevel = getCurrentPriorityLevel();
    runWithPriority$1(ImmediatePriority, commitRootImpl.bind(null, root, renderPriorityLevel));
    return null;
  }
  function commitRootImpl(root, renderPriorityLevel) {
    do {
      flushPassiveEffects();
    } while (rootWithPendingPassiveEffects !== null);
    flushRenderPhaseStrictModeWarningsInDEV();
    if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
      {
        throw Error("Should not already be working.");
      }
    }
    var finishedWork = root.finishedWork;
    var expirationTime = root.finishedExpirationTime;
    if (finishedWork === null) {
      return null;
    }
    root.finishedWork = null;
    root.finishedExpirationTime = NoWork;
    if (!(finishedWork !== root.current)) {
      {
        throw Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
      }
    }
    root.callbackNode = null;
    root.callbackExpirationTime = NoWork;
    root.callbackPriority = NoPriority;
    root.nextKnownPendingLevel = NoWork;
    startCommitTimer();
    var remainingExpirationTimeBeforeCommit = getRemainingExpirationTime(finishedWork);
    markRootFinishedAtTime(root, expirationTime, remainingExpirationTimeBeforeCommit);
    if (root === workInProgressRoot) {
      workInProgressRoot = null;
      workInProgress = null;
      renderExpirationTime$1 = NoWork;
    }
    var firstEffect;
    if (finishedWork.effectTag > PerformedWork) {
      if (finishedWork.lastEffect !== null) {
        finishedWork.lastEffect.nextEffect = finishedWork;
        firstEffect = finishedWork.firstEffect;
      } else {
        firstEffect = finishedWork;
      }
    } else {
      firstEffect = finishedWork.firstEffect;
    }
    if (firstEffect !== null) {
      var prevExecutionContext = executionContext;
      executionContext |= CommitContext;
      var prevInteractions = pushInteractions(root);
      ReactCurrentOwner$2.current = null;
      startCommitSnapshotEffectsTimer();
      prepareForCommit(root.containerInfo);
      nextEffect = firstEffect;
      do {
        {
          invokeGuardedCallback(null, commitBeforeMutationEffects, null);
          if (hasCaughtError()) {
            if (!(nextEffect !== null)) {
              {
                throw Error("Should be working on an effect.");
              }
            }
            var error = clearCaughtError();
            captureCommitPhaseError(nextEffect, error);
            nextEffect = nextEffect.nextEffect;
          }
        }
      } while (nextEffect !== null);
      stopCommitSnapshotEffectsTimer();
      {
        recordCommitTime();
      }
      startCommitHostEffectsTimer();
      nextEffect = firstEffect;
      do {
        {
          invokeGuardedCallback(null, commitMutationEffects, null, root, renderPriorityLevel);
          if (hasCaughtError()) {
            if (!(nextEffect !== null)) {
              {
                throw Error("Should be working on an effect.");
              }
            }
            var _error = clearCaughtError();
            captureCommitPhaseError(nextEffect, _error);
            nextEffect = nextEffect.nextEffect;
          }
        }
      } while (nextEffect !== null);
      stopCommitHostEffectsTimer();
      resetAfterCommit(root.containerInfo);
      root.current = finishedWork;
      startCommitLifeCyclesTimer();
      nextEffect = firstEffect;
      do {
        {
          invokeGuardedCallback(null, commitLayoutEffects, null, root, expirationTime);
          if (hasCaughtError()) {
            if (!(nextEffect !== null)) {
              {
                throw Error("Should be working on an effect.");
              }
            }
            var _error2 = clearCaughtError();
            captureCommitPhaseError(nextEffect, _error2);
            nextEffect = nextEffect.nextEffect;
          }
        }
      } while (nextEffect !== null);
      stopCommitLifeCyclesTimer();
      nextEffect = null;
      requestPaint();
      {
        popInteractions(prevInteractions);
      }
      executionContext = prevExecutionContext;
    } else {
      root.current = finishedWork;
      startCommitSnapshotEffectsTimer();
      stopCommitSnapshotEffectsTimer();
      {
        recordCommitTime();
      }
      startCommitHostEffectsTimer();
      stopCommitHostEffectsTimer();
      startCommitLifeCyclesTimer();
      stopCommitLifeCyclesTimer();
    }
    stopCommitTimer();
    var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
    if (rootDoesHavePassiveEffects) {
      rootDoesHavePassiveEffects = false;
      rootWithPendingPassiveEffects = root;
      pendingPassiveEffectsExpirationTime = expirationTime;
      pendingPassiveEffectsRenderPriority = renderPriorityLevel;
    } else {
      nextEffect = firstEffect;
      while (nextEffect !== null) {
        var nextNextEffect = nextEffect.nextEffect;
        nextEffect.nextEffect = null;
        nextEffect = nextNextEffect;
      }
    }
    var remainingExpirationTime = root.firstPendingTime;
    if (remainingExpirationTime !== NoWork) {
      {
        if (spawnedWorkDuringRender !== null) {
          var expirationTimes = spawnedWorkDuringRender;
          spawnedWorkDuringRender = null;
          for (var i = 0; i < expirationTimes.length; i++) {
            scheduleInteractions(root, expirationTimes[i], root.memoizedInteractions);
          }
        }
        schedulePendingInteractions(root, remainingExpirationTime);
      }
    } else {
      legacyErrorBoundariesThatAlreadyFailed = null;
    }
    {
      if (!rootDidHavePassiveEffects) {
        finishPendingInteractions(root, expirationTime);
      }
    }
    if (remainingExpirationTime === Sync) {
      if (root === rootWithNestedUpdates) {
        nestedUpdateCount++;
      } else {
        nestedUpdateCount = 0;
        rootWithNestedUpdates = root;
      }
    } else {
      nestedUpdateCount = 0;
    }
    onCommitRoot(finishedWork.stateNode, expirationTime);
    ensureRootIsScheduled(root);
    if (hasUncaughtError) {
      hasUncaughtError = false;
      var _error3 = firstUncaughtError;
      firstUncaughtError = null;
      throw _error3;
    }
    if ((executionContext & LegacyUnbatchedContext) !== NoContext) {
      return null;
    }
    flushSyncCallbackQueue();
    return null;
  }
  function commitBeforeMutationEffects() {
    while (nextEffect !== null) {
      var effectTag = nextEffect.effectTag;
      if ((effectTag & Snapshot) !== NoEffect) {
        setCurrentFiber(nextEffect);
        recordEffect();
        var current = nextEffect.alternate;
        commitBeforeMutationLifeCycles(current, nextEffect);
        resetCurrentFiber();
      }
      if ((effectTag & Passive) !== NoEffect) {
        if (!rootDoesHavePassiveEffects) {
          rootDoesHavePassiveEffects = true;
          scheduleCallback(NormalPriority, function () {
            flushPassiveEffects();
            return null;
          });
        }
      }
      nextEffect = nextEffect.nextEffect;
    }
  }
  function commitMutationEffects(root, renderPriorityLevel) {
    while (nextEffect !== null) {
      setCurrentFiber(nextEffect);
      var effectTag = nextEffect.effectTag;
      if (effectTag & ContentReset) {
        commitResetTextContent(nextEffect);
      }
      if (effectTag & Ref) {
        var current = nextEffect.alternate;
        if (current !== null) {
          commitDetachRef(current);
        }
      }
      var primaryEffectTag = effectTag & (Placement | Update | Deletion | Hydrating);
      switch (primaryEffectTag) {
        case Placement:
          {
            commitPlacement(nextEffect);
            nextEffect.effectTag &= ~Placement;
            break;
          }
        case PlacementAndUpdate:
          {
            commitPlacement(nextEffect);
            nextEffect.effectTag &= ~Placement;
            var _current = nextEffect.alternate;
            commitWork(_current, nextEffect);
            break;
          }
        case Hydrating:
          {
            nextEffect.effectTag &= ~Hydrating;
            break;
          }
        case HydratingAndUpdate:
          {
            nextEffect.effectTag &= ~Hydrating;
            var _current2 = nextEffect.alternate;
            commitWork(_current2, nextEffect);
            break;
          }
        case Update:
          {
            var _current3 = nextEffect.alternate;
            commitWork(_current3, nextEffect);
            break;
          }
        case Deletion:
          {
            commitDeletion(root, nextEffect, renderPriorityLevel);
            break;
          }
      }
      recordEffect();
      resetCurrentFiber();
      nextEffect = nextEffect.nextEffect;
    }
  }
  function commitLayoutEffects(root, committedExpirationTime) {
    while (nextEffect !== null) {
      setCurrentFiber(nextEffect);
      var effectTag = nextEffect.effectTag;
      if (effectTag & (Update | Callback)) {
        recordEffect();
        var current = nextEffect.alternate;
        commitLifeCycles(root, current, nextEffect);
      }
      if (effectTag & Ref) {
        recordEffect();
        commitAttachRef(nextEffect);
      }
      resetCurrentFiber();
      nextEffect = nextEffect.nextEffect;
    }
  }
  function flushPassiveEffects() {
    if (pendingPassiveEffectsRenderPriority !== NoPriority) {
      var priorityLevel = pendingPassiveEffectsRenderPriority > NormalPriority ? NormalPriority : pendingPassiveEffectsRenderPriority;
      pendingPassiveEffectsRenderPriority = NoPriority;
      return runWithPriority$1(priorityLevel, flushPassiveEffectsImpl);
    }
  }
  function flushPassiveEffectsImpl() {
    if (rootWithPendingPassiveEffects === null) {
      return false;
    }
    var root = rootWithPendingPassiveEffects;
    var expirationTime = pendingPassiveEffectsExpirationTime;
    rootWithPendingPassiveEffects = null;
    pendingPassiveEffectsExpirationTime = NoWork;
    if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
      {
        throw Error("Cannot flush passive effects while already rendering.");
      }
    }
    var prevExecutionContext = executionContext;
    executionContext |= CommitContext;
    var prevInteractions = pushInteractions(root);
    {
      var _effect2 = root.current.firstEffect;
      while (_effect2 !== null) {
        {
          setCurrentFiber(_effect2);
          invokeGuardedCallback(null, commitPassiveHookEffects, null, _effect2);
          if (hasCaughtError()) {
            if (!(_effect2 !== null)) {
              {
                throw Error("Should be working on an effect.");
              }
            }
            var _error5 = clearCaughtError();
            captureCommitPhaseError(_effect2, _error5);
          }
          resetCurrentFiber();
        }
        var nextNextEffect = _effect2.nextEffect;
        _effect2.nextEffect = null;
        _effect2 = nextNextEffect;
      }
    }
    {
      popInteractions(prevInteractions);
      finishPendingInteractions(root, expirationTime);
    }
    executionContext = prevExecutionContext;
    flushSyncCallbackQueue();
    nestedPassiveUpdateCount = rootWithPendingPassiveEffects === null ? 0 : nestedPassiveUpdateCount + 1;
    return true;
  }
  function isAlreadyFailedLegacyErrorBoundary(instance) {
    return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
  }
  function markLegacyErrorBoundaryAsFailed(instance) {
    if (legacyErrorBoundariesThatAlreadyFailed === null) {
      legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);
    } else {
      legacyErrorBoundariesThatAlreadyFailed.add(instance);
    }
  }
  function prepareToThrowUncaughtError(error) {
    if (!hasUncaughtError) {
      hasUncaughtError = true;
      firstUncaughtError = error;
    }
  }
  var onUncaughtError = prepareToThrowUncaughtError;
  function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {
    var errorInfo = createCapturedValue(error, sourceFiber);
    var update = createRootErrorUpdate(rootFiber, errorInfo, Sync);
    enqueueUpdate(rootFiber, update);
    var root = markUpdateTimeFromFiberToRoot(rootFiber, Sync);
    if (root !== null) {
      ensureRootIsScheduled(root);
      schedulePendingInteractions(root, Sync);
    }
  }
  function captureCommitPhaseError(sourceFiber, error) {
    if (sourceFiber.tag === HostRoot) {
      captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error);
      return;
    }
    var fiber = sourceFiber.return;
    while (fiber !== null) {
      if (fiber.tag === HostRoot) {
        captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error);
        return;
      } else if (fiber.tag === ClassComponent) {
        var ctor = fiber.type;
        var instance = fiber.stateNode;
        if (typeof ctor.getDerivedStateFromError === 'function' || typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance)) {
          var errorInfo = createCapturedValue(error, sourceFiber);
          var update = createClassErrorUpdate(fiber, errorInfo, Sync);
          enqueueUpdate(fiber, update);
          var root = markUpdateTimeFromFiberToRoot(fiber, Sync);
          if (root !== null) {
            ensureRootIsScheduled(root);
            schedulePendingInteractions(root, Sync);
          }
          return;
        }
      }
      fiber = fiber.return;
    }
  }
  function pingSuspendedRoot(root, thenable, suspendedTime) {
    var pingCache = root.pingCache;
    if (pingCache !== null) {
      pingCache.delete(thenable);
    }
    if (workInProgressRoot === root && renderExpirationTime$1 === suspendedTime) {
      if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && workInProgressRootLatestProcessedExpirationTime === Sync && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
        prepareFreshStack(root, renderExpirationTime$1);
      } else {
        workInProgressRootHasPendingPing = true;
      }
      return;
    }
    if (!isRootSuspendedAtTime(root, suspendedTime)) {
      return;
    }
    var lastPingedTime = root.lastPingedTime;
    if (lastPingedTime !== NoWork && lastPingedTime < suspendedTime) {
      return;
    }
    root.lastPingedTime = suspendedTime;
    ensureRootIsScheduled(root);
    schedulePendingInteractions(root, suspendedTime);
  }
  function retryTimedOutBoundary(boundaryFiber, retryTime) {
    if (retryTime === NoWork) {
      var suspenseConfig = null;
      var currentTime = requestCurrentTimeForUpdate();
      retryTime = computeExpirationForFiber(currentTime, boundaryFiber, suspenseConfig);
    }
    var root = markUpdateTimeFromFiberToRoot(boundaryFiber, retryTime);
    if (root !== null) {
      ensureRootIsScheduled(root);
      schedulePendingInteractions(root, retryTime);
    }
  }
  function resolveRetryThenable(boundaryFiber, thenable) {
    var retryTime = NoWork;
    var retryCache;
    {
      retryCache = boundaryFiber.stateNode;
    }
    if (retryCache !== null) {
      retryCache.delete(thenable);
    }
    retryTimedOutBoundary(boundaryFiber, retryTime);
  }
  function jnd(timeElapsed) {
    return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3000 ? 3000 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
  }
  function computeMsUntilSuspenseLoadingDelay(mostRecentEventTime, committedExpirationTime, suspenseConfig) {
    var busyMinDurationMs = suspenseConfig.busyMinDurationMs | 0;
    if (busyMinDurationMs <= 0) {
      return 0;
    }
    var busyDelayMs = suspenseConfig.busyDelayMs | 0;
    var currentTimeMs = now();
    var eventTimeMs = inferTimeFromExpirationTimeWithSuspenseConfig(mostRecentEventTime, suspenseConfig);
    var timeElapsed = currentTimeMs - eventTimeMs;
    if (timeElapsed <= busyDelayMs) {
      return 0;
    }
    var msUntilTimeout = busyDelayMs + busyMinDurationMs - timeElapsed;
    return msUntilTimeout;
  }
  function checkForNestedUpdates() {
    if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
      nestedUpdateCount = 0;
      rootWithNestedUpdates = null;
      {
        {
          throw Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
        }
      }
    }
    {
      if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
        nestedPassiveUpdateCount = 0;
        error('Maximum update depth exceeded. This can happen when a component ' + "calls setState inside useEffect, but useEffect either doesn't " + 'have a dependency array, or one of the dependencies changes on ' + 'every render.');
      }
    }
  }
  function flushRenderPhaseStrictModeWarningsInDEV() {
    {
      ReactStrictModeWarnings.flushLegacyContextWarning();
      {
        ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
      }
    }
  }
  function stopFinishedWorkLoopTimer() {
    var didCompleteRoot = true;
    stopWorkLoopTimer(interruptedBy, didCompleteRoot);
    interruptedBy = null;
  }
  function stopInterruptedWorkLoopTimer() {
    var didCompleteRoot = false;
    stopWorkLoopTimer(interruptedBy, didCompleteRoot);
    interruptedBy = null;
  }
  function checkForInterruption(fiberThatReceivedUpdate, updateExpirationTime) {
    if (workInProgressRoot !== null && updateExpirationTime > renderExpirationTime$1) {
      interruptedBy = fiberThatReceivedUpdate;
    }
  }
  var didWarnStateUpdateForUnmountedComponent = null;
  function warnAboutUpdateOnUnmountedFiberInDEV(fiber) {
    {
      var tag = fiber.tag;
      if (tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent && tag !== Block) {
        return;
      }
      var componentName = getComponentName(fiber.type) || 'ReactComponent';
      if (didWarnStateUpdateForUnmountedComponent !== null) {
        if (didWarnStateUpdateForUnmountedComponent.has(componentName)) {
          return;
        }
        didWarnStateUpdateForUnmountedComponent.add(componentName);
      } else {
        didWarnStateUpdateForUnmountedComponent = new Set([componentName]);
      }
      error("Can't perform a React state update on an unmounted component. This " + 'is a no-op, but it indicates a memory leak in your application. To ' + 'fix, cancel all subscriptions and asynchronous tasks in %s.%s', tag === ClassComponent ? 'the componentWillUnmount method' : 'a useEffect cleanup function', getStackByFiberInDevAndProd(fiber));
    }
  }
  var beginWork$1;
  {
    var dummyFiber = null;
    beginWork$1 = function (current, unitOfWork, expirationTime) {
      var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
      try {
        return beginWork(current, unitOfWork, expirationTime);
      } catch (originalError) {
        if (originalError !== null && typeof originalError === 'object' && typeof originalError.then === 'function') {
          throw originalError;
        }
        resetContextDependencies();
        resetHooksAfterThrow();
        unwindInterruptedWork(unitOfWork);
        assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
        if (unitOfWork.mode & ProfileMode) {
          startProfilerTimer(unitOfWork);
        }
        invokeGuardedCallback(null, beginWork, null, current, unitOfWork, expirationTime);
        if (hasCaughtError()) {
          var replayError = clearCaughtError();
          throw replayError;
        } else {
          throw originalError;
        }
      }
    };
  }
  var didWarnAboutUpdateInRender = false;
  var didWarnAboutUpdateInRenderForAnotherComponent;
  {
    didWarnAboutUpdateInRenderForAnotherComponent = new Set();
  }
  function warnAboutRenderPhaseUpdatesInDEV(fiber) {
    {
      if (isRendering && (executionContext & RenderContext) !== NoContext) {
        switch (fiber.tag) {
          case FunctionComponent:
          case ForwardRef:
          case SimpleMemoComponent:
            {
              var renderingComponentName = workInProgress && getComponentName(workInProgress.type) || 'Unknown';
              var dedupeKey = renderingComponentName;
              if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                var setStateComponentName = getComponentName(fiber.type) || 'Unknown';
                error('Cannot update a component (`%s`) while rendering a ' + 'different component (`%s`). To locate the bad setState() call inside `%s`, ' + 'follow the stack trace as described in https://fb.me/setstate-in-render', setStateComponentName, renderingComponentName, renderingComponentName);
              }
              break;
            }
          case ClassComponent:
            {
              if (!didWarnAboutUpdateInRender) {
                error('Cannot update during an existing state transition (such as ' + 'within `render`). Render methods should be a pure ' + 'function of props and state.');
                didWarnAboutUpdateInRender = true;
              }
              break;
            }
        }
      }
    }
  }
  var IsThisRendererActing = {
    current: false
  };
  function warnIfNotScopedWithMatchingAct(fiber) {
    {
      if (IsSomeRendererActing.current === true && IsThisRendererActing.current !== true) {
        error("It looks like you're using the wrong act() around your test interactions.\n" + 'Be sure to use the matching version of act() corresponding to your renderer:\n\n' + '// for react-dom:\n' + "import {act} from 'react-dom/test-utils';\n" + '// ...\n' + 'act(() => ...);\n\n' + '// for react-test-renderer:\n' + "import TestRenderer from 'react-test-renderer';\n" + 'const {act} = TestRenderer;\n' + '// ...\n' + 'act(() => ...);' + '%s', getStackByFiberInDevAndProd(fiber));
      }
    }
  }
  function warnIfNotCurrentlyActingEffectsInDEV(fiber) {
    {
      if ((fiber.mode & StrictMode) !== NoMode && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
        error('An update to %s ran an effect, but was not wrapped in act(...).\n\n' + 'When testing, code that causes React state updates should be ' + 'wrapped into act(...):\n\n' + 'act(() => {\n' + '  /* fire events that update state */\n' + '});\n' + '/* assert on the output */\n\n' + "This ensures that you're testing the behavior the user would see " + 'in the browser.' + ' Learn more at https://fb.me/react-wrap-tests-with-act' + '%s', getComponentName(fiber.type), getStackByFiberInDevAndProd(fiber));
      }
    }
  }
  function warnIfNotCurrentlyActingUpdatesInDEV(fiber) {
    {
      if (executionContext === NoContext && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
        error('An update to %s inside a test was not wrapped in act(...).\n\n' + 'When testing, code that causes React state updates should be ' + 'wrapped into act(...):\n\n' + 'act(() => {\n' + '  /* fire events that update state */\n' + '});\n' + '/* assert on the output */\n\n' + "This ensures that you're testing the behavior the user would see " + 'in the browser.' + ' Learn more at https://fb.me/react-wrap-tests-with-act' + '%s', getComponentName(fiber.type), getStackByFiberInDevAndProd(fiber));
      }
    }
  }
  var warnIfNotCurrentlyActingUpdatesInDev = warnIfNotCurrentlyActingUpdatesInDEV;
  var didWarnAboutUnmockedScheduler = false;
  function warnIfUnmockedScheduler(fiber) {
    {
      if (didWarnAboutUnmockedScheduler === false && Scheduler.unstable_flushAllWithoutAsserting === undefined) {
        if (fiber.mode & BlockingMode || fiber.mode & ConcurrentMode) {
          didWarnAboutUnmockedScheduler = true;
          error('In Concurrent or Sync modes, the "scheduler" module needs to be mocked ' + 'to guarantee consistent behaviour across tests and browsers. ' + 'For example, with jest: \n' + "jest.mock('scheduler', () => require('scheduler/unstable_mock'));\n\n" + 'For more info, visit https://fb.me/react-mock-scheduler');
        }
      }
    }
  }
  function computeThreadID(root, expirationTime) {
    return expirationTime * 1000 + root.interactionThreadID;
  }
  function markSpawnedWork(expirationTime) {
    if (spawnedWorkDuringRender === null) {
      spawnedWorkDuringRender = [expirationTime];
    } else {
      spawnedWorkDuringRender.push(expirationTime);
    }
  }
  function scheduleInteractions(root, expirationTime, interactions) {
    if (interactions.size > 0) {
      var pendingInteractionMap = root.pendingInteractionMap;
      var pendingInteractions = pendingInteractionMap.get(expirationTime);
      if (pendingInteractions != null) {
        interactions.forEach(function (interaction) {
          if (!pendingInteractions.has(interaction)) {
            interaction.__count++;
          }
          pendingInteractions.add(interaction);
        });
      } else {
        pendingInteractionMap.set(expirationTime, new Set(interactions));
        interactions.forEach(function (interaction) {
          interaction.__count++;
        });
      }
      var subscriber = tracing.__subscriberRef.current;
      if (subscriber !== null) {
        var threadID = computeThreadID(root, expirationTime);
        subscriber.onWorkScheduled(interactions, threadID);
      }
    }
  }
  function schedulePendingInteractions(root, expirationTime) {
    scheduleInteractions(root, expirationTime, tracing.__interactionsRef.current);
  }
  function startWorkOnPendingInteractions(root, expirationTime) {
    var interactions = new Set();
    root.pendingInteractionMap.forEach(function (scheduledInteractions, scheduledExpirationTime) {
      if (scheduledExpirationTime >= expirationTime) {
        scheduledInteractions.forEach(function (interaction) {
          return interactions.add(interaction);
        });
      }
    });
    root.memoizedInteractions = interactions;
    if (interactions.size > 0) {
      var subscriber = tracing.__subscriberRef.current;
      if (subscriber !== null) {
        var threadID = computeThreadID(root, expirationTime);
        try {
          subscriber.onWorkStarted(interactions, threadID);
        } catch (error) {
          scheduleCallback(ImmediatePriority, function () {
            throw error;
          });
        }
      }
    }
  }
  function finishPendingInteractions(root, committedExpirationTime) {
    var earliestRemainingTimeAfterCommit = root.firstPendingTime;
    var subscriber;
    try {
      subscriber = tracing.__subscriberRef.current;
      if (subscriber !== null && root.memoizedInteractions.size > 0) {
        var threadID = computeThreadID(root, committedExpirationTime);
        subscriber.onWorkStopped(root.memoizedInteractions, threadID);
      }
    } catch (error) {
      scheduleCallback(ImmediatePriority, function () {
        throw error;
      });
    } finally {
      var pendingInteractionMap = root.pendingInteractionMap;
      pendingInteractionMap.forEach(function (scheduledInteractions, scheduledExpirationTime) {
        if (scheduledExpirationTime > earliestRemainingTimeAfterCommit) {
          pendingInteractionMap.delete(scheduledExpirationTime);
          scheduledInteractions.forEach(function (interaction) {
            interaction.__count--;
            if (subscriber !== null && interaction.__count === 0) {
              try {
                subscriber.onInteractionScheduledWorkCompleted(interaction);
              } catch (error) {
                scheduleCallback(ImmediatePriority, function () {
                  throw error;
                });
              }
            }
          });
        }
      });
    }
  }
  var onScheduleFiberRoot = null;
  var onCommitFiberRoot = null;
  var onCommitFiberUnmount = null;
  var hasLoggedError = false;
  var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined';
  function injectInternals(internals) {
    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
      return false;
    }
    var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
    if (hook.isDisabled) {
      return true;
    }
    if (!hook.supportsFiber) {
      {
        error('The installed version of React DevTools is too old and will not work ' + 'with the current version of React. Please update React DevTools. ' + 'https://fb.me/react-devtools');
      }
      return true;
    }
    try {
      var rendererID = hook.inject(internals);
      if (true) {
        if (typeof hook.onScheduleFiberRoot === 'function') {
          onScheduleFiberRoot = function (root, children) {
            try {
              hook.onScheduleFiberRoot(rendererID, root, children);
            } catch (err) {
              if (true && !hasLoggedError) {
                hasLoggedError = true;
                error('React instrumentation encountered an error: %s', err);
              }
            }
          };
        }
      }
      onCommitFiberRoot = function (root, expirationTime) {
        try {
          var didError = (root.current.effectTag & DidCapture) === DidCapture;
          if (enableProfilerTimer) {
            var currentTime = getCurrentTime();
            var priorityLevel = inferPriorityFromExpirationTime(currentTime, expirationTime);
            hook.onCommitFiberRoot(rendererID, root, priorityLevel, didError);
          } else {
            hook.onCommitFiberRoot(rendererID, root, undefined, didError);
          }
        } catch (err) {
          if (true) {
            if (!hasLoggedError) {
              hasLoggedError = true;
              error('React instrumentation encountered an error: %s', err);
            }
          }
        }
      };
      onCommitFiberUnmount = function (fiber) {
        try {
          hook.onCommitFiberUnmount(rendererID, fiber);
        } catch (err) {
          if (true) {
            if (!hasLoggedError) {
              hasLoggedError = true;
              error('React instrumentation encountered an error: %s', err);
            }
          }
        }
      };
    } catch (err) {
      {
        error('React instrumentation encountered an error: %s.', err);
      }
    }
    return true;
  }
  function onScheduleRoot(root, children) {
    if (typeof onScheduleFiberRoot === 'function') {
      onScheduleFiberRoot(root, children);
    }
  }
  function onCommitRoot(root, expirationTime) {
    if (typeof onCommitFiberRoot === 'function') {
      onCommitFiberRoot(root, expirationTime);
    }
  }
  function onCommitUnmount(fiber) {
    if (typeof onCommitFiberUnmount === 'function') {
      onCommitFiberUnmount(fiber);
    }
  }
  var hasBadMapPolyfill;
  {
    hasBadMapPolyfill = false;
    try {
      var nonExtensibleObject = Object.preventExtensions({});
      var testMap = new Map([[nonExtensibleObject, null]]);
      var testSet = new Set([nonExtensibleObject]);
      testMap.set(0, 0);
      testSet.add(0);
    } catch (e) {
      hasBadMapPolyfill = true;
    }
  }
  var debugCounter = 1;
  function FiberNode(tag, pendingProps, key, mode) {
    this.tag = tag;
    this.key = key;
    this.elementType = null;
    this.type = null;
    this.stateNode = null;
    this.return = null;
    this.child = null;
    this.sibling = null;
    this.index = 0;
    this.ref = null;
    this.pendingProps = pendingProps;
    this.memoizedProps = null;
    this.updateQueue = null;
    this.memoizedState = null;
    this.dependencies = null;
    this.mode = mode;
    this.effectTag = NoEffect;
    this.nextEffect = null;
    this.firstEffect = null;
    this.lastEffect = null;
    this.expirationTime = NoWork;
    this.childExpirationTime = NoWork;
    this.alternate = null;
    {
      this.actualDuration = Number.NaN;
      this.actualStartTime = Number.NaN;
      this.selfBaseDuration = Number.NaN;
      this.treeBaseDuration = Number.NaN;
      this.actualDuration = 0;
      this.actualStartTime = -1;
      this.selfBaseDuration = 0;
      this.treeBaseDuration = 0;
    }
    {
      this._debugID = debugCounter++;
      this._debugIsCurrentlyTiming = false;
    }
    {
      this._debugSource = null;
      this._debugOwner = null;
      this._debugNeedsRemount = false;
      this._debugHookTypes = null;
      if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') {
        Object.preventExtensions(this);
      }
    }
  }
  var createFiber = function (tag, pendingProps, key, mode) {
    return new FiberNode(tag, pendingProps, key, mode);
  };
  function shouldConstruct(Component) {
    var prototype = Component.prototype;
    return !!(prototype && prototype.isReactComponent);
  }
  function isSimpleFunctionComponent(type) {
    return typeof type === 'function' && !shouldConstruct(type) && type.defaultProps === undefined;
  }
  function resolveLazyComponentTag(Component) {
    if (typeof Component === 'function') {
      return shouldConstruct(Component) ? ClassComponent : FunctionComponent;
    } else if (Component !== undefined && Component !== null) {
      var $$typeof = Component.$$typeof;
      if ($$typeof === REACT_FORWARD_REF_TYPE) {
        return ForwardRef;
      }
      if ($$typeof === REACT_MEMO_TYPE) {
        return MemoComponent;
      }
    }
    return IndeterminateComponent;
  }
  function createWorkInProgress(current, pendingProps) {
    var workInProgress = current.alternate;
    if (workInProgress === null) {
      workInProgress = createFiber(current.tag, pendingProps, current.key, current.mode);
      workInProgress.elementType = current.elementType;
      workInProgress.type = current.type;
      workInProgress.stateNode = current.stateNode;
      {
        {
          workInProgress._debugID = current._debugID;
        }
        workInProgress._debugSource = current._debugSource;
        workInProgress._debugOwner = current._debugOwner;
        workInProgress._debugHookTypes = current._debugHookTypes;
      }
      workInProgress.alternate = current;
      current.alternate = workInProgress;
    } else {
      workInProgress.pendingProps = pendingProps;
      workInProgress.effectTag = NoEffect;
      workInProgress.nextEffect = null;
      workInProgress.firstEffect = null;
      workInProgress.lastEffect = null;
      {
        workInProgress.actualDuration = 0;
        workInProgress.actualStartTime = -1;
      }
    }
    workInProgress.childExpirationTime = current.childExpirationTime;
    workInProgress.expirationTime = current.expirationTime;
    workInProgress.child = current.child;
    workInProgress.memoizedProps = current.memoizedProps;
    workInProgress.memoizedState = current.memoizedState;
    workInProgress.updateQueue = current.updateQueue;
    var currentDependencies = current.dependencies;
    workInProgress.dependencies = currentDependencies === null ? null : {
      expirationTime: currentDependencies.expirationTime,
      firstContext: currentDependencies.firstContext,
      responders: currentDependencies.responders
    };
    workInProgress.sibling = current.sibling;
    workInProgress.index = current.index;
    workInProgress.ref = current.ref;
    {
      workInProgress.selfBaseDuration = current.selfBaseDuration;
      workInProgress.treeBaseDuration = current.treeBaseDuration;
    }
    {
      workInProgress._debugNeedsRemount = current._debugNeedsRemount;
      switch (workInProgress.tag) {
        case IndeterminateComponent:
        case FunctionComponent:
        case SimpleMemoComponent:
          workInProgress.type = resolveFunctionForHotReloading(current.type);
          break;
        case ClassComponent:
          workInProgress.type = resolveClassForHotReloading(current.type);
          break;
        case ForwardRef:
          workInProgress.type = resolveForwardRefForHotReloading(current.type);
          break;
      }
    }
    return workInProgress;
  }
  function resetWorkInProgress(workInProgress, renderExpirationTime) {
    workInProgress.effectTag &= Placement;
    workInProgress.nextEffect = null;
    workInProgress.firstEffect = null;
    workInProgress.lastEffect = null;
    var current = workInProgress.alternate;
    if (current === null) {
      workInProgress.childExpirationTime = NoWork;
      workInProgress.expirationTime = renderExpirationTime;
      workInProgress.child = null;
      workInProgress.memoizedProps = null;
      workInProgress.memoizedState = null;
      workInProgress.updateQueue = null;
      workInProgress.dependencies = null;
      {
        workInProgress.selfBaseDuration = 0;
        workInProgress.treeBaseDuration = 0;
      }
    } else {
      workInProgress.childExpirationTime = current.childExpirationTime;
      workInProgress.expirationTime = current.expirationTime;
      workInProgress.child = current.child;
      workInProgress.memoizedProps = current.memoizedProps;
      workInProgress.memoizedState = current.memoizedState;
      workInProgress.updateQueue = current.updateQueue;
      var currentDependencies = current.dependencies;
      workInProgress.dependencies = currentDependencies === null ? null : {
        expirationTime: currentDependencies.expirationTime,
        firstContext: currentDependencies.firstContext,
        responders: currentDependencies.responders
      };
      {
        workInProgress.selfBaseDuration = current.selfBaseDuration;
        workInProgress.treeBaseDuration = current.treeBaseDuration;
      }
    }
    return workInProgress;
  }
  function createHostRootFiber(tag) {
    var mode;
    if (tag === ConcurrentRoot) {
      mode = ConcurrentMode | BlockingMode | StrictMode;
    } else if (tag === BlockingRoot) {
      mode = BlockingMode | StrictMode;
    } else {
      mode = NoMode;
    }
    if (isDevToolsPresent) {
      mode |= ProfileMode;
    }
    return createFiber(HostRoot, null, null, mode);
  }
  function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, expirationTime) {
    var fiber;
    var fiberTag = IndeterminateComponent;
    var resolvedType = type;
    if (typeof type === 'function') {
      if (shouldConstruct(type)) {
        fiberTag = ClassComponent;
        {
          resolvedType = resolveClassForHotReloading(resolvedType);
        }
      } else {
        {
          resolvedType = resolveFunctionForHotReloading(resolvedType);
        }
      }
    } else if (typeof type === 'string') {
      fiberTag = HostComponent;
    } else {
      getTag: switch (type) {
        case REACT_FRAGMENT_TYPE:
          return createFiberFromFragment(pendingProps.children, mode, expirationTime, key);
        case REACT_CONCURRENT_MODE_TYPE:
          fiberTag = Mode;
          mode |= ConcurrentMode | BlockingMode | StrictMode;
          break;
        case REACT_STRICT_MODE_TYPE:
          fiberTag = Mode;
          mode |= StrictMode;
          break;
        case REACT_PROFILER_TYPE:
          return createFiberFromProfiler(pendingProps, mode, expirationTime, key);
        case REACT_SUSPENSE_TYPE:
          return createFiberFromSuspense(pendingProps, mode, expirationTime, key);
        case REACT_SUSPENSE_LIST_TYPE:
          return createFiberFromSuspenseList(pendingProps, mode, expirationTime, key);
        default:
          {
            if (typeof type === 'object' && type !== null) {
              switch (type.$$typeof) {
                case REACT_PROVIDER_TYPE:
                  fiberTag = ContextProvider;
                  break getTag;
                case REACT_CONTEXT_TYPE:
                  fiberTag = ContextConsumer;
                  break getTag;
                case REACT_FORWARD_REF_TYPE:
                  fiberTag = ForwardRef;
                  {
                    resolvedType = resolveForwardRefForHotReloading(resolvedType);
                  }
                  break getTag;
                case REACT_MEMO_TYPE:
                  fiberTag = MemoComponent;
                  break getTag;
                case REACT_LAZY_TYPE:
                  fiberTag = LazyComponent;
                  resolvedType = null;
                  break getTag;
                case REACT_BLOCK_TYPE:
                  fiberTag = Block;
                  break getTag;
              }
            }
            var info = '';
            {
              if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
                info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and " + 'named imports.';
              }
              var ownerName = owner ? getComponentName(owner.type) : null;
              if (ownerName) {
                info += '\n\nCheck the render method of `' + ownerName + '`.';
              }
            }
            {
              {
                throw Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " + (type == null ? type : typeof type) + "." + info);
              }
            }
          }
      }
    }
    fiber = createFiber(fiberTag, pendingProps, key, mode);
    fiber.elementType = type;
    fiber.type = resolvedType;
    fiber.expirationTime = expirationTime;
    return fiber;
  }
  function createFiberFromElement(element, mode, expirationTime) {
    var owner = null;
    {
      owner = element._owner;
    }
    var type = element.type;
    var key = element.key;
    var pendingProps = element.props;
    var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, expirationTime);
    {
      fiber._debugSource = element._source;
      fiber._debugOwner = element._owner;
    }
    return fiber;
  }
  function createFiberFromFragment(elements, mode, expirationTime, key) {
    var fiber = createFiber(Fragment, elements, key, mode);
    fiber.expirationTime = expirationTime;
    return fiber;
  }
  function createFiberFromProfiler(pendingProps, mode, expirationTime, key) {
    {
      if (typeof pendingProps.id !== 'string' || typeof pendingProps.onRender !== 'function') {
        error('Profiler must specify an "id" string and "onRender" function as props');
      }
    }
    var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
    fiber.elementType = REACT_PROFILER_TYPE;
    fiber.type = REACT_PROFILER_TYPE;
    fiber.expirationTime = expirationTime;
    return fiber;
  }
  function createFiberFromSuspense(pendingProps, mode, expirationTime, key) {
    var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
    fiber.type = REACT_SUSPENSE_TYPE;
    fiber.elementType = REACT_SUSPENSE_TYPE;
    fiber.expirationTime = expirationTime;
    return fiber;
  }
  function createFiberFromSuspenseList(pendingProps, mode, expirationTime, key) {
    var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
    {
      fiber.type = REACT_SUSPENSE_LIST_TYPE;
    }
    fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
    fiber.expirationTime = expirationTime;
    return fiber;
  }
  function createFiberFromText(content, mode, expirationTime) {
    var fiber = createFiber(HostText, content, null, mode);
    fiber.expirationTime = expirationTime;
    return fiber;
  }
  function createFiberFromHostInstanceForDeletion() {
    var fiber = createFiber(HostComponent, null, null, NoMode);
    fiber.elementType = 'DELETED';
    fiber.type = 'DELETED';
    return fiber;
  }
  function createFiberFromPortal(portal, mode, expirationTime) {
    var pendingProps = portal.children !== null ? portal.children : [];
    var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
    fiber.expirationTime = expirationTime;
    fiber.stateNode = {
      containerInfo: portal.containerInfo,
      pendingChildren: null,
      implementation: portal.implementation
    };
    return fiber;
  }
  function assignFiberPropertiesInDEV(target, source) {
    if (target === null) {
      target = createFiber(IndeterminateComponent, null, null, NoMode);
    }
    target.tag = source.tag;
    target.key = source.key;
    target.elementType = source.elementType;
    target.type = source.type;
    target.stateNode = source.stateNode;
    target.return = source.return;
    target.child = source.child;
    target.sibling = source.sibling;
    target.index = source.index;
    target.ref = source.ref;
    target.pendingProps = source.pendingProps;
    target.memoizedProps = source.memoizedProps;
    target.updateQueue = source.updateQueue;
    target.memoizedState = source.memoizedState;
    target.dependencies = source.dependencies;
    target.mode = source.mode;
    target.effectTag = source.effectTag;
    target.nextEffect = source.nextEffect;
    target.firstEffect = source.firstEffect;
    target.lastEffect = source.lastEffect;
    target.expirationTime = source.expirationTime;
    target.childExpirationTime = source.childExpirationTime;
    target.alternate = source.alternate;
    {
      target.actualDuration = source.actualDuration;
      target.actualStartTime = source.actualStartTime;
      target.selfBaseDuration = source.selfBaseDuration;
      target.treeBaseDuration = source.treeBaseDuration;
    }
    {
      target._debugID = source._debugID;
    }
    target._debugSource = source._debugSource;
    target._debugOwner = source._debugOwner;
    target._debugIsCurrentlyTiming = source._debugIsCurrentlyTiming;
    target._debugNeedsRemount = source._debugNeedsRemount;
    target._debugHookTypes = source._debugHookTypes;
    return target;
  }
  function FiberRootNode(containerInfo, tag, hydrate) {
    this.tag = tag;
    this.current = null;
    this.containerInfo = containerInfo;
    this.pendingChildren = null;
    this.pingCache = null;
    this.finishedExpirationTime = NoWork;
    this.finishedWork = null;
    this.timeoutHandle = noTimeout;
    this.context = null;
    this.pendingContext = null;
    this.hydrate = hydrate;
    this.callbackNode = null;
    this.callbackPriority = NoPriority;
    this.firstPendingTime = NoWork;
    this.firstSuspendedTime = NoWork;
    this.lastSuspendedTime = NoWork;
    this.nextKnownPendingLevel = NoWork;
    this.lastPingedTime = NoWork;
    this.lastExpiredTime = NoWork;
    {
      this.interactionThreadID = tracing.unstable_getThreadID();
      this.memoizedInteractions = new Set();
      this.pendingInteractionMap = new Map();
    }
  }
  function createFiberRoot(containerInfo, tag, hydrate, hydrationCallbacks) {
    var root = new FiberRootNode(containerInfo, tag, hydrate);
    var uninitializedFiber = createHostRootFiber(tag);
    root.current = uninitializedFiber;
    uninitializedFiber.stateNode = root;
    initializeUpdateQueue(uninitializedFiber);
    return root;
  }
  function isRootSuspendedAtTime(root, expirationTime) {
    var firstSuspendedTime = root.firstSuspendedTime;
    var lastSuspendedTime = root.lastSuspendedTime;
    return firstSuspendedTime !== NoWork && firstSuspendedTime >= expirationTime && lastSuspendedTime <= expirationTime;
  }
  function markRootSuspendedAtTime(root, expirationTime) {
    var firstSuspendedTime = root.firstSuspendedTime;
    var lastSuspendedTime = root.lastSuspendedTime;
    if (firstSuspendedTime < expirationTime) {
      root.firstSuspendedTime = expirationTime;
    }
    if (lastSuspendedTime > expirationTime || firstSuspendedTime === NoWork) {
      root.lastSuspendedTime = expirationTime;
    }
    if (expirationTime <= root.lastPingedTime) {
      root.lastPingedTime = NoWork;
    }
    if (expirationTime <= root.lastExpiredTime) {
      root.lastExpiredTime = NoWork;
    }
  }
  function markRootUpdatedAtTime(root, expirationTime) {
    var firstPendingTime = root.firstPendingTime;
    if (expirationTime > firstPendingTime) {
      root.firstPendingTime = expirationTime;
    }
    var firstSuspendedTime = root.firstSuspendedTime;
    if (firstSuspendedTime !== NoWork) {
      if (expirationTime >= firstSuspendedTime) {
        root.firstSuspendedTime = root.lastSuspendedTime = root.nextKnownPendingLevel = NoWork;
      } else if (expirationTime >= root.lastSuspendedTime) {
        root.lastSuspendedTime = expirationTime + 1;
      }
      if (expirationTime > root.nextKnownPendingLevel) {
        root.nextKnownPendingLevel = expirationTime;
      }
    }
  }
  function markRootFinishedAtTime(root, finishedExpirationTime, remainingExpirationTime) {
    root.firstPendingTime = remainingExpirationTime;
    if (finishedExpirationTime <= root.lastSuspendedTime) {
      root.firstSuspendedTime = root.lastSuspendedTime = root.nextKnownPendingLevel = NoWork;
    } else if (finishedExpirationTime <= root.firstSuspendedTime) {
      root.firstSuspendedTime = finishedExpirationTime - 1;
    }
    if (finishedExpirationTime <= root.lastPingedTime) {
      root.lastPingedTime = NoWork;
    }
    if (finishedExpirationTime <= root.lastExpiredTime) {
      root.lastExpiredTime = NoWork;
    }
  }
  function markRootExpiredAtTime(root, expirationTime) {
    var lastExpiredTime = root.lastExpiredTime;
    if (lastExpiredTime === NoWork || lastExpiredTime > expirationTime) {
      root.lastExpiredTime = expirationTime;
    }
  }
  var didWarnAboutNestedUpdates;
  var didWarnAboutFindNodeInStrictMode;
  {
    didWarnAboutNestedUpdates = false;
    didWarnAboutFindNodeInStrictMode = {};
  }
  function getContextForSubtree(parentComponent) {
    if (!parentComponent) {
      return emptyContextObject;
    }
    var fiber = get(parentComponent);
    var parentContext = findCurrentUnmaskedContext(fiber);
    if (fiber.tag === ClassComponent) {
      var Component = fiber.type;
      if (isContextProvider(Component)) {
        return processChildContext(fiber, Component, parentContext);
      }
    }
    return parentContext;
  }
  function findHostInstanceWithWarning(component, methodName) {
    {
      var fiber = get(component);
      if (fiber === undefined) {
        if (typeof component.render === 'function') {
          {
            {
              throw Error("Unable to find node on an unmounted component.");
            }
          }
        } else {
          {
            {
              throw Error("Argument appears to not be a ReactComponent. Keys: " + Object.keys(component));
            }
          }
        }
      }
      var hostFiber = findCurrentHostFiber(fiber);
      if (hostFiber === null) {
        return null;
      }
      if (hostFiber.mode & StrictMode) {
        var componentName = getComponentName(fiber.type) || 'Component';
        if (!didWarnAboutFindNodeInStrictMode[componentName]) {
          didWarnAboutFindNodeInStrictMode[componentName] = true;
          if (fiber.mode & StrictMode) {
            error('%s is deprecated in StrictMode. ' + '%s was passed an instance of %s which is inside StrictMode. ' + 'Instead, add a ref directly to the element you want to reference. ' + 'Learn more about using refs safely here: ' + 'https://fb.me/react-strict-mode-find-node%s', methodName, methodName, componentName, getStackByFiberInDevAndProd(hostFiber));
          } else {
            error('%s is deprecated in StrictMode. ' + '%s was passed an instance of %s which renders StrictMode children. ' + 'Instead, add a ref directly to the element you want to reference. ' + 'Learn more about using refs safely here: ' + 'https://fb.me/react-strict-mode-find-node%s', methodName, methodName, componentName, getStackByFiberInDevAndProd(hostFiber));
          }
        }
      }
      return hostFiber.stateNode;
    }
  }
  function createContainer(containerInfo, tag, hydrate, hydrationCallbacks) {
    return createFiberRoot(containerInfo, tag, hydrate);
  }
  function updateContainer(element, container, parentComponent, callback) {
    {
      onScheduleRoot(container, element);
    }
    var current$1 = container.current;
    var currentTime = requestCurrentTimeForUpdate();
    {
      if ('undefined' !== typeof jest) {
        warnIfUnmockedScheduler(current$1);
        warnIfNotScopedWithMatchingAct(current$1);
      }
    }
    var suspenseConfig = requestCurrentSuspenseConfig();
    var expirationTime = computeExpirationForFiber(currentTime, current$1, suspenseConfig);
    var context = getContextForSubtree(parentComponent);
    if (container.context === null) {
      container.context = context;
    } else {
      container.pendingContext = context;
    }
    {
      if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
        didWarnAboutNestedUpdates = true;
        error('Render methods should be a pure function of props and state; ' + 'triggering nested component updates from render is not allowed. ' + 'If necessary, trigger nested updates in componentDidUpdate.\n\n' + 'Check the render method of %s.', getComponentName(current.type) || 'Unknown');
      }
    }
    var update = createUpdate(expirationTime, suspenseConfig);
    update.payload = {
      element: element
    };
    callback = callback === undefined ? null : callback;
    if (callback !== null) {
      {
        if (typeof callback !== 'function') {
          error('render(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callback);
        }
      }
      update.callback = callback;
    }
    enqueueUpdate(current$1, update);
    scheduleWork(current$1, expirationTime);
    return expirationTime;
  }
  function getPublicRootInstance(container) {
    var containerFiber = container.current;
    if (!containerFiber.child) {
      return null;
    }
    switch (containerFiber.child.tag) {
      case HostComponent:
        return getPublicInstance(containerFiber.child.stateNode);
      default:
        return containerFiber.child.stateNode;
    }
  }
  function markRetryTimeImpl(fiber, retryTime) {
    var suspenseState = fiber.memoizedState;
    if (suspenseState !== null && suspenseState.dehydrated !== null) {
      if (suspenseState.retryTime < retryTime) {
        suspenseState.retryTime = retryTime;
      }
    }
  }
  function markRetryTimeIfNotHydrated(fiber, retryTime) {
    markRetryTimeImpl(fiber, retryTime);
    var alternate = fiber.alternate;
    if (alternate) {
      markRetryTimeImpl(alternate, retryTime);
    }
  }
  function attemptUserBlockingHydration$1(fiber) {
    if (fiber.tag !== SuspenseComponent) {
      return;
    }
    var expTime = computeInteractiveExpiration(requestCurrentTimeForUpdate());
    scheduleWork(fiber, expTime);
    markRetryTimeIfNotHydrated(fiber, expTime);
  }
  function attemptContinuousHydration$1(fiber) {
    if (fiber.tag !== SuspenseComponent) {
      return;
    }
    scheduleWork(fiber, ContinuousHydration);
    markRetryTimeIfNotHydrated(fiber, ContinuousHydration);
  }
  function attemptHydrationAtCurrentPriority$1(fiber) {
    if (fiber.tag !== SuspenseComponent) {
      return;
    }
    var currentTime = requestCurrentTimeForUpdate();
    var expTime = computeExpirationForFiber(currentTime, fiber, null);
    scheduleWork(fiber, expTime);
    markRetryTimeIfNotHydrated(fiber, expTime);
  }
  function findHostInstanceWithNoPortals(fiber) {
    var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
    if (hostFiber === null) {
      return null;
    }
    if (hostFiber.tag === FundamentalComponent) {
      return hostFiber.stateNode.instance;
    }
    return hostFiber.stateNode;
  }
  var shouldSuspendImpl = function (fiber) {
    return false;
  };
  function shouldSuspend(fiber) {
    return shouldSuspendImpl(fiber);
  }
  var overrideHookState = null;
  var overrideProps = null;
  var scheduleUpdate = null;
  var setSuspenseHandler = null;
  {
    var copyWithSetImpl = function (obj, path, idx, value) {
      if (idx >= path.length) {
        return value;
      }
      var key = path[idx];
      var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);
      updated[key] = copyWithSetImpl(obj[key], path, idx + 1, value);
      return updated;
    };
    var copyWithSet = function (obj, path, value) {
      return copyWithSetImpl(obj, path, 0, value);
    };
    overrideHookState = function (fiber, id, path, value) {
      var currentHook = fiber.memoizedState;
      while (currentHook !== null && id > 0) {
        currentHook = currentHook.next;
        id--;
      }
      if (currentHook !== null) {
        var newState = copyWithSet(currentHook.memoizedState, path, value);
        currentHook.memoizedState = newState;
        currentHook.baseState = newState;
        fiber.memoizedProps = _assign({}, fiber.memoizedProps);
        scheduleWork(fiber, Sync);
      }
    };
    overrideProps = function (fiber, path, value) {
      fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);
      if (fiber.alternate) {
        fiber.alternate.pendingProps = fiber.pendingProps;
      }
      scheduleWork(fiber, Sync);
    };
    scheduleUpdate = function (fiber) {
      scheduleWork(fiber, Sync);
    };
    setSuspenseHandler = function (newShouldSuspendImpl) {
      shouldSuspendImpl = newShouldSuspendImpl;
    };
  }
  function injectIntoDevTools(devToolsConfig) {
    var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
    var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
    return injectInternals(_assign({}, devToolsConfig, {
      overrideHookState: overrideHookState,
      overrideProps: overrideProps,
      setSuspenseHandler: setSuspenseHandler,
      scheduleUpdate: scheduleUpdate,
      currentDispatcherRef: ReactCurrentDispatcher,
      findHostInstanceByFiber: function (fiber) {
        var hostFiber = findCurrentHostFiber(fiber);
        if (hostFiber === null) {
          return null;
        }
        return hostFiber.stateNode;
      },
      findFiberByHostInstance: function (instance) {
        if (!findFiberByHostInstance) {
          return null;
        }
        return findFiberByHostInstance(instance);
      },
      findHostInstancesForRefresh: findHostInstancesForRefresh,
      scheduleRefresh: scheduleRefresh,
      scheduleRoot: scheduleRoot,
      setRefreshHandler: setRefreshHandler,
      getCurrentFiber: function () {
        return current;
      }
    }));
  }
  var IsSomeRendererActing$1 = ReactSharedInternals.IsSomeRendererActing;
  function ReactDOMRoot(container, options) {
    this._internalRoot = createRootImpl(container, ConcurrentRoot, options);
  }
  function ReactDOMBlockingRoot(container, tag, options) {
    this._internalRoot = createRootImpl(container, tag, options);
  }
  ReactDOMRoot.prototype.render = ReactDOMBlockingRoot.prototype.render = function (children) {
    var root = this._internalRoot;
    {
      if (typeof arguments[1] === 'function') {
        error('render(...): does not support the second callback argument. ' + 'To execute a side effect after rendering, declare it in a component body with useEffect().');
      }
      var container = root.containerInfo;
      if (container.nodeType !== COMMENT_NODE) {
        var hostInstance = findHostInstanceWithNoPortals(root.current);
        if (hostInstance) {
          if (hostInstance.parentNode !== container) {
            error('render(...): It looks like the React-rendered content of the ' + 'root container was removed without using React. This is not ' + 'supported and will cause errors. Instead, call ' + "root.unmount() to empty a root's container.");
          }
        }
      }
    }
    updateContainer(children, root, null, null);
  };
  ReactDOMRoot.prototype.unmount = ReactDOMBlockingRoot.prototype.unmount = function () {
    {
      if (typeof arguments[0] === 'function') {
        error('unmount(...): does not support a callback argument. ' + 'To execute a side effect after rendering, declare it in a component body with useEffect().');
      }
    }
    var root = this._internalRoot;
    var container = root.containerInfo;
    updateContainer(null, root, null, function () {
      unmarkContainerAsRoot(container);
    });
  };
  function createRootImpl(container, tag, options) {
    var hydrate = options != null && options.hydrate === true;
    var hydrationCallbacks = options != null && options.hydrationOptions || null;
    var root = createContainer(container, tag, hydrate);
    markContainerAsRoot(root.current, container);
    if (hydrate && tag !== LegacyRoot) {
      var doc = container.nodeType === DOCUMENT_NODE ? container : container.ownerDocument;
      eagerlyTrapReplayableEvents(container, doc);
    }
    return root;
  }
  function createLegacyRoot(container, options) {
    return new ReactDOMBlockingRoot(container, LegacyRoot, options);
  }
  function isValidContainer(node) {
    return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === ' react-mount-point-unstable '));
  }
  var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
  var topLevelUpdateWarnings;
  var warnedAboutHydrateAPI = false;
  {
    topLevelUpdateWarnings = function (container) {
      if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
        var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer._internalRoot.current);
        if (hostInstance) {
          if (hostInstance.parentNode !== container) {
            error('render(...): It looks like the React-rendered content of this ' + 'container was removed without using React. This is not ' + 'supported and will cause errors. Instead, call ' + 'ReactDOM.unmountComponentAtNode to empty a container.');
          }
        }
      }
      var isRootRenderedBySomeReact = !!container._reactRootContainer;
      var rootEl = getReactRootElementInContainer(container);
      var hasNonRootReactChild = !!(rootEl && getInstanceFromNode$1(rootEl));
      if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
        error('render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.');
      }
      if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === 'BODY') {
        error('render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.');
      }
    };
  }
  function getReactRootElementInContainer(container) {
    if (!container) {
      return null;
    }
    if (container.nodeType === DOCUMENT_NODE) {
      return container.documentElement;
    } else {
      return container.firstChild;
    }
  }
  function shouldHydrateDueToLegacyHeuristic(container) {
    var rootElement = getReactRootElementInContainer(container);
    return !!(rootElement && rootElement.nodeType === ELEMENT_NODE && rootElement.hasAttribute(ROOT_ATTRIBUTE_NAME));
  }
  function legacyCreateRootFromDOMContainer(container, forceHydrate) {
    var shouldHydrate = forceHydrate || shouldHydrateDueToLegacyHeuristic(container);
    if (!shouldHydrate) {
      var warned = false;
      var rootSibling;
      while (rootSibling = container.lastChild) {
        {
          if (!warned && rootSibling.nodeType === ELEMENT_NODE && rootSibling.hasAttribute(ROOT_ATTRIBUTE_NAME)) {
            warned = true;
            error('render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.');
          }
        }
        container.removeChild(rootSibling);
      }
    }
    {
      if (shouldHydrate && !forceHydrate && !warnedAboutHydrateAPI) {
        warnedAboutHydrateAPI = true;
        warn('render(): Calling ReactDOM.render() to hydrate server-rendered markup ' + 'will stop working in React v17. Replace the ReactDOM.render() call ' + 'with ReactDOM.hydrate() if you want React to attach to the server HTML.');
      }
    }
    return createLegacyRoot(container, shouldHydrate ? {
      hydrate: true
    } : undefined);
  }
  function warnOnInvalidCallback$1(callback, callerName) {
    {
      if (callback !== null && typeof callback !== 'function') {
        error('%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback);
      }
    }
  }
  function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
    {
      topLevelUpdateWarnings(container);
      warnOnInvalidCallback$1(callback === undefined ? null : callback, 'render');
    }
    var root = container._reactRootContainer;
    var fiberRoot;
    if (!root) {
      root = container._reactRootContainer = legacyCreateRootFromDOMContainer(container, forceHydrate);
      fiberRoot = root._internalRoot;
      if (typeof callback === 'function') {
        var originalCallback = callback;
        callback = function () {
          var instance = getPublicRootInstance(fiberRoot);
          originalCallback.call(instance);
        };
      }
      unbatchedUpdates(function () {
        updateContainer(children, fiberRoot, parentComponent, callback);
      });
    } else {
      fiberRoot = root._internalRoot;
      if (typeof callback === 'function') {
        var _originalCallback = callback;
        callback = function () {
          var instance = getPublicRootInstance(fiberRoot);
          _originalCallback.call(instance);
        };
      }
      updateContainer(children, fiberRoot, parentComponent, callback);
    }
    return getPublicRootInstance(fiberRoot);
  }
  function findDOMNode(componentOrElement) {
    {
      var owner = ReactCurrentOwner$3.current;
      if (owner !== null && owner.stateNode !== null) {
        var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
        if (!warnedAboutRefsInRender) {
          error('%s is accessing findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentName(owner.type) || 'A component');
        }
        owner.stateNode._warnedAboutRefsInRender = true;
      }
    }
    if (componentOrElement == null) {
      return null;
    }
    if (componentOrElement.nodeType === ELEMENT_NODE) {
      return componentOrElement;
    }
    {
      return findHostInstanceWithWarning(componentOrElement, 'findDOMNode');
    }
  }
  function hydrate(element, container, callback) {
    if (!isValidContainer(container)) {
      {
        throw Error("Target container is not a DOM element.");
      }
    }
    {
      var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;
      if (isModernRoot) {
        error('You are calling ReactDOM.hydrate() on a container that was previously ' + 'passed to ReactDOM.createRoot(). This is not supported. ' + 'Did you mean to call createRoot(container, {hydrate: true}).render(element)?');
      }
    }
    return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
  }
  function render(element, container, callback) {
    if (!isValidContainer(container)) {
      {
        throw Error("Target container is not a DOM element.");
      }
    }
    {
      var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;
      if (isModernRoot) {
        error('You are calling ReactDOM.render() on a container that was previously ' + 'passed to ReactDOM.createRoot(). This is not supported. ' + 'Did you mean to call root.render(element)?');
      }
    }
    return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
  }
  function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
    if (!isValidContainer(containerNode)) {
      {
        throw Error("Target container is not a DOM element.");
      }
    }
    if (!(parentComponent != null && has(parentComponent))) {
      {
        throw Error("parentComponent must be a valid React Component");
      }
    }
    return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
  }
  function unmountComponentAtNode(container) {
    if (!isValidContainer(container)) {
      {
        throw Error("unmountComponentAtNode(...): Target container is not a DOM element.");
      }
    }
    {
      var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;
      if (isModernRoot) {
        error('You are calling ReactDOM.unmountComponentAtNode() on a container that was previously ' + 'passed to ReactDOM.createRoot(). This is not supported. Did you mean to call root.unmount()?');
      }
    }
    if (container._reactRootContainer) {
      {
        var rootEl = getReactRootElementInContainer(container);
        var renderedByDifferentReact = rootEl && !getInstanceFromNode$1(rootEl);
        if (renderedByDifferentReact) {
          error("unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by another copy of React.');
        }
      }
      unbatchedUpdates(function () {
        legacyRenderSubtreeIntoContainer(null, null, container, false, function () {
          container._reactRootContainer = null;
          unmarkContainerAsRoot(container);
        });
      });
      return true;
    } else {
      {
        var _rootEl = getReactRootElementInContainer(container);
        var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode$1(_rootEl));
        var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainer(container.parentNode) && !!container.parentNode._reactRootContainer;
        if (hasNonRootReactChild) {
          error("unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.');
        }
      }
      return false;
    }
  }
  function createPortal(children, containerInfo, implementation) {
    var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
    return {
      $$typeof: REACT_PORTAL_TYPE,
      key: key == null ? null : '' + key,
      children: children,
      containerInfo: containerInfo,
      implementation: implementation
    };
  }
  var ReactVersion = '16.14.0';
  setAttemptUserBlockingHydration(attemptUserBlockingHydration$1);
  setAttemptContinuousHydration(attemptContinuousHydration$1);
  setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
  var didWarnAboutUnstableCreatePortal = false;
  {
    if (typeof Map !== 'function' || Map.prototype == null || typeof Map.prototype.forEach !== 'function' || typeof Set !== 'function' || Set.prototype == null || typeof Set.prototype.clear !== 'function' || typeof Set.prototype.forEach !== 'function') {
      error('React depends on Map and Set built-in types. Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');
    }
  }
  setRestoreImplementation(restoreControlledState$3);
  setBatchingImplementation(batchedUpdates$1, discreteUpdates$1, flushDiscreteUpdates, batchedEventUpdates$1);
  function createPortal$1(children, container) {
    var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    if (!isValidContainer(container)) {
      {
        throw Error("Target container is not a DOM element.");
      }
    }
    return createPortal(children, container, null, key);
  }
  function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
    return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
  }
  function unstable_createPortal(children, container) {
    var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    {
      if (!didWarnAboutUnstableCreatePortal) {
        didWarnAboutUnstableCreatePortal = true;
        warn('The ReactDOM.unstable_createPortal() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactDOM.createPortal() instead. It has the exact same API, ' + 'but without the "unstable_" prefix.');
      }
    }
    return createPortal$1(children, container, key);
  }
  var Internals = {
    Events: [getInstanceFromNode$1, getNodeFromInstance$1, getFiberCurrentPropsFromNode$1, injectEventPluginsByName, eventNameDispatchConfigs, accumulateTwoPhaseDispatches, accumulateDirectDispatches, enqueueStateRestore, restoreStateIfNeeded, dispatchEvent, runEventsInBatch, flushPassiveEffects, IsThisRendererActing]
  };
  var foundDevTools = injectIntoDevTools({
    findFiberByHostInstance: getClosestInstanceFromNode,
    bundleType: 1,
    version: ReactVersion,
    rendererPackageName: 'react-dom'
  });
  {
    if (!foundDevTools && canUseDOM && window.top === window.self) {
      if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
        var protocol = window.location.protocol;
        if ((/^(https?|file):$/).test(protocol)) {
          console.info('%cDownload the React DevTools ' + 'for a better development experience: ' + 'https://fb.me/react-devtools' + (protocol === 'file:' ? '\nYou might need to use a local HTTP server (instead of file://): ' + 'https://fb.me/react-devtools-faq' : ''), 'font-weight:bold');
        }
      }
    }
  }
  exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
  exports.createPortal = createPortal$1;
  exports.findDOMNode = findDOMNode;
  exports.flushSync = flushSync;
  exports.hydrate = hydrate;
  exports.render = render;
  exports.unmountComponentAtNode = unmountComponentAtNode;
  exports.unstable_batchedUpdates = batchedUpdates$1;
  exports.unstable_createPortal = unstable_createPortal;
  exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
  exports.version = ReactVersion;
})();

},

// node_modules/file-saver/dist/FileSaver.min.js @18
18: function(__fusereq, exports, module){
(function (a, b) {
  if ("function" == typeof define && define.amd) define([], b); else if ("undefined" != typeof exports) b(); else {
    (b(), a.FileSaver = ({
      exports: {}
    }).exports);
  }
})(this, function () {
  "use strict";
  function b(a, b) {
    return ("undefined" == typeof b ? b = {
      autoBom: !1
    } : "object" != typeof b && (console.warn("Deprecated: Expected third argument to be a object"), b = {
      autoBom: !b
    }), b.autoBom && (/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i).test(a.type) ? new Blob(["\uFEFF", a], {
      type: a.type
    }) : a);
  }
  function c(a, b, c) {
    var d = new XMLHttpRequest();
    (d.open("GET", a), d.responseType = "blob", d.onload = function () {
      g(d.response, b, c);
    }, d.onerror = function () {
      console.error("could not download file");
    }, d.send());
  }
  function d(a) {
    var b = new XMLHttpRequest();
    b.open("HEAD", a, !1);
    try {
      b.send();
    } catch (a) {}
    return 200 <= b.status && 299 >= b.status;
  }
  function e(a) {
    try {
      a.dispatchEvent(new MouseEvent("click"));
    } catch (c) {
      var b = document.createEvent("MouseEvents");
      (b.initMouseEvent("click", !0, !0, window, 0, 0, 0, 80, 20, !1, !1, !1, !1, 0, null), a.dispatchEvent(b));
    }
  }
  var f = "object" == typeof window && window.window === window ? window : "object" == typeof self && self.self === self ? self : "object" == typeof window && window.global === window ? window : void 0, a = f.navigator && (/Macintosh/).test(navigator.userAgent) && (/AppleWebKit/).test(navigator.userAgent) && !(/Safari/).test(navigator.userAgent), g = f.saveAs || ("object" != typeof window || window !== f ? function () {} : ("download" in HTMLAnchorElement.prototype) && !a ? function (b, g, h) {
    var i = f.URL || f.webkitURL, j = document.createElement("a");
    (g = g || b.name || "download", j.download = g, j.rel = "noopener", "string" == typeof b ? (j.href = b, j.origin === location.origin ? e(j) : d(j.href) ? c(b, g, h) : e(j, j.target = "_blank")) : (j.href = i.createObjectURL(b), setTimeout(function () {
      i.revokeObjectURL(j.href);
    }, 4E4), setTimeout(function () {
      e(j);
    }, 0)));
  } : ("msSaveOrOpenBlob" in navigator) ? function (f, g, h) {
    if ((g = g || f.name || "download", "string" != typeof f)) navigator.msSaveOrOpenBlob(b(f, h), g); else if (d(f)) c(f, g, h); else {
      var i = document.createElement("a");
      (i.href = f, i.target = "_blank", setTimeout(function () {
        e(i);
      }));
    }
  } : function (b, d, e, g) {
    if ((g = g || open("", "_blank"), g && (g.document.title = g.document.body.innerText = "downloading..."), "string" == typeof b)) return c(b, d, e);
    var h = "application/octet-stream" === b.type, i = (/constructor/i).test(f.HTMLElement) || f.safari, j = (/CriOS\/[\d]+/).test(navigator.userAgent);
    if ((j || h && i || a) && "undefined" != typeof FileReader) {
      var k = new FileReader();
      (k.onloadend = function () {
        var a = k.result;
        (a = j ? a : a.replace(/^data:[^;]*;/, "data:attachment/file;"), g ? g.location.href = a : location = a, g = null);
      }, k.readAsDataURL(b));
    } else {
      var l = f.URL || f.webkitURL, m = l.createObjectURL(b);
      (g ? g.location = m : location.href = m, g = null, setTimeout(function () {
        l.revokeObjectURL(m);
      }, 4E4));
    }
  });
  (f.saveAs = g.saveAs = g, "undefined" != typeof module && (module.exports = g));
});

},

// node_modules/react-loading/dist/react-loading.js @19
19: function(__fusereq, exports, module){
(function webpackUniversalModuleDefinition(root, factory) {
  if (typeof exports === 'object' && typeof module === 'object') module.exports = factory(); else if (typeof define === 'function' && define.amd) define([], factory); else if (typeof exports === 'object') exports["Loading"] = factory(); else root["Loading"] = factory();
})(typeof self !== 'undefined' ? self : this, function () {
  return (function (modules) {
    var installedModules = {};
    function __webpack_require__(moduleId) {
      if (installedModules[moduleId]) {
        return installedModules[moduleId].exports;
      }
      var module = installedModules[moduleId] = {
        i: moduleId,
        l: false,
        exports: {}
      };
      modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
      module.l = true;
      return module.exports;
    }
    __webpack_require__.m = modules;
    __webpack_require__.c = installedModules;
    __webpack_require__.d = function (exports, name, getter) {
      if (!__webpack_require__.o(exports, name)) {
        Object.defineProperty(exports, name, {
          configurable: false,
          enumerable: true,
          get: getter
        });
      }
    };
    __webpack_require__.n = function (module) {
      var getter = module && module.__esModule ? function getDefault() {
        return module['default'];
      } : function getModuleExports() {
        return module;
      };
      __webpack_require__.d(getter, 'a', getter);
      return getter;
    };
    __webpack_require__.o = function (object, property) {
      return Object.prototype.hasOwnProperty.call(object, property);
    };
    __webpack_require__.p = "/";
    return __webpack_require__(__webpack_require__.s = 7);
  })([function (module, exports, __webpack_require__) {
    "use strict";
    var validateFormat = function validateFormat(format) {};
    validateFormat = function validateFormat(format) {
      if (format === undefined) {
        throw new Error('invariant requires an error message argument');
      }
    };
    function invariant(condition, format, a, b, c, d, e, f) {
      validateFormat(format);
      if (!condition) {
        var error;
        if (format === undefined) {
          error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
        } else {
          var args = [a, b, c, d, e, f];
          var argIndex = 0;
          error = new Error(format.replace(/%s/g, function () {
            return args[argIndex++];
          }));
          error.name = 'Invariant Violation';
        }
        error.framesToPop = 1;
        throw error;
      }
    }
    module.exports = invariant;
  }, function (module, exports, __webpack_require__) {
    "use strict";
    function makeEmptyFunction(arg) {
      return function () {
        return arg;
      };
    }
    var emptyFunction = function emptyFunction() {};
    emptyFunction.thatReturns = makeEmptyFunction;
    emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
    emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
    emptyFunction.thatReturnsNull = makeEmptyFunction(null);
    emptyFunction.thatReturnsThis = function () {
      return this;
    };
    emptyFunction.thatReturnsArgument = function (arg) {
      return arg;
    };
    module.exports = emptyFunction;
  }, function (module, exports, __webpack_require__) {
    "use strict";
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var propIsEnumerable = Object.prototype.propertyIsEnumerable;
    function toObject(val) {
      if (val === null || val === undefined) {
        throw new TypeError('Object.assign cannot be called with null or undefined');
      }
      return Object(val);
    }
    function shouldUseNative() {
      try {
        if (!Object.assign) {
          return false;
        }
        var test1 = new String('abc');
        test1[5] = 'de';
        if (Object.getOwnPropertyNames(test1)[0] === '5') {
          return false;
        }
        var test2 = {};
        for (var i = 0; i < 10; i++) {
          test2['_' + String.fromCharCode(i)] = i;
        }
        var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
          return test2[n];
        });
        if (order2.join('') !== '0123456789') {
          return false;
        }
        var test3 = {};
        ('abcdefghijklmnopqrst').split('').forEach(function (letter) {
          test3[letter] = letter;
        });
        if (Object.keys(Object.assign({}, test3)).join('') !== 'abcdefghijklmnopqrst') {
          return false;
        }
        return true;
      } catch (err) {
        return false;
      }
    }
    module.exports = shouldUseNative() ? Object.assign : function (target, source) {
      var from;
      var to = toObject(target);
      var symbols;
      for (var s = 1; s < arguments.length; s++) {
        from = Object(arguments[s]);
        for (var key in from) {
          if (hasOwnProperty.call(from, key)) {
            to[key] = from[key];
          }
        }
        if (getOwnPropertySymbols) {
          symbols = getOwnPropertySymbols(from);
          for (var i = 0; i < symbols.length; i++) {
            if (propIsEnumerable.call(from, symbols[i])) {
              to[symbols[i]] = from[symbols[i]];
            }
          }
        }
      }
      return to;
    };
  }, function (module, exports, __webpack_require__) {
    "use strict";
    var emptyFunction = __webpack_require__(1);
    var warning = emptyFunction;
    var printWarning = function printWarning(format) {
      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
      var argIndex = 0;
      var message = 'Warning: ' + format.replace(/%s/g, function () {
        return args[argIndex++];
      });
      if (typeof console !== 'undefined') {
        console.error(message);
      }
      try {
        throw new Error(message);
      } catch (x) {}
    };
    warning = function warning(condition, format) {
      if (format === undefined) {
        throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
      }
      if (format.indexOf('Failed Composite propType: ') === 0) {
        return;
      }
      if (!condition) {
        for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
          args[_key2 - 2] = arguments[_key2];
        }
        printWarning.apply(undefined, [format].concat(args));
      }
    };
    module.exports = warning;
  }, function (module, exports, __webpack_require__) {
    "use strict";
    var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';
    module.exports = ReactPropTypesSecret;
  }, function (module, exports, __webpack_require__) {
    "use strict";
    var emptyObject = {};
    Object.freeze(emptyObject);
    module.exports = emptyObject;
  }, function (module, exports, __webpack_require__) {
    "use strict";
    var invariant = __webpack_require__(0);
    var warning = __webpack_require__(3);
    var ReactPropTypesSecret = __webpack_require__(4);
    var loggedTypeFailures = {};
    function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
      for (var typeSpecName in typeSpecs) {
        if (typeSpecs.hasOwnProperty(typeSpecName)) {
          var error;
          try {
            invariant(typeof typeSpecs[typeSpecName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'the `prop-types` package, but received `%s`.', componentName || 'React class', location, typeSpecName, typeof typeSpecs[typeSpecName]);
            error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
          } catch (ex) {
            error = ex;
          }
          warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error);
          if (error instanceof Error && !((error.message in loggedTypeFailures))) {
            loggedTypeFailures[error.message] = true;
            var stack = getStack ? getStack() : '';
            warning(false, 'Failed %s type: %s%s', location, error.message, stack != null ? stack : '');
          }
        }
      }
    }
    module.exports = checkPropTypes;
  }, function (module, exports, __webpack_require__) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _extends = Object.assign || (function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    });
    var _createClass = (function () {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if (("value" in descriptor)) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
      };
    })();
    var _react = __webpack_require__(8);
    var _react2 = _interopRequireDefault(_react);
    var _propTypes = __webpack_require__(11);
    var _propTypes2 = _interopRequireDefault(_propTypes);
    var _svg = __webpack_require__(14);
    var svgSources = _interopRequireWildcard(_svg);
    function _interopRequireWildcard(obj) {
      if (obj && obj.__esModule) {
        return obj;
      } else {
        var newObj = {};
        if (obj != null) {
          for (var key in obj) {
            if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
          }
        }
        newObj.default = obj;
        return newObj;
      }
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    function _objectWithoutProperties(obj, keys) {
      var target = {};
      for (var i in obj) {
        if (keys.indexOf(i) >= 0) continue;
        if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
        target[i] = obj[i];
      }
      return target;
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _possibleConstructorReturn(self, call) {
      if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
          value: subClass,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
      if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }
    var Loading = (function (_Component) {
      _inherits(Loading, _Component);
      function Loading() {
        var _ref;
        var _temp, _this, _ret;
        _classCallCheck(this, Loading);
        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        return (_ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Loading.__proto__ || Object.getPrototypeOf(Loading)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
          delayed: _this.props.delay > 0
        }, _temp), _possibleConstructorReturn(_this, _ret));
      }
      _createClass(Loading, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
          var _this2 = this;
          var delay = this.props.delay;
          var delayed = this.state.delayed;
          if (delayed) {
            this.timeout = setTimeout(function () {
              _this2.setState({
                delayed: false
              });
            }, delay);
          }
        }
      }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
          var timeout = this.timeout;
          if (timeout) {
            clearTimeout(timeout);
          }
        }
      }, {
        key: 'render',
        value: function render() {
          var _props = this.props, color = _props.color, delay = _props.delay, type = _props.type, height = _props.height, width = _props.width, restProps = _objectWithoutProperties(_props, ['color', 'delay', 'type', 'height', 'width']);
          var selectedType = this.state.delayed ? 'blank' : type;
          var svg = svgSources[selectedType];
          var style = {
            fill: color,
            height: height,
            width: width
          };
          return _react2.default.createElement('div', _extends({
            style: style,
            dangerouslySetInnerHTML: {
              __html: svg
            }
          }, restProps));
        }
      }]);
      return Loading;
    })(_react.Component);
    Loading.propTypes = {
      color: _propTypes2.default.string,
      delay: _propTypes2.default.number,
      type: _propTypes2.default.string,
      height: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
      width: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number])
    };
    Loading.defaultProps = {
      color: '#fff',
      delay: 0,
      type: 'balls',
      height: 64,
      width: 64
    };
    exports.default = Loading;
  }, function (module, exports, __webpack_require__) {
    "use strict";
    module.exports = __webpack_require__(10);
  }, function (module, exports, __webpack_require__) {
    "use strict";
    var m = __webpack_require__(2), n = __webpack_require__(0), p = __webpack_require__(5), q = __webpack_require__(1), r = "function" === typeof Symbol && Symbol["for"], t = r ? Symbol["for"]("react.element") : 60103, u = r ? Symbol["for"]("react.portal") : 60106, v = r ? Symbol["for"]("react.fragment") : 60107, w = r ? Symbol["for"]("react.strict_mode") : 60108, x = r ? Symbol["for"]("react.provider") : 60109, y = r ? Symbol["for"]("react.context") : 60110, z = r ? Symbol["for"]("react.async_mode") : 60111, A = r ? Symbol["for"]("react.forward_ref") : 60112, B = "function" === typeof Symbol && Symbol.iterator;
    function C(a) {
      for (var b = arguments.length - 1, e = "http://reactjs.org/docs/error-decoder.html?invariant\x3d" + a, c = 0; c < b; c++) e += "\x26args[]\x3d" + encodeURIComponent(arguments[c + 1]);
      n(!1, "Minified React error #" + a + "; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ", e);
    }
    var D = {
      isMounted: function () {
        return !1;
      },
      enqueueForceUpdate: function () {},
      enqueueReplaceState: function () {},
      enqueueSetState: function () {}
    };
    function E(a, b, e) {
      this.props = a;
      this.context = b;
      this.refs = p;
      this.updater = e || D;
    }
    E.prototype.isReactComponent = {};
    E.prototype.setState = function (a, b) {
      "object" !== typeof a && "function" !== typeof a && null != a ? C("85") : void 0;
      this.updater.enqueueSetState(this, a, b, "setState");
    };
    E.prototype.forceUpdate = function (a) {
      this.updater.enqueueForceUpdate(this, a, "forceUpdate");
    };
    function F() {}
    F.prototype = E.prototype;
    function G(a, b, e) {
      this.props = a;
      this.context = b;
      this.refs = p;
      this.updater = e || D;
    }
    var H = G.prototype = new F();
    H.constructor = G;
    m(H, E.prototype);
    H.isPureReactComponent = !0;
    var I = {
      current: null
    }, J = Object.prototype.hasOwnProperty, K = {
      key: !0,
      ref: !0,
      __self: !0,
      __source: !0
    };
    function L(a, b, e) {
      var c = void 0, d = {}, g = null, h = null;
      if (null != b) for (c in (void 0 !== b.ref && (h = b.ref), void 0 !== b.key && (g = "" + b.key), b)) J.call(b, c) && !K.hasOwnProperty(c) && (d[c] = b[c]);
      var f = arguments.length - 2;
      if (1 === f) d.children = e; else if (1 < f) {
        for (var k = Array(f), l = 0; l < f; l++) k[l] = arguments[l + 2];
        d.children = k;
      }
      if (a && a.defaultProps) for (c in (f = a.defaultProps, f)) void 0 === d[c] && (d[c] = f[c]);
      return {
        $$typeof: t,
        type: a,
        key: g,
        ref: h,
        props: d,
        _owner: I.current
      };
    }
    function M(a) {
      return "object" === typeof a && null !== a && a.$$typeof === t;
    }
    function escape(a) {
      var b = {
        "\x3d": "\x3d0",
        ":": "\x3d2"
      };
      return "$" + ("" + a).replace(/[=:]/g, function (a) {
        return b[a];
      });
    }
    var N = /\/+/g, O = [];
    function P(a, b, e, c) {
      if (O.length) {
        var d = O.pop();
        d.result = a;
        d.keyPrefix = b;
        d.func = e;
        d.context = c;
        d.count = 0;
        return d;
      }
      return {
        result: a,
        keyPrefix: b,
        func: e,
        context: c,
        count: 0
      };
    }
    function Q(a) {
      a.result = null;
      a.keyPrefix = null;
      a.func = null;
      a.context = null;
      a.count = 0;
      10 > O.length && O.push(a);
    }
    function R(a, b, e, c) {
      var d = typeof a;
      if ("undefined" === d || "boolean" === d) a = null;
      var g = !1;
      if (null === a) g = !0; else switch (d) {
        case "string":
        case "number":
          g = !0;
          break;
        case "object":
          switch (a.$$typeof) {
            case t:
            case u:
              g = !0;
          }
      }
      if (g) return (e(c, a, "" === b ? "." + S(a, 0) : b), 1);
      g = 0;
      b = "" === b ? "." : b + ":";
      if (Array.isArray(a)) for (var h = 0; h < a.length; h++) {
        d = a[h];
        var f = b + S(d, h);
        g += R(d, f, e, c);
      } else if ((null === a || "undefined" === typeof a ? f = null : (f = B && a[B] || a["@@iterator"], f = "function" === typeof f ? f : null), "function" === typeof f)) for ((a = f.call(a), h = 0); !(d = a.next()).done; ) (d = d.value, f = b + S(d, h++), g += R(d, f, e, c)); else "object" === d && (e = "" + a, C("31", "[object Object]" === e ? "object with keys {" + Object.keys(a).join(", ") + "}" : e, ""));
      return g;
    }
    function S(a, b) {
      return "object" === typeof a && null !== a && null != a.key ? escape(a.key) : b.toString(36);
    }
    function T(a, b) {
      a.func.call(a.context, b, a.count++);
    }
    function U(a, b, e) {
      var c = a.result, d = a.keyPrefix;
      a = a.func.call(a.context, b, a.count++);
      Array.isArray(a) ? V(a, c, e, q.thatReturnsArgument) : null != a && (M(a) && (b = d + (!a.key || b && b.key === a.key ? "" : ("" + a.key).replace(N, "$\x26/") + "/") + e, a = {
        $$typeof: t,
        type: a.type,
        key: b,
        ref: a.ref,
        props: a.props,
        _owner: a._owner
      }), c.push(a));
    }
    function V(a, b, e, c, d) {
      var g = "";
      null != e && (g = ("" + e).replace(N, "$\x26/") + "/");
      b = P(b, g, c, d);
      null == a || R(a, "", U, b);
      Q(b);
    }
    var W = {
      Children: {
        map: function (a, b, e) {
          if (null == a) return a;
          var c = [];
          V(a, c, null, b, e);
          return c;
        },
        forEach: function (a, b, e) {
          if (null == a) return a;
          b = P(null, null, b, e);
          null == a || R(a, "", T, b);
          Q(b);
        },
        count: function (a) {
          return null == a ? 0 : R(a, "", q.thatReturnsNull, null);
        },
        toArray: function (a) {
          var b = [];
          V(a, b, null, q.thatReturnsArgument);
          return b;
        },
        only: function (a) {
          M(a) ? void 0 : C("143");
          return a;
        }
      },
      createRef: function () {
        return {
          current: null
        };
      },
      Component: E,
      PureComponent: G,
      createContext: function (a, b) {
        void 0 === b && (b = null);
        a = {
          $$typeof: y,
          _calculateChangedBits: b,
          _defaultValue: a,
          _currentValue: a,
          _changedBits: 0,
          Provider: null,
          Consumer: null
        };
        a.Provider = {
          $$typeof: x,
          _context: a
        };
        return a.Consumer = a;
      },
      forwardRef: function (a) {
        return {
          $$typeof: A,
          render: a
        };
      },
      Fragment: v,
      StrictMode: w,
      unstable_AsyncMode: z,
      createElement: L,
      cloneElement: function (a, b, e) {
        null === a || void 0 === a ? C("267", a) : void 0;
        var c = void 0, d = m({}, a.props), g = a.key, h = a.ref, f = a._owner;
        if (null != b) {
          void 0 !== b.ref && (h = b.ref, f = I.current);
          void 0 !== b.key && (g = "" + b.key);
          var k = void 0;
          a.type && a.type.defaultProps && (k = a.type.defaultProps);
          for (c in b) J.call(b, c) && !K.hasOwnProperty(c) && (d[c] = void 0 === b[c] && void 0 !== k ? k[c] : b[c]);
        }
        c = arguments.length - 2;
        if (1 === c) d.children = e; else if (1 < c) {
          k = Array(c);
          for (var l = 0; l < c; l++) k[l] = arguments[l + 2];
          d.children = k;
        }
        return {
          $$typeof: t,
          type: a.type,
          key: g,
          ref: h,
          props: d,
          _owner: f
        };
      },
      createFactory: function (a) {
        var b = L.bind(null, a);
        b.type = a;
        return b;
      },
      isValidElement: M,
      version: "16.3.2",
      __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {
        ReactCurrentOwner: I,
        assign: m
      }
    }, X = Object.freeze({
      default: W
    }), Y = X && W || X;
    module.exports = Y["default"] ? Y["default"] : Y;
  }, function (module, exports, __webpack_require__) {
    "use strict";
    (function () {
      'use strict';
      var _assign = __webpack_require__(2);
      var invariant = __webpack_require__(0);
      var emptyObject = __webpack_require__(5);
      var warning = __webpack_require__(3);
      var emptyFunction = __webpack_require__(1);
      var checkPropTypes = __webpack_require__(6);
      var ReactVersion = '16.3.2';
      var hasSymbol = typeof Symbol === 'function' && Symbol['for'];
      var REACT_ELEMENT_TYPE = hasSymbol ? Symbol['for']('react.element') : 0xeac7;
      var REACT_CALL_TYPE = hasSymbol ? Symbol['for']('react.call') : 0xeac8;
      var REACT_RETURN_TYPE = hasSymbol ? Symbol['for']('react.return') : 0xeac9;
      var REACT_PORTAL_TYPE = hasSymbol ? Symbol['for']('react.portal') : 0xeaca;
      var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol['for']('react.fragment') : 0xeacb;
      var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol['for']('react.strict_mode') : 0xeacc;
      var REACT_PROVIDER_TYPE = hasSymbol ? Symbol['for']('react.provider') : 0xeacd;
      var REACT_CONTEXT_TYPE = hasSymbol ? Symbol['for']('react.context') : 0xeace;
      var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol['for']('react.async_mode') : 0xeacf;
      var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol['for']('react.forward_ref') : 0xead0;
      var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = '@@iterator';
      function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable === 'undefined') {
          return null;
        }
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        if (typeof maybeIterator === 'function') {
          return maybeIterator;
        }
        return null;
      }
      var lowPriorityWarning = function () {};
      {
        var printWarning = function (format) {
          for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
          }
          var argIndex = 0;
          var message = 'Warning: ' + format.replace(/%s/g, function () {
            return args[argIndex++];
          });
          if (typeof console !== 'undefined') {
            console.warn(message);
          }
          try {
            throw new Error(message);
          } catch (x) {}
        };
        lowPriorityWarning = function (condition, format) {
          if (format === undefined) {
            throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
          }
          if (!condition) {
            for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
              args[_key2 - 2] = arguments[_key2];
            }
            printWarning.apply(undefined, [format].concat(args));
          }
        };
      }
      var lowPriorityWarning$1 = lowPriorityWarning;
      var didWarnStateUpdateForUnmountedComponent = {};
      function warnNoop(publicInstance, callerName) {
        {
          var _constructor = publicInstance.constructor;
          var componentName = _constructor && (_constructor.displayName || _constructor.name) || 'ReactClass';
          var warningKey = componentName + '.' + callerName;
          if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
            return;
          }
          warning(false, "Can't call %s on a component that is not yet mounted. " + 'This is a no-op, but it might indicate a bug in your application. ' + 'Instead, assign to `this.state` directly or define a `state = {};` ' + 'class property with the desired state in the %s component.', callerName, componentName);
          didWarnStateUpdateForUnmountedComponent[warningKey] = true;
        }
      }
      var ReactNoopUpdateQueue = {
        isMounted: function (publicInstance) {
          return false;
        },
        enqueueForceUpdate: function (publicInstance, callback, callerName) {
          warnNoop(publicInstance, 'forceUpdate');
        },
        enqueueReplaceState: function (publicInstance, completeState, callback, callerName) {
          warnNoop(publicInstance, 'replaceState');
        },
        enqueueSetState: function (publicInstance, partialState, callback, callerName) {
          warnNoop(publicInstance, 'setState');
        }
      };
      function Component(props, context, updater) {
        this.props = props;
        this.context = context;
        this.refs = emptyObject;
        this.updater = updater || ReactNoopUpdateQueue;
      }
      Component.prototype.isReactComponent = {};
      Component.prototype.setState = function (partialState, callback) {
        !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? invariant(false, 'setState(...): takes an object of state variables to update or a function which returns an object of state variables.') : void 0;
        this.updater.enqueueSetState(this, partialState, callback, 'setState');
      };
      Component.prototype.forceUpdate = function (callback) {
        this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');
      };
      {
        var deprecatedAPIs = {
          isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
          replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
        };
        var defineDeprecationWarning = function (methodName, info) {
          Object.defineProperty(Component.prototype, methodName, {
            get: function () {
              lowPriorityWarning$1(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);
              return undefined;
            }
          });
        };
        for (var fnName in deprecatedAPIs) {
          if (deprecatedAPIs.hasOwnProperty(fnName)) {
            defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
          }
        }
      }
      function ComponentDummy() {}
      ComponentDummy.prototype = Component.prototype;
      function PureComponent(props, context, updater) {
        this.props = props;
        this.context = context;
        this.refs = emptyObject;
        this.updater = updater || ReactNoopUpdateQueue;
      }
      var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
      pureComponentPrototype.constructor = PureComponent;
      _assign(pureComponentPrototype, Component.prototype);
      pureComponentPrototype.isPureReactComponent = true;
      function createRef() {
        var refObject = {
          current: null
        };
        {
          Object.seal(refObject);
        }
        return refObject;
      }
      var ReactCurrentOwner = {
        current: null
      };
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      var RESERVED_PROPS = {
        key: true,
        ref: true,
        __self: true,
        __source: true
      };
      var specialPropKeyWarningShown = void 0;
      var specialPropRefWarningShown = void 0;
      function hasValidRef(config) {
        {
          if (hasOwnProperty.call(config, 'ref')) {
            var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;
            if (getter && getter.isReactWarning) {
              return false;
            }
          }
        }
        return config.ref !== undefined;
      }
      function hasValidKey(config) {
        {
          if (hasOwnProperty.call(config, 'key')) {
            var getter = Object.getOwnPropertyDescriptor(config, 'key').get;
            if (getter && getter.isReactWarning) {
              return false;
            }
          }
        }
        return config.key !== undefined;
      }
      function defineKeyPropWarningGetter(props, displayName) {
        var warnAboutAccessingKey = function () {
          if (!specialPropKeyWarningShown) {
            specialPropKeyWarningShown = true;
            warning(false, '%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);
          }
        };
        warnAboutAccessingKey.isReactWarning = true;
        Object.defineProperty(props, 'key', {
          get: warnAboutAccessingKey,
          configurable: true
        });
      }
      function defineRefPropWarningGetter(props, displayName) {
        var warnAboutAccessingRef = function () {
          if (!specialPropRefWarningShown) {
            specialPropRefWarningShown = true;
            warning(false, '%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);
          }
        };
        warnAboutAccessingRef.isReactWarning = true;
        Object.defineProperty(props, 'ref', {
          get: warnAboutAccessingRef,
          configurable: true
        });
      }
      var ReactElement = function (type, key, ref, self, source, owner, props) {
        var element = {
          $$typeof: REACT_ELEMENT_TYPE,
          type: type,
          key: key,
          ref: ref,
          props: props,
          _owner: owner
        };
        {
          element._store = {};
          Object.defineProperty(element._store, 'validated', {
            configurable: false,
            enumerable: false,
            writable: true,
            value: false
          });
          Object.defineProperty(element, '_self', {
            configurable: false,
            enumerable: false,
            writable: false,
            value: self
          });
          Object.defineProperty(element, '_source', {
            configurable: false,
            enumerable: false,
            writable: false,
            value: source
          });
          if (Object.freeze) {
            Object.freeze(element.props);
            Object.freeze(element);
          }
        }
        return element;
      };
      function createElement(type, config, children) {
        var propName = void 0;
        var props = {};
        var key = null;
        var ref = null;
        var self = null;
        var source = null;
        if (config != null) {
          if (hasValidRef(config)) {
            ref = config.ref;
          }
          if (hasValidKey(config)) {
            key = '' + config.key;
          }
          self = config.__self === undefined ? null : config.__self;
          source = config.__source === undefined ? null : config.__source;
          for (propName in config) {
            if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
              props[propName] = config[propName];
            }
          }
        }
        var childrenLength = arguments.length - 2;
        if (childrenLength === 1) {
          props.children = children;
        } else if (childrenLength > 1) {
          var childArray = Array(childrenLength);
          for (var i = 0; i < childrenLength; i++) {
            childArray[i] = arguments[i + 2];
          }
          {
            if (Object.freeze) {
              Object.freeze(childArray);
            }
          }
          props.children = childArray;
        }
        if (type && type.defaultProps) {
          var defaultProps = type.defaultProps;
          for (propName in defaultProps) {
            if (props[propName] === undefined) {
              props[propName] = defaultProps[propName];
            }
          }
        }
        {
          if (key || ref) {
            if (typeof props.$$typeof === 'undefined' || props.$$typeof !== REACT_ELEMENT_TYPE) {
              var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;
              if (key) {
                defineKeyPropWarningGetter(props, displayName);
              }
              if (ref) {
                defineRefPropWarningGetter(props, displayName);
              }
            }
          }
        }
        return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
      }
      function cloneAndReplaceKey(oldElement, newKey) {
        var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
        return newElement;
      }
      function cloneElement(element, config, children) {
        !!(element === null || element === undefined) ? invariant(false, 'React.cloneElement(...): The argument must be a React element, but you passed %s.', element) : void 0;
        var propName = void 0;
        var props = _assign({}, element.props);
        var key = element.key;
        var ref = element.ref;
        var self = element._self;
        var source = element._source;
        var owner = element._owner;
        if (config != null) {
          if (hasValidRef(config)) {
            ref = config.ref;
            owner = ReactCurrentOwner.current;
          }
          if (hasValidKey(config)) {
            key = '' + config.key;
          }
          var defaultProps = void 0;
          if (element.type && element.type.defaultProps) {
            defaultProps = element.type.defaultProps;
          }
          for (propName in config) {
            if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
              if (config[propName] === undefined && defaultProps !== undefined) {
                props[propName] = defaultProps[propName];
              } else {
                props[propName] = config[propName];
              }
            }
          }
        }
        var childrenLength = arguments.length - 2;
        if (childrenLength === 1) {
          props.children = children;
        } else if (childrenLength > 1) {
          var childArray = Array(childrenLength);
          for (var i = 0; i < childrenLength; i++) {
            childArray[i] = arguments[i + 2];
          }
          props.children = childArray;
        }
        return ReactElement(element.type, key, ref, self, source, owner, props);
      }
      function isValidElement(object) {
        return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
      }
      var ReactDebugCurrentFrame = {};
      {
        ReactDebugCurrentFrame.getCurrentStack = null;
        ReactDebugCurrentFrame.getStackAddendum = function () {
          var impl = ReactDebugCurrentFrame.getCurrentStack;
          if (impl) {
            return impl();
          }
          return null;
        };
      }
      var SEPARATOR = '.';
      var SUBSEPARATOR = ':';
      function escape(key) {
        var escapeRegex = /[=:]/g;
        var escaperLookup = {
          '=': '=0',
          ':': '=2'
        };
        var escapedString = ('' + key).replace(escapeRegex, function (match) {
          return escaperLookup[match];
        });
        return '$' + escapedString;
      }
      var didWarnAboutMaps = false;
      var userProvidedKeyEscapeRegex = /\/+/g;
      function escapeUserProvidedKey(text) {
        return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');
      }
      var POOL_SIZE = 10;
      var traverseContextPool = [];
      function getPooledTraverseContext(mapResult, keyPrefix, mapFunction, mapContext) {
        if (traverseContextPool.length) {
          var traverseContext = traverseContextPool.pop();
          traverseContext.result = mapResult;
          traverseContext.keyPrefix = keyPrefix;
          traverseContext.func = mapFunction;
          traverseContext.context = mapContext;
          traverseContext.count = 0;
          return traverseContext;
        } else {
          return {
            result: mapResult,
            keyPrefix: keyPrefix,
            func: mapFunction,
            context: mapContext,
            count: 0
          };
        }
      }
      function releaseTraverseContext(traverseContext) {
        traverseContext.result = null;
        traverseContext.keyPrefix = null;
        traverseContext.func = null;
        traverseContext.context = null;
        traverseContext.count = 0;
        if (traverseContextPool.length < POOL_SIZE) {
          traverseContextPool.push(traverseContext);
        }
      }
      function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
        var type = typeof children;
        if (type === 'undefined' || type === 'boolean') {
          children = null;
        }
        var invokeCallback = false;
        if (children === null) {
          invokeCallback = true;
        } else {
          switch (type) {
            case 'string':
            case 'number':
              invokeCallback = true;
              break;
            case 'object':
              switch (children.$$typeof) {
                case REACT_ELEMENT_TYPE:
                case REACT_PORTAL_TYPE:
                  invokeCallback = true;
              }
          }
        }
        if (invokeCallback) {
          callback(traverseContext, children, nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
          return 1;
        }
        var child = void 0;
        var nextName = void 0;
        var subtreeCount = 0;
        var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;
        if (Array.isArray(children)) {
          for (var i = 0; i < children.length; i++) {
            child = children[i];
            nextName = nextNamePrefix + getComponentKey(child, i);
            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
          }
        } else {
          var iteratorFn = getIteratorFn(children);
          if (typeof iteratorFn === 'function') {
            {
              if (iteratorFn === children.entries) {
                !didWarnAboutMaps ? warning(false, 'Using Maps as children is unsupported and will likely yield ' + 'unexpected results. Convert it to a sequence/iterable of keyed ' + 'ReactElements instead.%s', ReactDebugCurrentFrame.getStackAddendum()) : void 0;
                didWarnAboutMaps = true;
              }
            }
            var iterator = iteratorFn.call(children);
            var step = void 0;
            var ii = 0;
            while (!(step = iterator.next()).done) {
              child = step.value;
              nextName = nextNamePrefix + getComponentKey(child, ii++);
              subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
            }
          } else if (type === 'object') {
            var addendum = '';
            {
              addendum = ' If you meant to render a collection of children, use an array ' + 'instead.' + ReactDebugCurrentFrame.getStackAddendum();
            }
            var childrenString = '' + children;
            invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum);
          }
        }
        return subtreeCount;
      }
      function traverseAllChildren(children, callback, traverseContext) {
        if (children == null) {
          return 0;
        }
        return traverseAllChildrenImpl(children, '', callback, traverseContext);
      }
      function getComponentKey(component, index) {
        if (typeof component === 'object' && component !== null && component.key != null) {
          return escape(component.key);
        }
        return index.toString(36);
      }
      function forEachSingleChild(bookKeeping, child, name) {
        var func = bookKeeping.func, context = bookKeeping.context;
        func.call(context, child, bookKeeping.count++);
      }
      function forEachChildren(children, forEachFunc, forEachContext) {
        if (children == null) {
          return children;
        }
        var traverseContext = getPooledTraverseContext(null, null, forEachFunc, forEachContext);
        traverseAllChildren(children, forEachSingleChild, traverseContext);
        releaseTraverseContext(traverseContext);
      }
      function mapSingleChildIntoContext(bookKeeping, child, childKey) {
        var result = bookKeeping.result, keyPrefix = bookKeeping.keyPrefix, func = bookKeeping.func, context = bookKeeping.context;
        var mappedChild = func.call(context, child, bookKeeping.count++);
        if (Array.isArray(mappedChild)) {
          mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, emptyFunction.thatReturnsArgument);
        } else if (mappedChild != null) {
          if (isValidElement(mappedChild)) {
            mappedChild = cloneAndReplaceKey(mappedChild, keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);
          }
          result.push(mappedChild);
        }
      }
      function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
        var escapedPrefix = '';
        if (prefix != null) {
          escapedPrefix = escapeUserProvidedKey(prefix) + '/';
        }
        var traverseContext = getPooledTraverseContext(array, escapedPrefix, func, context);
        traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
        releaseTraverseContext(traverseContext);
      }
      function mapChildren(children, func, context) {
        if (children == null) {
          return children;
        }
        var result = [];
        mapIntoWithKeyPrefixInternal(children, result, null, func, context);
        return result;
      }
      function countChildren(children, context) {
        return traverseAllChildren(children, emptyFunction.thatReturnsNull, null);
      }
      function toArray(children) {
        var result = [];
        mapIntoWithKeyPrefixInternal(children, result, null, emptyFunction.thatReturnsArgument);
        return result;
      }
      function onlyChild(children) {
        !isValidElement(children) ? invariant(false, 'React.Children.only expected to receive a single React element child.') : void 0;
        return children;
      }
      function createContext(defaultValue, calculateChangedBits) {
        if (calculateChangedBits === undefined) {
          calculateChangedBits = null;
        } else {
          {
            !(calculateChangedBits === null || typeof calculateChangedBits === 'function') ? warning(false, 'createContext: Expected the optional second argument to be a ' + 'function. Instead received: %s', calculateChangedBits) : void 0;
          }
        }
        var context = {
          $$typeof: REACT_CONTEXT_TYPE,
          _calculateChangedBits: calculateChangedBits,
          _defaultValue: defaultValue,
          _currentValue: defaultValue,
          _changedBits: 0,
          Provider: null,
          Consumer: null
        };
        context.Provider = {
          $$typeof: REACT_PROVIDER_TYPE,
          _context: context
        };
        context.Consumer = context;
        {
          context._currentRenderer = null;
        }
        return context;
      }
      function forwardRef(render) {
        {
          !(typeof render === 'function') ? warning(false, 'forwardRef requires a render function but was given %s.', render === null ? 'null' : typeof render) : void 0;
        }
        return {
          $$typeof: REACT_FORWARD_REF_TYPE,
          render: render
        };
      }
      var describeComponentFrame = function (name, source, ownerName) {
        return '\n    in ' + (name || 'Unknown') + (source ? ' (at ' + source.fileName.replace(/^.*[\\\/]/, '') + ':' + source.lineNumber + ')' : ownerName ? ' (created by ' + ownerName + ')' : '');
      };
      function isValidElementType(type) {
        return typeof type === 'string' || typeof type === 'function' || type === REACT_FRAGMENT_TYPE || type === REACT_ASYNC_MODE_TYPE || type === REACT_STRICT_MODE_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE);
      }
      function getComponentName(fiber) {
        var type = fiber.type;
        if (typeof type === 'function') {
          return type.displayName || type.name;
        }
        if (typeof type === 'string') {
          return type;
        }
        switch (type) {
          case REACT_FRAGMENT_TYPE:
            return 'ReactFragment';
          case REACT_PORTAL_TYPE:
            return 'ReactPortal';
          case REACT_CALL_TYPE:
            return 'ReactCall';
          case REACT_RETURN_TYPE:
            return 'ReactReturn';
        }
        if (typeof type === 'object' && type !== null) {
          switch (type.$$typeof) {
            case REACT_FORWARD_REF_TYPE:
              var functionName = type.render.displayName || type.render.name || '';
              return functionName !== '' ? 'ForwardRef(' + functionName + ')' : 'ForwardRef';
          }
        }
        return null;
      }
      var currentlyValidatingElement = void 0;
      var propTypesMisspellWarningShown = void 0;
      var getDisplayName = function () {};
      var getStackAddendum = function () {};
      {
        currentlyValidatingElement = null;
        propTypesMisspellWarningShown = false;
        getDisplayName = function (element) {
          if (element == null) {
            return '#empty';
          } else if (typeof element === 'string' || typeof element === 'number') {
            return '#text';
          } else if (typeof element.type === 'string') {
            return element.type;
          } else if (element.type === REACT_FRAGMENT_TYPE) {
            return 'React.Fragment';
          } else {
            return element.type.displayName || element.type.name || 'Unknown';
          }
        };
        getStackAddendum = function () {
          var stack = '';
          if (currentlyValidatingElement) {
            var name = getDisplayName(currentlyValidatingElement);
            var owner = currentlyValidatingElement._owner;
            stack += describeComponentFrame(name, currentlyValidatingElement._source, owner && getComponentName(owner));
          }
          stack += ReactDebugCurrentFrame.getStackAddendum() || '';
          return stack;
        };
      }
      function getDeclarationErrorAddendum() {
        if (ReactCurrentOwner.current) {
          var name = getComponentName(ReactCurrentOwner.current);
          if (name) {
            return '\n\nCheck the render method of `' + name + '`.';
          }
        }
        return '';
      }
      function getSourceInfoErrorAddendum(elementProps) {
        if (elementProps !== null && elementProps !== undefined && elementProps.__source !== undefined) {
          var source = elementProps.__source;
          var fileName = source.fileName.replace(/^.*[\\\/]/, '');
          var lineNumber = source.lineNumber;
          return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
        }
        return '';
      }
      var ownerHasKeyUseWarning = {};
      function getCurrentComponentErrorInfo(parentType) {
        var info = getDeclarationErrorAddendum();
        if (!info) {
          var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
          if (parentName) {
            info = '\n\nCheck the top-level render call using <' + parentName + '>.';
          }
        }
        return info;
      }
      function validateExplicitKey(element, parentType) {
        if (!element._store || element._store.validated || element.key != null) {
          return;
        }
        element._store.validated = true;
        var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
        if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
          return;
        }
        ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
        var childOwner = '';
        if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
          childOwner = ' It was passed a child from ' + getComponentName(element._owner) + '.';
        }
        currentlyValidatingElement = element;
        {
          warning(false, 'Each child in an array or iterator should have a unique "key" prop.' + '%s%s See https://fb.me/react-warning-keys for more information.%s', currentComponentErrorInfo, childOwner, getStackAddendum());
        }
        currentlyValidatingElement = null;
      }
      function validateChildKeys(node, parentType) {
        if (typeof node !== 'object') {
          return;
        }
        if (Array.isArray(node)) {
          for (var i = 0; i < node.length; i++) {
            var child = node[i];
            if (isValidElement(child)) {
              validateExplicitKey(child, parentType);
            }
          }
        } else if (isValidElement(node)) {
          if (node._store) {
            node._store.validated = true;
          }
        } else if (node) {
          var iteratorFn = getIteratorFn(node);
          if (typeof iteratorFn === 'function') {
            if (iteratorFn !== node.entries) {
              var iterator = iteratorFn.call(node);
              var step = void 0;
              while (!(step = iterator.next()).done) {
                if (isValidElement(step.value)) {
                  validateExplicitKey(step.value, parentType);
                }
              }
            }
          }
        }
      }
      function validatePropTypes(element) {
        var componentClass = element.type;
        if (typeof componentClass !== 'function') {
          return;
        }
        var name = componentClass.displayName || componentClass.name;
        var propTypes = componentClass.propTypes;
        if (propTypes) {
          currentlyValidatingElement = element;
          checkPropTypes(propTypes, element.props, 'prop', name, getStackAddendum);
          currentlyValidatingElement = null;
        } else if (componentClass.PropTypes !== undefined && !propTypesMisspellWarningShown) {
          propTypesMisspellWarningShown = true;
          warning(false, 'Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', name || 'Unknown');
        }
        if (typeof componentClass.getDefaultProps === 'function') {
          !componentClass.getDefaultProps.isReactClassApproved ? warning(false, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : void 0;
        }
      }
      function validateFragmentProps(fragment) {
        currentlyValidatingElement = fragment;
        var keys = Object.keys(fragment.props);
        for (var i = 0; i < keys.length; i++) {
          var key = keys[i];
          if (key !== 'children' && key !== 'key') {
            warning(false, 'Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.%s', key, getStackAddendum());
            break;
          }
        }
        if (fragment.ref !== null) {
          warning(false, 'Invalid attribute `ref` supplied to `React.Fragment`.%s', getStackAddendum());
        }
        currentlyValidatingElement = null;
      }
      function createElementWithValidation(type, props, children) {
        var validType = isValidElementType(type);
        if (!validType) {
          var info = '';
          if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
            info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and named imports.";
          }
          var sourceInfo = getSourceInfoErrorAddendum(props);
          if (sourceInfo) {
            info += sourceInfo;
          } else {
            info += getDeclarationErrorAddendum();
          }
          info += getStackAddendum() || '';
          var typeString = void 0;
          if (type === null) {
            typeString = 'null';
          } else if (Array.isArray(type)) {
            typeString = 'array';
          } else {
            typeString = typeof type;
          }
          warning(false, 'React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);
        }
        var element = createElement.apply(this, arguments);
        if (element == null) {
          return element;
        }
        if (validType) {
          for (var i = 2; i < arguments.length; i++) {
            validateChildKeys(arguments[i], type);
          }
        }
        if (type === REACT_FRAGMENT_TYPE) {
          validateFragmentProps(element);
        } else {
          validatePropTypes(element);
        }
        return element;
      }
      function createFactoryWithValidation(type) {
        var validatedFactory = createElementWithValidation.bind(null, type);
        validatedFactory.type = type;
        {
          Object.defineProperty(validatedFactory, 'type', {
            enumerable: false,
            get: function () {
              lowPriorityWarning$1(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.');
              Object.defineProperty(this, 'type', {
                value: type
              });
              return type;
            }
          });
        }
        return validatedFactory;
      }
      function cloneElementWithValidation(element, props, children) {
        var newElement = cloneElement.apply(this, arguments);
        for (var i = 2; i < arguments.length; i++) {
          validateChildKeys(arguments[i], newElement.type);
        }
        validatePropTypes(newElement);
        return newElement;
      }
      var React = {
        Children: {
          map: mapChildren,
          forEach: forEachChildren,
          count: countChildren,
          toArray: toArray,
          only: onlyChild
        },
        createRef: createRef,
        Component: Component,
        PureComponent: PureComponent,
        createContext: createContext,
        forwardRef: forwardRef,
        Fragment: REACT_FRAGMENT_TYPE,
        StrictMode: REACT_STRICT_MODE_TYPE,
        unstable_AsyncMode: REACT_ASYNC_MODE_TYPE,
        createElement: createElementWithValidation,
        cloneElement: cloneElementWithValidation,
        createFactory: createFactoryWithValidation,
        isValidElement: isValidElement,
        version: ReactVersion,
        __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {
          ReactCurrentOwner: ReactCurrentOwner,
          assign: _assign
        }
      };
      {
        _assign(React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, {
          ReactDebugCurrentFrame: ReactDebugCurrentFrame,
          ReactComponentTreeHook: {}
        });
      }
      var React$2 = Object.freeze({
        default: React
      });
      var React$3 = React$2 && React || React$2;
      var react = React$3['default'] ? React$3['default'] : React$3;
      module.exports = react;
    })();
  }, function (module, exports, __webpack_require__) {
    var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol.for && Symbol.for('react.element') || 0xeac7;
    var isValidElement = function (object) {
      return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
    };
    var throwOnDirectAccess = true;
    module.exports = __webpack_require__(12)(isValidElement, throwOnDirectAccess);
  }, function (module, exports, __webpack_require__) {
    "use strict";
    var emptyFunction = __webpack_require__(1);
    var invariant = __webpack_require__(0);
    var warning = __webpack_require__(3);
    var assign = __webpack_require__(2);
    var ReactPropTypesSecret = __webpack_require__(4);
    var checkPropTypes = __webpack_require__(6);
    module.exports = function (isValidElement, throwOnDirectAccess) {
      var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = '@@iterator';
      function getIteratorFn(maybeIterable) {
        var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
        if (typeof iteratorFn === 'function') {
          return iteratorFn;
        }
      }
      var ANONYMOUS = '<<anonymous>>';
      var ReactPropTypes = {
        array: createPrimitiveTypeChecker('array'),
        bool: createPrimitiveTypeChecker('boolean'),
        func: createPrimitiveTypeChecker('function'),
        number: createPrimitiveTypeChecker('number'),
        object: createPrimitiveTypeChecker('object'),
        string: createPrimitiveTypeChecker('string'),
        symbol: createPrimitiveTypeChecker('symbol'),
        any: createAnyTypeChecker(),
        arrayOf: createArrayOfTypeChecker,
        element: createElementTypeChecker(),
        instanceOf: createInstanceTypeChecker,
        node: createNodeChecker(),
        objectOf: createObjectOfTypeChecker,
        oneOf: createEnumTypeChecker,
        oneOfType: createUnionTypeChecker,
        shape: createShapeTypeChecker,
        exact: createStrictShapeTypeChecker
      };
      function is(x, y) {
        if (x === y) {
          return x !== 0 || 1 / x === 1 / y;
        } else {
          return x !== x && y !== y;
        }
      }
      function PropTypeError(message) {
        this.message = message;
        this.stack = '';
      }
      PropTypeError.prototype = Error.prototype;
      function createChainableTypeChecker(validate) {
        var manualPropTypeCallCache = {};
        var manualPropTypeWarningCount = 0;
        function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
          componentName = componentName || ANONYMOUS;
          propFullName = propFullName || propName;
          if (secret !== ReactPropTypesSecret) {
            if (throwOnDirectAccess) {
              invariant(false, 'Calling PropTypes validators directly is not supported by the `prop-types` package. ' + 'Use `PropTypes.checkPropTypes()` to call them. ' + 'Read more at http://fb.me/use-check-prop-types');
            } else if ("development" !== 'production' && typeof console !== 'undefined') {
              var cacheKey = componentName + ':' + propName;
              if (!manualPropTypeCallCache[cacheKey] && manualPropTypeWarningCount < 3) {
                warning(false, 'You are manually calling a React.PropTypes validation ' + 'function for the `%s` prop on `%s`. This is deprecated ' + 'and will throw in the standalone `prop-types` package. ' + 'You may be seeing this warning due to a third-party PropTypes ' + 'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.', propFullName, componentName);
                manualPropTypeCallCache[cacheKey] = true;
                manualPropTypeWarningCount++;
              }
            }
          }
          if (props[propName] == null) {
            if (isRequired) {
              if (props[propName] === null) {
                return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
              }
              return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
            }
            return null;
          } else {
            return validate(props, propName, componentName, location, propFullName);
          }
        }
        var chainedCheckType = checkType.bind(null, false);
        chainedCheckType.isRequired = checkType.bind(null, true);
        return chainedCheckType;
      }
      function createPrimitiveTypeChecker(expectedType) {
        function validate(props, propName, componentName, location, propFullName, secret) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== expectedType) {
            var preciseType = getPreciseType(propValue);
            return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createAnyTypeChecker() {
        return createChainableTypeChecker(emptyFunction.thatReturnsNull);
      }
      function createArrayOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== 'function') {
            return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
          }
          var propValue = props[propName];
          if (!Array.isArray(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
          }
          for (var i = 0; i < propValue.length; i++) {
            var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
            if (error instanceof Error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!isValidElement(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createInstanceTypeChecker(expectedClass) {
        function validate(props, propName, componentName, location, propFullName) {
          if (!(props[propName] instanceof expectedClass)) {
            var expectedClassName = expectedClass.name || ANONYMOUS;
            var actualClassName = getClassName(props[propName]);
            return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createEnumTypeChecker(expectedValues) {
        if (!Array.isArray(expectedValues)) {
          "development" !== 'production' ? warning(false, 'Invalid argument supplied to oneOf, expected an instance of array.') : void 0;
          return emptyFunction.thatReturnsNull;
        }
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          for (var i = 0; i < expectedValues.length; i++) {
            if (is(propValue, expectedValues[i])) {
              return null;
            }
          }
          var valuesString = JSON.stringify(expectedValues);
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
        }
        return createChainableTypeChecker(validate);
      }
      function createObjectOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== 'function') {
            return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
          }
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== 'object') {
            return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
          }
          for (var key in propValue) {
            if (propValue.hasOwnProperty(key)) {
              var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
              if (error instanceof Error) {
                return error;
              }
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createUnionTypeChecker(arrayOfTypeCheckers) {
        if (!Array.isArray(arrayOfTypeCheckers)) {
          "development" !== 'production' ? warning(false, 'Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
          return emptyFunction.thatReturnsNull;
        }
        for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
          var checker = arrayOfTypeCheckers[i];
          if (typeof checker !== 'function') {
            warning(false, 'Invalid argument supplied to oneOfType. Expected an array of check functions, but ' + 'received %s at index %s.', getPostfixForTypeWarning(checker), i);
            return emptyFunction.thatReturnsNull;
          }
        }
        function validate(props, propName, componentName, location, propFullName) {
          for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
            var checker = arrayOfTypeCheckers[i];
            if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {
              return null;
            }
          }
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
        }
        return createChainableTypeChecker(validate);
      }
      function createNodeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          if (!isNode(props[propName])) {
            return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== 'object') {
            return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
          }
          for (var key in shapeTypes) {
            var checker = shapeTypes[key];
            if (!checker) {
              continue;
            }
            var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createStrictShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== 'object') {
            return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
          }
          var allKeys = assign({}, props[propName], shapeTypes);
          for (var key in allKeys) {
            var checker = shapeTypes[key];
            if (!checker) {
              return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' + '\nBad object: ' + JSON.stringify(props[propName], null, '  ') + '\nValid keys: ' + JSON.stringify(Object.keys(shapeTypes), null, '  '));
            }
            var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function isNode(propValue) {
        switch (typeof propValue) {
          case 'number':
          case 'string':
          case 'undefined':
            return true;
          case 'boolean':
            return !propValue;
          case 'object':
            if (Array.isArray(propValue)) {
              return propValue.every(isNode);
            }
            if (propValue === null || isValidElement(propValue)) {
              return true;
            }
            var iteratorFn = getIteratorFn(propValue);
            if (iteratorFn) {
              var iterator = iteratorFn.call(propValue);
              var step;
              if (iteratorFn !== propValue.entries) {
                while (!(step = iterator.next()).done) {
                  if (!isNode(step.value)) {
                    return false;
                  }
                }
              } else {
                while (!(step = iterator.next()).done) {
                  var entry = step.value;
                  if (entry) {
                    if (!isNode(entry[1])) {
                      return false;
                    }
                  }
                }
              }
            } else {
              return false;
            }
            return true;
          default:
            return false;
        }
      }
      function isSymbol(propType, propValue) {
        if (propType === 'symbol') {
          return true;
        }
        if (propValue['@@toStringTag'] === 'Symbol') {
          return true;
        }
        if (typeof Symbol === 'function' && propValue instanceof Symbol) {
          return true;
        }
        return false;
      }
      function getPropType(propValue) {
        var propType = typeof propValue;
        if (Array.isArray(propValue)) {
          return 'array';
        }
        if (propValue instanceof RegExp) {
          return 'object';
        }
        if (isSymbol(propType, propValue)) {
          return 'symbol';
        }
        return propType;
      }
      function getPreciseType(propValue) {
        if (typeof propValue === 'undefined' || propValue === null) {
          return '' + propValue;
        }
        var propType = getPropType(propValue);
        if (propType === 'object') {
          if (propValue instanceof Date) {
            return 'date';
          } else if (propValue instanceof RegExp) {
            return 'regexp';
          }
        }
        return propType;
      }
      function getPostfixForTypeWarning(value) {
        var type = getPreciseType(value);
        switch (type) {
          case 'array':
          case 'object':
            return 'an ' + type;
          case 'boolean':
          case 'date':
          case 'regexp':
            return 'a ' + type;
          default:
            return type;
        }
      }
      function getClassName(propValue) {
        if (!propValue.constructor || !propValue.constructor.name) {
          return ANONYMOUS;
        }
        return propValue.constructor.name;
      }
      ReactPropTypes.checkPropTypes = checkPropTypes;
      ReactPropTypes.PropTypes = ReactPropTypes;
      return ReactPropTypes;
    };
  }, function (module, exports, __webpack_require__) {
    "use strict";
    var emptyFunction = __webpack_require__(1);
    var invariant = __webpack_require__(0);
    var ReactPropTypesSecret = __webpack_require__(4);
    module.exports = function () {
      function shim(props, propName, componentName, location, propFullName, secret) {
        if (secret === ReactPropTypesSecret) {
          return;
        }
        invariant(false, 'Calling PropTypes validators directly is not supported by the `prop-types` package. ' + 'Use PropTypes.checkPropTypes() to call them. ' + 'Read more at http://fb.me/use-check-prop-types');
      }
      ;
      shim.isRequired = shim;
      function getShim() {
        return shim;
      }
      ;
      var ReactPropTypes = {
        array: shim,
        bool: shim,
        func: shim,
        number: shim,
        object: shim,
        string: shim,
        symbol: shim,
        any: shim,
        arrayOf: getShim,
        element: shim,
        instanceOf: getShim,
        node: shim,
        objectOf: getShim,
        oneOf: getShim,
        oneOfType: getShim,
        shape: getShim,
        exact: getShim
      };
      ReactPropTypes.checkPropTypes = emptyFunction;
      ReactPropTypes.PropTypes = ReactPropTypes;
      return ReactPropTypes;
    };
  }, function (module, exports, __webpack_require__) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _blank = __webpack_require__(15);
    Object.defineProperty(exports, 'blank', {
      enumerable: true,
      get: function get() {
        return _interopRequireDefault(_blank).default;
      }
    });
    var _loadingBalls = __webpack_require__(16);
    Object.defineProperty(exports, 'balls', {
      enumerable: true,
      get: function get() {
        return _interopRequireDefault(_loadingBalls).default;
      }
    });
    var _loadingBars = __webpack_require__(17);
    Object.defineProperty(exports, 'bars', {
      enumerable: true,
      get: function get() {
        return _interopRequireDefault(_loadingBars).default;
      }
    });
    var _loadingBubbles = __webpack_require__(18);
    Object.defineProperty(exports, 'bubbles', {
      enumerable: true,
      get: function get() {
        return _interopRequireDefault(_loadingBubbles).default;
      }
    });
    var _loadingCubes = __webpack_require__(19);
    Object.defineProperty(exports, 'cubes', {
      enumerable: true,
      get: function get() {
        return _interopRequireDefault(_loadingCubes).default;
      }
    });
    var _loadingCylon = __webpack_require__(20);
    Object.defineProperty(exports, 'cylon', {
      enumerable: true,
      get: function get() {
        return _interopRequireDefault(_loadingCylon).default;
      }
    });
    var _loadingSpin = __webpack_require__(21);
    Object.defineProperty(exports, 'spin', {
      enumerable: true,
      get: function get() {
        return _interopRequireDefault(_loadingSpin).default;
      }
    });
    var _loadingSpinningBubbles = __webpack_require__(22);
    Object.defineProperty(exports, 'spinningBubbles', {
      enumerable: true,
      get: function get() {
        return _interopRequireDefault(_loadingSpinningBubbles).default;
      }
    });
    var _loadingSpokes = __webpack_require__(23);
    Object.defineProperty(exports, 'spokes', {
      enumerable: true,
      get: function get() {
        return _interopRequireDefault(_loadingSpokes).default;
      }
    });
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
  }, function (module, exports) {
    module.exports = "<svg class=\"icon-blank\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 32 32\"></svg>\n";
  }, function (module, exports) {
    module.exports = "<svg class=\"icon-loading\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 32 32\">\n  <path transform=\"translate(-8 0)\" d=\"M4 12 A4 4 0 0 0 4 20 A4 4 0 0 0 4 12\"> \n    <animateTransform attributeName=\"transform\" type=\"translate\" values=\"-8 0; 2 0; 2 0;\" dur=\"0.8s\" repeatCount=\"indefinite\" begin=\"0\" keytimes=\"0;.25;1\" keySplines=\"0.2 0.2 0.4 0.8;0.2 0.6 0.4 0.8\" calcMode=\"spline\"  />\n  </path>\n  <path transform=\"translate(2 0)\" d=\"M4 12 A4 4 0 0 0 4 20 A4 4 0 0 0 4 12\"> \n    <animateTransform attributeName=\"transform\" type=\"translate\" values=\"2 0; 12 0; 12 0;\" dur=\"0.8s\" repeatCount=\"indefinite\" begin=\"0\" keytimes=\"0;.35;1\" keySplines=\"0.2 0.2 0.4 0.8;0.2 0.6 0.4 0.8\" calcMode=\"spline\"  />\n  </path>\n  <path transform=\"translate(12 0)\" d=\"M4 12 A4 4 0 0 0 4 20 A4 4 0 0 0 4 12\"> \n    <animateTransform attributeName=\"transform\" type=\"translate\" values=\"12 0; 22 0; 22 0;\" dur=\"0.8s\" repeatCount=\"indefinite\" begin=\"0\" keytimes=\"0;.45;1\" keySplines=\"0.2 0.2 0.4 0.8;0.2 0.6 0.4 0.8\" calcMode=\"spline\"  />\n  </path>\n  <path transform=\"translate(24 0)\" d=\"M4 12 A4 4 0 0 0 4 20 A4 4 0 0 0 4 12\"> \n    <animateTransform attributeName=\"transform\" type=\"translate\" values=\"22 0; 32 0; 32 0;\" dur=\"0.8s\" repeatCount=\"indefinite\" begin=\"0\" keytimes=\"0;.55;1\" keySplines=\"0.2 0.2 0.4 0.8;0.2 0.6 0.4 0.8\" calcMode=\"spline\"  />\n  </path>\n</svg>\n";
  }, function (module, exports) {
    module.exports = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 32 32\">\n  <path transform=\"translate(2)\" d=\"M0 12 V20 H4 V12z\"> \n    <animate attributeName=\"d\" values=\"M0 12 V20 H4 V12z; M0 4 V28 H4 V4z; M0 12 V20 H4 V12z; M0 12 V20 H4 V12z\" dur=\"1.2s\" repeatCount=\"indefinite\" begin=\"0\" keytimes=\"0;.2;.5;1\" keySplines=\"0.2 0.2 0.4 0.8;0.2 0.6 0.4 0.8;0.2 0.8 0.4 0.8\" calcMode=\"spline\"  />\n  </path>\n  <path transform=\"translate(8)\" d=\"M0 12 V20 H4 V12z\">\n    <animate attributeName=\"d\" values=\"M0 12 V20 H4 V12z; M0 4 V28 H4 V4z; M0 12 V20 H4 V12z; M0 12 V20 H4 V12z\" dur=\"1.2s\" repeatCount=\"indefinite\" begin=\"0.2\" keytimes=\"0;.2;.5;1\" keySplines=\"0.2 0.2 0.4 0.8;0.2 0.6 0.4 0.8;0.2 0.8 0.4 0.8\" calcMode=\"spline\"  />\n  </path>\n  <path transform=\"translate(14)\" d=\"M0 12 V20 H4 V12z\">\n    <animate attributeName=\"d\" values=\"M0 12 V20 H4 V12z; M0 4 V28 H4 V4z; M0 12 V20 H4 V12z; M0 12 V20 H4 V12z\" dur=\"1.2s\" repeatCount=\"indefinite\" begin=\"0.4\" keytimes=\"0;.2;.5;1\" keySplines=\"0.2 0.2 0.4 0.8;0.2 0.6 0.4 0.8;0.2 0.8 0.4 0.8\" calcMode=\"spline\" />\n  </path>\n  <path transform=\"translate(20)\" d=\"M0 12 V20 H4 V12z\">\n    <animate attributeName=\"d\" values=\"M0 12 V20 H4 V12z; M0 4 V28 H4 V4z; M0 12 V20 H4 V12z; M0 12 V20 H4 V12z\" dur=\"1.2s\" repeatCount=\"indefinite\" begin=\"0.6\" keytimes=\"0;.2;.5;1\" keySplines=\"0.2 0.2 0.4 0.8;0.2 0.6 0.4 0.8;0.2 0.8 0.4 0.8\" calcMode=\"spline\" />\n  </path>\n  <path transform=\"translate(26)\" d=\"M0 12 V20 H4 V12z\">\n    <animate attributeName=\"d\" values=\"M0 12 V20 H4 V12z; M0 4 V28 H4 V4z; M0 12 V20 H4 V12z; M0 12 V20 H4 V12z\" dur=\"1.2s\" repeatCount=\"indefinite\" begin=\"0.8\" keytimes=\"0;.2;.5;1\" keySplines=\"0.2 0.2 0.4 0.8;0.2 0.6 0.4 0.8;0.2 0.8 0.4 0.8\" calcMode=\"spline\" />\n  </path>\n</svg>\n";
  }, function (module, exports) {
    module.exports = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 32 32\">\n  <circle transform=\"translate(8 0)\" cx=\"0\" cy=\"16\" r=\"0\"> \n    <animate attributeName=\"r\" values=\"0; 4; 0; 0\" dur=\"1.2s\" repeatCount=\"indefinite\" begin=\"0\"\n      keytimes=\"0;0.2;0.7;1\" keySplines=\"0.2 0.2 0.4 0.8;0.2 0.6 0.4 0.8;0.2 0.6 0.4 0.8\" calcMode=\"spline\" />\n  </circle>\n  <circle transform=\"translate(16 0)\" cx=\"0\" cy=\"16\" r=\"0\"> \n    <animate attributeName=\"r\" values=\"0; 4; 0; 0\" dur=\"1.2s\" repeatCount=\"indefinite\" begin=\"0.3\"\n      keytimes=\"0;0.2;0.7;1\" keySplines=\"0.2 0.2 0.4 0.8;0.2 0.6 0.4 0.8;0.2 0.6 0.4 0.8\" calcMode=\"spline\" />\n  </circle>\n  <circle transform=\"translate(24 0)\" cx=\"0\" cy=\"16\" r=\"0\"> \n    <animate attributeName=\"r\" values=\"0; 4; 0; 0\" dur=\"1.2s\" repeatCount=\"indefinite\" begin=\"0.6\"\n      keytimes=\"0;0.2;0.7;1\" keySplines=\"0.2 0.2 0.4 0.8;0.2 0.6 0.4 0.8;0.2 0.6 0.4 0.8\" calcMode=\"spline\" />\n  </circle>\n</svg>\n";
  }, function (module, exports) {
    module.exports = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 32 32\">\n  <path transform=\"translate(-8 0)\" d=\"M0 12 V20 H8 V12z\"> \n    <animateTransform attributeName=\"transform\" type=\"translate\" values=\"-8 0; 2 0; 2 0;\" dur=\"0.8s\" repeatCount=\"indefinite\" begin=\"0\" keytimes=\"0;.25;1\" keySplines=\"0.2 0.2 0.4 0.8;0.2 0.6 0.4 0.8\" calcMode=\"spline\"  />\n  </path>\n  <path transform=\"translate(2 0)\" d=\"M0 12 V20 H8 V12z\"> \n    <animateTransform attributeName=\"transform\" type=\"translate\" values=\"2 0; 12 0; 12 0;\" dur=\"0.8s\" repeatCount=\"indefinite\" begin=\"0\" keytimes=\"0;.35;1\" keySplines=\"0.2 0.2 0.4 0.8;0.2 0.6 0.4 0.8\" calcMode=\"spline\"  />\n  </path>\n  <path transform=\"translate(12 0)\" d=\"M0 12 V20 H8 V12z\"> \n    <animateTransform attributeName=\"transform\" type=\"translate\" values=\"12 0; 22 0; 22 0;\" dur=\"0.8s\" repeatCount=\"indefinite\" begin=\"0\" keytimes=\"0;.45;1\" keySplines=\"0.2 0.2 0.4 0.8;0.2 0.6 0.4 0.8\" calcMode=\"spline\"  />\n  </path>\n  <path transform=\"translate(24 0)\" d=\"M0 12 V20 H8 V12z\"> \n    <animateTransform attributeName=\"transform\" type=\"translate\" values=\"22 0; 32 0; 32 0;\" dur=\"0.8s\" repeatCount=\"indefinite\" begin=\"0\" keytimes=\"0;.55;1\" keySplines=\"0.2 0.2 0.4 0.8;0.2 0.6 0.4 0.8\" calcMode=\"spline\"  />\n  </path>\n</svg>\n";
  }, function (module, exports) {
    module.exports = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 32 32\">\n  <path transform=\"translate(0 0)\" d=\"M0 12 V20 H4 V12z\">\n    <animateTransform attributeName=\"transform\" type=\"translate\" values=\"0 0; 28 0; 0 0; 0 0\" dur=\"1.5s\" begin=\"0\" repeatCount=\"indefinite\" keytimes=\"0;0.3;0.6;1\" keySplines=\"0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8\" calcMode=\"spline\" />\n  </path>\n  <path opacity=\"0.5\" transform=\"translate(0 0)\" d=\"M0 12 V20 H4 V12z\">\n    <animateTransform attributeName=\"transform\" type=\"translate\" values=\"0 0; 28 0; 0 0; 0 0\" dur=\"1.5s\" begin=\"0.1s\" repeatCount=\"indefinite\" keytimes=\"0;0.3;0.6;1\" keySplines=\"0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8\" calcMode=\"spline\" />\n  </path>\n  <path opacity=\"0.25\" transform=\"translate(0 0)\" d=\"M0 12 V20 H4 V12z\">\n    <animateTransform attributeName=\"transform\" type=\"translate\" values=\"0 0; 28 0; 0 0; 0 0\" dur=\"1.5s\" begin=\"0.2s\" repeatCount=\"indefinite\" keytimes=\"0;0.3;0.6;1\" keySplines=\"0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8\" calcMode=\"spline\" />\n  </path>\n</svg>\n";
  }, function (module, exports) {
    module.exports = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 32 32\">\n  <path opacity=\".25\" d=\"M16 0 A16 16 0 0 0 16 32 A16 16 0 0 0 16 0 M16 4 A12 12 0 0 1 16 28 A12 12 0 0 1 16 4\"/>\n  <path d=\"M16 0 A16 16 0 0 1 32 16 L28 16 A12 12 0 0 0 16 4z\">\n    <animateTransform attributeName=\"transform\" type=\"rotate\" from=\"0 16 16\" to=\"360 16 16\" dur=\"0.8s\" repeatCount=\"indefinite\" />\n  </path>\n</svg>\n";
  }, function (module, exports) {
    module.exports = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 32 32\">\n  <circle cx=\"16\" cy=\"3\" r=\"0\">\n    <animate attributeName=\"r\" values=\"0;3;0;0\" dur=\"1s\" repeatCount=\"indefinite\" begin=\"0\" keySplines=\"0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8\" calcMode=\"spline\" />\n  </circle>\n  <circle transform=\"rotate(45 16 16)\" cx=\"16\" cy=\"3\" r=\"0\">\n    <animate attributeName=\"r\" values=\"0;3;0;0\" dur=\"1s\" repeatCount=\"indefinite\" begin=\"0.125s\" keySplines=\"0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8\" calcMode=\"spline\" />\n  </circle>\n  <circle transform=\"rotate(90 16 16)\" cx=\"16\" cy=\"3\" r=\"0\">\n    <animate attributeName=\"r\" values=\"0;3;0;0\" dur=\"1s\" repeatCount=\"indefinite\" begin=\"0.25s\" keySplines=\"0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8\" calcMode=\"spline\" />\n  </circle>\n  <circle transform=\"rotate(135 16 16)\" cx=\"16\" cy=\"3\" r=\"0\">\n    <animate attributeName=\"r\" values=\"0;3;0;0\" dur=\"1s\" repeatCount=\"indefinite\" begin=\"0.375s\" keySplines=\"0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8\" calcMode=\"spline\" />\n  </circle>\n  <circle transform=\"rotate(180 16 16)\" cx=\"16\" cy=\"3\" r=\"0\">\n    <animate attributeName=\"r\" values=\"0;3;0;0\" dur=\"1s\" repeatCount=\"indefinite\" begin=\"0.5s\" keySplines=\"0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8\" calcMode=\"spline\" />\n  </circle>\n  <circle transform=\"rotate(225 16 16)\" cx=\"16\" cy=\"3\" r=\"0\">\n    <animate attributeName=\"r\" values=\"0;3;0;0\" dur=\"1s\" repeatCount=\"indefinite\" begin=\"0.625s\" keySplines=\"0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8\" calcMode=\"spline\" />\n  </circle>\n  <circle transform=\"rotate(270 16 16)\" cx=\"16\" cy=\"3\" r=\"0\">\n    <animate attributeName=\"r\" values=\"0;3;0;0\" dur=\"1s\" repeatCount=\"indefinite\" begin=\"0.75s\" keySplines=\"0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8\" calcMode=\"spline\" />\n  </circle>\n  <circle transform=\"rotate(315 16 16)\" cx=\"16\" cy=\"3\" r=\"0\">\n    <animate attributeName=\"r\" values=\"0;3;0;0\" dur=\"1s\" repeatCount=\"indefinite\" begin=\"0.875s\" keySplines=\"0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8\" calcMode=\"spline\" />\n  </circle>\n  <circle transform=\"rotate(180 16 16)\" cx=\"16\" cy=\"3\" r=\"0\">\n    <animate attributeName=\"r\" values=\"0;3;0;0\" dur=\"1s\" repeatCount=\"indefinite\" begin=\"0.5s\" keySplines=\"0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8\" calcMode=\"spline\" />\n  </circle>\n</svg>\n";
  }, function (module, exports) {
    module.exports = "<svg id=\"loading\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 32 32\">\n  <path opacity=\".1\" d=\"M14 0 H18 V8 H14 z\" transform=\"rotate(0 16 16)\">\n    <animate attributeName=\"opacity\" from=\"1\" to=\".1\" dur=\"1s\" repeatCount=\"indefinite\" begin=\"0\"/>\n  </path>\n  <path opacity=\".1\" d=\"M14 0 H18 V8 H14 z\" transform=\"rotate(45 16 16)\">\n    <animate attributeName=\"opacity\" from=\"1\" to=\".1\" dur=\"1s\" repeatCount=\"indefinite\" begin=\"0.125s\"/>\n  </path>\n  <path opacity=\".1\" d=\"M14 0 H18 V8 H14 z\" transform=\"rotate(90 16 16)\">\n    <animate attributeName=\"opacity\" from=\"1\" to=\".1\" dur=\"1s\" repeatCount=\"indefinite\" begin=\"0.25s\"/>\n  </path>\n  <path opacity=\".1\" d=\"M14 0 H18 V8 H14 z\" transform=\"rotate(135 16 16)\">\n    <animate attributeName=\"opacity\" from=\"1\" to=\".1\" dur=\"1s\" repeatCount=\"indefinite\" begin=\"0.375s\"/>\n  </path>\n  <path opacity=\".1\" d=\"M14 0 H18 V8 H14 z\" transform=\"rotate(180 16 16)\">\n    <animate attributeName=\"opacity\" from=\"1\" to=\".1\" dur=\"1s\" repeatCount=\"indefinite\" begin=\"0.5s\"/>\n  </path>\n  <path opacity=\".1\" d=\"M14 0 H18 V8 H14 z\" transform=\"rotate(225 16 16)\">\n    <animate attributeName=\"opacity\" from=\"1\" to=\".1\" dur=\"1s\" repeatCount=\"indefinite\" begin=\"0.675s\"/>\n  </path>\n  <path opacity=\".1\" d=\"M14 0 H18 V8 H14 z\" transform=\"rotate(270 16 16)\">\n    <animate attributeName=\"opacity\" from=\"1\" to=\".1\" dur=\"1s\" repeatCount=\"indefinite\" begin=\"0.75s\"/>\n  </path>\n  <path opacity=\".1\" d=\"M14 0 H18 V8 H14 z\" transform=\"rotate(315 16 16)\">\n    <animate attributeName=\"opacity\" from=\"1\" to=\".1\" dur=\"1s\" repeatCount=\"indefinite\" begin=\"0.875s\"/>\n  </path>\n</svg>\n";
  }]);
});

},

// node_modules/aos/dist/aos.js @106
106: function(__fusereq, exports, module){
!(function (e, t) {
  "object" == typeof exports && "object" == typeof module ? module.exports = t() : "function" == typeof define && define.amd ? define([], t) : "object" == typeof exports ? exports.AOS = t() : e.AOS = t();
})(this, function () {
  return (function (e) {
    function t(o) {
      if (n[o]) return n[o].exports;
      var i = n[o] = {
        exports: {},
        id: o,
        loaded: !1
      };
      return (e[o].call(i.exports, i, i.exports, t), i.loaded = !0, i.exports);
    }
    var n = {};
    return (t.m = e, t.c = n, t.p = "dist/", t(0));
  })([function (e, t, n) {
    "use strict";
    function o(e) {
      return e && e.__esModule ? e : {
        default: e
      };
    }
    var i = Object.assign || (function (e) {
      for (var t = 1; t < arguments.length; t++) {
        var n = arguments[t];
        for (var o in n) Object.prototype.hasOwnProperty.call(n, o) && (e[o] = n[o]);
      }
      return e;
    }), r = n(1), a = (o(r), n(6)), u = o(a), c = n(7), s = o(c), f = n(8), d = o(f), l = n(9), p = o(l), m = n(10), b = o(m), v = n(11), y = o(v), g = n(14), h = o(g), w = [], k = !1, x = {
      offset: 120,
      delay: 0,
      easing: "ease",
      duration: 400,
      disable: !1,
      once: !1,
      startEvent: "DOMContentLoaded",
      throttleDelay: 99,
      debounceDelay: 50,
      disableMutationObserver: !1
    }, j = function () {
      var e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
      if ((e && (k = !0), k)) return (w = (0, y.default)(w, x), (0, b.default)(w, x.once), w);
    }, O = function () {
      (w = (0, h.default)(), j());
    }, M = function () {
      w.forEach(function (e, t) {
        (e.node.removeAttribute("data-aos"), e.node.removeAttribute("data-aos-easing"), e.node.removeAttribute("data-aos-duration"), e.node.removeAttribute("data-aos-delay"));
      });
    }, S = function (e) {
      return e === !0 || "mobile" === e && p.default.mobile() || "phone" === e && p.default.phone() || "tablet" === e && p.default.tablet() || "function" == typeof e && e() === !0;
    }, _ = function (e) {
      (x = i(x, e), w = (0, h.default)());
      var t = document.all && !window.atob;
      return S(x.disable) || t ? M() : (x.disableMutationObserver || d.default.isSupported() || (console.info('\n      aos: MutationObserver is not supported on this browser,\n      code mutations observing has been disabled.\n      You may have to call "refreshHard()" by yourself.\n    '), x.disableMutationObserver = !0), document.querySelector("body").setAttribute("data-aos-easing", x.easing), document.querySelector("body").setAttribute("data-aos-duration", x.duration), document.querySelector("body").setAttribute("data-aos-delay", x.delay), "DOMContentLoaded" === x.startEvent && ["complete", "interactive"].indexOf(document.readyState) > -1 ? j(!0) : "load" === x.startEvent ? window.addEventListener(x.startEvent, function () {
        j(!0);
      }) : document.addEventListener(x.startEvent, function () {
        j(!0);
      }), window.addEventListener("resize", (0, s.default)(j, x.debounceDelay, !0)), window.addEventListener("orientationchange", (0, s.default)(j, x.debounceDelay, !0)), window.addEventListener("scroll", (0, u.default)(function () {
        (0, b.default)(w, x.once);
      }, x.throttleDelay)), x.disableMutationObserver || d.default.ready("[data-aos]", O), w);
    };
    e.exports = {
      init: _,
      refresh: j,
      refreshHard: O
    };
  }, function (e, t) {}, , , , , function (e, t) {
    (function (t) {
      "use strict";
      function n(e, t, n) {
        function o(t) {
          var n = b, o = v;
          return (b = v = void 0, k = t, g = e.apply(o, n));
        }
        function r(e) {
          return (k = e, h = setTimeout(f, t), M ? o(e) : g);
        }
        function a(e) {
          var n = e - w, o = e - k, i = t - n;
          return S ? j(i, y - o) : i;
        }
        function c(e) {
          var n = e - w, o = e - k;
          return void 0 === w || n >= t || n < 0 || S && o >= y;
        }
        function f() {
          var e = O();
          return c(e) ? d(e) : void (h = setTimeout(f, a(e)));
        }
        function d(e) {
          return (h = void 0, _ && b ? o(e) : (b = v = void 0, g));
        }
        function l() {
          (void 0 !== h && clearTimeout(h), k = 0, b = w = v = h = void 0);
        }
        function p() {
          return void 0 === h ? g : d(O());
        }
        function m() {
          var e = O(), n = c(e);
          if ((b = arguments, v = this, w = e, n)) {
            if (void 0 === h) return r(w);
            if (S) return (h = setTimeout(f, t), o(w));
          }
          return (void 0 === h && (h = setTimeout(f, t)), g);
        }
        var b, v, y, g, h, w, k = 0, M = !1, S = !1, _ = !0;
        if ("function" != typeof e) throw new TypeError(s);
        return (t = u(t) || 0, i(n) && (M = !!n.leading, S = ("maxWait" in n), y = S ? x(u(n.maxWait) || 0, t) : y, _ = ("trailing" in n) ? !!n.trailing : _), m.cancel = l, m.flush = p, m);
      }
      function o(e, t, o) {
        var r = !0, a = !0;
        if ("function" != typeof e) throw new TypeError(s);
        return (i(o) && (r = ("leading" in o) ? !!o.leading : r, a = ("trailing" in o) ? !!o.trailing : a), n(e, t, {
          leading: r,
          maxWait: t,
          trailing: a
        }));
      }
      function i(e) {
        var t = "undefined" == typeof e ? "undefined" : c(e);
        return !!e && ("object" == t || "function" == t);
      }
      function r(e) {
        return !!e && "object" == ("undefined" == typeof e ? "undefined" : c(e));
      }
      function a(e) {
        return "symbol" == ("undefined" == typeof e ? "undefined" : c(e)) || r(e) && k.call(e) == d;
      }
      function u(e) {
        if ("number" == typeof e) return e;
        if (a(e)) return f;
        if (i(e)) {
          var t = "function" == typeof e.valueOf ? e.valueOf() : e;
          e = i(t) ? t + "" : t;
        }
        if ("string" != typeof e) return 0 === e ? e : +e;
        e = e.replace(l, "");
        var n = m.test(e);
        return n || b.test(e) ? v(e.slice(2), n ? 2 : 8) : p.test(e) ? f : +e;
      }
      var c = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (e) {
        return typeof e;
      } : function (e) {
        return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
      }, s = "Expected a function", f = NaN, d = "[object Symbol]", l = /^\s+|\s+$/g, p = /^[-+]0x[0-9a-f]+$/i, m = /^0b[01]+$/i, b = /^0o[0-7]+$/i, v = parseInt, y = "object" == ("undefined" == typeof t ? "undefined" : c(t)) && t && t.Object === Object && t, g = "object" == ("undefined" == typeof self ? "undefined" : c(self)) && self && self.Object === Object && self, h = y || g || Function("return this")(), w = Object.prototype, k = w.toString, x = Math.max, j = Math.min, O = function () {
        return h.Date.now();
      };
      e.exports = o;
    }).call(t, (function () {
      return this;
    })());
  }, function (e, t) {
    (function (t) {
      "use strict";
      function n(e, t, n) {
        function i(t) {
          var n = b, o = v;
          return (b = v = void 0, O = t, g = e.apply(o, n));
        }
        function r(e) {
          return (O = e, h = setTimeout(f, t), M ? i(e) : g);
        }
        function u(e) {
          var n = e - w, o = e - O, i = t - n;
          return S ? x(i, y - o) : i;
        }
        function s(e) {
          var n = e - w, o = e - O;
          return void 0 === w || n >= t || n < 0 || S && o >= y;
        }
        function f() {
          var e = j();
          return s(e) ? d(e) : void (h = setTimeout(f, u(e)));
        }
        function d(e) {
          return (h = void 0, _ && b ? i(e) : (b = v = void 0, g));
        }
        function l() {
          (void 0 !== h && clearTimeout(h), O = 0, b = w = v = h = void 0);
        }
        function p() {
          return void 0 === h ? g : d(j());
        }
        function m() {
          var e = j(), n = s(e);
          if ((b = arguments, v = this, w = e, n)) {
            if (void 0 === h) return r(w);
            if (S) return (h = setTimeout(f, t), i(w));
          }
          return (void 0 === h && (h = setTimeout(f, t)), g);
        }
        var b, v, y, g, h, w, O = 0, M = !1, S = !1, _ = !0;
        if ("function" != typeof e) throw new TypeError(c);
        return (t = a(t) || 0, o(n) && (M = !!n.leading, S = ("maxWait" in n), y = S ? k(a(n.maxWait) || 0, t) : y, _ = ("trailing" in n) ? !!n.trailing : _), m.cancel = l, m.flush = p, m);
      }
      function o(e) {
        var t = "undefined" == typeof e ? "undefined" : u(e);
        return !!e && ("object" == t || "function" == t);
      }
      function i(e) {
        return !!e && "object" == ("undefined" == typeof e ? "undefined" : u(e));
      }
      function r(e) {
        return "symbol" == ("undefined" == typeof e ? "undefined" : u(e)) || i(e) && w.call(e) == f;
      }
      function a(e) {
        if ("number" == typeof e) return e;
        if (r(e)) return s;
        if (o(e)) {
          var t = "function" == typeof e.valueOf ? e.valueOf() : e;
          e = o(t) ? t + "" : t;
        }
        if ("string" != typeof e) return 0 === e ? e : +e;
        e = e.replace(d, "");
        var n = p.test(e);
        return n || m.test(e) ? b(e.slice(2), n ? 2 : 8) : l.test(e) ? s : +e;
      }
      var u = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (e) {
        return typeof e;
      } : function (e) {
        return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
      }, c = "Expected a function", s = NaN, f = "[object Symbol]", d = /^\s+|\s+$/g, l = /^[-+]0x[0-9a-f]+$/i, p = /^0b[01]+$/i, m = /^0o[0-7]+$/i, b = parseInt, v = "object" == ("undefined" == typeof t ? "undefined" : u(t)) && t && t.Object === Object && t, y = "object" == ("undefined" == typeof self ? "undefined" : u(self)) && self && self.Object === Object && self, g = v || y || Function("return this")(), h = Object.prototype, w = h.toString, k = Math.max, x = Math.min, j = function () {
        return g.Date.now();
      };
      e.exports = n;
    }).call(t, (function () {
      return this;
    })());
  }, function (e, t) {
    "use strict";
    function n(e) {
      var t = void 0, o = void 0, i = void 0;
      for (t = 0; t < e.length; t += 1) {
        if ((o = e[t], o.dataset && o.dataset.aos)) return !0;
        if (i = o.children && n(o.children)) return !0;
      }
      return !1;
    }
    function o() {
      return window.MutationObserver || window.WebKitMutationObserver || window.MozMutationObserver;
    }
    function i() {
      return !!o();
    }
    function r(e, t) {
      var n = window.document, i = o(), r = new i(a);
      (u = t, r.observe(n.documentElement, {
        childList: !0,
        subtree: !0,
        removedNodes: !0
      }));
    }
    function a(e) {
      e && e.forEach(function (e) {
        var t = Array.prototype.slice.call(e.addedNodes), o = Array.prototype.slice.call(e.removedNodes), i = t.concat(o);
        if (n(i)) return u();
      });
    }
    Object.defineProperty(t, "__esModule", {
      value: !0
    });
    var u = function () {};
    t.default = {
      isSupported: i,
      ready: r
    };
  }, function (e, t) {
    "use strict";
    function n(e, t) {
      if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
    }
    function o() {
      return navigator.userAgent || navigator.vendor || window.opera || "";
    }
    Object.defineProperty(t, "__esModule", {
      value: !0
    });
    var i = (function () {
      function e(e, t) {
        for (var n = 0; n < t.length; n++) {
          var o = t[n];
          (o.enumerable = o.enumerable || !1, o.configurable = !0, ("value" in o) && (o.writable = !0), Object.defineProperty(e, o.key, o));
        }
      }
      return function (t, n, o) {
        return (n && e(t.prototype, n), o && e(t, o), t);
      };
    })(), r = /(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i, a = /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i, u = /(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i, c = /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i, s = (function () {
      function e() {
        n(this, e);
      }
      return (i(e, [{
        key: "phone",
        value: function () {
          var e = o();
          return !(!r.test(e) && !a.test(e.substr(0, 4)));
        }
      }, {
        key: "mobile",
        value: function () {
          var e = o();
          return !(!u.test(e) && !c.test(e.substr(0, 4)));
        }
      }, {
        key: "tablet",
        value: function () {
          return this.mobile() && !this.phone();
        }
      }]), e);
    })();
    t.default = new s();
  }, function (e, t) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
      value: !0
    });
    var n = function (e, t, n) {
      var o = e.node.getAttribute("data-aos-once");
      t > e.position ? e.node.classList.add("aos-animate") : "undefined" != typeof o && ("false" === o || !n && "true" !== o) && e.node.classList.remove("aos-animate");
    }, o = function (e, t) {
      var o = window.pageYOffset, i = window.innerHeight;
      e.forEach(function (e, r) {
        n(e, i + o, t);
      });
    };
    t.default = o;
  }, function (e, t, n) {
    "use strict";
    function o(e) {
      return e && e.__esModule ? e : {
        default: e
      };
    }
    Object.defineProperty(t, "__esModule", {
      value: !0
    });
    var i = n(12), r = o(i), a = function (e, t) {
      return (e.forEach(function (e, n) {
        (e.node.classList.add("aos-init"), e.position = (0, r.default)(e.node, t.offset));
      }), e);
    };
    t.default = a;
  }, function (e, t, n) {
    "use strict";
    function o(e) {
      return e && e.__esModule ? e : {
        default: e
      };
    }
    Object.defineProperty(t, "__esModule", {
      value: !0
    });
    var i = n(13), r = o(i), a = function (e, t) {
      var n = 0, o = 0, i = window.innerHeight, a = {
        offset: e.getAttribute("data-aos-offset"),
        anchor: e.getAttribute("data-aos-anchor"),
        anchorPlacement: e.getAttribute("data-aos-anchor-placement")
      };
      switch ((a.offset && !isNaN(a.offset) && (o = parseInt(a.offset)), a.anchor && document.querySelectorAll(a.anchor) && (e = document.querySelectorAll(a.anchor)[0]), n = (0, r.default)(e).top, a.anchorPlacement)) {
        case "top-bottom":
          break;
        case "center-bottom":
          n += e.offsetHeight / 2;
          break;
        case "bottom-bottom":
          n += e.offsetHeight;
          break;
        case "top-center":
          n += i / 2;
          break;
        case "bottom-center":
          n += i / 2 + e.offsetHeight;
          break;
        case "center-center":
          n += i / 2 + e.offsetHeight / 2;
          break;
        case "top-top":
          n += i;
          break;
        case "bottom-top":
          n += e.offsetHeight + i;
          break;
        case "center-top":
          n += e.offsetHeight / 2 + i;
      }
      return (a.anchorPlacement || a.offset || isNaN(t) || (o = t), n + o);
    };
    t.default = a;
  }, function (e, t) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
      value: !0
    });
    var n = function (e) {
      for (var t = 0, n = 0; e && !isNaN(e.offsetLeft) && !isNaN(e.offsetTop); ) (t += e.offsetLeft - ("BODY" != e.tagName ? e.scrollLeft : 0), n += e.offsetTop - ("BODY" != e.tagName ? e.scrollTop : 0), e = e.offsetParent);
      return {
        top: n,
        left: t
      };
    };
    t.default = n;
  }, function (e, t) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
      value: !0
    });
    var n = function (e) {
      return (e = e || document.querySelectorAll("[data-aos]"), Array.prototype.map.call(e, function (e) {
        return {
          node: e
        };
      }));
    };
    t.default = n;
  }]);
});

},

// node_modules/aos/dist/aos.css @108
108: function(__fusereq, exports, module){
__fusereq(7)("node_modules/aos/dist/aos.css","[data-aos][data-aos][data-aos-duration=\"50\"],body[data-aos-duration=\"50\"] [data-aos]{transition-duration:50ms}[data-aos][data-aos][data-aos-delay=\"50\"],body[data-aos-delay=\"50\"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay=\"50\"].aos-animate,body[data-aos-delay=\"50\"] [data-aos].aos-animate{transition-delay:50ms}[data-aos][data-aos][data-aos-duration=\"100\"],body[data-aos-duration=\"100\"] [data-aos]{transition-duration:.1s}[data-aos][data-aos][data-aos-delay=\"100\"],body[data-aos-delay=\"100\"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay=\"100\"].aos-animate,body[data-aos-delay=\"100\"] [data-aos].aos-animate{transition-delay:.1s}[data-aos][data-aos][data-aos-duration=\"150\"],body[data-aos-duration=\"150\"] [data-aos]{transition-duration:.15s}[data-aos][data-aos][data-aos-delay=\"150\"],body[data-aos-delay=\"150\"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay=\"150\"].aos-animate,body[data-aos-delay=\"150\"] [data-aos].aos-animate{transition-delay:.15s}[data-aos][data-aos][data-aos-duration=\"200\"],body[data-aos-duration=\"200\"] [data-aos]{transition-duration:.2s}[data-aos][data-aos][data-aos-delay=\"200\"],body[data-aos-delay=\"200\"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay=\"200\"].aos-animate,body[data-aos-delay=\"200\"] [data-aos].aos-animate{transition-delay:.2s}[data-aos][data-aos][data-aos-duration=\"250\"],body[data-aos-duration=\"250\"] [data-aos]{transition-duration:.25s}[data-aos][data-aos][data-aos-delay=\"250\"],body[data-aos-delay=\"250\"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay=\"250\"].aos-animate,body[data-aos-delay=\"250\"] [data-aos].aos-animate{transition-delay:.25s}[data-aos][data-aos][data-aos-duration=\"300\"],body[data-aos-duration=\"300\"] [data-aos]{transition-duration:.3s}[data-aos][data-aos][data-aos-delay=\"300\"],body[data-aos-delay=\"300\"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay=\"300\"].aos-animate,body[data-aos-delay=\"300\"] [data-aos].aos-animate{transition-delay:.3s}[data-aos][data-aos][data-aos-duration=\"350\"],body[data-aos-duration=\"350\"] [data-aos]{transition-duration:.35s}[data-aos][data-aos][data-aos-delay=\"350\"],body[data-aos-delay=\"350\"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay=\"350\"].aos-animate,body[data-aos-delay=\"350\"] [data-aos].aos-animate{transition-delay:.35s}[data-aos][data-aos][data-aos-duration=\"400\"],body[data-aos-duration=\"400\"] [data-aos]{transition-duration:.4s}[data-aos][data-aos][data-aos-delay=\"400\"],body[data-aos-delay=\"400\"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay=\"400\"].aos-animate,body[data-aos-delay=\"400\"] [data-aos].aos-animate{transition-delay:.4s}[data-aos][data-aos][data-aos-duration=\"450\"],body[data-aos-duration=\"450\"] [data-aos]{transition-duration:.45s}[data-aos][data-aos][data-aos-delay=\"450\"],body[data-aos-delay=\"450\"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay=\"450\"].aos-animate,body[data-aos-delay=\"450\"] [data-aos].aos-animate{transition-delay:.45s}[data-aos][data-aos][data-aos-duration=\"500\"],body[data-aos-duration=\"500\"] [data-aos]{transition-duration:.5s}[data-aos][data-aos][data-aos-delay=\"500\"],body[data-aos-delay=\"500\"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay=\"500\"].aos-animate,body[data-aos-delay=\"500\"] [data-aos].aos-animate{transition-delay:.5s}[data-aos][data-aos][data-aos-duration=\"550\"],body[data-aos-duration=\"550\"] [data-aos]{transition-duration:.55s}[data-aos][data-aos][data-aos-delay=\"550\"],body[data-aos-delay=\"550\"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay=\"550\"].aos-animate,body[data-aos-delay=\"550\"] [data-aos].aos-animate{transition-delay:.55s}[data-aos][data-aos][data-aos-duration=\"600\"],body[data-aos-duration=\"600\"] [data-aos]{transition-duration:.6s}[data-aos][data-aos][data-aos-delay=\"600\"],body[data-aos-delay=\"600\"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay=\"600\"].aos-animate,body[data-aos-delay=\"600\"] [data-aos].aos-animate{transition-delay:.6s}[data-aos][data-aos][data-aos-duration=\"650\"],body[data-aos-duration=\"650\"] [data-aos]{transition-duration:.65s}[data-aos][data-aos][data-aos-delay=\"650\"],body[data-aos-delay=\"650\"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay=\"650\"].aos-animate,body[data-aos-delay=\"650\"] [data-aos].aos-animate{transition-delay:.65s}[data-aos][data-aos][data-aos-duration=\"700\"],body[data-aos-duration=\"700\"] [data-aos]{transition-duration:.7s}[data-aos][data-aos][data-aos-delay=\"700\"],body[data-aos-delay=\"700\"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay=\"700\"].aos-animate,body[data-aos-delay=\"700\"] [data-aos].aos-animate{transition-delay:.7s}[data-aos][data-aos][data-aos-duration=\"750\"],body[data-aos-duration=\"750\"] [data-aos]{transition-duration:.75s}[data-aos][data-aos][data-aos-delay=\"750\"],body[data-aos-delay=\"750\"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay=\"750\"].aos-animate,body[data-aos-delay=\"750\"] [data-aos].aos-animate{transition-delay:.75s}[data-aos][data-aos][data-aos-duration=\"800\"],body[data-aos-duration=\"800\"] [data-aos]{transition-duration:.8s}[data-aos][data-aos][data-aos-delay=\"800\"],body[data-aos-delay=\"800\"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay=\"800\"].aos-animate,body[data-aos-delay=\"800\"] [data-aos].aos-animate{transition-delay:.8s}[data-aos][data-aos][data-aos-duration=\"850\"],body[data-aos-duration=\"850\"] [data-aos]{transition-duration:.85s}[data-aos][data-aos][data-aos-delay=\"850\"],body[data-aos-delay=\"850\"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay=\"850\"].aos-animate,body[data-aos-delay=\"850\"] [data-aos].aos-animate{transition-delay:.85s}[data-aos][data-aos][data-aos-duration=\"900\"],body[data-aos-duration=\"900\"] [data-aos]{transition-duration:.9s}[data-aos][data-aos][data-aos-delay=\"900\"],body[data-aos-delay=\"900\"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay=\"900\"].aos-animate,body[data-aos-delay=\"900\"] [data-aos].aos-animate{transition-delay:.9s}[data-aos][data-aos][data-aos-duration=\"950\"],body[data-aos-duration=\"950\"] [data-aos]{transition-duration:.95s}[data-aos][data-aos][data-aos-delay=\"950\"],body[data-aos-delay=\"950\"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay=\"950\"].aos-animate,body[data-aos-delay=\"950\"] [data-aos].aos-animate{transition-delay:.95s}[data-aos][data-aos][data-aos-duration=\"1000\"],body[data-aos-duration=\"1000\"] [data-aos]{transition-duration:1s}[data-aos][data-aos][data-aos-delay=\"1000\"],body[data-aos-delay=\"1000\"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay=\"1000\"].aos-animate,body[data-aos-delay=\"1000\"] [data-aos].aos-animate{transition-delay:1s}[data-aos][data-aos][data-aos-duration=\"1050\"],body[data-aos-duration=\"1050\"] [data-aos]{transition-duration:1.05s}[data-aos][data-aos][data-aos-delay=\"1050\"],body[data-aos-delay=\"1050\"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay=\"1050\"].aos-animate,body[data-aos-delay=\"1050\"] [data-aos].aos-animate{transition-delay:1.05s}[data-aos][data-aos][data-aos-duration=\"1100\"],body[data-aos-duration=\"1100\"] [data-aos]{transition-duration:1.1s}[data-aos][data-aos][data-aos-delay=\"1100\"],body[data-aos-delay=\"1100\"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay=\"1100\"].aos-animate,body[data-aos-delay=\"1100\"] [data-aos].aos-animate{transition-delay:1.1s}[data-aos][data-aos][data-aos-duration=\"1150\"],body[data-aos-duration=\"1150\"] [data-aos]{transition-duration:1.15s}[data-aos][data-aos][data-aos-delay=\"1150\"],body[data-aos-delay=\"1150\"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay=\"1150\"].aos-animate,body[data-aos-delay=\"1150\"] [data-aos].aos-animate{transition-delay:1.15s}[data-aos][data-aos][data-aos-duration=\"1200\"],body[data-aos-duration=\"1200\"] [data-aos]{transition-duration:1.2s}[data-aos][data-aos][data-aos-delay=\"1200\"],body[data-aos-delay=\"1200\"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay=\"1200\"].aos-animate,body[data-aos-delay=\"1200\"] [data-aos].aos-animate{transition-delay:1.2s}[data-aos][data-aos][data-aos-duration=\"1250\"],body[data-aos-duration=\"1250\"] [data-aos]{transition-duration:1.25s}[data-aos][data-aos][data-aos-delay=\"1250\"],body[data-aos-delay=\"1250\"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay=\"1250\"].aos-animate,body[data-aos-delay=\"1250\"] [data-aos].aos-animate{transition-delay:1.25s}[data-aos][data-aos][data-aos-duration=\"1300\"],body[data-aos-duration=\"1300\"] [data-aos]{transition-duration:1.3s}[data-aos][data-aos][data-aos-delay=\"1300\"],body[data-aos-delay=\"1300\"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay=\"1300\"].aos-animate,body[data-aos-delay=\"1300\"] [data-aos].aos-animate{transition-delay:1.3s}[data-aos][data-aos][data-aos-duration=\"1350\"],body[data-aos-duration=\"1350\"] [data-aos]{transition-duration:1.35s}[data-aos][data-aos][data-aos-delay=\"1350\"],body[data-aos-delay=\"1350\"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay=\"1350\"].aos-animate,body[data-aos-delay=\"1350\"] [data-aos].aos-animate{transition-delay:1.35s}[data-aos][data-aos][data-aos-duration=\"1400\"],body[data-aos-duration=\"1400\"] [data-aos]{transition-duration:1.4s}[data-aos][data-aos][data-aos-delay=\"1400\"],body[data-aos-delay=\"1400\"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay=\"1400\"].aos-animate,body[data-aos-delay=\"1400\"] [data-aos].aos-animate{transition-delay:1.4s}[data-aos][data-aos][data-aos-duration=\"1450\"],body[data-aos-duration=\"1450\"] [data-aos]{transition-duration:1.45s}[data-aos][data-aos][data-aos-delay=\"1450\"],body[data-aos-delay=\"1450\"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay=\"1450\"].aos-animate,body[data-aos-delay=\"1450\"] [data-aos].aos-animate{transition-delay:1.45s}[data-aos][data-aos][data-aos-duration=\"1500\"],body[data-aos-duration=\"1500\"] [data-aos]{transition-duration:1.5s}[data-aos][data-aos][data-aos-delay=\"1500\"],body[data-aos-delay=\"1500\"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay=\"1500\"].aos-animate,body[data-aos-delay=\"1500\"] [data-aos].aos-animate{transition-delay:1.5s}[data-aos][data-aos][data-aos-duration=\"1550\"],body[data-aos-duration=\"1550\"] [data-aos]{transition-duration:1.55s}[data-aos][data-aos][data-aos-delay=\"1550\"],body[data-aos-delay=\"1550\"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay=\"1550\"].aos-animate,body[data-aos-delay=\"1550\"] [data-aos].aos-animate{transition-delay:1.55s}[data-aos][data-aos][data-aos-duration=\"1600\"],body[data-aos-duration=\"1600\"] [data-aos]{transition-duration:1.6s}[data-aos][data-aos][data-aos-delay=\"1600\"],body[data-aos-delay=\"1600\"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay=\"1600\"].aos-animate,body[data-aos-delay=\"1600\"] [data-aos].aos-animate{transition-delay:1.6s}[data-aos][data-aos][data-aos-duration=\"1650\"],body[data-aos-duration=\"1650\"] [data-aos]{transition-duration:1.65s}[data-aos][data-aos][data-aos-delay=\"1650\"],body[data-aos-delay=\"1650\"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay=\"1650\"].aos-animate,body[data-aos-delay=\"1650\"] [data-aos].aos-animate{transition-delay:1.65s}[data-aos][data-aos][data-aos-duration=\"1700\"],body[data-aos-duration=\"1700\"] [data-aos]{transition-duration:1.7s}[data-aos][data-aos][data-aos-delay=\"1700\"],body[data-aos-delay=\"1700\"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay=\"1700\"].aos-animate,body[data-aos-delay=\"1700\"] [data-aos].aos-animate{transition-delay:1.7s}[data-aos][data-aos][data-aos-duration=\"1750\"],body[data-aos-duration=\"1750\"] [data-aos]{transition-duration:1.75s}[data-aos][data-aos][data-aos-delay=\"1750\"],body[data-aos-delay=\"1750\"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay=\"1750\"].aos-animate,body[data-aos-delay=\"1750\"] [data-aos].aos-animate{transition-delay:1.75s}[data-aos][data-aos][data-aos-duration=\"1800\"],body[data-aos-duration=\"1800\"] [data-aos]{transition-duration:1.8s}[data-aos][data-aos][data-aos-delay=\"1800\"],body[data-aos-delay=\"1800\"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay=\"1800\"].aos-animate,body[data-aos-delay=\"1800\"] [data-aos].aos-animate{transition-delay:1.8s}[data-aos][data-aos][data-aos-duration=\"1850\"],body[data-aos-duration=\"1850\"] [data-aos]{transition-duration:1.85s}[data-aos][data-aos][data-aos-delay=\"1850\"],body[data-aos-delay=\"1850\"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay=\"1850\"].aos-animate,body[data-aos-delay=\"1850\"] [data-aos].aos-animate{transition-delay:1.85s}[data-aos][data-aos][data-aos-duration=\"1900\"],body[data-aos-duration=\"1900\"] [data-aos]{transition-duration:1.9s}[data-aos][data-aos][data-aos-delay=\"1900\"],body[data-aos-delay=\"1900\"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay=\"1900\"].aos-animate,body[data-aos-delay=\"1900\"] [data-aos].aos-animate{transition-delay:1.9s}[data-aos][data-aos][data-aos-duration=\"1950\"],body[data-aos-duration=\"1950\"] [data-aos]{transition-duration:1.95s}[data-aos][data-aos][data-aos-delay=\"1950\"],body[data-aos-delay=\"1950\"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay=\"1950\"].aos-animate,body[data-aos-delay=\"1950\"] [data-aos].aos-animate{transition-delay:1.95s}[data-aos][data-aos][data-aos-duration=\"2000\"],body[data-aos-duration=\"2000\"] [data-aos]{transition-duration:2s}[data-aos][data-aos][data-aos-delay=\"2000\"],body[data-aos-delay=\"2000\"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay=\"2000\"].aos-animate,body[data-aos-delay=\"2000\"] [data-aos].aos-animate{transition-delay:2s}[data-aos][data-aos][data-aos-duration=\"2050\"],body[data-aos-duration=\"2050\"] [data-aos]{transition-duration:2.05s}[data-aos][data-aos][data-aos-delay=\"2050\"],body[data-aos-delay=\"2050\"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay=\"2050\"].aos-animate,body[data-aos-delay=\"2050\"] [data-aos].aos-animate{transition-delay:2.05s}[data-aos][data-aos][data-aos-duration=\"2100\"],body[data-aos-duration=\"2100\"] [data-aos]{transition-duration:2.1s}[data-aos][data-aos][data-aos-delay=\"2100\"],body[data-aos-delay=\"2100\"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay=\"2100\"].aos-animate,body[data-aos-delay=\"2100\"] [data-aos].aos-animate{transition-delay:2.1s}[data-aos][data-aos][data-aos-duration=\"2150\"],body[data-aos-duration=\"2150\"] [data-aos]{transition-duration:2.15s}[data-aos][data-aos][data-aos-delay=\"2150\"],body[data-aos-delay=\"2150\"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay=\"2150\"].aos-animate,body[data-aos-delay=\"2150\"] [data-aos].aos-animate{transition-delay:2.15s}[data-aos][data-aos][data-aos-duration=\"2200\"],body[data-aos-duration=\"2200\"] [data-aos]{transition-duration:2.2s}[data-aos][data-aos][data-aos-delay=\"2200\"],body[data-aos-delay=\"2200\"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay=\"2200\"].aos-animate,body[data-aos-delay=\"2200\"] [data-aos].aos-animate{transition-delay:2.2s}[data-aos][data-aos][data-aos-duration=\"2250\"],body[data-aos-duration=\"2250\"] [data-aos]{transition-duration:2.25s}[data-aos][data-aos][data-aos-delay=\"2250\"],body[data-aos-delay=\"2250\"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay=\"2250\"].aos-animate,body[data-aos-delay=\"2250\"] [data-aos].aos-animate{transition-delay:2.25s}[data-aos][data-aos][data-aos-duration=\"2300\"],body[data-aos-duration=\"2300\"] [data-aos]{transition-duration:2.3s}[data-aos][data-aos][data-aos-delay=\"2300\"],body[data-aos-delay=\"2300\"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay=\"2300\"].aos-animate,body[data-aos-delay=\"2300\"] [data-aos].aos-animate{transition-delay:2.3s}[data-aos][data-aos][data-aos-duration=\"2350\"],body[data-aos-duration=\"2350\"] [data-aos]{transition-duration:2.35s}[data-aos][data-aos][data-aos-delay=\"2350\"],body[data-aos-delay=\"2350\"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay=\"2350\"].aos-animate,body[data-aos-delay=\"2350\"] [data-aos].aos-animate{transition-delay:2.35s}[data-aos][data-aos][data-aos-duration=\"2400\"],body[data-aos-duration=\"2400\"] [data-aos]{transition-duration:2.4s}[data-aos][data-aos][data-aos-delay=\"2400\"],body[data-aos-delay=\"2400\"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay=\"2400\"].aos-animate,body[data-aos-delay=\"2400\"] [data-aos].aos-animate{transition-delay:2.4s}[data-aos][data-aos][data-aos-duration=\"2450\"],body[data-aos-duration=\"2450\"] [data-aos]{transition-duration:2.45s}[data-aos][data-aos][data-aos-delay=\"2450\"],body[data-aos-delay=\"2450\"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay=\"2450\"].aos-animate,body[data-aos-delay=\"2450\"] [data-aos].aos-animate{transition-delay:2.45s}[data-aos][data-aos][data-aos-duration=\"2500\"],body[data-aos-duration=\"2500\"] [data-aos]{transition-duration:2.5s}[data-aos][data-aos][data-aos-delay=\"2500\"],body[data-aos-delay=\"2500\"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay=\"2500\"].aos-animate,body[data-aos-delay=\"2500\"] [data-aos].aos-animate{transition-delay:2.5s}[data-aos][data-aos][data-aos-duration=\"2550\"],body[data-aos-duration=\"2550\"] [data-aos]{transition-duration:2.55s}[data-aos][data-aos][data-aos-delay=\"2550\"],body[data-aos-delay=\"2550\"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay=\"2550\"].aos-animate,body[data-aos-delay=\"2550\"] [data-aos].aos-animate{transition-delay:2.55s}[data-aos][data-aos][data-aos-duration=\"2600\"],body[data-aos-duration=\"2600\"] [data-aos]{transition-duration:2.6s}[data-aos][data-aos][data-aos-delay=\"2600\"],body[data-aos-delay=\"2600\"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay=\"2600\"].aos-animate,body[data-aos-delay=\"2600\"] [data-aos].aos-animate{transition-delay:2.6s}[data-aos][data-aos][data-aos-duration=\"2650\"],body[data-aos-duration=\"2650\"] [data-aos]{transition-duration:2.65s}[data-aos][data-aos][data-aos-delay=\"2650\"],body[data-aos-delay=\"2650\"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay=\"2650\"].aos-animate,body[data-aos-delay=\"2650\"] [data-aos].aos-animate{transition-delay:2.65s}[data-aos][data-aos][data-aos-duration=\"2700\"],body[data-aos-duration=\"2700\"] [data-aos]{transition-duration:2.7s}[data-aos][data-aos][data-aos-delay=\"2700\"],body[data-aos-delay=\"2700\"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay=\"2700\"].aos-animate,body[data-aos-delay=\"2700\"] [data-aos].aos-animate{transition-delay:2.7s}[data-aos][data-aos][data-aos-duration=\"2750\"],body[data-aos-duration=\"2750\"] [data-aos]{transition-duration:2.75s}[data-aos][data-aos][data-aos-delay=\"2750\"],body[data-aos-delay=\"2750\"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay=\"2750\"].aos-animate,body[data-aos-delay=\"2750\"] [data-aos].aos-animate{transition-delay:2.75s}[data-aos][data-aos][data-aos-duration=\"2800\"],body[data-aos-duration=\"2800\"] [data-aos]{transition-duration:2.8s}[data-aos][data-aos][data-aos-delay=\"2800\"],body[data-aos-delay=\"2800\"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay=\"2800\"].aos-animate,body[data-aos-delay=\"2800\"] [data-aos].aos-animate{transition-delay:2.8s}[data-aos][data-aos][data-aos-duration=\"2850\"],body[data-aos-duration=\"2850\"] [data-aos]{transition-duration:2.85s}[data-aos][data-aos][data-aos-delay=\"2850\"],body[data-aos-delay=\"2850\"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay=\"2850\"].aos-animate,body[data-aos-delay=\"2850\"] [data-aos].aos-animate{transition-delay:2.85s}[data-aos][data-aos][data-aos-duration=\"2900\"],body[data-aos-duration=\"2900\"] [data-aos]{transition-duration:2.9s}[data-aos][data-aos][data-aos-delay=\"2900\"],body[data-aos-delay=\"2900\"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay=\"2900\"].aos-animate,body[data-aos-delay=\"2900\"] [data-aos].aos-animate{transition-delay:2.9s}[data-aos][data-aos][data-aos-duration=\"2950\"],body[data-aos-duration=\"2950\"] [data-aos]{transition-duration:2.95s}[data-aos][data-aos][data-aos-delay=\"2950\"],body[data-aos-delay=\"2950\"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay=\"2950\"].aos-animate,body[data-aos-delay=\"2950\"] [data-aos].aos-animate{transition-delay:2.95s}[data-aos][data-aos][data-aos-duration=\"3000\"],body[data-aos-duration=\"3000\"] [data-aos]{transition-duration:3s}[data-aos][data-aos][data-aos-delay=\"3000\"],body[data-aos-delay=\"3000\"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay=\"3000\"].aos-animate,body[data-aos-delay=\"3000\"] [data-aos].aos-animate{transition-delay:3s}[data-aos][data-aos][data-aos-easing=linear],body[data-aos-easing=linear] [data-aos]{transition-timing-function:cubic-bezier(.25,.25,.75,.75)}[data-aos][data-aos][data-aos-easing=ease],body[data-aos-easing=ease] [data-aos]{transition-timing-function:ease}[data-aos][data-aos][data-aos-easing=ease-in],body[data-aos-easing=ease-in] [data-aos]{transition-timing-function:ease-in}[data-aos][data-aos][data-aos-easing=ease-out],body[data-aos-easing=ease-out] [data-aos]{transition-timing-function:ease-out}[data-aos][data-aos][data-aos-easing=ease-in-out],body[data-aos-easing=ease-in-out] [data-aos]{transition-timing-function:ease-in-out}[data-aos][data-aos][data-aos-easing=ease-in-back],body[data-aos-easing=ease-in-back] [data-aos]{transition-timing-function:cubic-bezier(.6,-.28,.735,.045)}[data-aos][data-aos][data-aos-easing=ease-out-back],body[data-aos-easing=ease-out-back] [data-aos]{transition-timing-function:cubic-bezier(.175,.885,.32,1.275)}[data-aos][data-aos][data-aos-easing=ease-in-out-back],body[data-aos-easing=ease-in-out-back] [data-aos]{transition-timing-function:cubic-bezier(.68,-.55,.265,1.55)}[data-aos][data-aos][data-aos-easing=ease-in-sine],body[data-aos-easing=ease-in-sine] [data-aos]{transition-timing-function:cubic-bezier(.47,0,.745,.715)}[data-aos][data-aos][data-aos-easing=ease-out-sine],body[data-aos-easing=ease-out-sine] [data-aos]{transition-timing-function:cubic-bezier(.39,.575,.565,1)}[data-aos][data-aos][data-aos-easing=ease-in-out-sine],body[data-aos-easing=ease-in-out-sine] [data-aos]{transition-timing-function:cubic-bezier(.445,.05,.55,.95)}[data-aos][data-aos][data-aos-easing=ease-in-quad],body[data-aos-easing=ease-in-quad] [data-aos]{transition-timing-function:cubic-bezier(.55,.085,.68,.53)}[data-aos][data-aos][data-aos-easing=ease-out-quad],body[data-aos-easing=ease-out-quad] [data-aos]{transition-timing-function:cubic-bezier(.25,.46,.45,.94)}[data-aos][data-aos][data-aos-easing=ease-in-out-quad],body[data-aos-easing=ease-in-out-quad] [data-aos]{transition-timing-function:cubic-bezier(.455,.03,.515,.955)}[data-aos][data-aos][data-aos-easing=ease-in-cubic],body[data-aos-easing=ease-in-cubic] [data-aos]{transition-timing-function:cubic-bezier(.55,.085,.68,.53)}[data-aos][data-aos][data-aos-easing=ease-out-cubic],body[data-aos-easing=ease-out-cubic] [data-aos]{transition-timing-function:cubic-bezier(.25,.46,.45,.94)}[data-aos][data-aos][data-aos-easing=ease-in-out-cubic],body[data-aos-easing=ease-in-out-cubic] [data-aos]{transition-timing-function:cubic-bezier(.455,.03,.515,.955)}[data-aos][data-aos][data-aos-easing=ease-in-quart],body[data-aos-easing=ease-in-quart] [data-aos]{transition-timing-function:cubic-bezier(.55,.085,.68,.53)}[data-aos][data-aos][data-aos-easing=ease-out-quart],body[data-aos-easing=ease-out-quart] [data-aos]{transition-timing-function:cubic-bezier(.25,.46,.45,.94)}[data-aos][data-aos][data-aos-easing=ease-in-out-quart],body[data-aos-easing=ease-in-out-quart] [data-aos]{transition-timing-function:cubic-bezier(.455,.03,.515,.955)}[data-aos^=fade][data-aos^=fade]{opacity:0;transition-property:opacity,transform}[data-aos^=fade][data-aos^=fade].aos-animate{opacity:1;transform:translateZ(0)}[data-aos=fade-up]{transform:translate3d(0,100px,0)}[data-aos=fade-down]{transform:translate3d(0,-100px,0)}[data-aos=fade-right]{transform:translate3d(-100px,0,0)}[data-aos=fade-left]{transform:translate3d(100px,0,0)}[data-aos=fade-up-right]{transform:translate3d(-100px,100px,0)}[data-aos=fade-up-left]{transform:translate3d(100px,100px,0)}[data-aos=fade-down-right]{transform:translate3d(-100px,-100px,0)}[data-aos=fade-down-left]{transform:translate3d(100px,-100px,0)}[data-aos^=zoom][data-aos^=zoom]{opacity:0;transition-property:opacity,transform}[data-aos^=zoom][data-aos^=zoom].aos-animate{opacity:1;transform:translateZ(0) scale(1)}[data-aos=zoom-in]{transform:scale(.6)}[data-aos=zoom-in-up]{transform:translate3d(0,100px,0) scale(.6)}[data-aos=zoom-in-down]{transform:translate3d(0,-100px,0) scale(.6)}[data-aos=zoom-in-right]{transform:translate3d(-100px,0,0) scale(.6)}[data-aos=zoom-in-left]{transform:translate3d(100px,0,0) scale(.6)}[data-aos=zoom-out]{transform:scale(1.2)}[data-aos=zoom-out-up]{transform:translate3d(0,100px,0) scale(1.2)}[data-aos=zoom-out-down]{transform:translate3d(0,-100px,0) scale(1.2)}[data-aos=zoom-out-right]{transform:translate3d(-100px,0,0) scale(1.2)}[data-aos=zoom-out-left]{transform:translate3d(100px,0,0) scale(1.2)}[data-aos^=slide][data-aos^=slide]{transition-property:transform}[data-aos^=slide][data-aos^=slide].aos-animate{transform:translateZ(0)}[data-aos=slide-up]{transform:translate3d(0,100%,0)}[data-aos=slide-down]{transform:translate3d(0,-100%,0)}[data-aos=slide-right]{transform:translate3d(-100%,0,0)}[data-aos=slide-left]{transform:translate3d(100%,0,0)}[data-aos^=flip][data-aos^=flip]{backface-visibility:hidden;transition-property:transform}[data-aos=flip-left]{transform:perspective(2500px) rotateY(-100deg)}[data-aos=flip-left].aos-animate{transform:perspective(2500px) rotateY(0)}[data-aos=flip-right]{transform:perspective(2500px) rotateY(100deg)}[data-aos=flip-right].aos-animate{transform:perspective(2500px) rotateY(0)}[data-aos=flip-up]{transform:perspective(2500px) rotateX(-100deg)}[data-aos=flip-up].aos-animate{transform:perspective(2500px) rotateX(0)}[data-aos=flip-down]{transform:perspective(2500px) rotateX(100deg)}[data-aos=flip-down].aos-animate{transform:perspective(2500px) rotateX(0)}")
},

// node_modules/tabler-react/dist/index.es.js @105
105: function(__fusereq, exports, module){
exports.__esModule = true;
var react_1 = __fusereq(3);
var react_1d = __fuse.dt(react_1);
function _typeof(obj) {
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function (obj) {
      return typeof obj;
    };
  } else {
    _typeof = function (obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }
  return _typeof(obj);
}
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if (("value" in descriptor)) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}
function _defineProperty(obj, key, value) {
  if ((key in obj)) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _extends() {
  _extends = Object.assign || (function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  });
  return _extends.apply(this, arguments);
}
function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    var ownKeys = Object.keys(source);
    if (typeof Object.getOwnPropertySymbols === 'function') {
      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
        return Object.getOwnPropertyDescriptor(source, sym).enumerable;
      }));
    }
    ownKeys.forEach(function (key) {
      _defineProperty(target, key, source[key]);
    });
  }
  return target;
}
function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}
function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}
function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || (function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  });
  return _setPrototypeOf(o, p);
}
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _possibleConstructorReturn(self, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized(self);
}
function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
}
function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}
function _iterableToArrayLimit(arr, i) {
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;
  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }
  return _arr;
}
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance");
}
var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof window !== 'undefined' ? window : typeof self !== 'undefined' ? self : {};
function unwrapExports(x) {
  return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}
function createCommonjsModule(fn, module) {
  return (module = {
    exports: {}
  }, fn(module, module.exports), module.exports);
}
var classnames = createCommonjsModule(function (module) {
  (function () {
    var hasOwn = ({}).hasOwnProperty;
    function classNames() {
      var classes = [];
      for (var i = 0; i < arguments.length; i++) {
        var arg = arguments[i];
        if (!arg) continue;
        var argType = typeof arg;
        if (argType === 'string' || argType === 'number') {
          classes.push(arg);
        } else if (Array.isArray(arg) && arg.length) {
          var inner = classNames.apply(null, arg);
          if (inner) {
            classes.push(inner);
          }
        } else if (argType === 'object') {
          for (var key in arg) {
            if (hasOwn.call(arg, key) && arg[key]) {
              classes.push(key);
            }
          }
        }
      }
      return classes.join(' ');
    }
    if (module.exports) {
      classNames.default = classNames;
      module.exports = classNames;
    } else {
      window.classNames = classNames;
    }
  })();
});
function Icon(_ref) {
  var _cn;
  var _ref$prefix = _ref.prefix, prefixFromProps = _ref$prefix === void 0 ? "fe" : _ref$prefix, name = _ref.name, className = _ref.className, link = _ref.link, isAriaHidden = _ref.isAriaHidden, payment = _ref.payment, flag = _ref.flag, thin = _ref.thin, rest = _objectWithoutProperties(_ref, ["prefix", "name", "className", "link", "isAriaHidden", "payment", "flag", "thin"]);
  var prefix = payment && "payment" || flag && "flag" || prefixFromProps;
  var classes = classnames("icon", (_cn = {}, _defineProperty(_cn, prefix, true), _defineProperty(_cn, ("").concat(prefix, "-").concat(name), true), _defineProperty(_cn, "icon-thin", thin), _cn), className);
  var extraProps = isAriaHidden ? {
    "aria-hidden": true
  } : null;
  return !link ? react_1d.default.createElement("i", _extends({
    className: classes
  }, rest)) : react_1d.default.createElement("a", _extends({
    className: "icon"
  }, extraProps, rest), react_1d.default.createElement("i", {
    className: classes
  }));
}
function parseValue(property, value) {
  var _classes;
  if (typeof value === "undefined") {
    return undefined;
  }
  if (typeof value === "number" || typeof value === "string") {
    return ("").concat(property, "-").concat(value);
  }
  var xs = value.xs, sm = value.sm, md = value.md, lg = value.lg, xl = value.xl;
  var classes = (_classes = {}, _defineProperty(_classes, ("").concat(property, "-").concat(xs), xs), _defineProperty(_classes, ("").concat(property, "-sm-").concat(sm), sm), _defineProperty(_classes, ("").concat(property, "-md-").concat(md), md), _defineProperty(_classes, ("").concat(property, "-lg-").concat(lg), lg), _defineProperty(_classes, ("").concat(property, "-xl-").concat(xl), xl), _classes);
  return classes;
}
var utilityBrekapointPropsKeys = ["d", "m", "mt", "mb", "ml", "mr", "mx", "my", "p", "pt", "pb", "pl", "pr", "px", "py"];
var utilityPropsKeys = ["d", "m", "mt", "mb", "ml", "mr", "mx", "my", "p", "pt", "pb", "pl", "pr", "px", "py"];
var getUtilityPropsClasses = function getUtilityPropsClasses(props) {
  var utilityBreakpointPropsClasses = utilityBrekapointPropsKeys.reduce(function (acc, cur) {
    if (typeof props[cur] !== "undefined") {
      acc.push(parseValue(cur, props[cur]));
    }
    return acc;
  }, []);
  var utilityPropsClasses = utilityPropsKeys.reduce(function (acc, cur) {
    if (props[cur]) {
      acc.push(parseValue(cur, props[cur]));
    }
    return acc;
  }, []);
  return utilityBreakpointPropsClasses;
};
var capitalize = function capitalize(str) {
  return String(str).charAt(0).toUpperCase() + String(str).slice(1);
};
var splitProps = function splitProps(props) {
  return Object.keys(props).reduce(function (pre, cur) {
    if (utilityPropsKeys.includes(cur)) {
      pre[0][cur] = props[cur];
    } else {
      pre[1][cur] = props[cur];
    }
    return pre;
  }, [{}, {}]);
};
var makeElement = function makeElement(element) {
  var Component = react_1.forwardRef(function (_ref, ref) {
    var className = _ref.className, classNames = _ref.classNames, _ref$as = _ref.as, as = _ref$as === void 0 ? element : _ref$as, props = _objectWithoutProperties(_ref, ["className", "classNames", "as"]);
    var _splitProps = splitProps(props), _splitProps2 = _slicedToArray(_splitProps, 2), elProps = _splitProps2[0], _props = _splitProps2[1];
    var utilityClasses = getUtilityPropsClasses(elProps);
    var _className = classnames(utilityClasses, classNames, className);
    return react_1d.default.createElement(as || element, _objectSpread({
      className: _className,
      ref: ref
    }, _props));
  });
  Component.displayName = ("ForwardRef(").concat(capitalize(element), ")");
  return Component;
};
var Div = makeElement("div");
var Span = makeElement("span");
var Header = makeElement("header");
var Section = makeElement("section");
var Nav = makeElement("nav");
var Footer = makeElement("footer");
var A = makeElement("a");
var Button = makeElement("button");
var P = makeElement("p");
var Ul = makeElement("ul");
var Li = makeElement("li");
var Ol = makeElement("ol");
var H1 = makeElement("h1");
var H2 = makeElement("h2");
var H3 = makeElement("h3");
var H4 = makeElement("h4");
var H5 = makeElement("h5");
var H6 = makeElement("h6");
var Form = makeElement("form");
var Input = makeElement("input");
var Textarea = makeElement("textarea");
var Select = makeElement("select");
var Option = makeElement("option");
var Fieldset = makeElement("fieldset");
var Label = makeElement("label");
var Iframe = makeElement("iframe");
var Small = makeElement("small");
var Table = makeElement("table");
var Thead = makeElement("thead");
var Tbody = makeElement("tbody");
var Tfoot = makeElement("tfoot");
var Col = makeElement("col");
var Tr = makeElement("tr");
var Td = makeElement("td");
var Th = makeElement("th");
var El = {
  Div: Div,
  Span: Span,
  Header: Header,
  Section: Section,
  Nav: Nav,
  Footer: Footer,
  A: A,
  Button: Button,
  P: P,
  H1: H1,
  H2: H2,
  H3: H3,
  H4: H4,
  H5: H5,
  H6: H6,
  Ul: Ul,
  Li: Li,
  Ol: Ol,
  Form: Form,
  Input: Input,
  Textarea: Textarea,
  Select: Select,
  Option: Option,
  Fieldset: Fieldset,
  Label: Label,
  Iframe: Iframe,
  Small: Small,
  Table: Table,
  Thead: Thead,
  Tbody: Tbody,
  Tfoot: Tfoot,
  Col: Col,
  Tr: Tr,
  Td: Td,
  Th: Th
};
function AvatarList(_ref) {
  var className = _ref.className, children = _ref.children, stacked = _ref.stacked, rest = _objectWithoutProperties(_ref, ["className", "children", "stacked"]);
  var classes = classnames({
    "avatar-list": true,
    "avatar-list-stacked": stacked
  }, className);
  return react_1.createElement(El.Div, _extends({
    className: classes
  }, rest), children);
}
function BadgeAddOn(_ref) {
  var children = _ref.children, className = _ref.className, icon = _ref.icon, color = _ref.color, _ref$as = _ref.as, as = _ref$as === void 0 ? "span" : _ref$as, RootComponent = _ref.RootComponent, rest = _objectWithoutProperties(_ref, ["children", "className", "icon", "color", "as", "RootComponent"]);
  var classes = classnames("badge-addon", _defineProperty({}, ("badge-").concat(color), color), className);
  var childrenForAll = react_1.createElement(react_1.Fragment, null, icon && react_1.createElement(Icon, {
    name: icon
  }), children);
  var Component = RootComponent || as;
  return react_1.createElement(Component, _extends({
    className: classes
  }, rest), childrenForAll);
}
var colors = {
  white: "#ffffff",
  blue: "#467fcf",
  "blue-darkest": "#0e1929",
  "blue-darker": "#1c3353",
  "blue-dark": "#3866a6",
  "blue-light": "#7ea5dd",
  "blue-lighter": "#c8d9f1",
  "blue-lightest": "#edf2fa",
  azure: "#45aaf2",
  "azure-darkest": "#0e2230",
  "azure-darker": "#1c4461",
  "azure-dark": "#3788c2",
  "azure-light": "#7dc4f6",
  "azure-lighter": "#c7e6fb",
  "azure-lightest": "#ecf7fe",
  indigo: "#6574cd",
  "indigo-darkest": "#141729",
  "indigo-darker": "#282e52",
  "indigo-dark": "#515da4",
  "indigo-light": "#939edc",
  "indigo-lighter": "#d1d5f0",
  "indigo-lightest": "#f0f1fa",
  purple: "#a55eea",
  "purple-darkest": "#21132f",
  "purple-darker": "#42265e",
  "purple-dark": "#844bbb",
  "purple-light": "#c08ef0",
  "purple-lighter": "#e4cff9",
  "purple-lightest": "#f6effd",
  pink: "#f66d9b",
  "pink-darkest": "#31161f",
  "pink-darker": "#622c3e",
  "pink-dark": "#c5577c",
  "pink-light": "#f999b9",
  "pink-lighter": "#fcd3e1",
  "pink-lightest": "#fef0f5",
  red: "#e74c3c",
  "red-darkest": "#2e0f0c",
  "red-darker": "#5c1e18",
  "red-dark": "#b93d30",
  "red-light": "#ee8277",
  "red-lighter": "#f8c9c5",
  "red-lightest": "#fdedec",
  orange: "#fd9644",
  "orange-darkest": "#331e0e",
  "orange-darker": "#653c1b",
  "orange-dark": "#ca7836",
  "orange-light": "#feb67c",
  "orange-lighter": "#fee0c7",
  "orange-lightest": "#fff5ec",
  yellow: "#f1c40f",
  "yellow-darkest": "#302703",
  "yellow-darker": "#604e06",
  "yellow-dark": "#c19d0c",
  "yellow-light": "#f5d657",
  "yellow-lighter": "#fbedb7",
  "yellow-lightest": "#fef9e7",
  lime: "#7bd235",
  "lime-darkest": "#192a0b",
  "lime-darker": "#315415",
  "lime-dark": "#62a82a",
  "lime-light": "#a3e072",
  "lime-lighter": "#d7f2c2",
  "lime-lightest": "#f2fbeb",
  green: "#5eba00",
  "green-darkest": "#132500",
  "green-darker": "#264a00",
  "green-dark": "#4b9500",
  "green-light": "#8ecf4d",
  "green-lighter": "#cfeab3",
  "green-lightest": "#eff8e6",
  teal: "#2bcbba",
  "teal-darkest": "#092925",
  "teal-darker": "#11514a",
  "teal-dark": "#22a295",
  "teal-light": "#6bdbcf",
  "teal-lighter": "#bfefea",
  "teal-lightest": "#eafaf8",
  cyan: "#17a2b8",
  "cyan-darkest": "#052025",
  "cyan-darker": "#09414a",
  "cyan-dark": "#128293",
  "cyan-light": "#5dbecd",
  "cyan-lighter": "#b9e3ea",
  "cyan-lightest": "#e8f6f8",
  gray: "#868e96",
  "gray-darkest": "#1b1c1e",
  "gray-darker": "#36393c",
  "gray-light": "#aab0b6",
  "gray-lighter": "#dbdde0",
  "gray-lightest": "#f3f4f5",
  "gray-dark": "#343a40",
  "gray-dark-darkest": "#0a0c0d",
  "gray-dark-darker": "#15171a",
  "gray-dark-dark": "#2a2e33",
  "gray-dark-light": "#717579",
  "gray-dark-lighter": "#c2c4c6",
  "gray-dark-lightest": "#ebebec"
};
var softColors = ["blue-lt", "azure-lt", "indigo-lt", "purple-lt", "pink-lt", "red-lt", "orange-lt", "yellow-lt", "lime-lt", "green-lt", "teal-lt", "cyan-lt", "gray-lt", "dark-lt"];
var Badge = react_1.forwardRef(function (_ref, ref) {
  var _cn;
  var children = _ref.children, className = _ref.className, rounded = _ref.rounded, _ref$color = _ref.color, color = _ref$color === void 0 ? "primary" : _ref$color, avatar = _ref.avatar, remove = _ref.remove, addOn = _ref.addOn, addOnIcon = _ref.addOnIcon, addOnColor = _ref.addOnColor, onRemoveClick = _ref.onRemoveClick, onAddOnClick = _ref.onAddOnClick, RootComponent = _ref.RootComponent, link = _ref.link, href = _ref.href, _ref$as = _ref.as, as = _ref$as === void 0 ? "span" : _ref$as, _ref$textColor = _ref.textColor, textColor = _ref$textColor === void 0 ? "white" : _ref$textColor, pill = _ref.pill, rest = _objectWithoutProperties(_ref, ["children", "className", "rounded", "color", "avatar", "remove", "addOn", "addOnIcon", "addOnColor", "onRemoveClick", "onAddOnClick", "RootComponent", "link", "href", "as", "textColor", "pill"]);
  var _useState = react_1.useState(false), _useState2 = _slicedToArray(_useState, 2), isDeleted = _useState2[0], setIsDeleted = _useState2[1];
  var handleOnRemoveClick = function handleOnRemoveClick() {
    setIsDeleted(true);
  };
  var classes = classnames((_cn = {
    badge: true,
    expanded: true,
    "badge-pill": rounded || pill
  }, _defineProperty(_cn, ("bg-").concat(color), color), _defineProperty(_cn, ("text-").concat(textColor), softColors.includes(color) ? false : textColor), _cn), className);
  if (isDeleted) {
    return null;
  }
  var childrenForAll = react_1d.default.createElement(react_1d.default.Fragment, null, avatar && react_1d.default.createElement("span", {
    className: "Badge-avatar avatar",
    style: {
      backgroundImage: ("url(").concat(avatar, ")")
    }
  }), children, (addOn || addOnIcon) && react_1d.default.createElement(BadgeAddOn, {
    icon: addOnIcon,
    color: addOnColor,
    onClick: onAddOnClick
  }, addOn), remove && onRemoveClick ? react_1d.default.createElement(BadgeAddOn, {
    onClick: onRemoveClick,
    link: true,
    icon: "x"
  }) : remove && react_1d.default.createElement(BadgeAddOn, {
    onClick: handleOnRemoveClick,
    link: true,
    icon: "x"
  }));
  var Component = RootComponent || as;
  return react_1d.default.createElement(Component, _extends({
    className: classes
  }, rest), childrenForAll);
});
var BadgeList = function BadgeList(_ref) {
  var children = _ref.children, className = _ref.className, rest = _objectWithoutProperties(_ref, ["children", "className"]);
  var classes = classnames("Badges", className);
  return react_1d.default.createElement(El.Div, _extends({
    className: classes
  }, rest), children);
};
var CompoundBadge = Badge;
CompoundBadge.AddOn = BadgeAddOn;
CompoundBadge.List = BadgeList;
function Avatar(_ref) {
  var _cn;
  var className = _ref.className, children = _ref.children, imageURL = _ref.imageURL, style = _ref.style, size = _ref.size, status = _ref.status, placeholder = _ref.placeholder, icon = _ref.icon, color = _ref.color, rest = _objectWithoutProperties(_ref, ["className", "children", "imageURL", "style", "size", "status", "placeholder", "icon", "color"]);
  var classes = classnames((_cn = {
    avatar: true
  }, _defineProperty(_cn, ("avatar-").concat(size), !!size), _defineProperty(_cn, ("bg-").concat(color), !!color), _cn), className);
  var _icon = icon || placeholder ? "user" : null;
  return react_1.createElement(El.Span, _extends({
    className: classes,
    style: imageURL ? Object.assign({
      backgroundImage: ("url(").concat(imageURL, ")")
    }, style) : style
  }, rest), _icon && react_1.createElement(Icon, {
    name: _icon
  }), status && react_1.createElement(CompoundBadge, {
    color: status
  }), children);
}
Avatar.List = AvatarList;
var Text = function Text(_ref) {
  var _cn;
  var className = _ref.className, children = _ref.children, RootComponent = _ref.RootComponent, _ref$as = _ref.as, as = _ref$as === void 0 ? El.Div : _ref$as, color = _ref.color, _ref$size = _ref.size, size = _ref$size === void 0 ? "" : _ref$size, wrap = _ref.wrap, muted = _ref.muted, alignFromProps = _ref.align, left = _ref.left, center = _ref.center, right = _ref.right, justify = _ref.justify, transformFromProps = _ref.transform, lowercase = _ref.lowercase, uppercase = _ref.uppercase, capitalize = _ref.capitalize, trackingFromProps = _ref.tracking, trackingTight = _ref.trackingTight, trackingNormal = _ref.trackingNormal, trackingWide = _ref.trackingWide, leadingFromProps = _ref.leading, leadingNone = _ref.leadingNone, leadingTight = _ref.leadingTight, leadingNormal = _ref.leadingNormal, leadingLoose = _ref.leadingLoose, rest = _objectWithoutProperties(_ref, ["className", "children", "RootComponent", "as", "color", "size", "wrap", "muted", "align", "left", "center", "right", "justify", "transform", "lowercase", "uppercase", "capitalize", "tracking", "trackingTight", "trackingNormal", "trackingWide", "leading", "leadingNone", "leadingTight", "leadingNormal", "leadingLoose"]);
  var Component = RootComponent || as;
  var align = alignFromProps || left && "left" || center && "center" || right && "right" || justify && "justify" || "";
  var transform = transformFromProps || lowercase && "lowercase" || uppercase && "uppercase" || capitalize && "capitalize" || "";
  var tracking = trackingFromProps || trackingTight && "tight" || trackingNormal && "normal" || trackingWide && "wide" || "";
  var leading = leadingFromProps || leadingNone && "none" || leadingTight && "tight" || leadingNormal && "normal" || leadingLoose && "loose" || "";
  var classes = classnames((_cn = {}, _defineProperty(_cn, "text-wrap p-lg-6", wrap), _defineProperty(_cn, ("text-").concat(color), color), _defineProperty(_cn, ("").concat(size), size), _defineProperty(_cn, "text-muted", muted), _defineProperty(_cn, ("text-").concat(align), align), _defineProperty(_cn, ("text-").concat(transform), transform), _defineProperty(_cn, ("tracking-").concat(tracking), tracking), _defineProperty(_cn, ("leading-").concat(leading), leading), _cn), className);
  return react_1d.default.createElement(Component, _extends({
    className: classes
  }, rest), children);
};
var TextSmall = function TextSmall(_ref) {
  var children = _ref.children, rest = _objectWithoutProperties(_ref, ["children"]);
  return react_1.createElement(Text, _extends({
    as: "small",
    size: "sm"
  }, rest), children);
};
var CompoundText = Text;
CompoundText.Small = TextSmall;
function Notification(_ref) {
  var avatarURL = _ref.avatarURL, message = _ref.message, time = _ref.time, unread = _ref.unread;
  return react_1.createElement(react_1.Fragment, null, avatarURL && react_1.createElement(Avatar, {
    className: "mr-3 align-self-center",
    imageURL: avatarURL
  }), react_1.createElement("div", null, message, time && react_1.createElement(CompoundText, {
    color: "gray",
    size: "small"
  }, time)));
}
function _objectWithoutPropertiesLoose$1(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
var objectWithoutPropertiesLoose = _objectWithoutPropertiesLoose$1;
var _extends_1 = createCommonjsModule(function (module) {
  function _extends() {
    module.exports = _extends = Object.assign || (function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    });
    return _extends.apply(this, arguments);
  }
  module.exports = _extends;
});
function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  subClass.__proto__ = superClass;
}
var inheritsLoose = _inheritsLoose;
function _assertThisInitialized$1(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
var assertThisInitialized = _assertThisInitialized$1;
function _defineProperty$1(obj, key, value) {
  if ((key in obj)) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
var defineProperty = _defineProperty$1;
var isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined';
var longerTimeoutBrowsers = ['Edge', 'Trident', 'Firefox'];
var timeoutDuration = 0;
for (var i = 0; i < longerTimeoutBrowsers.length; i += 1) {
  if (isBrowser && navigator.userAgent.indexOf(longerTimeoutBrowsers[i]) >= 0) {
    timeoutDuration = 1;
    break;
  }
}
function microtaskDebounce(fn) {
  var called = false;
  return function () {
    if (called) {
      return;
    }
    called = true;
    window.Promise.resolve().then(function () {
      called = false;
      fn();
    });
  };
}
function taskDebounce(fn) {
  var scheduled = false;
  return function () {
    if (!scheduled) {
      scheduled = true;
      setTimeout(function () {
        scheduled = false;
        fn();
      }, timeoutDuration);
    }
  };
}
var supportsMicroTasks = isBrowser && window.Promise;
var debounce = supportsMicroTasks ? microtaskDebounce : taskDebounce;
function isFunction(functionToCheck) {
  var getType = {};
  return functionToCheck && getType.toString.call(functionToCheck) === '[object Function]';
}
function getStyleComputedProperty(element, property) {
  if (element.nodeType !== 1) {
    return [];
  }
  var window = element.ownerDocument.defaultView;
  var css = window.getComputedStyle(element, null);
  return property ? css[property] : css;
}
function getParentNode(element) {
  if (element.nodeName === 'HTML') {
    return element;
  }
  return element.parentNode || element.host;
}
function getScrollParent(element) {
  if (!element) {
    return document.body;
  }
  switch (element.nodeName) {
    case 'HTML':
    case 'BODY':
      return element.ownerDocument.body;
    case '#document':
      return element.body;
  }
  var _getStyleComputedProp = getStyleComputedProperty(element), overflow = _getStyleComputedProp.overflow, overflowX = _getStyleComputedProp.overflowX, overflowY = _getStyleComputedProp.overflowY;
  if ((/(auto|scroll|overlay)/).test(overflow + overflowY + overflowX)) {
    return element;
  }
  return getScrollParent(getParentNode(element));
}
var isIE11 = isBrowser && !!(window.MSInputMethodContext && document.documentMode);
var isIE10 = isBrowser && (/MSIE 10/).test(navigator.userAgent);
function isIE(version) {
  if (version === 11) {
    return isIE11;
  }
  if (version === 10) {
    return isIE10;
  }
  return isIE11 || isIE10;
}
function getOffsetParent(element) {
  if (!element) {
    return document.documentElement;
  }
  var noOffsetParent = isIE(10) ? document.body : null;
  var offsetParent = element.offsetParent || null;
  while (offsetParent === noOffsetParent && element.nextElementSibling) {
    offsetParent = (element = element.nextElementSibling).offsetParent;
  }
  var nodeName = offsetParent && offsetParent.nodeName;
  if (!nodeName || nodeName === 'BODY' || nodeName === 'HTML') {
    return element ? element.ownerDocument.documentElement : document.documentElement;
  }
  if (['TH', 'TD', 'TABLE'].indexOf(offsetParent.nodeName) !== -1 && getStyleComputedProperty(offsetParent, 'position') === 'static') {
    return getOffsetParent(offsetParent);
  }
  return offsetParent;
}
function isOffsetContainer(element) {
  var nodeName = element.nodeName;
  if (nodeName === 'BODY') {
    return false;
  }
  return nodeName === 'HTML' || getOffsetParent(element.firstElementChild) === element;
}
function getRoot(node) {
  if (node.parentNode !== null) {
    return getRoot(node.parentNode);
  }
  return node;
}
function findCommonOffsetParent(element1, element2) {
  if (!element1 || !element1.nodeType || !element2 || !element2.nodeType) {
    return document.documentElement;
  }
  var order = element1.compareDocumentPosition(element2) & Node.DOCUMENT_POSITION_FOLLOWING;
  var start = order ? element1 : element2;
  var end = order ? element2 : element1;
  var range = document.createRange();
  range.setStart(start, 0);
  range.setEnd(end, 0);
  var commonAncestorContainer = range.commonAncestorContainer;
  if (element1 !== commonAncestorContainer && element2 !== commonAncestorContainer || start.contains(end)) {
    if (isOffsetContainer(commonAncestorContainer)) {
      return commonAncestorContainer;
    }
    return getOffsetParent(commonAncestorContainer);
  }
  var element1root = getRoot(element1);
  if (element1root.host) {
    return findCommonOffsetParent(element1root.host, element2);
  } else {
    return findCommonOffsetParent(element1, getRoot(element2).host);
  }
}
function getScroll(element) {
  var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'top';
  var upperSide = side === 'top' ? 'scrollTop' : 'scrollLeft';
  var nodeName = element.nodeName;
  if (nodeName === 'BODY' || nodeName === 'HTML') {
    var html = element.ownerDocument.documentElement;
    var scrollingElement = element.ownerDocument.scrollingElement || html;
    return scrollingElement[upperSide];
  }
  return element[upperSide];
}
function includeScroll(rect, element) {
  var subtract = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  var scrollTop = getScroll(element, 'top');
  var scrollLeft = getScroll(element, 'left');
  var modifier = subtract ? -1 : 1;
  rect.top += scrollTop * modifier;
  rect.bottom += scrollTop * modifier;
  rect.left += scrollLeft * modifier;
  rect.right += scrollLeft * modifier;
  return rect;
}
function getBordersSize(styles, axis) {
  var sideA = axis === 'x' ? 'Left' : 'Top';
  var sideB = sideA === 'Left' ? 'Right' : 'Bottom';
  return parseFloat(styles['border' + sideA + 'Width'], 10) + parseFloat(styles['border' + sideB + 'Width'], 10);
}
function getSize(axis, body, html, computedStyle) {
  return Math.max(body['offset' + axis], body['scroll' + axis], html['client' + axis], html['offset' + axis], html['scroll' + axis], isIE(10) ? parseInt(html['offset' + axis]) + parseInt(computedStyle['margin' + (axis === 'Height' ? 'Top' : 'Left')]) + parseInt(computedStyle['margin' + (axis === 'Height' ? 'Bottom' : 'Right')]) : 0);
}
function getWindowSizes(document) {
  var body = document.body;
  var html = document.documentElement;
  var computedStyle = isIE(10) && getComputedStyle(html);
  return {
    height: getSize('Height', body, html, computedStyle),
    width: getSize('Width', body, html, computedStyle)
  };
}
var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};
var createClass = (function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if (("value" in descriptor)) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }
  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
})();
var defineProperty$1 = function (obj, key, value) {
  if ((key in obj)) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
};
var _extends$1 = Object.assign || (function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];
    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }
  return target;
});
function getClientRect(offsets) {
  return _extends$1({}, offsets, {
    right: offsets.left + offsets.width,
    bottom: offsets.top + offsets.height
  });
}
function getBoundingClientRect(element) {
  var rect = {};
  try {
    if (isIE(10)) {
      rect = element.getBoundingClientRect();
      var scrollTop = getScroll(element, 'top');
      var scrollLeft = getScroll(element, 'left');
      rect.top += scrollTop;
      rect.left += scrollLeft;
      rect.bottom += scrollTop;
      rect.right += scrollLeft;
    } else {
      rect = element.getBoundingClientRect();
    }
  } catch (e) {}
  var result = {
    left: rect.left,
    top: rect.top,
    width: rect.right - rect.left,
    height: rect.bottom - rect.top
  };
  var sizes = element.nodeName === 'HTML' ? getWindowSizes(element.ownerDocument) : {};
  var width = sizes.width || element.clientWidth || result.right - result.left;
  var height = sizes.height || element.clientHeight || result.bottom - result.top;
  var horizScrollbar = element.offsetWidth - width;
  var vertScrollbar = element.offsetHeight - height;
  if (horizScrollbar || vertScrollbar) {
    var styles = getStyleComputedProperty(element);
    horizScrollbar -= getBordersSize(styles, 'x');
    vertScrollbar -= getBordersSize(styles, 'y');
    result.width -= horizScrollbar;
    result.height -= vertScrollbar;
  }
  return getClientRect(result);
}
function getOffsetRectRelativeToArbitraryNode(children, parent) {
  var fixedPosition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  var isIE10 = isIE(10);
  var isHTML = parent.nodeName === 'HTML';
  var childrenRect = getBoundingClientRect(children);
  var parentRect = getBoundingClientRect(parent);
  var scrollParent = getScrollParent(children);
  var styles = getStyleComputedProperty(parent);
  var borderTopWidth = parseFloat(styles.borderTopWidth, 10);
  var borderLeftWidth = parseFloat(styles.borderLeftWidth, 10);
  if (fixedPosition && isHTML) {
    parentRect.top = Math.max(parentRect.top, 0);
    parentRect.left = Math.max(parentRect.left, 0);
  }
  var offsets = getClientRect({
    top: childrenRect.top - parentRect.top - borderTopWidth,
    left: childrenRect.left - parentRect.left - borderLeftWidth,
    width: childrenRect.width,
    height: childrenRect.height
  });
  offsets.marginTop = 0;
  offsets.marginLeft = 0;
  if (!isIE10 && isHTML) {
    var marginTop = parseFloat(styles.marginTop, 10);
    var marginLeft = parseFloat(styles.marginLeft, 10);
    offsets.top -= borderTopWidth - marginTop;
    offsets.bottom -= borderTopWidth - marginTop;
    offsets.left -= borderLeftWidth - marginLeft;
    offsets.right -= borderLeftWidth - marginLeft;
    offsets.marginTop = marginTop;
    offsets.marginLeft = marginLeft;
  }
  if (isIE10 && !fixedPosition ? parent.contains(scrollParent) : parent === scrollParent && scrollParent.nodeName !== 'BODY') {
    offsets = includeScroll(offsets, parent);
  }
  return offsets;
}
function getViewportOffsetRectRelativeToArtbitraryNode(element) {
  var excludeScroll = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  var html = element.ownerDocument.documentElement;
  var relativeOffset = getOffsetRectRelativeToArbitraryNode(element, html);
  var width = Math.max(html.clientWidth, window.innerWidth || 0);
  var height = Math.max(html.clientHeight, window.innerHeight || 0);
  var scrollTop = !excludeScroll ? getScroll(html) : 0;
  var scrollLeft = !excludeScroll ? getScroll(html, 'left') : 0;
  var offset = {
    top: scrollTop - relativeOffset.top + relativeOffset.marginTop,
    left: scrollLeft - relativeOffset.left + relativeOffset.marginLeft,
    width: width,
    height: height
  };
  return getClientRect(offset);
}
function isFixed(element) {
  var nodeName = element.nodeName;
  if (nodeName === 'BODY' || nodeName === 'HTML') {
    return false;
  }
  if (getStyleComputedProperty(element, 'position') === 'fixed') {
    return true;
  }
  var parentNode = getParentNode(element);
  if (!parentNode) {
    return false;
  }
  return isFixed(parentNode);
}
function getFixedPositionOffsetParent(element) {
  if (!element || !element.parentElement || isIE()) {
    return document.documentElement;
  }
  var el = element.parentElement;
  while (el && getStyleComputedProperty(el, 'transform') === 'none') {
    el = el.parentElement;
  }
  return el || document.documentElement;
}
function getBoundaries(popper, reference, padding, boundariesElement) {
  var fixedPosition = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
  var boundaries = {
    top: 0,
    left: 0
  };
  var offsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, reference);
  if (boundariesElement === 'viewport') {
    boundaries = getViewportOffsetRectRelativeToArtbitraryNode(offsetParent, fixedPosition);
  } else {
    var boundariesNode = void 0;
    if (boundariesElement === 'scrollParent') {
      boundariesNode = getScrollParent(getParentNode(reference));
      if (boundariesNode.nodeName === 'BODY') {
        boundariesNode = popper.ownerDocument.documentElement;
      }
    } else if (boundariesElement === 'window') {
      boundariesNode = popper.ownerDocument.documentElement;
    } else {
      boundariesNode = boundariesElement;
    }
    var offsets = getOffsetRectRelativeToArbitraryNode(boundariesNode, offsetParent, fixedPosition);
    if (boundariesNode.nodeName === 'HTML' && !isFixed(offsetParent)) {
      var _getWindowSizes = getWindowSizes(popper.ownerDocument), height = _getWindowSizes.height, width = _getWindowSizes.width;
      boundaries.top += offsets.top - offsets.marginTop;
      boundaries.bottom = height + offsets.top;
      boundaries.left += offsets.left - offsets.marginLeft;
      boundaries.right = width + offsets.left;
    } else {
      boundaries = offsets;
    }
  }
  padding = padding || 0;
  var isPaddingNumber = typeof padding === 'number';
  boundaries.left += isPaddingNumber ? padding : padding.left || 0;
  boundaries.top += isPaddingNumber ? padding : padding.top || 0;
  boundaries.right -= isPaddingNumber ? padding : padding.right || 0;
  boundaries.bottom -= isPaddingNumber ? padding : padding.bottom || 0;
  return boundaries;
}
function getArea(_ref) {
  var width = _ref.width, height = _ref.height;
  return width * height;
}
function computeAutoPlacement(placement, refRect, popper, reference, boundariesElement) {
  var padding = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;
  if (placement.indexOf('auto') === -1) {
    return placement;
  }
  var boundaries = getBoundaries(popper, reference, padding, boundariesElement);
  var rects = {
    top: {
      width: boundaries.width,
      height: refRect.top - boundaries.top
    },
    right: {
      width: boundaries.right - refRect.right,
      height: boundaries.height
    },
    bottom: {
      width: boundaries.width,
      height: boundaries.bottom - refRect.bottom
    },
    left: {
      width: refRect.left - boundaries.left,
      height: boundaries.height
    }
  };
  var sortedAreas = Object.keys(rects).map(function (key) {
    return _extends$1({
      key: key
    }, rects[key], {
      area: getArea(rects[key])
    });
  }).sort(function (a, b) {
    return b.area - a.area;
  });
  var filteredAreas = sortedAreas.filter(function (_ref2) {
    var width = _ref2.width, height = _ref2.height;
    return width >= popper.clientWidth && height >= popper.clientHeight;
  });
  var computedPlacement = filteredAreas.length > 0 ? filteredAreas[0].key : sortedAreas[0].key;
  var variation = placement.split('-')[1];
  return computedPlacement + (variation ? '-' + variation : '');
}
function getReferenceOffsets(state, popper, reference) {
  var fixedPosition = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
  var commonOffsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, reference);
  return getOffsetRectRelativeToArbitraryNode(reference, commonOffsetParent, fixedPosition);
}
function getOuterSizes(element) {
  var window = element.ownerDocument.defaultView;
  var styles = window.getComputedStyle(element);
  var x = parseFloat(styles.marginTop || 0) + parseFloat(styles.marginBottom || 0);
  var y = parseFloat(styles.marginLeft || 0) + parseFloat(styles.marginRight || 0);
  var result = {
    width: element.offsetWidth + y,
    height: element.offsetHeight + x
  };
  return result;
}
function getOppositePlacement(placement) {
  var hash = {
    left: 'right',
    right: 'left',
    bottom: 'top',
    top: 'bottom'
  };
  return placement.replace(/left|right|bottom|top/g, function (matched) {
    return hash[matched];
  });
}
function getPopperOffsets(popper, referenceOffsets, placement) {
  placement = placement.split('-')[0];
  var popperRect = getOuterSizes(popper);
  var popperOffsets = {
    width: popperRect.width,
    height: popperRect.height
  };
  var isHoriz = ['right', 'left'].indexOf(placement) !== -1;
  var mainSide = isHoriz ? 'top' : 'left';
  var secondarySide = isHoriz ? 'left' : 'top';
  var measurement = isHoriz ? 'height' : 'width';
  var secondaryMeasurement = !isHoriz ? 'height' : 'width';
  popperOffsets[mainSide] = referenceOffsets[mainSide] + referenceOffsets[measurement] / 2 - popperRect[measurement] / 2;
  if (placement === secondarySide) {
    popperOffsets[secondarySide] = referenceOffsets[secondarySide] - popperRect[secondaryMeasurement];
  } else {
    popperOffsets[secondarySide] = referenceOffsets[getOppositePlacement(secondarySide)];
  }
  return popperOffsets;
}
function find(arr, check) {
  if (Array.prototype.find) {
    return arr.find(check);
  }
  return arr.filter(check)[0];
}
function findIndex(arr, prop, value) {
  if (Array.prototype.findIndex) {
    return arr.findIndex(function (cur) {
      return cur[prop] === value;
    });
  }
  var match = find(arr, function (obj) {
    return obj[prop] === value;
  });
  return arr.indexOf(match);
}
function runModifiers(modifiers, data, ends) {
  var modifiersToRun = ends === undefined ? modifiers : modifiers.slice(0, findIndex(modifiers, 'name', ends));
  modifiersToRun.forEach(function (modifier) {
    if (modifier['function']) {
      console.warn('`modifier.function` is deprecated, use `modifier.fn`!');
    }
    var fn = modifier['function'] || modifier.fn;
    if (modifier.enabled && isFunction(fn)) {
      data.offsets.popper = getClientRect(data.offsets.popper);
      data.offsets.reference = getClientRect(data.offsets.reference);
      data = fn(data, modifier);
    }
  });
  return data;
}
function update() {
  if (this.state.isDestroyed) {
    return;
  }
  var data = {
    instance: this,
    styles: {},
    arrowStyles: {},
    attributes: {},
    flipped: false,
    offsets: {}
  };
  data.offsets.reference = getReferenceOffsets(this.state, this.popper, this.reference, this.options.positionFixed);
  data.placement = computeAutoPlacement(this.options.placement, data.offsets.reference, this.popper, this.reference, this.options.modifiers.flip.boundariesElement, this.options.modifiers.flip.padding);
  data.originalPlacement = data.placement;
  data.positionFixed = this.options.positionFixed;
  data.offsets.popper = getPopperOffsets(this.popper, data.offsets.reference, data.placement);
  data.offsets.popper.position = this.options.positionFixed ? 'fixed' : 'absolute';
  data = runModifiers(this.modifiers, data);
  if (!this.state.isCreated) {
    this.state.isCreated = true;
    this.options.onCreate(data);
  } else {
    this.options.onUpdate(data);
  }
}
function isModifierEnabled(modifiers, modifierName) {
  return modifiers.some(function (_ref) {
    var name = _ref.name, enabled = _ref.enabled;
    return enabled && name === modifierName;
  });
}
function getSupportedPropertyName(property) {
  var prefixes = [false, 'ms', 'Webkit', 'Moz', 'O'];
  var upperProp = property.charAt(0).toUpperCase() + property.slice(1);
  for (var i = 0; i < prefixes.length; i++) {
    var prefix = prefixes[i];
    var toCheck = prefix ? '' + prefix + upperProp : property;
    if (typeof document.body.style[toCheck] !== 'undefined') {
      return toCheck;
    }
  }
  return null;
}
function destroy() {
  this.state.isDestroyed = true;
  if (isModifierEnabled(this.modifiers, 'applyStyle')) {
    this.popper.removeAttribute('x-placement');
    this.popper.style.position = '';
    this.popper.style.top = '';
    this.popper.style.left = '';
    this.popper.style.right = '';
    this.popper.style.bottom = '';
    this.popper.style.willChange = '';
    this.popper.style[getSupportedPropertyName('transform')] = '';
  }
  this.disableEventListeners();
  if (this.options.removeOnDestroy) {
    this.popper.parentNode.removeChild(this.popper);
  }
  return this;
}
function getWindow(element) {
  var ownerDocument = element.ownerDocument;
  return ownerDocument ? ownerDocument.defaultView : window;
}
function attachToScrollParents(scrollParent, event, callback, scrollParents) {
  var isBody = scrollParent.nodeName === 'BODY';
  var target = isBody ? scrollParent.ownerDocument.defaultView : scrollParent;
  target.addEventListener(event, callback, {
    passive: true
  });
  if (!isBody) {
    attachToScrollParents(getScrollParent(target.parentNode), event, callback, scrollParents);
  }
  scrollParents.push(target);
}
function setupEventListeners(reference, options, state, updateBound) {
  state.updateBound = updateBound;
  getWindow(reference).addEventListener('resize', state.updateBound, {
    passive: true
  });
  var scrollElement = getScrollParent(reference);
  attachToScrollParents(scrollElement, 'scroll', state.updateBound, state.scrollParents);
  state.scrollElement = scrollElement;
  state.eventsEnabled = true;
  return state;
}
function enableEventListeners() {
  if (!this.state.eventsEnabled) {
    this.state = setupEventListeners(this.reference, this.options, this.state, this.scheduleUpdate);
  }
}
function removeEventListeners(reference, state) {
  getWindow(reference).removeEventListener('resize', state.updateBound);
  state.scrollParents.forEach(function (target) {
    target.removeEventListener('scroll', state.updateBound);
  });
  state.updateBound = null;
  state.scrollParents = [];
  state.scrollElement = null;
  state.eventsEnabled = false;
  return state;
}
function disableEventListeners() {
  if (this.state.eventsEnabled) {
    cancelAnimationFrame(this.scheduleUpdate);
    this.state = removeEventListeners(this.reference, this.state);
  }
}
function isNumeric(n) {
  return n !== '' && !isNaN(parseFloat(n)) && isFinite(n);
}
function setStyles(element, styles) {
  Object.keys(styles).forEach(function (prop) {
    var unit = '';
    if (['width', 'height', 'top', 'right', 'bottom', 'left'].indexOf(prop) !== -1 && isNumeric(styles[prop])) {
      unit = 'px';
    }
    element.style[prop] = styles[prop] + unit;
  });
}
function setAttributes(element, attributes) {
  Object.keys(attributes).forEach(function (prop) {
    var value = attributes[prop];
    if (value !== false) {
      element.setAttribute(prop, attributes[prop]);
    } else {
      element.removeAttribute(prop);
    }
  });
}
function applyStyle(data) {
  setStyles(data.instance.popper, data.styles);
  setAttributes(data.instance.popper, data.attributes);
  if (data.arrowElement && Object.keys(data.arrowStyles).length) {
    setStyles(data.arrowElement, data.arrowStyles);
  }
  return data;
}
function applyStyleOnLoad(reference, popper, options, modifierOptions, state) {
  var referenceOffsets = getReferenceOffsets(state, popper, reference, options.positionFixed);
  var placement = computeAutoPlacement(options.placement, referenceOffsets, popper, reference, options.modifiers.flip.boundariesElement, options.modifiers.flip.padding);
  popper.setAttribute('x-placement', placement);
  setStyles(popper, {
    position: options.positionFixed ? 'fixed' : 'absolute'
  });
  return options;
}
function getRoundedOffsets(data, shouldRound) {
  var _data$offsets = data.offsets, popper = _data$offsets.popper, reference = _data$offsets.reference;
  var round = Math.round, floor = Math.floor;
  var noRound = function noRound(v) {
    return v;
  };
  var referenceWidth = round(reference.width);
  var popperWidth = round(popper.width);
  var isVertical = ['left', 'right'].indexOf(data.placement) !== -1;
  var isVariation = data.placement.indexOf('-') !== -1;
  var sameWidthParity = referenceWidth % 2 === popperWidth % 2;
  var bothOddWidth = referenceWidth % 2 === 1 && popperWidth % 2 === 1;
  var horizontalToInteger = !shouldRound ? noRound : isVertical || isVariation || sameWidthParity ? round : floor;
  var verticalToInteger = !shouldRound ? noRound : round;
  return {
    left: horizontalToInteger(bothOddWidth && !isVariation && shouldRound ? popper.left - 1 : popper.left),
    top: verticalToInteger(popper.top),
    bottom: verticalToInteger(popper.bottom),
    right: horizontalToInteger(popper.right)
  };
}
var isFirefox = isBrowser && (/Firefox/i).test(navigator.userAgent);
function computeStyle(data, options) {
  var x = options.x, y = options.y;
  var popper = data.offsets.popper;
  var legacyGpuAccelerationOption = find(data.instance.modifiers, function (modifier) {
    return modifier.name === 'applyStyle';
  }).gpuAcceleration;
  if (legacyGpuAccelerationOption !== undefined) {
    console.warn('WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!');
  }
  var gpuAcceleration = legacyGpuAccelerationOption !== undefined ? legacyGpuAccelerationOption : options.gpuAcceleration;
  var offsetParent = getOffsetParent(data.instance.popper);
  var offsetParentRect = getBoundingClientRect(offsetParent);
  var styles = {
    position: popper.position
  };
  var offsets = getRoundedOffsets(data, window.devicePixelRatio < 2 || !isFirefox);
  var sideA = x === 'bottom' ? 'top' : 'bottom';
  var sideB = y === 'right' ? 'left' : 'right';
  var prefixedProperty = getSupportedPropertyName('transform');
  var left = void 0, top = void 0;
  if (sideA === 'bottom') {
    if (offsetParent.nodeName === 'HTML') {
      top = -offsetParent.clientHeight + offsets.bottom;
    } else {
      top = -offsetParentRect.height + offsets.bottom;
    }
  } else {
    top = offsets.top;
  }
  if (sideB === 'right') {
    if (offsetParent.nodeName === 'HTML') {
      left = -offsetParent.clientWidth + offsets.right;
    } else {
      left = -offsetParentRect.width + offsets.right;
    }
  } else {
    left = offsets.left;
  }
  if (gpuAcceleration && prefixedProperty) {
    styles[prefixedProperty] = 'translate3d(' + left + 'px, ' + top + 'px, 0)';
    styles[sideA] = 0;
    styles[sideB] = 0;
    styles.willChange = 'transform';
  } else {
    var invertTop = sideA === 'bottom' ? -1 : 1;
    var invertLeft = sideB === 'right' ? -1 : 1;
    styles[sideA] = top * invertTop;
    styles[sideB] = left * invertLeft;
    styles.willChange = sideA + ', ' + sideB;
  }
  var attributes = {
    'x-placement': data.placement
  };
  data.attributes = _extends$1({}, attributes, data.attributes);
  data.styles = _extends$1({}, styles, data.styles);
  data.arrowStyles = _extends$1({}, data.offsets.arrow, data.arrowStyles);
  return data;
}
function isModifierRequired(modifiers, requestingName, requestedName) {
  var requesting = find(modifiers, function (_ref) {
    var name = _ref.name;
    return name === requestingName;
  });
  var isRequired = !!requesting && modifiers.some(function (modifier) {
    return modifier.name === requestedName && modifier.enabled && modifier.order < requesting.order;
  });
  if (!isRequired) {
    var _requesting = '`' + requestingName + '`';
    var requested = '`' + requestedName + '`';
    console.warn(requested + ' modifier is required by ' + _requesting + ' modifier in order to work, be sure to include it before ' + _requesting + '!');
  }
  return isRequired;
}
function arrow(data, options) {
  var _data$offsets$arrow;
  if (!isModifierRequired(data.instance.modifiers, 'arrow', 'keepTogether')) {
    return data;
  }
  var arrowElement = options.element;
  if (typeof arrowElement === 'string') {
    arrowElement = data.instance.popper.querySelector(arrowElement);
    if (!arrowElement) {
      return data;
    }
  } else {
    if (!data.instance.popper.contains(arrowElement)) {
      console.warn('WARNING: `arrow.element` must be child of its popper element!');
      return data;
    }
  }
  var placement = data.placement.split('-')[0];
  var _data$offsets = data.offsets, popper = _data$offsets.popper, reference = _data$offsets.reference;
  var isVertical = ['left', 'right'].indexOf(placement) !== -1;
  var len = isVertical ? 'height' : 'width';
  var sideCapitalized = isVertical ? 'Top' : 'Left';
  var side = sideCapitalized.toLowerCase();
  var altSide = isVertical ? 'left' : 'top';
  var opSide = isVertical ? 'bottom' : 'right';
  var arrowElementSize = getOuterSizes(arrowElement)[len];
  if (reference[opSide] - arrowElementSize < popper[side]) {
    data.offsets.popper[side] -= popper[side] - (reference[opSide] - arrowElementSize);
  }
  if (reference[side] + arrowElementSize > popper[opSide]) {
    data.offsets.popper[side] += reference[side] + arrowElementSize - popper[opSide];
  }
  data.offsets.popper = getClientRect(data.offsets.popper);
  var center = reference[side] + reference[len] / 2 - arrowElementSize / 2;
  var css = getStyleComputedProperty(data.instance.popper);
  var popperMarginSide = parseFloat(css['margin' + sideCapitalized], 10);
  var popperBorderSide = parseFloat(css['border' + sideCapitalized + 'Width'], 10);
  var sideValue = center - data.offsets.popper[side] - popperMarginSide - popperBorderSide;
  sideValue = Math.max(Math.min(popper[len] - arrowElementSize, sideValue), 0);
  data.arrowElement = arrowElement;
  data.offsets.arrow = (_data$offsets$arrow = {}, defineProperty$1(_data$offsets$arrow, side, Math.round(sideValue)), defineProperty$1(_data$offsets$arrow, altSide, ''), _data$offsets$arrow);
  return data;
}
function getOppositeVariation(variation) {
  if (variation === 'end') {
    return 'start';
  } else if (variation === 'start') {
    return 'end';
  }
  return variation;
}
var placements = ['auto-start', 'auto', 'auto-end', 'top-start', 'top', 'top-end', 'right-start', 'right', 'right-end', 'bottom-end', 'bottom', 'bottom-start', 'left-end', 'left', 'left-start'];
var validPlacements = placements.slice(3);
function clockwise(placement) {
  var counter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  var index = validPlacements.indexOf(placement);
  var arr = validPlacements.slice(index + 1).concat(validPlacements.slice(0, index));
  return counter ? arr.reverse() : arr;
}
var BEHAVIORS = {
  FLIP: 'flip',
  CLOCKWISE: 'clockwise',
  COUNTERCLOCKWISE: 'counterclockwise'
};
function flip(data, options) {
  if (isModifierEnabled(data.instance.modifiers, 'inner')) {
    return data;
  }
  if (data.flipped && data.placement === data.originalPlacement) {
    return data;
  }
  var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, options.boundariesElement, data.positionFixed);
  var placement = data.placement.split('-')[0];
  var placementOpposite = getOppositePlacement(placement);
  var variation = data.placement.split('-')[1] || '';
  var flipOrder = [];
  switch (options.behavior) {
    case BEHAVIORS.FLIP:
      flipOrder = [placement, placementOpposite];
      break;
    case BEHAVIORS.CLOCKWISE:
      flipOrder = clockwise(placement);
      break;
    case BEHAVIORS.COUNTERCLOCKWISE:
      flipOrder = clockwise(placement, true);
      break;
    default:
      flipOrder = options.behavior;
  }
  flipOrder.forEach(function (step, index) {
    if (placement !== step || flipOrder.length === index + 1) {
      return data;
    }
    placement = data.placement.split('-')[0];
    placementOpposite = getOppositePlacement(placement);
    var popperOffsets = data.offsets.popper;
    var refOffsets = data.offsets.reference;
    var floor = Math.floor;
    var overlapsRef = placement === 'left' && floor(popperOffsets.right) > floor(refOffsets.left) || placement === 'right' && floor(popperOffsets.left) < floor(refOffsets.right) || placement === 'top' && floor(popperOffsets.bottom) > floor(refOffsets.top) || placement === 'bottom' && floor(popperOffsets.top) < floor(refOffsets.bottom);
    var overflowsLeft = floor(popperOffsets.left) < floor(boundaries.left);
    var overflowsRight = floor(popperOffsets.right) > floor(boundaries.right);
    var overflowsTop = floor(popperOffsets.top) < floor(boundaries.top);
    var overflowsBottom = floor(popperOffsets.bottom) > floor(boundaries.bottom);
    var overflowsBoundaries = placement === 'left' && overflowsLeft || placement === 'right' && overflowsRight || placement === 'top' && overflowsTop || placement === 'bottom' && overflowsBottom;
    var isVertical = ['top', 'bottom'].indexOf(placement) !== -1;
    var flippedVariationByRef = !!options.flipVariations && (isVertical && variation === 'start' && overflowsLeft || isVertical && variation === 'end' && overflowsRight || !isVertical && variation === 'start' && overflowsTop || !isVertical && variation === 'end' && overflowsBottom);
    var flippedVariationByContent = !!options.flipVariationsByContent && (isVertical && variation === 'start' && overflowsRight || isVertical && variation === 'end' && overflowsLeft || !isVertical && variation === 'start' && overflowsBottom || !isVertical && variation === 'end' && overflowsTop);
    var flippedVariation = flippedVariationByRef || flippedVariationByContent;
    if (overlapsRef || overflowsBoundaries || flippedVariation) {
      data.flipped = true;
      if (overlapsRef || overflowsBoundaries) {
        placement = flipOrder[index + 1];
      }
      if (flippedVariation) {
        variation = getOppositeVariation(variation);
      }
      data.placement = placement + (variation ? '-' + variation : '');
      data.offsets.popper = _extends$1({}, data.offsets.popper, getPopperOffsets(data.instance.popper, data.offsets.reference, data.placement));
      data = runModifiers(data.instance.modifiers, data, 'flip');
    }
  });
  return data;
}
function keepTogether(data) {
  var _data$offsets = data.offsets, popper = _data$offsets.popper, reference = _data$offsets.reference;
  var placement = data.placement.split('-')[0];
  var floor = Math.floor;
  var isVertical = ['top', 'bottom'].indexOf(placement) !== -1;
  var side = isVertical ? 'right' : 'bottom';
  var opSide = isVertical ? 'left' : 'top';
  var measurement = isVertical ? 'width' : 'height';
  if (popper[side] < floor(reference[opSide])) {
    data.offsets.popper[opSide] = floor(reference[opSide]) - popper[measurement];
  }
  if (popper[opSide] > floor(reference[side])) {
    data.offsets.popper[opSide] = floor(reference[side]);
  }
  return data;
}
function toValue(str, measurement, popperOffsets, referenceOffsets) {
  var split = str.match(/((?:\-|\+)?\d*\.?\d*)(.*)/);
  var value = +split[1];
  var unit = split[2];
  if (!value) {
    return str;
  }
  if (unit.indexOf('%') === 0) {
    var element = void 0;
    switch (unit) {
      case '%p':
        element = popperOffsets;
        break;
      case '%':
      case '%r':
      default:
        element = referenceOffsets;
    }
    var rect = getClientRect(element);
    return rect[measurement] / 100 * value;
  } else if (unit === 'vh' || unit === 'vw') {
    var size = void 0;
    if (unit === 'vh') {
      size = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);
    } else {
      size = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);
    }
    return size / 100 * value;
  } else {
    return value;
  }
}
function parseOffset(offset, popperOffsets, referenceOffsets, basePlacement) {
  var offsets = [0, 0];
  var useHeight = ['right', 'left'].indexOf(basePlacement) !== -1;
  var fragments = offset.split(/(\+|\-)/).map(function (frag) {
    return frag.trim();
  });
  var divider = fragments.indexOf(find(fragments, function (frag) {
    return frag.search(/,|\s/) !== -1;
  }));
  if (fragments[divider] && fragments[divider].indexOf(',') === -1) {
    console.warn('Offsets separated by white space(s) are deprecated, use a comma (,) instead.');
  }
  var splitRegex = /\s*,\s*|\s+/;
  var ops = divider !== -1 ? [fragments.slice(0, divider).concat([fragments[divider].split(splitRegex)[0]]), [fragments[divider].split(splitRegex)[1]].concat(fragments.slice(divider + 1))] : [fragments];
  ops = ops.map(function (op, index) {
    var measurement = (index === 1 ? !useHeight : useHeight) ? 'height' : 'width';
    var mergeWithPrevious = false;
    return op.reduce(function (a, b) {
      if (a[a.length - 1] === '' && ['+', '-'].indexOf(b) !== -1) {
        a[a.length - 1] = b;
        mergeWithPrevious = true;
        return a;
      } else if (mergeWithPrevious) {
        a[a.length - 1] += b;
        mergeWithPrevious = false;
        return a;
      } else {
        return a.concat(b);
      }
    }, []).map(function (str) {
      return toValue(str, measurement, popperOffsets, referenceOffsets);
    });
  });
  ops.forEach(function (op, index) {
    op.forEach(function (frag, index2) {
      if (isNumeric(frag)) {
        offsets[index] += frag * (op[index2 - 1] === '-' ? -1 : 1);
      }
    });
  });
  return offsets;
}
function offset(data, _ref) {
  var offset = _ref.offset;
  var placement = data.placement, _data$offsets = data.offsets, popper = _data$offsets.popper, reference = _data$offsets.reference;
  var basePlacement = placement.split('-')[0];
  var offsets = void 0;
  if (isNumeric(+offset)) {
    offsets = [+offset, 0];
  } else {
    offsets = parseOffset(offset, popper, reference, basePlacement);
  }
  if (basePlacement === 'left') {
    popper.top += offsets[0];
    popper.left -= offsets[1];
  } else if (basePlacement === 'right') {
    popper.top += offsets[0];
    popper.left += offsets[1];
  } else if (basePlacement === 'top') {
    popper.left += offsets[0];
    popper.top -= offsets[1];
  } else if (basePlacement === 'bottom') {
    popper.left += offsets[0];
    popper.top += offsets[1];
  }
  data.popper = popper;
  return data;
}
function preventOverflow(data, options) {
  var boundariesElement = options.boundariesElement || getOffsetParent(data.instance.popper);
  if (data.instance.reference === boundariesElement) {
    boundariesElement = getOffsetParent(boundariesElement);
  }
  var transformProp = getSupportedPropertyName('transform');
  var popperStyles = data.instance.popper.style;
  var top = popperStyles.top, left = popperStyles.left, transform = popperStyles[transformProp];
  popperStyles.top = '';
  popperStyles.left = '';
  popperStyles[transformProp] = '';
  var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, boundariesElement, data.positionFixed);
  popperStyles.top = top;
  popperStyles.left = left;
  popperStyles[transformProp] = transform;
  options.boundaries = boundaries;
  var order = options.priority;
  var popper = data.offsets.popper;
  var check = {
    primary: function primary(placement) {
      var value = popper[placement];
      if (popper[placement] < boundaries[placement] && !options.escapeWithReference) {
        value = Math.max(popper[placement], boundaries[placement]);
      }
      return defineProperty$1({}, placement, value);
    },
    secondary: function secondary(placement) {
      var mainSide = placement === 'right' ? 'left' : 'top';
      var value = popper[mainSide];
      if (popper[placement] > boundaries[placement] && !options.escapeWithReference) {
        value = Math.min(popper[mainSide], boundaries[placement] - (placement === 'right' ? popper.width : popper.height));
      }
      return defineProperty$1({}, mainSide, value);
    }
  };
  order.forEach(function (placement) {
    var side = ['left', 'top'].indexOf(placement) !== -1 ? 'primary' : 'secondary';
    popper = _extends$1({}, popper, check[side](placement));
  });
  data.offsets.popper = popper;
  return data;
}
function shift(data) {
  var placement = data.placement;
  var basePlacement = placement.split('-')[0];
  var shiftvariation = placement.split('-')[1];
  if (shiftvariation) {
    var _data$offsets = data.offsets, reference = _data$offsets.reference, popper = _data$offsets.popper;
    var isVertical = ['bottom', 'top'].indexOf(basePlacement) !== -1;
    var side = isVertical ? 'left' : 'top';
    var measurement = isVertical ? 'width' : 'height';
    var shiftOffsets = {
      start: defineProperty$1({}, side, reference[side]),
      end: defineProperty$1({}, side, reference[side] + reference[measurement] - popper[measurement])
    };
    data.offsets.popper = _extends$1({}, popper, shiftOffsets[shiftvariation]);
  }
  return data;
}
function hide(data) {
  if (!isModifierRequired(data.instance.modifiers, 'hide', 'preventOverflow')) {
    return data;
  }
  var refRect = data.offsets.reference;
  var bound = find(data.instance.modifiers, function (modifier) {
    return modifier.name === 'preventOverflow';
  }).boundaries;
  if (refRect.bottom < bound.top || refRect.left > bound.right || refRect.top > bound.bottom || refRect.right < bound.left) {
    if (data.hide === true) {
      return data;
    }
    data.hide = true;
    data.attributes['x-out-of-boundaries'] = '';
  } else {
    if (data.hide === false) {
      return data;
    }
    data.hide = false;
    data.attributes['x-out-of-boundaries'] = false;
  }
  return data;
}
function inner(data) {
  var placement = data.placement;
  var basePlacement = placement.split('-')[0];
  var _data$offsets = data.offsets, popper = _data$offsets.popper, reference = _data$offsets.reference;
  var isHoriz = ['left', 'right'].indexOf(basePlacement) !== -1;
  var subtractLength = ['top', 'left'].indexOf(basePlacement) === -1;
  popper[isHoriz ? 'left' : 'top'] = reference[basePlacement] - (subtractLength ? popper[isHoriz ? 'width' : 'height'] : 0);
  data.placement = getOppositePlacement(placement);
  data.offsets.popper = getClientRect(popper);
  return data;
}
var modifiers = {
  shift: {
    order: 100,
    enabled: true,
    fn: shift
  },
  offset: {
    order: 200,
    enabled: true,
    fn: offset,
    offset: 0
  },
  preventOverflow: {
    order: 300,
    enabled: true,
    fn: preventOverflow,
    priority: ['left', 'right', 'top', 'bottom'],
    padding: 5,
    boundariesElement: 'scrollParent'
  },
  keepTogether: {
    order: 400,
    enabled: true,
    fn: keepTogether
  },
  arrow: {
    order: 500,
    enabled: true,
    fn: arrow,
    element: '[x-arrow]'
  },
  flip: {
    order: 600,
    enabled: true,
    fn: flip,
    behavior: 'flip',
    padding: 5,
    boundariesElement: 'viewport',
    flipVariations: false,
    flipVariationsByContent: false
  },
  inner: {
    order: 700,
    enabled: false,
    fn: inner
  },
  hide: {
    order: 800,
    enabled: true,
    fn: hide
  },
  computeStyle: {
    order: 850,
    enabled: true,
    fn: computeStyle,
    gpuAcceleration: true,
    x: 'bottom',
    y: 'right'
  },
  applyStyle: {
    order: 900,
    enabled: true,
    fn: applyStyle,
    onLoad: applyStyleOnLoad,
    gpuAcceleration: undefined
  }
};
var Defaults = {
  placement: 'bottom',
  positionFixed: false,
  eventsEnabled: true,
  removeOnDestroy: false,
  onCreate: function onCreate() {},
  onUpdate: function onUpdate() {},
  modifiers: modifiers
};
var Popper = (function () {
  function Popper(reference, popper) {
    var _this = this;
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    classCallCheck(this, Popper);
    this.scheduleUpdate = function () {
      return requestAnimationFrame(_this.update);
    };
    this.update = debounce(this.update.bind(this));
    this.options = _extends$1({}, Popper.Defaults, options);
    this.state = {
      isDestroyed: false,
      isCreated: false,
      scrollParents: []
    };
    this.reference = reference && reference.jquery ? reference[0] : reference;
    this.popper = popper && popper.jquery ? popper[0] : popper;
    this.options.modifiers = {};
    Object.keys(_extends$1({}, Popper.Defaults.modifiers, options.modifiers)).forEach(function (name) {
      _this.options.modifiers[name] = _extends$1({}, Popper.Defaults.modifiers[name] || ({}), options.modifiers ? options.modifiers[name] : {});
    });
    this.modifiers = Object.keys(this.options.modifiers).map(function (name) {
      return _extends$1({
        name: name
      }, _this.options.modifiers[name]);
    }).sort(function (a, b) {
      return a.order - b.order;
    });
    this.modifiers.forEach(function (modifierOptions) {
      if (modifierOptions.enabled && isFunction(modifierOptions.onLoad)) {
        modifierOptions.onLoad(_this.reference, _this.popper, _this.options, modifierOptions, _this.state);
      }
    });
    this.update();
    var eventsEnabled = this.options.eventsEnabled;
    if (eventsEnabled) {
      this.enableEventListeners();
    }
    this.state.eventsEnabled = eventsEnabled;
  }
  createClass(Popper, [{
    key: 'update',
    value: function update$$1() {
      return update.call(this);
    }
  }, {
    key: 'destroy',
    value: function destroy$$1() {
      return destroy.call(this);
    }
  }, {
    key: 'enableEventListeners',
    value: function enableEventListeners$$1() {
      return enableEventListeners.call(this);
    }
  }, {
    key: 'disableEventListeners',
    value: function disableEventListeners$$1() {
      return disableEventListeners.call(this);
    }
  }]);
  return Popper;
})();
Popper.Utils = (typeof window !== 'undefined' ? window : window).PopperUtils;
Popper.placements = placements;
Popper.Defaults = Defaults;
var reactIs_production_min = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, "__esModule", {
    value: !0
  });
  var b = "function" === typeof Symbol && Symbol.for, c = b ? Symbol.for("react.element") : 60103, d = b ? Symbol.for("react.portal") : 60106, e = b ? Symbol.for("react.fragment") : 60107, f = b ? Symbol.for("react.strict_mode") : 60108, g = b ? Symbol.for("react.profiler") : 60114, h = b ? Symbol.for("react.provider") : 60109, k = b ? Symbol.for("react.context") : 60110, l = b ? Symbol.for("react.async_mode") : 60111, m = b ? Symbol.for("react.concurrent_mode") : 60111, n = b ? Symbol.for("react.forward_ref") : 60112, p = b ? Symbol.for("react.suspense") : 60113, q = b ? Symbol.for("react.memo") : 60115, r = b ? Symbol.for("react.lazy") : 60116;
  function t(a) {
    if ("object" === typeof a && null !== a) {
      var u = a.$$typeof;
      switch (u) {
        case c:
          switch ((a = a.type, a)) {
            case l:
            case m:
            case e:
            case g:
            case f:
            case p:
              return a;
            default:
              switch ((a = a && a.$$typeof, a)) {
                case k:
                case n:
                case h:
                  return a;
                default:
                  return u;
              }
          }
        case r:
        case q:
        case d:
          return u;
      }
    }
  }
  function v(a) {
    return t(a) === m;
  }
  exports.typeOf = t;
  exports.AsyncMode = l;
  exports.ConcurrentMode = m;
  exports.ContextConsumer = k;
  exports.ContextProvider = h;
  exports.Element = c;
  exports.ForwardRef = n;
  exports.Fragment = e;
  exports.Lazy = r;
  exports.Memo = q;
  exports.Portal = d;
  exports.Profiler = g;
  exports.StrictMode = f;
  exports.Suspense = p;
  exports.isValidElementType = function (a) {
    return "string" === typeof a || "function" === typeof a || a === e || a === m || a === g || a === f || a === p || "object" === typeof a && null !== a && (a.$$typeof === r || a.$$typeof === q || a.$$typeof === h || a.$$typeof === k || a.$$typeof === n);
  };
  exports.isAsyncMode = function (a) {
    return v(a) || t(a) === l;
  };
  exports.isConcurrentMode = v;
  exports.isContextConsumer = function (a) {
    return t(a) === k;
  };
  exports.isContextProvider = function (a) {
    return t(a) === h;
  };
  exports.isElement = function (a) {
    return "object" === typeof a && null !== a && a.$$typeof === c;
  };
  exports.isForwardRef = function (a) {
    return t(a) === n;
  };
  exports.isFragment = function (a) {
    return t(a) === e;
  };
  exports.isLazy = function (a) {
    return t(a) === r;
  };
  exports.isMemo = function (a) {
    return t(a) === q;
  };
  exports.isPortal = function (a) {
    return t(a) === d;
  };
  exports.isProfiler = function (a) {
    return t(a) === g;
  };
  exports.isStrictMode = function (a) {
    return t(a) === f;
  };
  exports.isSuspense = function (a) {
    return t(a) === p;
  };
});
unwrapExports(reactIs_production_min);
var reactIs_production_min_1 = reactIs_production_min.typeOf;
var reactIs_production_min_2 = reactIs_production_min.AsyncMode;
var reactIs_production_min_3 = reactIs_production_min.ConcurrentMode;
var reactIs_production_min_4 = reactIs_production_min.ContextConsumer;
var reactIs_production_min_5 = reactIs_production_min.ContextProvider;
var reactIs_production_min_6 = reactIs_production_min.Element;
var reactIs_production_min_7 = reactIs_production_min.ForwardRef;
var reactIs_production_min_8 = reactIs_production_min.Fragment;
var reactIs_production_min_9 = reactIs_production_min.Lazy;
var reactIs_production_min_10 = reactIs_production_min.Memo;
var reactIs_production_min_11 = reactIs_production_min.Portal;
var reactIs_production_min_12 = reactIs_production_min.Profiler;
var reactIs_production_min_13 = reactIs_production_min.StrictMode;
var reactIs_production_min_14 = reactIs_production_min.Suspense;
var reactIs_production_min_15 = reactIs_production_min.isValidElementType;
var reactIs_production_min_16 = reactIs_production_min.isAsyncMode;
var reactIs_production_min_17 = reactIs_production_min.isConcurrentMode;
var reactIs_production_min_18 = reactIs_production_min.isContextConsumer;
var reactIs_production_min_19 = reactIs_production_min.isContextProvider;
var reactIs_production_min_20 = reactIs_production_min.isElement;
var reactIs_production_min_21 = reactIs_production_min.isForwardRef;
var reactIs_production_min_22 = reactIs_production_min.isFragment;
var reactIs_production_min_23 = reactIs_production_min.isLazy;
var reactIs_production_min_24 = reactIs_production_min.isMemo;
var reactIs_production_min_25 = reactIs_production_min.isPortal;
var reactIs_production_min_26 = reactIs_production_min.isProfiler;
var reactIs_production_min_27 = reactIs_production_min.isStrictMode;
var reactIs_production_min_28 = reactIs_production_min.isSuspense;
var reactIs_development = createCommonjsModule(function (module, exports) {
  (function () {
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    var hasSymbol = typeof Symbol === 'function' && Symbol.for;
    var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
    var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
    var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
    var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
    var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
    var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
    var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace;
    var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;
    var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
    var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
    var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
    var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
    var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
    function isValidElementType(type) {
      return typeof type === 'string' || typeof type === 'function' || type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE);
    }
    var lowPriorityWarning = function () {};
    {
      var printWarning = function (format) {
        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }
        var argIndex = 0;
        var message = 'Warning: ' + format.replace(/%s/g, function () {
          return args[argIndex++];
        });
        if (typeof console !== 'undefined') {
          console.warn(message);
        }
        try {
          throw new Error(message);
        } catch (x) {}
      };
      lowPriorityWarning = function (condition, format) {
        if (format === undefined) {
          throw new Error('`lowPriorityWarning(condition, format, ...args)` requires a warning ' + 'message argument');
        }
        if (!condition) {
          for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
            args[_key2 - 2] = arguments[_key2];
          }
          printWarning.apply(undefined, [format].concat(args));
        }
      };
    }
    var lowPriorityWarning$1 = lowPriorityWarning;
    function typeOf(object) {
      if (typeof object === 'object' && object !== null) {
        var $$typeof = object.$$typeof;
        switch ($$typeof) {
          case REACT_ELEMENT_TYPE:
            var type = object.type;
            switch (type) {
              case REACT_ASYNC_MODE_TYPE:
              case REACT_CONCURRENT_MODE_TYPE:
              case REACT_FRAGMENT_TYPE:
              case REACT_PROFILER_TYPE:
              case REACT_STRICT_MODE_TYPE:
              case REACT_SUSPENSE_TYPE:
                return type;
              default:
                var $$typeofType = type && type.$$typeof;
                switch ($$typeofType) {
                  case REACT_CONTEXT_TYPE:
                  case REACT_FORWARD_REF_TYPE:
                  case REACT_PROVIDER_TYPE:
                    return $$typeofType;
                  default:
                    return $$typeof;
                }
            }
          case REACT_LAZY_TYPE:
          case REACT_MEMO_TYPE:
          case REACT_PORTAL_TYPE:
            return $$typeof;
        }
      }
      return undefined;
    }
    var AsyncMode = REACT_ASYNC_MODE_TYPE;
    var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
    var ContextConsumer = REACT_CONTEXT_TYPE;
    var ContextProvider = REACT_PROVIDER_TYPE;
    var Element = REACT_ELEMENT_TYPE;
    var ForwardRef = REACT_FORWARD_REF_TYPE;
    var Fragment = REACT_FRAGMENT_TYPE;
    var Lazy = REACT_LAZY_TYPE;
    var Memo = REACT_MEMO_TYPE;
    var Portal = REACT_PORTAL_TYPE;
    var Profiler = REACT_PROFILER_TYPE;
    var StrictMode = REACT_STRICT_MODE_TYPE;
    var Suspense = REACT_SUSPENSE_TYPE;
    var hasWarnedAboutDeprecatedIsAsyncMode = false;
    function isAsyncMode(object) {
      {
        if (!hasWarnedAboutDeprecatedIsAsyncMode) {
          hasWarnedAboutDeprecatedIsAsyncMode = true;
          lowPriorityWarning$1(false, 'The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');
        }
      }
      return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
    }
    function isConcurrentMode(object) {
      return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
    }
    function isContextConsumer(object) {
      return typeOf(object) === REACT_CONTEXT_TYPE;
    }
    function isContextProvider(object) {
      return typeOf(object) === REACT_PROVIDER_TYPE;
    }
    function isElement(object) {
      return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
    }
    function isForwardRef(object) {
      return typeOf(object) === REACT_FORWARD_REF_TYPE;
    }
    function isFragment(object) {
      return typeOf(object) === REACT_FRAGMENT_TYPE;
    }
    function isLazy(object) {
      return typeOf(object) === REACT_LAZY_TYPE;
    }
    function isMemo(object) {
      return typeOf(object) === REACT_MEMO_TYPE;
    }
    function isPortal(object) {
      return typeOf(object) === REACT_PORTAL_TYPE;
    }
    function isProfiler(object) {
      return typeOf(object) === REACT_PROFILER_TYPE;
    }
    function isStrictMode(object) {
      return typeOf(object) === REACT_STRICT_MODE_TYPE;
    }
    function isSuspense(object) {
      return typeOf(object) === REACT_SUSPENSE_TYPE;
    }
    exports.typeOf = typeOf;
    exports.AsyncMode = AsyncMode;
    exports.ConcurrentMode = ConcurrentMode;
    exports.ContextConsumer = ContextConsumer;
    exports.ContextProvider = ContextProvider;
    exports.Element = Element;
    exports.ForwardRef = ForwardRef;
    exports.Fragment = Fragment;
    exports.Lazy = Lazy;
    exports.Memo = Memo;
    exports.Portal = Portal;
    exports.Profiler = Profiler;
    exports.StrictMode = StrictMode;
    exports.Suspense = Suspense;
    exports.isValidElementType = isValidElementType;
    exports.isAsyncMode = isAsyncMode;
    exports.isConcurrentMode = isConcurrentMode;
    exports.isContextConsumer = isContextConsumer;
    exports.isContextProvider = isContextProvider;
    exports.isElement = isElement;
    exports.isForwardRef = isForwardRef;
    exports.isFragment = isFragment;
    exports.isLazy = isLazy;
    exports.isMemo = isMemo;
    exports.isPortal = isPortal;
    exports.isProfiler = isProfiler;
    exports.isStrictMode = isStrictMode;
    exports.isSuspense = isSuspense;
  })();
});
unwrapExports(reactIs_development);
var reactIs_development_1 = reactIs_development.typeOf;
var reactIs_development_2 = reactIs_development.AsyncMode;
var reactIs_development_3 = reactIs_development.ConcurrentMode;
var reactIs_development_4 = reactIs_development.ContextConsumer;
var reactIs_development_5 = reactIs_development.ContextProvider;
var reactIs_development_6 = reactIs_development.Element;
var reactIs_development_7 = reactIs_development.ForwardRef;
var reactIs_development_8 = reactIs_development.Fragment;
var reactIs_development_9 = reactIs_development.Lazy;
var reactIs_development_10 = reactIs_development.Memo;
var reactIs_development_11 = reactIs_development.Portal;
var reactIs_development_12 = reactIs_development.Profiler;
var reactIs_development_13 = reactIs_development.StrictMode;
var reactIs_development_14 = reactIs_development.Suspense;
var reactIs_development_15 = reactIs_development.isValidElementType;
var reactIs_development_16 = reactIs_development.isAsyncMode;
var reactIs_development_17 = reactIs_development.isConcurrentMode;
var reactIs_development_18 = reactIs_development.isContextConsumer;
var reactIs_development_19 = reactIs_development.isContextProvider;
var reactIs_development_20 = reactIs_development.isElement;
var reactIs_development_21 = reactIs_development.isForwardRef;
var reactIs_development_22 = reactIs_development.isFragment;
var reactIs_development_23 = reactIs_development.isLazy;
var reactIs_development_24 = reactIs_development.isMemo;
var reactIs_development_25 = reactIs_development.isPortal;
var reactIs_development_26 = reactIs_development.isProfiler;
var reactIs_development_27 = reactIs_development.isStrictMode;
var reactIs_development_28 = reactIs_development.isSuspense;
var reactIs = createCommonjsModule(function (module) {
  module.exports = reactIs_development;
});
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;
function toObject(val) {
  if (val === null || val === undefined) {
    throw new TypeError('Object.assign cannot be called with null or undefined');
  }
  return Object(val);
}
function shouldUseNative() {
  try {
    if (!Object.assign) {
      return false;
    }
    var test1 = new String('abc');
    test1[5] = 'de';
    if (Object.getOwnPropertyNames(test1)[0] === '5') {
      return false;
    }
    var test2 = {};
    for (var i = 0; i < 10; i++) {
      test2['_' + String.fromCharCode(i)] = i;
    }
    var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
      return test2[n];
    });
    if (order2.join('') !== '0123456789') {
      return false;
    }
    var test3 = {};
    ('abcdefghijklmnopqrst').split('').forEach(function (letter) {
      test3[letter] = letter;
    });
    if (Object.keys(Object.assign({}, test3)).join('') !== 'abcdefghijklmnopqrst') {
      return false;
    }
    return true;
  } catch (err) {
    return false;
  }
}
var objectAssign = shouldUseNative() ? Object.assign : function (target, source) {
  var from;
  var to = toObject(target);
  var symbols;
  for (var s = 1; s < arguments.length; s++) {
    from = Object(arguments[s]);
    for (var key in from) {
      if (hasOwnProperty.call(from, key)) {
        to[key] = from[key];
      }
    }
    if (getOwnPropertySymbols) {
      symbols = getOwnPropertySymbols(from);
      for (var i = 0; i < symbols.length; i++) {
        if (propIsEnumerable.call(from, symbols[i])) {
          to[symbols[i]] = from[symbols[i]];
        }
      }
    }
  }
  return to;
};
var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';
var ReactPropTypesSecret_1 = ReactPropTypesSecret;
var printWarning = function () {};
var ReactPropTypesSecret$1 = ReactPropTypesSecret_1;
var loggedTypeFailures = {};
var has = Function.call.bind(Object.prototype.hasOwnProperty);
printWarning = function (text) {
  var message = 'Warning: ' + text;
  if (typeof console !== 'undefined') {
    console.error(message);
  }
  try {
    throw new Error(message);
  } catch (x) {}
};
function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
  for (var typeSpecName in typeSpecs) {
    if (has(typeSpecs, typeSpecName)) {
      var error;
      try {
        if (typeof typeSpecs[typeSpecName] !== 'function') {
          var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.');
          err.name = 'Invariant Violation';
          throw err;
        }
        error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret$1);
      } catch (ex) {
        error = ex;
      }
      if (error && !(error instanceof Error)) {
        printWarning((componentName || 'React class') + ': type specification of ' + location + ' `' + typeSpecName + '` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a ' + typeof error + '. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).');
      }
      if (error instanceof Error && !((error.message in loggedTypeFailures))) {
        loggedTypeFailures[error.message] = true;
        var stack = getStack ? getStack() : '';
        printWarning('Failed ' + location + ' type: ' + error.message + (stack != null ? stack : ''));
      }
    }
  }
}
checkPropTypes.resetWarningCache = function () {
  loggedTypeFailures = {};
};
var checkPropTypes_1 = checkPropTypes;
var has$1 = Function.call.bind(Object.prototype.hasOwnProperty);
var printWarning$1 = function () {};
printWarning$1 = function (text) {
  var message = 'Warning: ' + text;
  if (typeof console !== 'undefined') {
    console.error(message);
  }
  try {
    throw new Error(message);
  } catch (x) {}
};
function emptyFunctionThatReturnsNull() {
  return null;
}
var factoryWithTypeCheckers = function (isValidElement, throwOnDirectAccess) {
  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
  var FAUX_ITERATOR_SYMBOL = '@@iterator';
  function getIteratorFn(maybeIterable) {
    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
    if (typeof iteratorFn === 'function') {
      return iteratorFn;
    }
  }
  var ANONYMOUS = '<<anonymous>>';
  var ReactPropTypes = {
    array: createPrimitiveTypeChecker('array'),
    bool: createPrimitiveTypeChecker('boolean'),
    func: createPrimitiveTypeChecker('function'),
    number: createPrimitiveTypeChecker('number'),
    object: createPrimitiveTypeChecker('object'),
    string: createPrimitiveTypeChecker('string'),
    symbol: createPrimitiveTypeChecker('symbol'),
    any: createAnyTypeChecker(),
    arrayOf: createArrayOfTypeChecker,
    element: createElementTypeChecker(),
    elementType: createElementTypeTypeChecker(),
    instanceOf: createInstanceTypeChecker,
    node: createNodeChecker(),
    objectOf: createObjectOfTypeChecker,
    oneOf: createEnumTypeChecker,
    oneOfType: createUnionTypeChecker,
    shape: createShapeTypeChecker,
    exact: createStrictShapeTypeChecker
  };
  function is(x, y) {
    if (x === y) {
      return x !== 0 || 1 / x === 1 / y;
    } else {
      return x !== x && y !== y;
    }
  }
  function PropTypeError(message) {
    this.message = message;
    this.stack = '';
  }
  PropTypeError.prototype = Error.prototype;
  function createChainableTypeChecker(validate) {
    var manualPropTypeCallCache = {};
    var manualPropTypeWarningCount = 0;
    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
      componentName = componentName || ANONYMOUS;
      propFullName = propFullName || propName;
      if (secret !== ReactPropTypesSecret_1) {
        if (throwOnDirectAccess) {
          var err = new Error('Calling PropTypes validators directly is not supported by the `prop-types` package. ' + 'Use `PropTypes.checkPropTypes()` to call them. ' + 'Read more at http://fb.me/use-check-prop-types');
          err.name = 'Invariant Violation';
          throw err;
        } else if ("development" !== 'production' && typeof console !== 'undefined') {
          var cacheKey = componentName + ':' + propName;
          if (!manualPropTypeCallCache[cacheKey] && manualPropTypeWarningCount < 3) {
            printWarning$1('You are manually calling a React.PropTypes validation ' + 'function for the `' + propFullName + '` prop on `' + componentName + '`. This is deprecated ' + 'and will throw in the standalone `prop-types` package. ' + 'You may be seeing this warning due to a third-party PropTypes ' + 'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.');
            manualPropTypeCallCache[cacheKey] = true;
            manualPropTypeWarningCount++;
          }
        }
      }
      if (props[propName] == null) {
        if (isRequired) {
          if (props[propName] === null) {
            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
          }
          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
        }
        return null;
      } else {
        return validate(props, propName, componentName, location, propFullName);
      }
    }
    var chainedCheckType = checkType.bind(null, false);
    chainedCheckType.isRequired = checkType.bind(null, true);
    return chainedCheckType;
  }
  function createPrimitiveTypeChecker(expectedType) {
    function validate(props, propName, componentName, location, propFullName, secret) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== expectedType) {
        var preciseType = getPreciseType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }
  function createAnyTypeChecker() {
    return createChainableTypeChecker(emptyFunctionThatReturnsNull);
  }
  function createArrayOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
      }
      var propValue = props[propName];
      if (!Array.isArray(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
      }
      for (var i = 0; i < propValue.length; i++) {
        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret_1);
        if (error instanceof Error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }
  function createElementTypeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      if (!isValidElement(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }
  function createElementTypeTypeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      if (!reactIs.isValidElementType(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement type.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }
  function createInstanceTypeChecker(expectedClass) {
    function validate(props, propName, componentName, location, propFullName) {
      if (!(props[propName] instanceof expectedClass)) {
        var expectedClassName = expectedClass.name || ANONYMOUS;
        var actualClassName = getClassName(props[propName]);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }
  function createEnumTypeChecker(expectedValues) {
    if (!Array.isArray(expectedValues)) {
      if (arguments.length > 1) {
        printWarning$1('Invalid arguments supplied to oneOf, expected an array, got ' + arguments.length + ' arguments. ' + 'A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).');
      } else {
        printWarning$1('Invalid argument supplied to oneOf, expected an array.');
      }
      return emptyFunctionThatReturnsNull;
    }
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      for (var i = 0; i < expectedValues.length; i++) {
        if (is(propValue, expectedValues[i])) {
          return null;
        }
      }
      var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
        var type = getPreciseType(value);
        if (type === 'symbol') {
          return String(value);
        }
        return value;
      });
      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + String(propValue) + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
    }
    return createChainableTypeChecker(validate);
  }
  function createObjectOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
      }
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
      }
      for (var key in propValue) {
        if (has$1(propValue, key)) {
          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret_1);
          if (error instanceof Error) {
            return error;
          }
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }
  function createUnionTypeChecker(arrayOfTypeCheckers) {
    if (!Array.isArray(arrayOfTypeCheckers)) {
      "development" !== 'production' ? printWarning$1('Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
      return emptyFunctionThatReturnsNull;
    }
    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
      var checker = arrayOfTypeCheckers[i];
      if (typeof checker !== 'function') {
        printWarning$1('Invalid argument supplied to oneOfType. Expected an array of check functions, but ' + 'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.');
        return emptyFunctionThatReturnsNull;
      }
    }
    function validate(props, propName, componentName, location, propFullName) {
      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
        var checker = arrayOfTypeCheckers[i];
        if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret_1) == null) {
          return null;
        }
      }
      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
    }
    return createChainableTypeChecker(validate);
  }
  function createNodeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      if (!isNode(props[propName])) {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }
  function createShapeTypeChecker(shapeTypes) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
      }
      for (var key in shapeTypes) {
        var checker = shapeTypes[key];
        if (!checker) {
          continue;
        }
        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret_1);
        if (error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }
  function createStrictShapeTypeChecker(shapeTypes) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
      }
      var allKeys = objectAssign({}, props[propName], shapeTypes);
      for (var key in allKeys) {
        var checker = shapeTypes[key];
        if (!checker) {
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' + '\nBad object: ' + JSON.stringify(props[propName], null, '  ') + '\nValid keys: ' + JSON.stringify(Object.keys(shapeTypes), null, '  '));
        }
        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret_1);
        if (error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }
  function isNode(propValue) {
    switch (typeof propValue) {
      case 'number':
      case 'string':
      case 'undefined':
        return true;
      case 'boolean':
        return !propValue;
      case 'object':
        if (Array.isArray(propValue)) {
          return propValue.every(isNode);
        }
        if (propValue === null || isValidElement(propValue)) {
          return true;
        }
        var iteratorFn = getIteratorFn(propValue);
        if (iteratorFn) {
          var iterator = iteratorFn.call(propValue);
          var step;
          if (iteratorFn !== propValue.entries) {
            while (!(step = iterator.next()).done) {
              if (!isNode(step.value)) {
                return false;
              }
            }
          } else {
            while (!(step = iterator.next()).done) {
              var entry = step.value;
              if (entry) {
                if (!isNode(entry[1])) {
                  return false;
                }
              }
            }
          }
        } else {
          return false;
        }
        return true;
      default:
        return false;
    }
  }
  function isSymbol(propType, propValue) {
    if (propType === 'symbol') {
      return true;
    }
    if (!propValue) {
      return false;
    }
    if (propValue['@@toStringTag'] === 'Symbol') {
      return true;
    }
    if (typeof Symbol === 'function' && propValue instanceof Symbol) {
      return true;
    }
    return false;
  }
  function getPropType(propValue) {
    var propType = typeof propValue;
    if (Array.isArray(propValue)) {
      return 'array';
    }
    if (propValue instanceof RegExp) {
      return 'object';
    }
    if (isSymbol(propType, propValue)) {
      return 'symbol';
    }
    return propType;
  }
  function getPreciseType(propValue) {
    if (typeof propValue === 'undefined' || propValue === null) {
      return '' + propValue;
    }
    var propType = getPropType(propValue);
    if (propType === 'object') {
      if (propValue instanceof Date) {
        return 'date';
      } else if (propValue instanceof RegExp) {
        return 'regexp';
      }
    }
    return propType;
  }
  function getPostfixForTypeWarning(value) {
    var type = getPreciseType(value);
    switch (type) {
      case 'array':
      case 'object':
        return 'an ' + type;
      case 'boolean':
      case 'date':
      case 'regexp':
        return 'a ' + type;
      default:
        return type;
    }
  }
  function getClassName(propValue) {
    if (!propValue.constructor || !propValue.constructor.name) {
      return ANONYMOUS;
    }
    return propValue.constructor.name;
  }
  ReactPropTypes.checkPropTypes = checkPropTypes_1;
  ReactPropTypes.resetWarningCache = checkPropTypes_1.resetWarningCache;
  ReactPropTypes.PropTypes = ReactPropTypes;
  return ReactPropTypes;
};
function emptyFunction() {}
function emptyFunctionWithReset() {}
emptyFunctionWithReset.resetWarningCache = emptyFunction;
var factoryWithThrowingShims = function () {
  function shim(props, propName, componentName, location, propFullName, secret) {
    if (secret === ReactPropTypesSecret_1) {
      return;
    }
    var err = new Error('Calling PropTypes validators directly is not supported by the `prop-types` package. ' + 'Use PropTypes.checkPropTypes() to call them. ' + 'Read more at http://fb.me/use-check-prop-types');
    err.name = 'Invariant Violation';
    throw err;
  }
  shim.isRequired = shim;
  function getShim() {
    return shim;
  }
  var ReactPropTypes = {
    array: shim,
    bool: shim,
    func: shim,
    number: shim,
    object: shim,
    string: shim,
    symbol: shim,
    any: shim,
    arrayOf: getShim,
    element: shim,
    elementType: shim,
    instanceOf: getShim,
    node: shim,
    objectOf: getShim,
    oneOf: getShim,
    oneOfType: getShim,
    shape: getShim,
    exact: getShim,
    checkPropTypes: emptyFunctionWithReset,
    resetWarningCache: emptyFunction
  };
  ReactPropTypes.PropTypes = ReactPropTypes;
  return ReactPropTypes;
};
var propTypes = createCommonjsModule(function (module) {
  var ReactIs = reactIs;
  var throwOnDirectAccess = true;
  module.exports = factoryWithTypeCheckers(ReactIs.isElement, throwOnDirectAccess);
});
var key = '__global_unique_id__';
var gud = function () {
  return commonjsGlobal[key] = (commonjsGlobal[key] || 0) + 1;
};
function makeEmptyFunction(arg) {
  return function () {
    return arg;
  };
}
var emptyFunction$1 = function emptyFunction() {};
emptyFunction$1.thatReturns = makeEmptyFunction;
emptyFunction$1.thatReturnsFalse = makeEmptyFunction(false);
emptyFunction$1.thatReturnsTrue = makeEmptyFunction(true);
emptyFunction$1.thatReturnsNull = makeEmptyFunction(null);
emptyFunction$1.thatReturnsThis = function () {
  return this;
};
emptyFunction$1.thatReturnsArgument = function (arg) {
  return arg;
};
var emptyFunction_1 = emptyFunction$1;
var warning = emptyFunction_1;
var printWarning$2 = function printWarning(format) {
  for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }
  var argIndex = 0;
  var message = 'Warning: ' + format.replace(/%s/g, function () {
    return args[argIndex++];
  });
  if (typeof console !== 'undefined') {
    console.error(message);
  }
  try {
    throw new Error(message);
  } catch (x) {}
};
warning = function warning(condition, format) {
  if (format === undefined) {
    throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
  }
  if (format.indexOf('Failed Composite propType: ') === 0) {
    return;
  }
  if (!condition) {
    for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
      args[_key2 - 2] = arguments[_key2];
    }
    printWarning$2.apply(undefined, [format].concat(args));
  }
};
var warning_1 = warning;
var implementation = createCommonjsModule(function (module, exports) {
  exports.__esModule = true;
  var _react2 = _interopRequireDefault(react_1d.default);
  var _propTypes2 = _interopRequireDefault(propTypes);
  var _gud2 = _interopRequireDefault(gud);
  var _warning2 = _interopRequireDefault(warning_1);
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }
  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _possibleConstructorReturn(self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  }
  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }
  var MAX_SIGNED_31_BIT_INT = 1073741823;
  function objectIs(x, y) {
    if (x === y) {
      return x !== 0 || 1 / x === 1 / y;
    } else {
      return x !== x && y !== y;
    }
  }
  function createEventEmitter(value) {
    var handlers = [];
    return {
      on: function on(handler) {
        handlers.push(handler);
      },
      off: function off(handler) {
        handlers = handlers.filter(function (h) {
          return h !== handler;
        });
      },
      get: function get() {
        return value;
      },
      set: function set(newValue, changedBits) {
        value = newValue;
        handlers.forEach(function (handler) {
          return handler(value, changedBits);
        });
      }
    };
  }
  function onlyChild(children) {
    return Array.isArray(children) ? children[0] : children;
  }
  function createReactContext(defaultValue, calculateChangedBits) {
    var _Provider$childContex, _Consumer$contextType;
    var contextProp = '__create-react-context-' + (0, _gud2.default)() + '__';
    var Provider = (function (_Component) {
      _inherits(Provider, _Component);
      function Provider() {
        var _temp, _this, _ret;
        _classCallCheck(this, Provider);
        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        return (_ret = (_temp = (_this = _possibleConstructorReturn(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.emitter = createEventEmitter(_this.props.value), _temp), _possibleConstructorReturn(_this, _ret));
      }
      Provider.prototype.getChildContext = function getChildContext() {
        var _ref;
        return (_ref = {}, _ref[contextProp] = this.emitter, _ref);
      };
      Provider.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
        if (this.props.value !== nextProps.value) {
          var oldValue = this.props.value;
          var newValue = nextProps.value;
          var changedBits = void 0;
          if (objectIs(oldValue, newValue)) {
            changedBits = 0;
          } else {
            changedBits = typeof calculateChangedBits === 'function' ? calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT;
            (0, _warning2.default)((changedBits & MAX_SIGNED_31_BIT_INT) === changedBits, 'calculateChangedBits: Expected the return value to be a ' + '31-bit integer. Instead received: %s', changedBits);
            changedBits |= 0;
            if (changedBits !== 0) {
              this.emitter.set(nextProps.value, changedBits);
            }
          }
        }
      };
      Provider.prototype.render = function render() {
        return this.props.children;
      };
      return Provider;
    })(react_1d.default.Component);
    Provider.childContextTypes = (_Provider$childContex = {}, _Provider$childContex[contextProp] = _propTypes2.default.object.isRequired, _Provider$childContex);
    var Consumer = (function (_Component2) {
      _inherits(Consumer, _Component2);
      function Consumer() {
        var _temp2, _this2, _ret2;
        _classCallCheck(this, Consumer);
        for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }
        return (_ret2 = (_temp2 = (_this2 = _possibleConstructorReturn(this, _Component2.call.apply(_Component2, [this].concat(args))), _this2), _this2.state = {
          value: _this2.getValue()
        }, _this2.onUpdate = function (newValue, changedBits) {
          var observedBits = _this2.observedBits | 0;
          if ((observedBits & changedBits) !== 0) {
            _this2.setState({
              value: _this2.getValue()
            });
          }
        }, _temp2), _possibleConstructorReturn(_this2, _ret2));
      }
      Consumer.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
        var observedBits = nextProps.observedBits;
        this.observedBits = observedBits === undefined || observedBits === null ? MAX_SIGNED_31_BIT_INT : observedBits;
      };
      Consumer.prototype.componentDidMount = function componentDidMount() {
        if (this.context[contextProp]) {
          this.context[contextProp].on(this.onUpdate);
        }
        var observedBits = this.props.observedBits;
        this.observedBits = observedBits === undefined || observedBits === null ? MAX_SIGNED_31_BIT_INT : observedBits;
      };
      Consumer.prototype.componentWillUnmount = function componentWillUnmount() {
        if (this.context[contextProp]) {
          this.context[contextProp].off(this.onUpdate);
        }
      };
      Consumer.prototype.getValue = function getValue() {
        if (this.context[contextProp]) {
          return this.context[contextProp].get();
        } else {
          return defaultValue;
        }
      };
      Consumer.prototype.render = function render() {
        return onlyChild(this.props.children)(this.state.value);
      };
      return Consumer;
    })(react_1d.default.Component);
    Consumer.contextTypes = (_Consumer$contextType = {}, _Consumer$contextType[contextProp] = _propTypes2.default.object, _Consumer$contextType);
    return {
      Provider: Provider,
      Consumer: Consumer
    };
  }
  exports.default = createReactContext;
  module.exports = exports['default'];
});
unwrapExports(implementation);
var lib = createCommonjsModule(function (module, exports) {
  exports.__esModule = true;
  var _react2 = _interopRequireDefault(react_1d.default);
  var _implementation2 = _interopRequireDefault(implementation);
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }
  exports.default = _react2.default.createContext || _implementation2.default;
  module.exports = exports['default'];
});
var createContext = unwrapExports(lib);
var ManagerContext = createContext({
  setReferenceNode: undefined,
  referenceNode: undefined
});
var Manager = (function (_React$Component) {
  inheritsLoose(Manager, _React$Component);
  function Manager() {
    var _this;
    _this = _React$Component.call(this) || this;
    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "setReferenceNode", function (referenceNode) {
      if (!referenceNode || _this.state.context.referenceNode === referenceNode) {
        return;
      }
      _this.setState(function (_ref) {
        var context = _ref.context;
        return {
          context: _extends_1({}, context, {
            referenceNode: referenceNode
          })
        };
      });
    });
    _this.state = {
      context: {
        setReferenceNode: _this.setReferenceNode,
        referenceNode: undefined
      }
    };
    return _this;
  }
  var _proto = Manager.prototype;
  _proto.render = function render() {
    return react_1.createElement(ManagerContext.Provider, {
      value: this.state.context
    }, this.props.children);
  };
  return Manager;
})(react_1.Component);
var unwrapArray = function unwrapArray(arg) {
  return Array.isArray(arg) ? arg[0] : arg;
};
var safeInvoke = function safeInvoke(fn) {
  if (typeof fn === "function") {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    return fn.apply(void 0, args);
  }
};
var initialStyle = {
  position: 'absolute',
  top: 0,
  left: 0,
  opacity: 0,
  pointerEvents: 'none'
};
var initialArrowStyle = {};
var InnerPopper = (function (_React$Component) {
  inheritsLoose(InnerPopper, _React$Component);
  function InnerPopper() {
    var _this;
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "state", {
      data: undefined,
      placement: undefined
    });
    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "popperInstance", void 0);
    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "popperNode", null);
    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "arrowNode", null);
    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "setPopperNode", function (popperNode) {
      if (!popperNode || _this.popperNode === popperNode) return;
      safeInvoke(_this.props.innerRef, popperNode);
      _this.popperNode = popperNode;
      _this.updatePopperInstance();
    });
    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "setArrowNode", function (arrowNode) {
      _this.arrowNode = arrowNode;
    });
    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "updateStateModifier", {
      enabled: true,
      order: 900,
      fn: function fn(data) {
        var placement = data.placement;
        _this.setState({
          data: data,
          placement: placement
        });
        return data;
      }
    });
    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "getOptions", function () {
      return {
        placement: _this.props.placement,
        eventsEnabled: _this.props.eventsEnabled,
        positionFixed: _this.props.positionFixed,
        modifiers: _extends_1({}, _this.props.modifiers, {
          arrow: _extends_1({}, _this.props.modifiers && _this.props.modifiers.arrow, {
            enabled: !!_this.arrowNode,
            element: _this.arrowNode
          }),
          applyStyle: {
            enabled: false
          },
          updateStateModifier: _this.updateStateModifier
        })
      };
    });
    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "getPopperStyle", function () {
      return !_this.popperNode || !_this.state.data ? initialStyle : _extends_1({
        position: _this.state.data.offsets.popper.position
      }, _this.state.data.styles);
    });
    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "getPopperPlacement", function () {
      return !_this.state.data ? undefined : _this.state.placement;
    });
    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "getArrowStyle", function () {
      return !_this.arrowNode || !_this.state.data ? initialArrowStyle : _this.state.data.arrowStyles;
    });
    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "getOutOfBoundariesState", function () {
      return _this.state.data ? _this.state.data.hide : undefined;
    });
    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "destroyPopperInstance", function () {
      if (!_this.popperInstance) return;
      _this.popperInstance.destroy();
      _this.popperInstance = null;
    });
    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "updatePopperInstance", function () {
      _this.destroyPopperInstance();
      var _assertThisInitialize = assertThisInitialized(assertThisInitialized(_this)), popperNode = _assertThisInitialize.popperNode;
      var referenceElement = _this.props.referenceElement;
      if (!referenceElement || !popperNode) return;
      _this.popperInstance = new Popper(referenceElement, popperNode, _this.getOptions());
    });
    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "scheduleUpdate", function () {
      if (_this.popperInstance) {
        _this.popperInstance.scheduleUpdate();
      }
    });
    return _this;
  }
  var _proto = InnerPopper.prototype;
  _proto.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {
    if (this.props.placement !== prevProps.placement || this.props.referenceElement !== prevProps.referenceElement || this.props.positionFixed !== prevProps.positionFixed) {
      this.updatePopperInstance();
    } else if (this.props.eventsEnabled !== prevProps.eventsEnabled && this.popperInstance) {
      this.props.eventsEnabled ? this.popperInstance.enableEventListeners() : this.popperInstance.disableEventListeners();
    }
    if (prevState.placement !== this.state.placement) {
      this.scheduleUpdate();
    }
  };
  _proto.componentWillUnmount = function componentWillUnmount() {
    safeInvoke(this.props.innerRef, null);
    this.destroyPopperInstance();
  };
  _proto.render = function render() {
    return unwrapArray(this.props.children)({
      ref: this.setPopperNode,
      style: this.getPopperStyle(),
      placement: this.getPopperPlacement(),
      outOfBoundaries: this.getOutOfBoundariesState(),
      scheduleUpdate: this.scheduleUpdate,
      arrowProps: {
        ref: this.setArrowNode,
        style: this.getArrowStyle()
      }
    });
  };
  return InnerPopper;
})(react_1.Component);
defineProperty(InnerPopper, "defaultProps", {
  placement: 'bottom',
  eventsEnabled: true,
  referenceElement: undefined,
  positionFixed: false
});
function Popper$1(_ref) {
  var referenceElement = _ref.referenceElement, props = objectWithoutPropertiesLoose(_ref, ["referenceElement"]);
  return react_1.createElement(ManagerContext.Consumer, null, function (_ref2) {
    var referenceNode = _ref2.referenceNode;
    return react_1.createElement(InnerPopper, _extends_1({
      referenceElement: referenceElement !== undefined ? referenceElement : referenceNode
    }, props));
  });
}
var __DEV__ = "development" !== 'production';
var warning$1 = function () {};
if (__DEV__) {
  var printWarning$3 = function printWarning(format, args) {
    var len = arguments.length;
    args = new Array(len > 1 ? len - 1 : 0);
    for (var key = 1; key < len; key++) {
      args[key - 1] = arguments[key];
    }
    var argIndex = 0;
    var message = 'Warning: ' + format.replace(/%s/g, function () {
      return args[argIndex++];
    });
    if (typeof console !== 'undefined') {
      console.error(message);
    }
    try {
      throw new Error(message);
    } catch (x) {}
  };
  warning$1 = function (condition, format, args) {
    var len = arguments.length;
    args = new Array(len > 2 ? len - 2 : 0);
    for (var key = 2; key < len; key++) {
      args[key - 2] = arguments[key];
    }
    if (format === undefined) {
      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
    }
    if (!condition) {
      printWarning$3.apply(null, [format].concat(args));
    }
  };
}
var warning_1$1 = warning$1;
var InnerReference = (function (_React$Component) {
  inheritsLoose(InnerReference, _React$Component);
  function InnerReference() {
    var _this;
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "refHandler", function (node) {
      safeInvoke(_this.props.innerRef, node);
      safeInvoke(_this.props.setReferenceNode, node);
    });
    return _this;
  }
  var _proto = InnerReference.prototype;
  _proto.render = function render() {
    warning_1$1(Boolean(this.props.setReferenceNode), '`Reference` should not be used outside of a `Manager` component.');
    return unwrapArray(this.props.children)({
      ref: this.refHandler
    });
  };
  return InnerReference;
})(react_1.Component);
function Reference(props) {
  return react_1.createElement(ManagerContext.Consumer, null, function (_ref) {
    var setReferenceNode = _ref.setReferenceNode;
    return react_1.createElement(InnerReference, _extends_1({
      setReferenceNode: setReferenceNode
    }, props));
  });
}
var DropdownContext = react_1d.default.createContext([false, function () {
  return null;
}]);
function DropdownTrigger(_ref) {
  var className = _ref.className, _ref$toggle = _ref.toggle, toggle = _ref$toggle === void 0 ? true : _ref$toggle, value = _ref.value, children = _ref.children, icon = _ref.icon, isNavLink = _ref.isNavLink, isOption = _ref.isOption, _ref$as = _ref.as, Component = _ref$as === void 0 ? El.Button : _ref$as, rest = _objectWithoutProperties(_ref, ["className", "toggle", "value", "children", "icon", "isNavLink", "isOption", "as"]);
  var _React$useContext = react_1.useContext(DropdownContext), _React$useContext2 = _slicedToArray(_React$useContext, 2), isOpen = _React$useContext2[0], setIsOpen = _React$useContext2[1];
  var classes = classnames({
    "dropdown-toggle": toggle,
    "nav-link": isNavLink,
    "btn-option": isOption
  }, className);
  var childrenFragment = react_1.createElement(react_1.Fragment, null, icon && react_1.createElement(react_1.Fragment, null, react_1.createElement(Icon, {
    name: icon
  }), " "), value, children);
  return react_1.createElement(Reference, null, function (_ref2) {
    var ref = _ref2.ref;
    return react_1.createElement(Component, _extends({
      className: classes,
      onClick: function onClick() {
        setIsOpen(!isOpen);
      },
      ref: ref
    }, rest), childrenFragment);
  });
}
function DropdownMenu(_ref) {
  var _cn;
  var className = _ref.className, children = _ref.children, _ref$position = _ref.position, position = _ref$position === void 0 ? "bottom" : _ref$position, arrow = _ref.arrow, _ref$arrowPosition = _ref.arrowPosition, arrowPosition = _ref$arrowPosition === void 0 ? "left" : _ref$arrowPosition, _style = _ref.style, show = _ref.show, rest = _objectWithoutProperties(_ref, ["className", "children", "position", "arrow", "arrowPosition", "style", "show"]);
  var _React$useContext = react_1d.default.useContext(DropdownContext), _React$useContext2 = _slicedToArray(_React$useContext, 1), isOpen = _React$useContext2[0];
  var _isOpen = show || isOpen;
  var classes = classnames((_cn = {
    "dropdown-menu": true
  }, _defineProperty(_cn, ("dropdown-menu-").concat(arrowPosition), arrowPosition), _defineProperty(_cn, "dropdown-menu-arrow", arrow), _defineProperty(_cn, "show", _isOpen), _cn), className);
  return react_1d.default.createElement(Popper$1, {
    placement: position,
    eventsEnabled: true,
    positionFixed: false
  }, function (_ref2) {
    var ref = _ref2.ref, style = _ref2.style, placement = _ref2.placement;
    return _isOpen && react_1d.default.createElement(El.Div, _extends({
      className: classes,
      "data-placement": placement,
      style: _objectSpread({}, _style, style),
      ref: ref
    }, rest), children);
  });
}
function DropdownItem(_ref) {
  var className = _ref.className, icon = _ref.icon, value = _ref.value, children = _ref.children, badge = _ref.badge, badgeType = _ref.badgeType, _ref$as = _ref.as, as = _ref$as === void 0 ? El.A : _ref$as, RootComponent = _ref.RootComponent, rest = _objectWithoutProperties(_ref, ["className", "icon", "value", "children", "badge", "badgeType", "as", "RootComponent"]);
  var classes = classnames({
    "dropdown-item": true
  }, className);
  var Component = RootComponent || as;
  return react_1.createElement(Component, _extends({
    className: classes
  }, rest), badge && react_1.createElement("span", {
    className: "float-right"
  }, react_1.createElement(CompoundBadge, {
    color: badgeType
  }, badge)), icon && react_1.createElement(react_1.Fragment, null, react_1.createElement(Icon, {
    name: icon,
    className: "dropdown-icon"
  }), " "), value, children);
}
function DropdownItemDivider(_ref) {
  var children = _ref.children, rest = _objectWithoutProperties(_ref, ["children"]);
  return react_1d.default.createElement(El.Div, _extends({
    className: "dropdown-divider"
  }, rest), children);
}
var useClickOutside = function useClickOutside(onOutsideClick, ref) {
  var elementRef = react_1.useRef(null);
  react_1.useImperativeHandle(ref, function () {
    return elementRef.current;
  });
  var handleOutsideOnClick = function handleOutsideOnClick(_ref) {
    var target = _ref.target;
    if (isOutsideClick(target)) {
      onOutsideClick();
    }
  };
  var isOutsideClick = function isOutsideClick(target) {
    return elementRef.current && target instanceof Node && !elementRef.current.contains(target);
  };
  react_1.useEffect(function () {
    document.addEventListener("mousedown", handleOutsideOnClick, false);
    return function () {
      document.removeEventListener("mousedown", handleOutsideOnClick, false);
    };
  });
  return elementRef;
};
var ClickOutside = (function (_React$PureComponent) {
  _inherits(ClickOutside, _React$PureComponent);
  function ClickOutside() {
    var _getPrototypeOf2;
    var _this;
    _classCallCheck(this, ClickOutside);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ClickOutside)).call.apply(_getPrototypeOf2, [this].concat(args)));
    _defineProperty(_assertThisInitialized(_this), "elementRef", void 0);
    _defineProperty(_assertThisInitialized(_this), "componentDidMount", function () {
      document.addEventListener("mousedown", _this.handleOutsideOnClick, false);
    });
    _defineProperty(_assertThisInitialized(_this), "componentWillUnmount", function () {
      document.removeEventListener("mousedown", _this.handleOutsideOnClick, false);
    });
    _defineProperty(_assertThisInitialized(_this), "setElementRef", function (el) {
      if (el) _this.elementRef = el;
    });
    _defineProperty(_assertThisInitialized(_this), "isOutsideClick", function (target) {
      return _this.elementRef && target instanceof Node && !_this.elementRef.contains(target);
    });
    _defineProperty(_assertThisInitialized(_this), "handleOutsideOnClick", function (_ref2) {
      var target = _ref2.target;
      if (_this.isOutsideClick(target)) _this.props.onOutsideClick();
    });
    return _this;
  }
  _createClass(ClickOutside, [{
    key: "render",
    value: function render() {
      var children = this.props.children;
      return children({
        setElementRef: this.setElementRef
      });
    }
  }]);
  return ClickOutside;
})(react_1d.default.PureComponent);
var DropdownProvider = function DropdownProvider(_ref) {
  var children = _ref.children;
  var _useState = react_1.useState(false), _useState2 = _slicedToArray(_useState, 2), isOpen = _useState2[0], setIsOpen = _useState2[1];
  var value = [isOpen, setIsOpen];
  return react_1d.default.createElement(DropdownContext.Provider, {
    value: value
  }, children);
};
var withDropdownProvider = function withDropdownProvider(Component) {
  return react_1.forwardRef(function (props, ref) {
    return react_1d.default.createElement(DropdownProvider, null, react_1d.default.createElement(Component, _extends({
      ref: ref
    }, props)));
  });
};
var Dropdown = react_1.forwardRef(function (_ref2, ref) {
  var _cn;
  var className = _ref2.className, children = _ref2.children, desktopOnly = _ref2.desktopOnly, isOption = _ref2.isOption, _ref2$flex = _ref2.flex, flex = _ref2$flex === void 0 ? false : _ref2$flex, items = _ref2.items, trigger = _ref2.trigger, icon = _ref2.icon, triggerContent = _ref2.triggerContent, triggerAs = _ref2.triggerAs, isNavLink = _ref2.isNavLink, triggerClassName = _ref2.triggerClassName, color = _ref2.color, toggle = _ref2.toggle, itemsObject = _ref2.itemsObject, itemsRootComponent = _ref2.itemsRootComponent, position = _ref2.position, arrow = _ref2.arrow, arrowPosition = _ref2.arrowPosition, dropdownMenuClassName = _ref2.dropdownMenuClassName, style = _ref2.style, triggerProps = _ref2.triggerProps, rest = _objectWithoutProperties(_ref2, ["className", "children", "desktopOnly", "isOption", "flex", "items", "trigger", "icon", "triggerContent", "triggerAs", "isNavLink", "triggerClassName", "color", "toggle", "itemsObject", "itemsRootComponent", "position", "arrow", "arrowPosition", "dropdownMenuClassName", "style", "triggerProps"]);
  var _useContext = react_1.useContext(DropdownContext), _useContext2 = _slicedToArray(_useContext, 2), isOpen = _useContext2[0], setIsOpen = _useContext2[1];
  var _handleItemClick = function _handleItemClick(e, callback) {
    setIsOpen(false);
    if (callback) {
      callback(e);
    }
  };
  var classes = classnames((_cn = {
    dropdown: true,
    "d-none": desktopOnly,
    "d-md-flex": desktopOnly || flex === "md"
  }, _defineProperty(_cn, ("d-").concat(flex, "-flex"), typeof flex !== "boolean" && ["xs", "sm", "lg", "xl"].includes(flex) || flex), _defineProperty(_cn, "d-flex", flex === true), _defineProperty(_cn, "card-options-dropdown", isOption), _defineProperty(_cn, "show", isOpen), _cn), className);
  var _trigger = trigger || (function () {
    if (icon || triggerContent || toggle) {
      return react_1d.default.createElement(DropdownTrigger, _extends({
        isNavLink: isNavLink,
        icon: icon,
        className: triggerClassName,
        isOption: isOption,
        color: color,
        toggle: toggle,
        as: triggerAs
      }, triggerProps), triggerContent);
    }
    return null;
  })();
  var _items = items || (function () {
    if (itemsObject) {
      return itemsObject.map(function (_ref3, i) {
        var as = _ref3.as, _onClick = _ref3.onClick, isDivider = _ref3.isDivider, dividerProps = _ref3.dividerProps, item = _objectWithoutProperties(_ref3, ["as", "onClick", "isDivider", "dividerProps"]);
        return isDivider ? react_1d.default.createElement(DropdownItemDivider, _extends({
          key: i
        }, dividerProps)) : react_1d.default.createElement(DropdownItem, _extends({
          key: i,
          as: as || itemsRootComponent,
          onClick: function onClick(e) {
            return _handleItemClick(e, _onClick);
          }
        }, item));
      });
    }
    return null;
  })();
  var menu = (function () {
    if (_items) {
      return react_1d.default.createElement(DropdownMenu, {
        position: position,
        arrow: arrow,
        arrowPosition: arrowPosition,
        className: dropdownMenuClassName,
        show: isOpen
      }, _items);
    }
    return null;
  })();
  var _ref = useClickOutside(function () {
    return setIsOpen(false);
  }, ref);
  return react_1d.default.createElement(Manager, null, react_1d.default.createElement(El.Div, _extends({
    className: classes,
    ref: _ref
  }, rest), _trigger, menu || children));
});
var Dropdown$1 = withDropdownProvider(Dropdown);
var CompoundDropdown = Dropdown$1;
CompoundDropdown.displayName = "Dropdown";
CompoundDropdown.Trigger = DropdownTrigger;
CompoundDropdown.Menu = DropdownMenu;
CompoundDropdown.Item = DropdownItem;
CompoundDropdown.ItemDivider = DropdownItemDivider;
function NavLinkTitle(_ref) {
  var children = _ref.children, className = _ref.className, rest = _objectWithoutProperties(_ref, ["children", "className"]);
  var classes = classnames("nav-link-title", className);
  return react_1.createElement(El.Span, _extends({
    className: classes
  }, rest), children);
}
var NavLink = react_1.forwardRef(function (_ref, ref) {
  var children = _ref.children, className = _ref.className, RootComponent = _ref.RootComponent, _ref$as = _ref.as, as = _ref$as === void 0 ? El.A : _ref$as, icon = _ref.icon, _ref$active = _ref.active, active = _ref$active === void 0 ? false : _ref$active, hasSubNav = _ref.hasSubNav, rootRef = _ref.rootRef, title = _ref.title, collapsed = _ref.collapsed, isToggle = _ref.isToggle, props = _objectWithoutProperties(_ref, ["children", "className", "RootComponent", "as", "icon", "active", "hasSubNav", "rootRef", "title", "collapsed", "isToggle"]);
  var classes = classnames({
    "nav-link": true,
    active: active,
    collapse: isToggle && collapsed,
    show: isToggle && collapsed
  }, className);
  var Component = RootComponent || as;
  return react_1d.default.createElement(Component, _extends({
    className: classes,
    ref: rootRef || ref,
    "data-toggle": isToggle ? "collapse" : undefined,
    "aria-expanded": isToggle ? !collapsed : undefined
  }, props), icon && react_1d.default.createElement(react_1d.default.Fragment, null, react_1d.default.createElement(Icon, {
    name: icon
  }), " "), title && react_1d.default.createElement(NavLinkTitle, null, title), children);
});
function NavSubNav(_ref) {
  var _ref$as = _ref.as, Component = _ref$as === void 0 ? El.Div : _ref$as, className = _ref.className, children = _ref.children, _ref$collapsed = _ref.collapsed, collapsed = _ref$collapsed === void 0 ? true : _ref$collapsed, _ref$show = _ref.show, show = _ref$show === void 0 ? false : _ref$show, rest = _objectWithoutProperties(_ref, ["as", "className", "children", "collapsed", "show"]);
  var classes = classnames({
    "navbar-subnav": true,
    collapse: true,
    collapsed: collapsed,
    show: show
  }, className);
  return react_1d.default.createElement(Component, _extends({
    className: classes
  }, rest), react_1d.default.createElement("ul", {
    className: "nav"
  }, children));
}
var NavSubNavContext = react_1d.default.createContext(false);
var NavItem = react_1.forwardRef(function (_ref2, ref) {
  var children = _ref2.children, LinkComponent = _ref2.LinkComponent, value = _ref2.value, className = _ref2.className, href = _ref2.href, to = _ref2.to, type = _ref2.type, icon = _ref2.icon, forcedHasSubNav = _ref2.hasSubNav, active = _ref2.active, subItems = _ref2.subItems, subItemsObjects = _ref2.subItemsObjects, useExact = _ref2.useExact, _ref2$position = _ref2.position, onClick = _ref2.onClick, _ref2$as = _ref2.as, as = _ref2$as === void 0 ? El.Li : _ref2$as, linkAs = _ref2.linkAs, linkProps = _ref2.linkProps, _ref2$link = _ref2.link, link = _ref2$link === void 0 ? true : _ref2$link, subNav = _ref2.subNav, props = _objectWithoutProperties(_ref2, ["children", "LinkComponent", "value", "className", "href", "to", "type", "icon", "hasSubNav", "active", "subItems", "subItemsObjects", "useExact", "position", "onClick", "as", "linkAs", "linkProps", "link", "subNav"]);
  var _useState = react_1.useState(false), _useState2 = _slicedToArray(_useState, 2), isOpen = _useState2[0], setIsOpen = _useState2[1];
  var topLevelSubNavContext = react_1.useContext(NavSubNavContext);
  var hasSubNav = forcedHasSubNav || !!subItems || !!subItemsObjects;
  var _isTopLevelSubNav = (subNav || hasSubNav) && topLevelSubNavContext === false;
  var Component = type || as;
  var _linkAs = LinkComponent || linkAs;
  var _linkProps = _objectSpread({}, linkProps, {
    href: href,
    to: to,
    icon: icon,
    active: active
  });
  var _handleOnClick = function _handleOnClick() {
    if (subNav || hasSubNav) {
      setIsOpen(!isOpen);
    }
    if (onClick) onClick();
  };
  var navLink = link ? react_1d.default.createElement(NavLink, _extends({
    as: _linkAs,
    collapsed: (subNav || hasSubNav) && isOpen === false,
    onClick: _handleOnClick,
    isToggle: subNav || hasSubNav
  }, _linkProps), value || children) : value || !hasSubNav && children;
  var wrapperClasses = classnames({
    "nav-item": true,
    show: isOpen
  }, className);
  var _ref = _isTopLevelSubNav ? useClickOutside(function () {
    setIsOpen(false);
  }, ref) : ref;
  var _navItem = react_1d.default.createElement(Component, _extends({
    className: wrapperClasses,
    ref: _ref
  }, props), react_1d.default.createElement(react_1d.default.Fragment, null, navLink, subNav && isOpen && react_1d.default.createElement(NavSubNav, {
    show: isOpen
  }, subNav), hasSubNav && isOpen && react_1d.default.createElement(NavSubNav, {
    show: isOpen
  }, subItems || subItemsObjects && subItemsObjects.map(function (a, i) {
    return react_1d.default.createElement(NavItem, _extends({
      key: i
    }, a));
  }) || children)));
  if (_isTopLevelSubNav) {
    return react_1d.default.createElement(NavSubNavContext.Provider, {
      value: true
    }, _navItem);
  }
  return _navItem;
});
function Header$1(_ref) {
  var _ref$as = _ref.as, as = _ref$as === void 0 ? El.Div : _ref$as, RootComponent = _ref.RootComponent, className = _ref.className, children = _ref.children, _ref$size = _ref.size, size = _ref$size === void 0 ? 1 : _ref$size, props = _objectWithoutProperties(_ref, ["as", "RootComponent", "className", "children", "size"]);
  var classes = classnames(("h").concat(size), className);
  var Component = RootComponent || as;
  return react_1d.default.createElement(Component, _extends({
    className: classes
  }, props), children);
}
function H6$1(_ref) {
  var children = _ref.children, _ref$as = _ref.as, as = _ref$as === void 0 ? "h6" : _ref$as, _ref$mt = _ref.mt, mt = _ref$mt === void 0 ? 0 : _ref$mt, _ref$mb = _ref.mb, mb = _ref$mb === void 0 ? 4 : _ref$mb, _ref$size = _ref.size, size = _ref$size === void 0 ? 6 : _ref$size, props = _objectWithoutProperties(_ref, ["children", "as", "mt", "mb", "size"]);
  return react_1d.default.createElement(Header$1, _extends({
    as: as,
    size: size,
    mt: mt,
    mb: mb
  }, props), children);
}
function NavBarHeading(_ref) {
  var children = _ref.children, className = _ref.className, rest = _objectWithoutProperties(_ref, ["children", "className"]);
  var classes = classnames("navbar-heading", {}, className);
  return react_1.createElement(H6$1, _extends({
    className: classes
  }, rest), children);
}
var Nav$1 = function Nav(_ref) {
  var _ref$as = _ref.as, Component = _ref$as === void 0 ? El.Ul : _ref$as, className = _ref.className, children = _ref.children, _ref$tabbed = _ref.tabbed, tabbed = _ref$tabbed === void 0 ? false : _ref$tabbed, items = _ref.items, itemsObjects = _ref.itemsObjects, routerContextComponentType = _ref.routerContextComponentType, isMenu = _ref.isMenu, heading = _ref.heading, rest = _objectWithoutProperties(_ref, ["as", "className", "children", "tabbed", "items", "itemsObjects", "routerContextComponentType", "isMenu", "heading"]);
  var _useState = react_1.useState(""), _useState2 = _slicedToArray(_useState, 2), pathName = _useState2[0], setPathName = _useState2[1];
  var routerCallback = function routerCallback(location) {
    setPathName(location.pathname);
  };
  var classes = classnames("nav", "navbar-nav", {
    "navbar-menu": isMenu,
    "nav-tabs": tabbed
  }, className);
  var element = null;
  if (routerContextComponentType) {
    var routerContextComponentFactory = react_1d.default.createFactory(routerContextComponentType);
    element = routerContextComponentFactory({
      callback: routerCallback
    });
  }
  var _items = items || itemsObjects && itemsObjects.map(function (_ref2, i) {
    var active = _ref2.active, restItemProps = _objectWithoutProperties(_ref2, ["active"]);
    return react_1d.default.createElement(NavItem, _extends({
      key: i,
      hasSubNav: (restItemProps.subItems || restItemProps.subItemsObjects) === true
    }, restItemProps));
  });
  var _children = _items || children;
  return react_1d.default.createElement(react_1d.default.Fragment, null, element, react_1d.default.createElement(Component, _extends({
    className: classes
  }, rest), heading && react_1d.default.createElement(NavBarHeading, null, heading), _children));
};
function NavSubItem(_ref) {
  var children = _ref.children, as = _ref.as, LinkComponent = _ref.LinkComponent, value = _ref.value, props = _objectWithoutProperties(_ref, ["children", "as", "LinkComponent", "value"]);
  var _as = LinkComponent || as;
  var _children = value || children;
  return react_1.createElement(CompoundDropdown.Item, _extends({
    RootComponent: _as
  }, props), _children);
}
function NavSubmenu(_ref) {
  var _ref$as = _ref.as, Component = _ref$as === void 0 ? El.Div : _ref$as, className = _ref.className, children = _ref.children, rest = _objectWithoutProperties(_ref, ["as", "className", "children"]);
  var classes = classnames({
    nav: true,
    "nav-submenu": true
  }, className);
  return react_1.createElement(Component, _extends({
    className: classes
  }, rest), children);
}
function NavSubmenuItem(_ref) {
  var className = _ref.className, _ref$as = _ref.as, as = _ref$as === void 0 ? El.A : _ref$as, RootComponent = _ref.RootComponent, icon = _ref.icon, children = _ref.children, _ref$active = _ref.active, active = _ref$active === void 0 ? false : _ref$active, rest = _objectWithoutProperties(_ref, ["className", "as", "RootComponent", "icon", "children", "active"]);
  var classes = classnames({
    "nav-item": true,
    active: active
  }, className);
  var Component = RootComponent || as;
  return react_1.createElement(Component, _extends({
    className: classes
  }, rest), icon && react_1.createElement(react_1.Fragment, null, react_1.createElement(Icon, {
    name: icon
  })), children);
}
function NavBar(_ref) {
  var children = _ref.children, className = _ref.className, isDark = _ref.isDark, isSide = _ref.isSide, _ref$side = _ref.side, side = _ref$side === void 0 ? "left" : _ref$side, expand = _ref.expand, rest = _objectWithoutProperties(_ref, ["children", "className", "isDark", "isSide", "side", "expand"]);
  var classes = classnames("navbar", _defineProperty({
    "navbar-side": isSide,
    "navbar-dark": isDark,
    "navbar-right": side === "right"
  }, ("navbar-expand-").concat(expand), expand), className);
  return react_1.createElement(El.Nav, _extends({
    className: classes
  }, rest), children);
}
var CompoundNav = Nav$1;
CompoundNav.displayName = "Nav";
CompoundNav.Item = NavItem;
CompoundNav.SubItem = NavSubItem;
CompoundNav.Link = NavLink;
CompoundNav.LinkTitle = NavLinkTitle;
CompoundNav.Submenu = NavSubmenu;
CompoundNav.SubmenuItem = NavSubmenuItem;
CompoundNav.SubNav = NavSubNav;
CompoundNav.Bar = NavBar;
CompoundNav.BarHeading = NavBarHeading;
function NotificationTray(props) {
  var children = props.children, unread = props.unread, notificationsObjects = props.notificationsObjects, markAllAsRead = props.markAllAsRead;
  var notifications = children && react_1.Children.toArray(children);
  return react_1.createElement(CompoundDropdown, {
    triggerAs: CompoundNav.Link,
    triggerContent: unread && react_1.createElement("span", {
      className: "nav-unread"
    }),
    toggle: false,
    icon: "bell",
    isNavLink: true,
    position: "bottom-end",
    arrow: true,
    arrowPosition: "right",
    flex: true,
    items: react_1.createElement(react_1.Fragment, null, notifications && notifications.map(function (n, i) {
      return react_1.createElement(CompoundDropdown.Item, {
        className: "d-flex",
        key: i
      }, n);
    }) || notificationsObjects && notificationsObjects.map(function (n, i) {
      return react_1.createElement(CompoundDropdown.Item, {
        className: ("d-flex ").concat(n.unread ? "bg-light" : ""),
        key: i
      }, react_1.createElement(Notification, {
        unread: n.unread,
        avatarURL: n.avatarURL,
        message: n.message,
        time: n.time
      }));
    }), markAllAsRead && unread && react_1.createElement(react_1.Fragment, null, react_1.createElement(CompoundDropdown.ItemDivider, null), react_1.createElement(CompoundDropdown.Item, {
      className: "text-center text-muted-dark",
      onClick: function onClick() {
        return markAllAsRead();
      }
    }, "Mark all as read")))
  });
}
var CompoundNotification = Notification;
CompoundNotification.Tray = NotificationTray;
var defaultOptions = {
  profile: {
    icon: "user",
    value: "Profile",
    to: "/profile"
  },
  settings: {
    icon: "settings",
    value: "Settings",
    to: "/settings"
  },
  mail: {
    icon: "mail",
    value: "Inbox",
    to: "/mail"
  },
  message: {
    icon: "send",
    value: "Message",
    to: "/message"
  },
  help: {
    icon: "help-circle",
    value: "Need help?",
    to: "/help"
  },
  logout: {
    icon: "log-out",
    value: "Sign out",
    to: "/logout"
  },
  divider: {
    isDivider: true
  }
};
var itemsFromDefaultOptions = function itemsFromDefaultOptions(options) {
  return options.map(function (opt) {
    return typeof opt === "string" ? defaultOptions[opt] : opt;
  });
};
function AccountDropdown(_ref) {
  var avatarURL = _ref.avatarURL, name = _ref.name, description = _ref.description, _ref$options = _ref.options, options = _ref$options === void 0 ? [] : _ref$options, optionsRootComponent = _ref.optionsRootComponent, rest = _objectWithoutProperties(_ref, ["avatarURL", "name", "description", "options", "optionsRootComponent"]);
  var itemsObjects = itemsFromDefaultOptions(options);
  return react_1d.default.createElement(CompoundDropdown, _extends({
    as: CompoundNav.Item,
    link: false,
    triggerClassName: "d-flex align-items-center py-0 px-lg-0 px-2 text-color ml-2",
    triggerAs: CompoundNav.Link,
    triggerContent: react_1d.default.createElement(react_1d.default.Fragment, null, avatarURL && react_1d.default.createElement(Avatar, {
      imageURL: avatarURL
    }), react_1d.default.createElement("span", {
      className: "ml-2 d-none d-lg-block leading-none"
    }, react_1d.default.createElement("span", null, name), react_1d.default.createElement("span", {
      className: "text-muted d-block mt-1 text-h6"
    }, description))),
    position: "bottom-end",
    arrow: true,
    arrowPosition: "right",
    toggle: false,
    itemsObject: itemsObjects,
    itemsRootComponent: optionsRootComponent
  }, rest));
}
var Button$1 = react_1.forwardRef(function (_ref, ref) {
  var _cn;
  var size = _ref.size, outline = _ref.outline, link = _ref.link, block = _ref.block, className = _ref.className, children = _ref.children, color = _ref.color, square = _ref.square, pill = _ref.pill, icon = _ref.icon, _ref$social = _ref.social, social = _ref$social === void 0 ? "" : _ref$social, loading = _ref.loading, isDropdownToggle = _ref.isDropdownToggle, isOption = _ref.isOption, RootComponent = _ref.RootComponent, _ref$as = _ref.as, as = _ref$as === void 0 ? El.Button : _ref$as, rootRef = _ref.rootRef, rest = _objectWithoutProperties(_ref, ["size", "outline", "link", "block", "className", "children", "color", "square", "pill", "icon", "social", "loading", "isDropdownToggle", "isOption", "RootComponent", "as", "rootRef"]);
  var classes = classnames((_cn = {
    btn: true
  }, _defineProperty(_cn, ("btn-").concat(size), !!size), _defineProperty(_cn, "btn-block", block), _defineProperty(_cn, ("btn-outline-").concat(color), outline && !!color), _defineProperty(_cn, "btn-link", link), _defineProperty(_cn, "disabled", rest.disabled), _defineProperty(_cn, ("btn-").concat(color), !!color && !outline), _defineProperty(_cn, ("btn-").concat(social), !!social), _defineProperty(_cn, "btn-square", square), _defineProperty(_cn, "btn-pill", pill), _defineProperty(_cn, "btn-icon", !children), _defineProperty(_cn, "btn-loading", loading), _defineProperty(_cn, "dropdown-toggle", isDropdownToggle), _defineProperty(_cn, "btn-option", isOption), _cn), className);
  var Component = RootComponent || as;
  var childrenForAll = react_1d.default.createElement(react_1d.default.Fragment, null, social ? react_1d.default.createElement(Icon, {
    name: social,
    prefix: "fa",
    className: children ? "mr-2" : ""
  }) : icon ? react_1d.default.createElement(Icon, {
    name: icon,
    className: children ? "mr-2" : ""
  }) : null, children);
  return react_1d.default.createElement(Component, _extends({
    className: classes,
    ref: rootRef || ref
  }, rest), childrenForAll);
});
function ButtonList(_ref) {
  var className = _ref.className, children = _ref.children, _ref$align = _ref.align, align = _ref$align === void 0 ? "" : _ref$align, props = _objectWithoutProperties(_ref, ["className", "children", "align"]);
  var classes = classnames(_defineProperty({
    "btn-list": true
  }, ("text-").concat(align), !!align), className);
  return react_1d.default.createElement(El.Div, _extends({
    className: classes
  }, props), children);
}
var ButtonDropdown = function ButtonDropdown(_ref) {
  var children = _ref.children, value = _ref.value, dropdownProps = _ref.dropdownProps, buttonProps = _objectWithoutProperties(_ref, ["children", "value", "dropdownProps"]);
  var _useState = react_1.useState(false), _useState2 = _slicedToArray(_useState, 2), isOpen = _useState2[0], setIsOpen = _useState2[1];
  var _handleButtonOnClick = function _handleButtonOnClick(e) {
    e.preventDefault();
    setIsOpen(function (s) {
      return !s;
    });
  };
  return react_1d.default.createElement(Manager, null, react_1d.default.createElement(Reference, null, function (_ref2) {
    var ref = _ref2.ref;
    return react_1d.default.createElement(Button$1, _extends({
      onClick: _handleButtonOnClick,
      rootRef: ref,
      isDropdownToggle: true
    }, buttonProps), value);
  }), react_1d.default.createElement(DropdownMenu, _extends({
    show: isOpen
  }, dropdownProps), children));
};
var CompoundButton = Button$1;
CompoundButton.List = ButtonList;
CompoundButton.Dropdown = ButtonDropdown;
var Alert = function Alert(_ref) {
  var className = _ref.className, style = _ref.style, children = _ref.children, type = _ref.type, icon = _ref.icon, hasExtraSpace = _ref.hasExtraSpace, isDismissible = _ref.isDismissible, avatar = _ref.avatar, onDismissClick = _ref.onDismissClick, onClick = _ref.onClick, onMouseEnter = _ref.onMouseEnter, onMouseLeave = _ref.onMouseLeave, onPointerEnter = _ref.onPointerEnter, onPointerLeave = _ref.onPointerLeave;
  var _useState = react_1.useState(false), _useState2 = _slicedToArray(_useState, 2), isDismissed = _useState2[0], setIsDismissed = _useState2[1];
  var _handleOnDismissClick = function _handleOnDismissClick() {
    if (onDismissClick) onDismissClick();
    setIsDismissed(true);
  };
  var classes = classnames("alert", ("alert-").concat(type), {
    "alert-icon": !!icon,
    "mt-5 mb-6": hasExtraSpace,
    "alert-dismissible": isDismissible,
    "alert-avatar": !!avatar
  }, className);
  var events = {
    onClick: onClick,
    onMouseEnter: onMouseEnter,
    onMouseLeave: onMouseLeave,
    onPointerEnter: onPointerEnter,
    onPointerLeave: onPointerLeave
  };
  if (isDismissed) {
    return null;
  }
  return react_1d.default.createElement("div", _extends({}, events, {
    className: classes,
    style: style,
    role: "alert"
  }), isDismissible && react_1d.default.createElement(CompoundButton, {
    className: "close",
    onClick: _handleOnDismissClick
  }), avatar && react_1d.default.createElement(Avatar, {
    imageURL: avatar
  }), icon && react_1d.default.createElement(Icon, {
    name: icon,
    className: "mr-2",
    isAriaHidden: true
  }), children);
};
function AlertLink(_ref) {
  var children = _ref.children, className = _ref.className, rest = _objectWithoutProperties(_ref, ["children", "className"]);
  var classes = classnames("alert-link", className);
  return react_1.createElement(El.A, _extends({
    className: classes
  }, rest), children);
}
var CompoundAlert = Alert;
CompoundAlert.Link = AlertLink;
function CardHeader(_ref) {
  var className = _ref.className, children = _ref.children, _ref$backgroundURL = _ref.backgroundURL, backgroundURL = _ref$backgroundURL === void 0 ? "" : _ref$backgroundURL, rest = _objectWithoutProperties(_ref, ["className", "children", "backgroundURL"]);
  var classes = classnames("card-header", className);
  return react_1.createElement(El.Div, _extends({
    className: classes,
    style: backgroundURL ? Object.assign({
      backgroundImage: ("url(").concat(backgroundURL, ")")
    }) : null
  }, rest), children);
}
function CardTitle(_ref) {
  var className = _ref.className, children = _ref.children, RootComponent = _ref.RootComponent, _ref$as = _ref.as, as = _ref$as === void 0 ? El.H3 : _ref$as, rest = _objectWithoutProperties(_ref, ["className", "children", "RootComponent", "as"]);
  var classes = classnames("card-title", className);
  var Component = RootComponent || as;
  return react_1.createElement(Component, _extends({
    className: classes
  }, rest), children);
}
function CardBody(_ref) {
  var className = _ref.className, children = _ref.children, rest = _objectWithoutProperties(_ref, ["className", "children"]);
  var _className = classnames("card-body", className);
  return react_1d.default.createElement(El.Div, _extends({
    className: _className
  }, rest), children);
}
function CardOptions(_ref) {
  var className = _ref.className, children = _ref.children, rest = _objectWithoutProperties(_ref, ["className", "children"]);
  var classes = classnames("card-options", className);
  return react_1.createElement(El.Div, _extends({
    className: classes
  }, rest), children);
}
function CardOptionsItem(_ref) {
  var className = _ref.className, children = _ref.children, icon = _ref.icon, type = _ref.type, rest = _objectWithoutProperties(_ref, ["className", "children", "icon", "type"]);
  var classes = classnames({
    "card-options-collapse": type === "collapse",
    "card-options-remove": type === "close",
    "card-options-fullscreen": type === "fullscreen"
  }, className);
  var dataToggle = (function () {
    switch (type) {
      case "collapse":
        return "card-collapse";
      case "close":
        return "card-remove";
      case "fullscreen":
        return "card-remove";
      default:
        return "";
    }
  })();
  var iconName = (function () {
    if (icon) {
      return icon;
    }
    switch (type) {
      case "collapse":
        return "chevron-up";
      case "close":
        return "x";
      case "fullscreen":
        return "maximize";
      default:
        return "";
    }
  })();
  return react_1.createElement(El.A, _extends({
    className: classes,
    "data-toggle": dataToggle
  }, rest), react_1.createElement(Icon, {
    name: iconName
  }));
}
function CardStatus(_ref) {
  var _cn;
  var className = _ref.className, children = _ref.children, color = _ref.color, side = _ref.side, rest = _objectWithoutProperties(_ref, ["className", "children", "color", "side"]);
  var classes = classnames((_cn = {
    "card-status": true
  }, _defineProperty(_cn, ("bg-").concat(color), true), _defineProperty(_cn, "card-status-left", side), _cn), className);
  return react_1.createElement(El.Div, _extends({
    className: classes
  }, rest), children);
}
function CardAlert(_ref) {
  var className = _ref.className, children = _ref.children, color = _ref.color, rest = _objectWithoutProperties(_ref, ["className", "children", "color"]);
  var classes = classnames(("card-alert alert alert-").concat(color, " mb-0"), className);
  return react_1.createElement(El.Div, _extends({
    className: classes
  }, rest), children);
}
function CardFooter(_ref) {
  var className = _ref.className, children = _ref.children, rest = _objectWithoutProperties(_ref, ["className", "children"]);
  var classes = classnames("card-footer", className);
  return react_1d.default.createElement(El.Div, _extends({
    className: classes
  }, rest), children);
}
var Card = function Card(_ref) {
  var className = _ref.className, children = _ref.children, _ref$as = _ref.as, as = _ref$as === void 0 ? El.Div : _ref$as, RootComponent = _ref.RootComponent, title = _ref.title, body = _ref.body, options = _ref.options, isCollapsible = _ref.isCollapsible, isClosable = _ref.isClosable, isFullscreenable = _ref.isFullscreenable, aside = _ref.aside, statusColor = _ref.statusColor, statusSide = _ref.statusSide, alert = _ref.alert, alertColor = _ref.alertColor, footer = _ref.footer, isClosed = _ref.isClosed, isCollapsed = _ref.isCollapsed, rest = _objectWithoutProperties(_ref, ["className", "children", "as", "RootComponent", "title", "body", "options", "isCollapsible", "isClosable", "isFullscreenable", "aside", "statusColor", "statusSide", "alert", "alertColor", "footer", "isClosed", "isCollapsed"]);
  var _useState = react_1.useState(isClosed || false), _useState2 = _slicedToArray(_useState, 2), _isClosed = _useState2[0], setIsClosed = _useState2[1];
  var _useState3 = react_1.useState(isCollapsed || false), _useState4 = _slicedToArray(_useState3, 2), _isCollapsed = _useState4[0], setIsCollapsed = _useState4[1];
  var _useState5 = react_1.useState(false), _useState6 = _slicedToArray(_useState5, 2), isFullscreen = _useState6[0], setIsFullscreen = _useState6[1];
  var handleCloseOnClick = function handleCloseOnClick() {
    setIsClosed(function (s) {
      return !s;
    });
  };
  var handleCollapseOnClick = function handleCollapseOnClick() {
    setIsCollapsed(function (s) {
      return !s;
    });
  };
  var handleFullscreenOnClick = function handleFullscreenOnClick() {
    setIsFullscreen(function (s) {
      return !s;
    });
  };
  if (_isClosed) {
    return null;
  }
  var classes = classnames({
    card: true,
    aside: aside,
    "card-collapsed": _isCollapsed,
    "card-fullscreen": isFullscreen
  }, className);
  var Component = RootComponent || as;
  var card_options = (options || isCollapsible || isClosable) && react_1d.default.createElement(CardOptions, null, options, isCollapsible && react_1d.default.createElement(CardOptionsItem, {
    onClick: handleCollapseOnClick,
    type: "collapse"
  }), isFullscreenable && react_1d.default.createElement(CardOptionsItem, {
    type: "fullscreen",
    onClick: handleFullscreenOnClick
  }), isClosable && react_1d.default.createElement(CardOptionsItem, {
    type: "close",
    onClick: handleCloseOnClick
  }));
  var card_status = statusColor && react_1d.default.createElement(CardStatus, {
    color: statusColor,
    side: statusSide
  });
  var card_alert = alert && alertColor && react_1d.default.createElement(CardAlert, {
    color: alertColor
  }, alert);
  var card_header = title && react_1d.default.createElement(CardHeader, null, react_1d.default.createElement(CardTitle, null, title), card_options);
  var card_body = body && react_1d.default.createElement(CardBody, null, body);
  var card_footer = footer && react_1d.default.createElement(CardFooter, null, footer);
  if (card_header !== null || card_body !== null) {
    return react_1d.default.createElement(Component, _extends({
      className: classes
    }, rest), card_status, card_header, card_alert, card_body || children, card_footer);
  }
  return react_1d.default.createElement(Component, _extends({
    className: classes
  }, rest), children);
};
function CardMap(_ref) {
  var className = _ref.className, children = _ref.children, placeholder = _ref.placeholder, rest = _objectWithoutProperties(_ref, ["className", "children", "placeholder"]);
  var classes = classnames("card-map", {
    "card-map-placeholder": placeholder
  }, className);
  return react_1.createElement(El.Div, _extends({
    className: classes,
    style: placeholder ? {
      backgroundImage: ("url(").concat(placeholder, ")")
    } : {}
  }, rest), children);
}
var CompoundCard = Card;
CompoundCard.Alert = CardAlert;
CompoundCard.Body = CardBody;
CompoundCard.Footer = CardFooter;
CompoundCard.Header = CardHeader;
CompoundCard.Map = CardMap;
CompoundCard.Options = CardOptions;
CompoundCard.OptionsItem = CardOptionsItem;
CompoundCard.Status = CardStatus;
CompoundCard.Title = CardTitle;
function BlogCard(_ref) {
  var children = _ref.children, title = _ref.title, description = _ref.description, avatarUrl = _ref.avatarUrl, imgUrl = _ref.imgUrl, imgAlt = _ref.imgAlt, aside = _ref.aside, authorName = _ref.authorName, date = _ref.date, _ref$imgSrc = _ref.imgSrc, imgSrc = _ref$imgSrc === void 0 ? "" : _ref$imgSrc, _ref$avatarImgSrc = _ref.avatarImgSrc, avatarImgSrc = _ref$avatarImgSrc === void 0 ? "" : _ref$avatarImgSrc, iconName = _ref.iconName, iconHref = _ref.iconHref, postHref = _ref.postHref, profileHref = _ref.profileHref;
  return !aside ? react_1.createElement(CompoundCard, null, react_1.createElement("a", {
    href: postHref
  }, react_1.createElement("img", {
    className: "card-img-top",
    src: imgSrc,
    alt: imgAlt
  })), react_1.createElement(CompoundCard.Body, {
    className: "d-flex flex-column"
  }, react_1.createElement("h4", null, react_1.createElement("a", {
    href: postHref
  }, title)), react_1.createElement("div", {
    className: "text-muted"
  }, description), react_1.createElement("div", {
    className: "d-flex align-items-center pt-5 mt-auto"
  }, react_1.createElement("div", {
    className: "avatar avatar-md mr-3",
    style: {
      backgroundImage: ("url(").concat(avatarImgSrc)
    }
  }), react_1.createElement("div", null, react_1.createElement("a", {
    href: profileHref,
    className: "text-default"
  }, authorName), react_1.createElement("small", {
    className: "d-block text-muted"
  }, date)), react_1.createElement("div", {
    className: "ml-auto text-muted"
  }, react_1.createElement("a", {
    href: iconHref,
    className: "icon d-none d-md-inline-block ml-3"
  }, react_1.createElement(Icon, {
    prefix: "fe",
    name: iconName || "heart"
  })))))) : react_1.createElement(CompoundCard, {
    className: "card-aside"
  }, react_1.createElement("a", {
    href: postHref,
    className: "card-aside-column",
    style: {
      backgroundImage: ("url(").concat(imgSrc, ")")
    }
  }, ""), react_1.createElement(CompoundCard.Body, {
    className: "d-flex flex-column"
  }, react_1.createElement("h4", null, react_1.createElement("a", {
    href: postHref
  }, title)), react_1.createElement("div", {
    className: "text-muted"
  }, description), react_1.createElement("div", {
    className: "d-flex align-items-center pt-5 mt-auto"
  }, react_1.createElement("div", {
    className: "avatar avatar-md mr-3",
    style: {
      backgroundImage: ("url(").concat(avatarImgSrc)
    }
  }), react_1.createElement("div", null, react_1.createElement("a", {
    href: profileHref,
    className: "text-default"
  }, authorName), react_1.createElement("small", {
    className: "d-block text-muted"
  }, date)), react_1.createElement("div", {
    className: "ml-auto text-red"
  }, react_1.createElement("a", {
    href: iconHref,
    className: "icon d-none d-md-inline-block ml-3"
  }, react_1.createElement(Icon, {
    prefix: "fe",
    name: iconName || "heart"
  }))))));
}
function Breadcrumb(_ref) {
  var children = _ref.children, className = _ref.className, separator = _ref.separator, rest = _objectWithoutProperties(_ref, ["children", "className", "separator"]);
  var classes = classnames("breadcrumb", _defineProperty({}, ("breadcrumb-").concat(separator, "s"), separator && separator !== "slash"), className);
  return react_1d.default.createElement(El.Ol, _extends({
    className: classes
  }, rest), children);
}
function BreadcrumbItem(_ref) {
  var children = _ref.children, className = _ref.className, active = _ref.active, rest = _objectWithoutProperties(_ref, ["children", "className", "active"]);
  var classes = classnames("breadcrumb-item", {
    active: active
  }, className);
  return react_1d.default.createElement(El.Li, _extends({
    className: classes
  }, rest), children);
}
var CompoundBreadcrumb = Breadcrumb;
CompoundBreadcrumb.Item = BreadcrumbItem;
function ListItem(_ref) {
  var className = _ref.className, children = _ref.children, inline = _ref.inline, rest = _objectWithoutProperties(_ref, ["className", "children", "inline"]);
  var classes = classnames({
    "list-inline-item": inline
  }, className);
  return react_1.createElement(El.Li, _extends({
    className: classes
  }, rest), children);
}
function ListGroup(_ref) {
  var className = _ref.className, children = _ref.children, transparent = _ref.transparent, isCardBody = _ref.isCardBody, rest = _objectWithoutProperties(_ref, ["className", "children", "transparent", "isCardBody"]);
  var classes = classnames("list-group", "mb-0", {
    "list-group-transparent": transparent,
    "card-list-group": isCardBody
  }, className);
  return react_1.createElement(El.Div, _extends({
    className: classes
  }, rest), children);
}
function ListGroupItem(_ref) {
  var className = _ref.className, children = _ref.children, RootComponent = _ref.RootComponent, _ref$as = _ref.as, as = _ref$as === void 0 ? El.A : _ref$as, active = _ref.active, action = _ref.action, icon = _ref.icon, rest = _objectWithoutProperties(_ref, ["className", "children", "RootComponent", "as", "active", "action", "icon"]);
  var classes = classnames("list-group-item", {
    "list-group-item-action": action
  }, {
    active: active
  }, className);
  var Component = RootComponent || as;
  return react_1.createElement(Component, _extends({
    className: classes
  }, rest), icon && react_1.createElement("span", {
    className: "mr-3 icon"
  }, react_1.createElement(Icon, {
    prefix: "fe",
    name: icon
  }), " "), children);
}
function List(_ref) {
  var className = _ref.className, children = _ref.children, unstyled = _ref.unstyled, seperated = _ref.seperated, inline = _ref.inline, rest = _objectWithoutProperties(_ref, ["className", "children", "unstyled", "seperated", "inline"]);
  var classes = classnames({
    list: !unstyled,
    "list-unstyled": unstyled,
    "list-seperated": seperated,
    "list-inline": inline
  }, className);
  return react_1.createElement(El.Ul, _extends({
    className: classes
  }, rest), children);
}
List.Item = ListItem;
List.Group = ListGroup;
List.GroupItem = ListGroupItem;
function Media(_ref) {
  var className = _ref.className, children = _ref.children, rounded = _ref.rounded, aspectRatio = _ref.aspectRatio, rest = _objectWithoutProperties(_ref, ["className", "children", "rounded", "aspectRatio"]);
  var classes = classnames("media", _defineProperty({
    rounded: rounded
  }, ("media-").concat(aspectRatio), aspectRatio), className);
  return react_1d.default.createElement(El.Div, _extends({
    className: classes
  }, rest), children);
}
function MediaBody(_ref) {
  var className = _ref.className, children = _ref.children;
  var classes = classnames("media-body", className);
  return react_1.createElement("div", {
    className: classes
  }, children);
}
function MediaHeading(_ref) {
  var className = _ref.className, children = _ref.children;
  var classes = classnames("media-heading", className);
  return react_1.createElement("div", {
    className: classes
  }, children);
}
function MediaList(_ref) {
  var className = _ref.className, children = _ref.children;
  var classes = classnames("media-list", className);
  return react_1.createElement("ul", {
    className: classes
  }, children);
}
function MediaObject(_ref) {
  var className = _ref.className, children = _ref.children, avatar = _ref.avatar, objectURL = _ref.objectURL, size = _ref.size, rounded = _ref.rounded, alt = _ref.alt;
  var classes = classnames("media-object", className);
  var imageClasses = classnames({
    "d-flex": true,
    rounded: rounded
  });
  var mediaImage = avatar ? react_1.createElement(Avatar, {
    size: size,
    imageURL: objectURL
  }) : objectURL ? react_1.createElement("img", {
    className: imageClasses,
    src: objectURL,
    alt: alt
  }) : null;
  return react_1.createElement("div", {
    className: classes
  }, mediaImage, children);
}
function listItemFromObjectFactory() {
  var asButtons = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
  var iconPrefix = arguments.length > 1 ? arguments[1] : undefined;
  return function (item, index) {
    var itemContent = asButtons ? react_1.createElement(CompoundButton, {
      to: item.to,
      social: item.name,
      color: item.color,
      size: "sm"
    }, item.label) : react_1.createElement("a", {
      href: item.to,
      "data-original-title": item.tooltip
    }, react_1.createElement(Icon, {
      prefix: iconPrefix,
      name: item.name
    }));
    return react_1.createElement(List.Item, {
      key: index,
      inline: true
    }, itemContent);
  };
}
function SocialNetworksList(props) {
  var children = props.children, className = props.className, asButtons = props.asButtons, _props$prefix = props.prefix, prefix = _props$prefix === void 0 ? "fe" : _props$prefix, items = props.items, itemsObjects = props.itemsObjects;
  var classes = classnames("social-links", className);
  var getObjectListItem = listItemFromObjectFactory(asButtons, prefix);
  var contents = itemsObjects && itemsObjects.map(getObjectListItem) || items && items.map(function (item, index) {
    return react_1.createElement(List.Item, {
      key: index,
      inline: true
    }, item);
  }) || children;
  return react_1.createElement(List, {
    inline: true,
    className: classes
  }, contents);
}
var Tooltip = function Tooltip(_ref) {
  var className = _ref.className, children = _ref.children, placement = _ref.placement, content = _ref.content, _ref$arrow = _ref.arrow, arrow = _ref$arrow === void 0 ? true : _ref$arrow;
  var _useState = react_1.useState(false), _useState2 = _slicedToArray(_useState, 2), isShown = _useState2[0], setIsShown = _useState2[1];
  var _handleTriggerOnMouseEnter = function _handleTriggerOnMouseEnter(e) {
    e.preventDefault();
    setIsShown(true);
  };
  var _handleTriggerOnMouseLeave = function _handleTriggerOnMouseLeave(e) {
    e.preventDefault();
    setIsShown(false);
  };
  var classes = classnames("tooltip", placement && "bs-tooltip-" + placement, "show", className);
  var arrowClasses = classnames("arrow", placement === "top" || placement === "bottom" ? "tbr-arrow-vertical" : "tbr-arrow-horizontal");
  return react_1d.default.createElement(Manager, null, react_1d.default.createElement(Reference, null, function (_ref2) {
    var ref = _ref2.ref;
    var referenceProps = {
      ref: ref,
      onMouseEnter: _handleTriggerOnMouseEnter,
      onMouseLeave: _handleTriggerOnMouseLeave
    };
    return typeof children !== "undefined" && react_1d.default.cloneElement(children, referenceProps);
  }), isShown && react_1d.default.createElement(Popper$1, {
    placement: placement,
    eventsEnabled: true,
    positionFixed: false
  }, function (_ref3) {
    var ref = _ref3.ref, _ref3$style = _ref3.style, opacity = _ref3$style.opacity, style = _objectWithoutProperties(_ref3$style, ["opacity"]), placement = _ref3.placement;
    return react_1d.default.createElement("div", {
      className: classes,
      "data-placement": placement,
      style: style,
      ref: ref
    }, arrow && react_1d.default.createElement("div", {
      className: arrowClasses
    }), react_1d.default.createElement("div", {
      className: "tooltip-inner"
    }, content));
  }));
};
function MediaBodySocial(_ref) {
  var className = _ref.className, children = _ref.children, name = _ref.name, workTitle = _ref.workTitle, _ref$facebook = _ref.facebook, facebook = _ref$facebook === void 0 ? "" : _ref$facebook, _ref$twitter = _ref.twitter, twitter = _ref$twitter === void 0 ? "" : _ref$twitter, _ref$phone = _ref.phone, phone = _ref$phone === void 0 ? "" : _ref$phone, _ref$skype = _ref.skype, skype = _ref$skype === void 0 ? "" : _ref$skype;
  var fbIcon;
  var twitterIcon;
  var phoneIcon;
  var skypeIcon;
  if (facebook) {
    fbIcon = react_1.createElement(List.Item, {
      inline: true
    }, react_1.createElement(Tooltip, {
      content: "Facebook",
      placement: "top"
    }, react_1.createElement("a", {
      href: "/Profile"
    }, react_1.createElement(Icon, {
      prefix: "fa",
      name: "facebook"
    }))));
  }
  if (twitter) {
    twitterIcon = react_1.createElement(List.Item, {
      inline: true
    }, react_1.createElement(Tooltip, {
      content: "Twitter",
      placement: "top"
    }, react_1.createElement("a", {
      href: "/Profile"
    }, react_1.createElement(Icon, {
      prefix: "fa",
      name: "twitter"
    }))));
  }
  if (phone) {
    phoneIcon = react_1.createElement(List.Item, {
      inline: true
    }, react_1.createElement(Tooltip, {
      content: "+1 234-567-8901",
      placement: "top"
    }, react_1.createElement("a", {
      href: "/Profile"
    }, react_1.createElement(Icon, {
      prefix: "fa",
      name: "phone"
    }))));
  }
  if (skype) {
    skypeIcon = react_1.createElement(List.Item, {
      inline: true
    }, react_1.createElement(Tooltip, {
      content: "@skypename",
      placement: "top"
    }, react_1.createElement("a", {
      href: "/Profile"
    }, react_1.createElement(Icon, {
      prefix: "fa",
      name: "skype"
    }))));
  }
  return react_1.createElement(MediaBody, null, react_1.createElement("h4", {
    className: "m-0"
  }, name), react_1.createElement("p", {
    className: "text-muted mb-0"
  }, workTitle), react_1.createElement(SocialNetworksList, {
    className: "mb-0 mt-2"
  }, fbIcon, twitterIcon, phoneIcon, skypeIcon), children);
}
function MediaListItem(_ref) {
  var className = _ref.className, children = _ref.children;
  var classes = classnames("media mt-4", className);
  return react_1.createElement("li", {
    className: classes
  }, children);
}
function MediaContent(_ref) {
  var className = _ref.className, children = _ref.children, rest = _objectWithoutProperties(_ref, ["className", "children"]);
  var classes = classnames("media-content", className);
  return react_1d.default.createElement(El.Div, _extends({
    className: classes
  }, rest), children);
}
var CompoundMedia = Media;
CompoundMedia.Body = MediaBody;
CompoundMedia.BodySocial = MediaBodySocial;
CompoundMedia.Heading = MediaHeading;
CompoundMedia.List = MediaList;
CompoundMedia.ListItem = MediaListItem;
CompoundMedia.Object = MediaObject;
CompoundMedia.Content = MediaContent;
function CommentList(_ref) {
  var className = _ref.className, children = _ref.children;
  var classes = classnames("card-list-group", className);
  return react_1.createElement(List.Group, {
    className: classes
  }, children);
}
function CommentReply(_ref) {
  var className = _ref.className, children = _ref.children, avatarURL = _ref.avatarURL, name = _ref.name, date = _ref.date, text = _ref.text;
  return react_1.createElement(CompoundMedia.ListItem, {
    className: className
  }, react_1.createElement(CompoundMedia.Object, {
    avatar: true,
    objectURL: avatarURL,
    className: "mr-4"
  }), react_1.createElement(CompoundMedia.Body, null, react_1.createElement("strong", null, name, ": "), text));
}
function Comment(_ref) {
  var className = _ref.className, children = _ref.children, avatarURL = _ref.avatarURL, name = _ref.name, date = _ref.date, text = _ref.text, replies = _ref.replies;
  var classes = classnames("py-5", className);
  return react_1.createElement(List.GroupItem, {
    className: classes
  }, react_1.createElement(CompoundMedia, null, react_1.createElement(CompoundMedia.Object, {
    avatar: true,
    objectURL: avatarURL,
    size: "md",
    className: "mr-4"
  }), react_1.createElement(CompoundMedia.Body, null, react_1.createElement(CompoundMedia.Heading, null, react_1.createElement("small", {
    className: "float-right text-muted"
  }, date), react_1.createElement("h5", null, name)), react_1.createElement(CompoundText, null, text), replies && react_1.createElement(CompoundMedia.List, null, replies))));
}
Comment.List = CommentList;
Comment.Reply = CommentReply;
function Form$1(_ref) {
  var children = _ref.children, _ref$as = _ref.as, Component = _ref$as === void 0 ? El.Form : _ref$as, rest = _objectWithoutProperties(_ref, ["children", "as"]);
  return react_1d.default.createElement(Component, rest, children);
}
function FormLabel(_ref) {
  var className = _ref.className, aside = _ref.aside, children = _ref.children, rest = _objectWithoutProperties(_ref, ["className", "aside", "children"]);
  var classes = classnames("form-label", className);
  return react_1d.default.createElement(El.Label, _extends({
    className: classes
  }, rest), aside && react_1d.default.createElement("span", {
    className: "form-label-small"
  }, aside), children);
}
function FormGroup(_ref) {
  var className = _ref.className, children = _ref.children, label = _ref.label, isRequired = _ref.isRequired, rest = _objectWithoutProperties(_ref, ["className", "children", "label", "isRequired"]);
  var classes = classnames("form-group", className);
  return react_1d.default.createElement(El.Div, _extends({
    className: classes
  }, rest), !label ? null : typeof label === "string" ? react_1d.default.createElement(FormLabel, null, label, isRequired && react_1d.default.createElement("span", {
    className: "form-required"
  }, "*")) : label, children);
}
var FormInput = react_1.forwardRef(function (_ref, ref) {
  var className = _ref.className, icon = _ref.icon, _ref$position = _ref.position, position = _ref$position === void 0 ? "prepend" : _ref$position, valid = _ref.valid, tick = _ref.tick, invalid = _ref.invalid, cross = _ref.cross, error = _ref.error, label = _ref.label, _ref$type = _ref.type, type = _ref$type === void 0 ? "text" : _ref$type, feedback = _ref.feedback, light = _ref.light, rest = _objectWithoutProperties(_ref, ["className", "icon", "position", "valid", "tick", "invalid", "cross", "error", "label", "type", "feedback", "light"]);
  var classes = classnames({
    "form-control": type !== "checkbox" && type !== "radio",
    "form-control-light": light,
    "custom-control-input": type === "checkbox" || type === "radio",
    "is-valid": valid,
    "state-valid": tick,
    "is-invalid": invalid || !!error,
    "state-invalid": cross || !!error
  }, className);
  var _feedback = error || feedback;
  var allInputProps = _objectSpread({
    className: classes,
    type: type
  }, rest);
  var _children = !icon ? react_1d.default.createElement(react_1d.default.Fragment, null, react_1d.default.createElement(El.Input, _extends({
    ref: ref
  }, allInputProps)), _feedback && react_1d.default.createElement("span", {
    className: "invalid-feedback"
  }, _feedback)) : react_1d.default.createElement(react_1d.default.Fragment, null, react_1d.default.createElement("div", {
    className: "input-icon"
  }, position === "prepend" && react_1d.default.createElement("span", {
    className: "input-icon-addon"
  }, react_1d.default.createElement(Icon, {
    name: icon
  })), react_1d.default.createElement(El.Input, _extends({
    ref: ref
  }, allInputProps)), position === "append" && react_1d.default.createElement("span", {
    className: "input-icon-addon"
  }, react_1d.default.createElement(Icon, {
    name: icon
  }))), _feedback && react_1d.default.createElement("span", {
    className: "invalid-feedback"
  }, _feedback));
  return label ? react_1d.default.createElement(FormGroup, {
    label: label
  }, _children) : _children;
});
function FormStaticText(_ref) {
  var children = _ref.children, rest = _objectWithoutProperties(_ref, ["children"]);
  return react_1d.default.createElement(El.Div, _extends({
    classNames: "form-control-plaintext"
  }, rest), children);
}
function FormTextarea(_ref) {
  var className = _ref.className, valid = _ref.valid, tick = _ref.tick, invalid = _ref.invalid, cross = _ref.cross, error = _ref.error, children = _ref.children, label = _ref.label, feedback = _ref.feedback, rest = _objectWithoutProperties(_ref, ["className", "valid", "tick", "invalid", "cross", "error", "children", "label", "feedback"]);
  var classes = classnames("form-control", {
    "is-valid": valid,
    "state-valid": tick,
    "is-invalid": invalid || !!error,
    "state-invalid": cross || !!error
  }, className);
  var _feedback = error || feedback;
  if (children) {
    rest.value = children;
  }
  var contents = react_1d.default.createElement(react_1d.default.Fragment, null, react_1d.default.createElement(El.Textarea, _extends({
    className: classes
  }, rest)), _feedback && react_1d.default.createElement("span", {
    className: "invalid-feedback"
  }, _feedback));
  return label ? react_1d.default.createElement(FormGroup, {
    label: label
  }, contents) : contents;
}
function GridRow(_ref) {
  var _cn;
  var className = _ref.className, children = _ref.children, cards = _ref.cards, deck = _ref.deck, gutters = _ref.gutters, _ref$alignItems = _ref.alignItems, alignItems = _ref$alignItems === void 0 ? "" : _ref$alignItems, _ref$justifyContent = _ref.justifyContent, justifyContent = _ref$justifyContent === void 0 ? "" : _ref$justifyContent, props = _objectWithoutProperties(_ref, ["className", "children", "cards", "deck", "gutters", "alignItems", "justifyContent"]);
  var classes = classnames("row", (_cn = {
    "row-cards": cards,
    "row-deck": deck
  }, _defineProperty(_cn, ("gutters-").concat(gutters), gutters), _defineProperty(_cn, ("align-items-").concat(alignItems), alignItems), _defineProperty(_cn, ("justify-content-").concat(justifyContent), justifyContent), _cn), className);
  return react_1d.default.createElement(El.Div, _extends({
    className: classes
  }, props), children);
}
function GridCol(_ref) {
  var _cn;
  var className = _ref.className, children = _ref.children, _ref$width = _ref.width, width = _ref$width === void 0 ? 0 : _ref$width, _ref$xs = _ref.xs, xs = _ref$xs === void 0 ? 0 : _ref$xs, _ref$sm = _ref.sm, sm = _ref$sm === void 0 ? 0 : _ref$sm, _ref$md = _ref.md, md = _ref$md === void 0 ? 0 : _ref$md, _ref$lg = _ref.lg, lg = _ref$lg === void 0 ? 0 : _ref$lg, _ref$xl = _ref.xl, xl = _ref$xl === void 0 ? 0 : _ref$xl, xsAuto = _ref.xsAuto, smAuto = _ref.smAuto, mdAuto = _ref.mdAuto, lgAuto = _ref.lgAuto, xlAuto = _ref.xlAuto, auto = _ref.auto, _ref$offset = _ref.offset, offset = _ref$offset === void 0 ? 0 : _ref$offset, _ref$offsetXs = _ref.offsetXs, offsetXs = _ref$offsetXs === void 0 ? 0 : _ref$offsetXs, _ref$offsetSm = _ref.offsetSm, offsetSm = _ref$offsetSm === void 0 ? 0 : _ref$offsetSm, _ref$offsetMd = _ref.offsetMd, offsetMd = _ref$offsetMd === void 0 ? 0 : _ref$offsetMd, _ref$offsetLg = _ref.offsetLg, offsetLg = _ref$offsetLg === void 0 ? 0 : _ref$offsetLg, _ref$offsetXl = _ref.offsetXl, offsetXl = _ref$offsetXl === void 0 ? 0 : _ref$offsetXl, order = _ref.order, orderXs = _ref.orderXs, orderSm = _ref.orderSm, orderMd = _ref.orderMd, orderLg = _ref.orderLg, orderXl = _ref.orderXl, _ref$ignoreCol = _ref.ignoreCol, ignoreCol = _ref$ignoreCol === void 0 ? false : _ref$ignoreCol, props = _objectWithoutProperties(_ref, ["className", "children", "width", "xs", "sm", "md", "lg", "xl", "xsAuto", "smAuto", "mdAuto", "lgAuto", "xlAuto", "auto", "offset", "offsetXs", "offsetSm", "offsetMd", "offsetLg", "offsetXl", "order", "orderXs", "orderSm", "orderMd", "orderLg", "orderXl", "ignoreCol"]);
  var classes = classnames((_cn = {
    col: !ignoreCol
  }, _defineProperty(_cn, ("col-").concat(width), width), _defineProperty(_cn, ("col-xs-").concat(xs), xs), _defineProperty(_cn, "col-xs-auto", xsAuto), _defineProperty(_cn, ("col-sm-").concat(sm), sm), _defineProperty(_cn, "col-sm-auto", smAuto), _defineProperty(_cn, ("col-md-").concat(md), md), _defineProperty(_cn, "col-md-auto", mdAuto), _defineProperty(_cn, ("col-lg-").concat(lg), lg), _defineProperty(_cn, "col-lg-auto", lgAuto), _defineProperty(_cn, ("col-xl-").concat(xl), xl), _defineProperty(_cn, "col-xl-auto", xlAuto), _defineProperty(_cn, "col-auto", auto), _defineProperty(_cn, ("offset-").concat(offset), offset), _defineProperty(_cn, ("offset-xs-").concat(offsetXs), offsetXs), _defineProperty(_cn, ("offset-sm-").concat(offsetSm), offsetSm), _defineProperty(_cn, ("offset-md-").concat(offsetMd), offsetMd), _defineProperty(_cn, ("offset-lg-").concat(offsetLg), offsetLg), _defineProperty(_cn, ("offset-xl-").concat(offsetXl), offsetXl), _defineProperty(_cn, ("order-").concat(order), order), _defineProperty(_cn, ("order-xs-").concat(orderXs), orderXs), _defineProperty(_cn, ("order-sm-").concat(orderSm), orderSm), _defineProperty(_cn, ("order-md-").concat(orderMd), orderMd), _defineProperty(_cn, ("order-lg-").concat(orderLg), orderLg), _defineProperty(_cn, ("order-xl-").concat(orderXl), orderXl), _cn), className);
  return react_1d.default.createElement(El.Div, _extends({
    className: classes
  }, props), children);
}
function Grid(props) {
  return props.children;
}
Grid.Row = GridRow;
Grid.Col = GridCol;
function FormImageCheck(_ref) {
  var children = _ref.children, rest = _objectWithoutProperties(_ref, ["children"]);
  return react_1.createElement(Grid.Row, _extends({
    gutters: "sm"
  }, rest), children);
}
function FormImageCheckItem(_ref) {
  var className = _ref.className, col = _ref.col, imageURL = _ref.imageURL, imgProps = _ref.imgProps, rest = _objectWithoutProperties(_ref, ["className", "col", "imageURL", "imgProps"]);
  return react_1d.default.createElement(Grid.Col, _extends({
    className: className,
    width: 6,
    sm: 4
  }, col), react_1d.default.createElement("label", {
    className: "imagecheck mb-4"
  }, react_1d.default.createElement("input", _extends({
    name: "imagecheck",
    type: "checkbox",
    className: "imagecheck-input"
  }, rest)), react_1d.default.createElement("figure", {
    className: "imagecheck-figure"
  }, react_1d.default.createElement("img", _extends({
    src: imageURL,
    alt: "Select",
    className: "imagecheck-image"
  }, imgProps)))));
}
function FormColorCheck(_ref) {
  var children = _ref.children, rest = _objectWithoutProperties(_ref, ["children"]);
  return react_1.createElement(Grid.Row, _extends({
    gutters: "xs"
  }, rest), children);
}
function FormColorCheckItem(_ref) {
  var className = _ref.className, color = _ref.color, rest = _objectWithoutProperties(_ref, ["className", "color"]);
  var classes = classnames(className);
  return react_1d.default.createElement(Grid.Col, {
    auto: true,
    className: classes
  }, react_1d.default.createElement("label", {
    className: "colorinput"
  }, react_1d.default.createElement("input", _extends({
    type: "checkbox",
    value: color,
    className: "colorinput-input"
  }, rest)), react_1d.default.createElement("span", {
    className: ("colorinput-color bg-").concat(color)
  })));
}
function FormInputGroupAppend(_ref) {
  var className = _ref.className, children = _ref.children;
  var classes = classnames("input-group-append", className);
  return react_1d.default.createElement(El.Span, {
    className: classes
  }, children);
}
function FormInputGroupPrepend(_ref) {
  var className = _ref.className, children = _ref.children, rest = _objectWithoutProperties(_ref, ["className", "children"]);
  var classes = classnames("input-group-prepend", className);
  return react_1d.default.createElement(El.Span, _extends({
    className: classes
  }, rest), children);
}
function FormInputGroup(_ref) {
  var className = _ref.className, append = _ref.append, prepend = _ref.prepend, RootComponent = _ref.RootComponent, _ref$as = _ref.as, as = _ref$as === void 0 ? El.Div : _ref$as, inputProps = _ref.inputProps, children = _ref.children, rest = _objectWithoutProperties(_ref, ["className", "append", "prepend", "RootComponent", "as", "inputProps", "children"]);
  var classes = classnames({
    "input-group": true
  }, className);
  var Component = RootComponent || as;
  var _children = inputProps ? react_1d.default.createElement(FormInput, inputProps) : children;
  if (prepend === true) {
    return react_1d.default.createElement(FormInputGroupPrepend, null, children);
  }
  if (append === true) {
    return react_1d.default.createElement(FormInputGroupAppend, null, children);
  }
  return react_1d.default.createElement(Component, _extends({
    className: classes
  }, rest), prepend && react_1d.default.createElement(FormInputGroupPrepend, null, prepend), _children, append && react_1d.default.createElement(FormInputGroupAppend, null, append));
}
function FormHelp(_ref) {
  var className = _ref.className, children = _ref.children, _ref$position = _ref.position, message = _ref.message, rest = _objectWithoutProperties(_ref, ["className", "children", "position", "message"]);
  var classes = classnames("form-help", className);
  return react_1d.default.createElement(El.Span, _extends({
    className: classes
  }, rest), children || "?");
}
function FormSelect(_ref) {
  var className = _ref.className, children = _ref.children, valid = _ref.valid, tick = _ref.tick, invalid = _ref.invalid, cross = _ref.cross, error = _ref.error, label = _ref.label, feedback = _ref.feedback, rest = _objectWithoutProperties(_ref, ["className", "children", "valid", "tick", "invalid", "cross", "error", "label", "feedback"]);
  var classes = classnames({
    "form-control": true,
    "custom-select": true,
    "is-valid": valid,
    "state-valid": tick,
    "is-invalid": invalid || !!error,
    "state-invalid": cross || !!error
  }, className);
  var _feedback = error || feedback;
  var _children = react_1d.default.createElement(react_1d.default.Fragment, null, react_1d.default.createElement(El.Select, _extends({
    className: classes
  }, rest), children), _feedback && react_1d.default.createElement("span", {
    className: "invalid-feedback"
  }, _feedback));
  return label ? react_1d.default.createElement(FormGroup, {
    label: label
  }, _children) : _children;
}
function FormFooter(_ref) {
  var className = _ref.className, children = _ref.children, rest = _objectWithoutProperties(_ref, ["className", "children"]);
  var classes = classnames("form-footer", className);
  return react_1d.default.createElement(El.Div, _extends({
    className: classes
  }, rest), children);
}
var FormRatio = function FormRatio(_ref) {
  var className = _ref.className, onChange = _ref.onChange, defaultValue = _ref.defaultValue, value = _ref.value, rest = _objectWithoutProperties(_ref, ["className", "onChange", "defaultValue", "value"]);
  var _useState = react_1.useState(!onChange ? defaultValue : "0"), _useState2 = _slicedToArray(_useState, 2), internalValue = _useState2[0], setInternalValue = _useState2[1];
  var handleOnChange = function handleOnChange(e) {
    if (onChange) {
      onChange(e);
    } else {
      var _value2 = e.target.value;
      setInternalValue(_value2);
    }
  };
  var classes = classnames(className);
  var _value = onChange ? value : internalValue;
  return react_1d.default.createElement(Grid.Row, {
    className: classes,
    alignItems: "center"
  }, react_1d.default.createElement(Grid.Col, null, react_1d.default.createElement(El.Input, _extends({
    type: "range",
    className: "form-control custom-range",
    onChange: handleOnChange,
    value: _value,
    step: 1
  }, rest))), react_1d.default.createElement(Grid.Col, {
    auto: true
  }, react_1d.default.createElement(El.Input, {
    type: "number",
    className: "form-control w-8",
    value: _value,
    onFocus: rest.onFocus,
    onBlur: rest.onBlur,
    readOnly: true
  })));
};
function FormFieldSet(_ref) {
  var className = _ref.className, children = _ref.children, rest = _objectWithoutProperties(_ref, ["className", "children"]);
  var classes = classnames("form-fieldset", className);
  return react_1d.default.createElement(El.Fieldset, _extends({
    className: classes
  }, rest), children);
}
function FormRadio(_ref) {
  var className = _ref.className, label = _ref.label, isInline = _ref.isInline, rest = _objectWithoutProperties(_ref, ["className", "label", "isInline"]);
  var classes = classnames("custom-control custom-radio", {
    "custom-control-inline": isInline
  }, className);
  var inputComponent = react_1d.default.createElement(FormInput, _extends({
    type: "radio",
    className: classes
  }, rest));
  return label ? react_1d.default.createElement("label", {
    className: classes
  }, inputComponent, react_1d.default.createElement("span", {
    className: "custom-control-label"
  }, label)) : inputComponent;
}
function FormCheckbox(_ref) {
  var className = _ref.className, label = _ref.label, isInline = _ref.isInline, rest = _objectWithoutProperties(_ref, ["className", "label", "isInline"]);
  var classes = classnames("custom-control custom-checkbox", {
    "custom-control-inline": isInline
  }, className);
  var inputComponent = react_1d.default.createElement(FormInput, _extends({
    type: "checkbox",
    className: classes
  }, rest));
  return label ? react_1d.default.createElement("label", {
    className: classes
  }, inputComponent, react_1d.default.createElement("span", {
    className: "custom-control-label"
  }, label)) : inputComponent;
}
function FormSelectGroup(_ref) {
  var children = _ref.children, pills = _ref.pills, canSelectMultiple = _ref.canSelectMultiple, rest = _objectWithoutProperties(_ref, ["children", "pills", "canSelectMultiple"]);
  var classNames = {
    selectgroup: true,
    "w-100": true,
    "selectgroup-pills": pills
  };
  return react_1d.default.createElement(El.Div, _extends({
    classNames: classNames
  }, rest), canSelectMultiple && children ? react_1d.default.Children.map(children, function (itm) {
    return react_1d.default.isValidElement(itm) ? react_1d.default.cloneElement(itm, {
      type: "checkbox"
    }) : itm;
  }) : children);
}
function FormSelectGroupItem(_ref) {
  var className = _ref.className, label = _ref.label, icon = _ref.icon, type = _ref.type, rest = _objectWithoutProperties(_ref, ["className", "label", "icon", "type"]);
  var classes = classnames({
    "selectgroup-item": true
  }, className);
  var btnClasses = classnames("selectgroup-button", {
    "selectgroup-button-icon": icon
  });
  var outputLabel = icon ? react_1d.default.createElement(Icon, {
    name: icon
  }) : label;
  return react_1d.default.createElement("label", {
    className: classes
  }, type === "checkbox" ? react_1d.default.createElement(El.Input, _extends({
    type: "checkbox",
    className: "selectgroup-input"
  }, rest)) : react_1d.default.createElement(El.Input, _extends({
    type: "radio",
    className: "selectgroup-input"
  }, rest)), react_1d.default.createElement("span", {
    className: btnClasses
  }, outputLabel));
}
var FormFileInput = function FormFileInput(_ref) {
  var onChange = _ref.onChange, className = _ref.className, _ref$label = _ref.label, labelFromProps = _ref$label === void 0 ? "Choose file" : _ref$label, rest = _objectWithoutProperties(_ref, ["onChange", "className", "label"]);
  var _useState = react_1.useState(""), _useState2 = _slicedToArray(_useState, 2), fileName = _useState2[0], setFileName = _useState2[1];
  var _handleOnChange = function _handleOnChange(event) {
    if (event.target.files) {
      setFileName(event.target.files[0].name);
    }
    if (onChange) {
      onChange(event);
    }
  };
  var classes = classnames("custom-file", className);
  var label = fileName || labelFromProps;
  return react_1d.default.createElement("div", {
    className: classes
  }, react_1d.default.createElement("input", _extends({
    type: "file",
    className: "custom-file-input",
    onChange: _handleOnChange
  }, rest)), react_1d.default.createElement("label", {
    className: "custom-file-label",
    style: {
      whiteSpace: "nowrap",
      display: "block",
      overflow: "hidden"
    }
  }, label));
};
function FormToggleStack(_ref) {
  var children = _ref.children, rest = _objectWithoutProperties(_ref, ["children"]);
  return react_1d.default.createElement(El.Div, _extends({
    classNames: "custom-switches-stacked"
  }, rest), children);
}
function FormToggle(_ref) {
  var className = _ref.className, _ref$type = _ref.type, type = _ref$type === void 0 ? "checkbox" : _ref$type, label = _ref.label, rest = _objectWithoutProperties(_ref, ["className", "type", "label"]);
  var classes = classnames("custom-switch", className);
  return react_1d.default.createElement("label", {
    className: classes
  }, react_1d.default.createElement("input", _extends({
    className: "custom-switch-input",
    type: type
  }, rest)), react_1d.default.createElement("span", {
    className: "custom-switch-indicator"
  }), react_1d.default.createElement("span", {
    className: "custom-switch-description"
  }, label));
}
function FormInputGroupText(_ref) {
  var className = _ref.className, children = _ref.children, rest = _objectWithoutProperties(_ref, ["className", "children"]);
  var classes = classnames("input-group-text", className);
  return react_1d.default.createElement(El.Span, _extends({
    className: classes
  }, rest), children);
}
var reactTextMask = createCommonjsModule(function (module, exports) {
  !(function (e, t) {
    module.exports = t(react_1d.default);
  })(commonjsGlobal, function (e) {
    return (function (e) {
      function t(n) {
        if (r[n]) return r[n].exports;
        var o = r[n] = {
          exports: {},
          id: n,
          loaded: !1
        };
        return (e[n].call(o.exports, o, o.exports, t), o.loaded = !0, o.exports);
      }
      var r = {};
      return (t.m = e, t.c = r, t.p = "", t(0));
    })([function (e, t, r) {
      function n(e) {
        return e && e.__esModule ? e : {
          default: e
        };
      }
      function o(e, t) {
        var r = {};
        for (var n in e) t.indexOf(n) >= 0 || Object.prototype.hasOwnProperty.call(e, n) && (r[n] = e[n]);
        return r;
      }
      function i(e, t) {
        if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
      }
      function a(e, t) {
        if (!e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return !t || "object" != typeof t && "function" != typeof t ? e : t;
      }
      function u(e, t) {
        if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function, not " + typeof t);
        (e.prototype = Object.create(t && t.prototype, {
          constructor: {
            value: e,
            enumerable: !1,
            writable: !0,
            configurable: !0
          }
        }), t && (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t));
      }
      (Object.defineProperty(t, "__esModule", {
        value: !0
      }), t.conformToMask = void 0);
      var s = Object.assign || (function (e) {
        for (var t = 1; t < arguments.length; t++) {
          var r = arguments[t];
          for (var n in r) Object.prototype.hasOwnProperty.call(r, n) && (e[n] = r[n]);
        }
        return e;
      }), l = (function () {
        function e(e, t) {
          for (var r = 0; r < t.length; r++) {
            var n = t[r];
            (n.enumerable = n.enumerable || !1, n.configurable = !0, ("value" in n) && (n.writable = !0), Object.defineProperty(e, n.key, n));
          }
        }
        return function (t, r, n) {
          return (r && e(t.prototype, r), n && e(t, n), t);
        };
      })(), f = r(3);
      Object.defineProperty(t, "conformToMask", {
        enumerable: !0,
        get: function () {
          return n(f).default;
        }
      });
      var c = r(11), p = n(c), d = r(9), h = n(d), v = r(5), y = n(v), m = r(2), b = (function (e) {
        function t() {
          var e;
          i(this, t);
          for (var r = arguments.length, n = Array(r), o = 0; o < r; o++) n[o] = arguments[o];
          var u = a(this, (e = t.__proto__ || Object.getPrototypeOf(t)).call.apply(e, [this].concat(n)));
          return (u.setRef = u.setRef.bind(u), u.onBlur = u.onBlur.bind(u), u.onChange = u.onChange.bind(u), u);
        }
        return (u(t, e), l(t, [{
          key: "setRef",
          value: function (e) {
            this.inputElement = e;
          }
        }, {
          key: "initTextMask",
          value: function () {
            var e = this.props, t = this.props.value;
            (this.textMaskInputElement = (0, y.default)(s({
              inputElement: this.inputElement
            }, e)), this.textMaskInputElement.update(t));
          }
        }, {
          key: "componentDidMount",
          value: function () {
            this.initTextMask();
          }
        }, {
          key: "componentDidUpdate",
          value: function (e) {
            var t = this.props, r = t.value, n = t.pipe, o = t.mask, i = t.guide, a = t.placeholderChar, u = t.showMask, s = {
              guide: i,
              placeholderChar: a,
              showMask: u
            }, l = "function" == typeof n && "function" == typeof e.pipe ? n.toString() !== e.pipe.toString() : (0, m.isNil)(n) && !(0, m.isNil)(e.pipe) || !(0, m.isNil)(n) && (0, m.isNil)(e.pipe), f = o.toString() !== e.mask.toString(), c = Object.keys(s).some(function (t) {
              return s[t] !== e[t];
            }) || f || l, p = r !== this.inputElement.value;
            (p || c) && this.initTextMask();
          }
        }, {
          key: "render",
          value: function e() {
            var t = this.props, e = t.render, r = o(t, ["render"]);
            return (delete r.mask, delete r.guide, delete r.pipe, delete r.placeholderChar, delete r.keepCharPositions, delete r.value, delete r.onBlur, delete r.onChange, delete r.showMask, e(this.setRef, s({
              onBlur: this.onBlur,
              onChange: this.onChange,
              defaultValue: this.props.value
            }, r)));
          }
        }, {
          key: "onChange",
          value: function (e) {
            (this.textMaskInputElement.update(), "function" == typeof this.props.onChange && this.props.onChange(e));
          }
        }, {
          key: "onBlur",
          value: function (e) {
            "function" == typeof this.props.onBlur && this.props.onBlur(e);
          }
        }]), t);
      })(p.default.PureComponent);
      (t.default = b, b.propTypes = {
        mask: h.default.oneOfType([h.default.array, h.default.func, h.default.bool, h.default.shape({
          mask: h.default.oneOfType([h.default.array, h.default.func]),
          pipe: h.default.func
        })]).isRequired,
        guide: h.default.bool,
        value: h.default.oneOfType([h.default.string, h.default.number]),
        pipe: h.default.func,
        placeholderChar: h.default.string,
        keepCharPositions: h.default.bool,
        showMask: h.default.bool
      }, b.defaultProps = {
        render: function (e, t) {
          return p.default.createElement("input", s({
            ref: e
          }, t));
        }
      });
    }, function (e, t) {
      (Object.defineProperty(t, "__esModule", {
        value: !0
      }), t.placeholderChar = "_", t.strFunction = "function");
    }, function (e, t, r) {
      function n() {
        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : f, t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : l.placeholderChar;
        if (!o(e)) throw new Error("Text-mask:convertMaskToPlaceholder; The mask property must be an array.");
        if (e.indexOf(t) !== -1) throw new Error("Placeholder character must not be used as part of the mask. Please specify a character that is not present in your mask as your placeholder character.\n\n" + ("The placeholder character that was received is: " + JSON.stringify(t) + "\n\n") + ("The mask that was received is: " + JSON.stringify(e)));
        return e.map(function (e) {
          return e instanceof RegExp ? t : e;
        }).join("");
      }
      function o(e) {
        return Array.isArray && Array.isArray(e) || e instanceof Array;
      }
      function i(e) {
        return "string" == typeof e || e instanceof String;
      }
      function a(e) {
        return "number" == typeof e && void 0 === e.length && !isNaN(e);
      }
      function u(e) {
        return "undefined" == typeof e || null === e;
      }
      function s(e) {
        for (var t = [], r = void 0; (r = e.indexOf(c), r !== -1); ) (t.push(r), e.splice(r, 1));
        return {
          maskWithoutCaretTraps: e,
          indexes: t
        };
      }
      (Object.defineProperty(t, "__esModule", {
        value: !0
      }), t.convertMaskToPlaceholder = n, t.isArray = o, t.isString = i, t.isNumber = a, t.isNil = u, t.processCaretTraps = s);
      var l = r(1), f = [], c = "[]";
    }, function (e, t, r) {
      function n() {
        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : s, t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : u, r = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};
        if (!(0, i.isArray)(t)) {
          if (("undefined" == typeof t ? "undefined" : o(t)) !== a.strFunction) throw new Error("Text-mask:conformToMask; The mask property must be an array.");
          (t = t(e, r), t = (0, i.processCaretTraps)(t).maskWithoutCaretTraps);
        }
        var n = r.guide, l = void 0 === n || n, f = r.previousConformedValue, c = void 0 === f ? s : f, p = r.placeholderChar, d = void 0 === p ? a.placeholderChar : p, h = r.placeholder, v = void 0 === h ? (0, i.convertMaskToPlaceholder)(t, d) : h, y = r.currentCaretPosition, m = r.keepCharPositions, b = l === !1 && void 0 !== c, g = e.length, k = c.length, C = v.length, O = t.length, T = g - k, P = T > 0, x = y + (P ? -T : 0), w = x + Math.abs(T);
        if (m === !0 && !P) {
          for (var S = s, _ = x; _ < w; _++) v[_] === d && (S += d);
          e = e.slice(0, x) + S + e.slice(x, g);
        }
        for (var M = e.split(s).map(function (e, t) {
          return {
            char: e,
            isNew: t >= x && t < w
          };
        }), j = g - 1; j >= 0; j--) {
          var E = M[j].char;
          if (E !== d) {
            var R = j >= x && k === O;
            E === v[R ? j - T : j] && M.splice(j, 1);
          }
        }
        var V = s, N = !1;
        e: for (var A = 0; A < C; A++) {
          var B = v[A];
          if (B === d) {
            if (M.length > 0) for (; M.length > 0; ) {
              var I = M.shift(), F = I.char, q = I.isNew;
              if (F === d && b !== !0) {
                V += d;
                continue e;
              }
              if (t[A].test(F)) {
                if (m === !0 && q !== !1 && c !== s && l !== !1 && P) {
                  for (var D = M.length, L = null, W = 0; W < D; W++) {
                    var J = M[W];
                    if (J.char !== d && J.isNew === !1) break;
                    if (J.char === d) {
                      L = W;
                      break;
                    }
                  }
                  null !== L ? (V += F, M.splice(L, 1)) : A--;
                } else V += F;
                continue e;
              }
              N = !0;
            }
            b === !1 && (V += v.substr(A, C));
            break;
          }
          V += B;
        }
        if (b && P === !1) {
          for (var U = null, H = 0; H < V.length; H++) v[H] === d && (U = H);
          V = null !== U ? V.substr(0, U + 1) : s;
        }
        return {
          conformedValue: V,
          meta: {
            someCharsRejected: N
          }
        };
      }
      Object.defineProperty(t, "__esModule", {
        value: !0
      });
      var o = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (e) {
        return typeof e;
      } : function (e) {
        return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
      };
      t.default = n;
      var i = r(2), a = r(1), u = [], s = "";
    }, function (e, t) {
      function r(e) {
        var t = e.previousConformedValue, r = void 0 === t ? o : t, i = e.previousPlaceholder, a = void 0 === i ? o : i, u = e.currentCaretPosition, s = void 0 === u ? 0 : u, l = e.conformedValue, f = e.rawValue, c = e.placeholderChar, p = e.placeholder, d = e.indexesOfPipedChars, h = void 0 === d ? n : d, v = e.caretTrapIndexes, y = void 0 === v ? n : v;
        if (0 === s || !f.length) return 0;
        var m = f.length, b = r.length, g = p.length, k = l.length, C = m - b, O = C > 0, T = 0 === b, P = C > 1 && !O && !T;
        if (P) return s;
        var x = O && (r === l || l === p), w = 0, S = void 0, _ = void 0;
        if (x) w = s - C; else {
          var M = l.toLowerCase(), j = f.toLowerCase(), E = j.substr(0, s).split(o), R = E.filter(function (e) {
            return M.indexOf(e) !== -1;
          });
          _ = R[R.length - 1];
          var V = a.substr(0, R.length).split(o).filter(function (e) {
            return e !== c;
          }).length, N = p.substr(0, R.length).split(o).filter(function (e) {
            return e !== c;
          }).length, A = N !== V, B = void 0 !== a[R.length - 1] && void 0 !== p[R.length - 2] && a[R.length - 1] !== c && a[R.length - 1] !== p[R.length - 1] && a[R.length - 1] === p[R.length - 2];
          !O && (A || B) && V > 0 && p.indexOf(_) > -1 && void 0 !== f[s] && (S = !0, _ = f[s]);
          for (var I = h.map(function (e) {
            return M[e];
          }), F = I.filter(function (e) {
            return e === _;
          }).length, q = R.filter(function (e) {
            return e === _;
          }).length, D = p.substr(0, p.indexOf(c)).split(o).filter(function (e, t) {
            return e === _ && f[t] !== e;
          }).length, L = D + q + F + (S ? 1 : 0), W = 0, J = 0; J < k; J++) {
            var U = M[J];
            if ((w = J + 1, U === _ && W++, W >= L)) break;
          }
        }
        if (O) {
          for (var H = w, Y = w; Y <= g; Y++) if ((p[Y] === c && (H = Y), p[Y] === c || y.indexOf(Y) !== -1 || Y === g)) return H;
        } else if (S) {
          for (var z = w - 1; z >= 0; z--) if (l[z] === _ || y.indexOf(z) !== -1 || 0 === z) return z;
        } else for (var G = w; G >= 0; G--) if (p[G - 1] === c || y.indexOf(G) !== -1 || 0 === G) return G;
      }
      (Object.defineProperty(t, "__esModule", {
        value: !0
      }), t.default = r);
      var n = [], o = "";
    }, function (e, t, r) {
      function n(e) {
        return e && e.__esModule ? e : {
          default: e
        };
      }
      function o(e) {
        var t = {
          previousConformedValue: void 0,
          previousPlaceholder: void 0
        };
        return {
          state: t,
          update: function (r) {
            var n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : e, o = n.inputElement, l = n.mask, c = n.guide, y = n.pipe, b = n.placeholderChar, g = void 0 === b ? h.placeholderChar : b, k = n.keepCharPositions, C = void 0 !== k && k, O = n.showMask, T = void 0 !== O && O;
            if (("undefined" == typeof r && (r = o.value), r !== t.previousConformedValue)) {
              ("undefined" == typeof l ? "undefined" : s(l)) === m && void 0 !== l.pipe && void 0 !== l.mask && (y = l.pipe, l = l.mask);
              var P = void 0, x = void 0;
              if ((l instanceof Array && (P = (0, d.convertMaskToPlaceholder)(l, g)), l !== !1)) {
                var w = a(r), S = o.selectionEnd, _ = t.previousConformedValue, M = t.previousPlaceholder, j = void 0;
                if (("undefined" == typeof l ? "undefined" : s(l)) === h.strFunction) {
                  if ((x = l(w, {
                    currentCaretPosition: S,
                    previousConformedValue: _,
                    placeholderChar: g
                  }), x === !1)) return;
                  var E = (0, d.processCaretTraps)(x), R = E.maskWithoutCaretTraps, V = E.indexes;
                  (x = R, j = V, P = (0, d.convertMaskToPlaceholder)(x, g));
                } else x = l;
                var N = {
                  previousConformedValue: _,
                  guide: c,
                  placeholderChar: g,
                  pipe: y,
                  placeholder: P,
                  currentCaretPosition: S,
                  keepCharPositions: C
                }, A = (0, p.default)(w, x, N), B = A.conformedValue, I = ("undefined" == typeof y ? "undefined" : s(y)) === h.strFunction, F = {};
                I && (F = y(B, u({
                  rawValue: w
                }, N)), F === !1 ? F = {
                  value: _,
                  rejected: !0
                } : (0, d.isString)(F) && (F = {
                  value: F
                }));
                var q = I ? F.value : B, D = (0, f.default)({
                  previousConformedValue: _,
                  previousPlaceholder: M,
                  conformedValue: q,
                  placeholder: P,
                  rawValue: w,
                  currentCaretPosition: S,
                  placeholderChar: g,
                  indexesOfPipedChars: F.indexesOfPipedChars,
                  caretTrapIndexes: j
                }), L = q === P && 0 === D, W = T ? P : v, J = L ? W : q;
                (t.previousConformedValue = J, t.previousPlaceholder = P, o.value !== J && (o.value = J, i(o, D)));
              }
            }
          }
        };
      }
      function i(e, t) {
        document.activeElement === e && (b ? g(function () {
          return e.setSelectionRange(t, t, y);
        }, 0) : e.setSelectionRange(t, t, y));
      }
      function a(e) {
        if ((0, d.isString)(e)) return e;
        if ((0, d.isNumber)(e)) return String(e);
        if (void 0 === e || null === e) return v;
        throw new Error("The 'value' provided to Text Mask needs to be a string or a number. The value received was:\n\n " + JSON.stringify(e));
      }
      Object.defineProperty(t, "__esModule", {
        value: !0
      });
      var u = Object.assign || (function (e) {
        for (var t = 1; t < arguments.length; t++) {
          var r = arguments[t];
          for (var n in r) Object.prototype.hasOwnProperty.call(r, n) && (e[n] = r[n]);
        }
        return e;
      }), s = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (e) {
        return typeof e;
      } : function (e) {
        return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
      };
      t.default = o;
      var l = r(4), f = n(l), c = r(3), p = n(c), d = r(2), h = r(1), v = "", y = "none", m = "object", b = "undefined" != typeof navigator && (/Android/i).test(navigator.userAgent), g = "undefined" != typeof requestAnimationFrame ? requestAnimationFrame : setTimeout;
    }, function (e, t) {
      function r(e) {
        return function () {
          return e;
        };
      }
      var n = function () {};
      (n.thatReturns = r, n.thatReturnsFalse = r(!1), n.thatReturnsTrue = r(!0), n.thatReturnsNull = r(null), n.thatReturnsThis = function () {
        return this;
      }, n.thatReturnsArgument = function (e) {
        return e;
      }, e.exports = n);
    }, function (e, t, r) {
      function n(e, t, r, n, i, a, u, s) {
        if (!e) {
          var l;
          if (void 0 === t) l = new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings."); else {
            var f = [r, n, i, a, u, s], c = 0;
            (l = new Error(t.replace(/%s/g, function () {
              return f[c++];
            })), l.name = "Invariant Violation");
          }
          throw (l.framesToPop = 1, l);
        }
      }
      e.exports = n;
    }, function (e, t, r) {
      var n = r(6), o = r(7), i = r(10);
      e.exports = function () {
        function e(e, t, r, n, a, u) {
          u !== i && o(!1, "Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");
        }
        function t() {
          return e;
        }
        e.isRequired = e;
        var r = {
          array: e,
          bool: e,
          func: e,
          number: e,
          object: e,
          string: e,
          symbol: e,
          any: e,
          arrayOf: t,
          element: e,
          instanceOf: t,
          node: e,
          objectOf: t,
          oneOf: t,
          oneOfType: t,
          shape: t,
          exact: t
        };
        return (r.checkPropTypes = n, r.PropTypes = r, r);
      };
    }, function (e, t, r) {
      e.exports = r(8)();
    }, function (e, t) {
      var r = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
      e.exports = r;
    }, function (t, r) {
      t.exports = e;
    }]);
  });
});
var MaskedInput = unwrapExports(reactTextMask);
var reactTextMask_1 = reactTextMask.reactTextMask;
function FormMaskedInput(_ref) {
  var valid = _ref.valid, tick = _ref.tick, invalid = _ref.invalid, cross = _ref.cross, feedback = _ref.feedback, className = _ref.className, rest = _objectWithoutProperties(_ref, ["valid", "tick", "invalid", "cross", "feedback", "className"]);
  var utilityClasses = getUtilityPropsClasses(rest);
  var classes = classnames(utilityClasses, {
    "form-control": true,
    "is-valid": valid,
    "state-valid": tick,
    "is-invalid": invalid,
    "state-invalid": cross
  }, className);
  return react_1.createElement(react_1.Fragment, null, react_1.createElement(MaskedInput, _extends({
    className: classes
  }, rest)), feedback && (invalid || cross) && react_1.createElement("span", {
    className: "invalid-feedback"
  }, feedback));
}
var FormDatePicker = function FormDatePicker(_ref) {
  var onChange = _ref.onChange, monthLabels = _ref.monthLabels, minYear = _ref.minYear, maxYear = _ref.maxYear, format = _ref.format, className = _ref.className, dayProps = _ref.dayProps, monthProps = _ref.monthProps, yearProps = _ref.yearProps, value = _ref.value, defaultDate = _ref.defaultDate, rest = _objectWithoutProperties(_ref, ["onChange", "monthLabels", "minYear", "maxYear", "format", "className", "dayProps", "monthProps", "yearProps", "value", "defaultDate"]);
  var _useState = react_1.useState(_typeof(value) !== undefined ? value : defaultDate || new Date(Date.now())), _useState2 = _slicedToArray(_useState, 2), currentDate = _useState2[0], setCurrentDate = _useState2[1];
  react_1.useEffect(function () {
    if (value && currentDate !== value) {
      setCurrentDate(value);
    }
  }, []);
  var _handleOnChange = function _handleOnChange(type, value) {
    var newDate = new Date(currentDate || Date.now());
    if (type === "mm") {
      newDate.setMonth(value);
    }
    if (type === "dd") {
      newDate.setDate(value);
    }
    if (type === "yyyy") {
      newDate.setFullYear(value);
    }
    setCurrentDate(newDate);
    if (onChange) {
      onChange(newDate);
    }
  };
  var _range = function _range(start, end) {
    return Array.from({
      length: end + 1 - start
    }, function (v, k) {
      return k + start;
    });
  };
  var _renderMonths = function _renderMonths() {
    var onChangeMonths = function onChangeMonths(e) {
      return _handleOnChange("mm", Number(e.target.value));
    };
    return react_1d.default.createElement(FormSelect, _extends({
      key: "month",
      value: currentDate ? currentDate.getUTCMonth() : "",
      onChange: onChangeMonths
    }, monthProps), react_1d.default.createElement("option", {
      value: ""
    }), monthLabels.map(function (name, index) {
      return react_1d.default.createElement("option", {
        key: index,
        value: index
      }, name);
    }));
  };
  var _renderDays = function _renderDays() {
    var currentMonthDays = currentDate && new Date(currentDate.getUTCFullYear(), currentDate.getUTCMonth() + 1, 0).getDate();
    var daysRange = currentMonthDays ? _range(1, currentMonthDays) : [];
    var currentDay = currentDate && currentDate.getUTCDate();
    var onChangeDays = function onChangeDays(e) {
      return _handleOnChange("dd", Number(e.target.value));
    };
    return react_1d.default.createElement(FormSelect, _extends({
      key: "dd",
      value: currentDay || "",
      onChange: onChangeDays
    }, dayProps), react_1d.default.createElement("option", {
      value: ""
    }), daysRange.map(function (day) {
      return react_1d.default.createElement("option", {
        key: day,
        value: day
      }, day);
    }));
  };
  var _renderYears = function _renderYears() {
    var yearsRange = _range(minYear, maxYear).reverse();
    var currentYear = currentDate && currentDate.getUTCFullYear();
    var onChangeYears = function onChangeYears(e) {
      return _handleOnChange("yyyy", Number(e.target.value));
    };
    return react_1d.default.createElement(FormSelect, _extends({
      key: "yy",
      onChange: onChangeYears,
      value: currentYear || ""
    }, yearProps), react_1d.default.createElement("option", {
      value: ""
    }), yearsRange.map(function (year) {
      return react_1d.default.createElement("option", {
        key: year,
        value: year
      }, year);
    }));
  };
  var formatSplit = format.split("/");
  var dateComponents = {
    mm: _renderMonths(),
    dd: _renderDays(),
    yyyy: _renderYears()
  };
  return react_1d.default.createElement(El.Div, _extends({
    className: className
  }, rest), react_1d.default.createElement(FormInputGroup, null, formatSplit.map(function (type) {
    return dateComponents[type];
  })));
};
FormDatePicker.defaultProps = {
  monthLabels: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
  minYear: 1897,
  maxYear: new Date().getFullYear(),
  format: "mm/dd/yyyy",
  defaultDate: new Date()
};
var CompoundForm = Form$1;
CompoundForm.Group = FormGroup;
CompoundForm.Label = FormLabel;
CompoundForm.Input = FormInput;
CompoundForm.StaticText = FormStaticText;
CompoundForm.Textarea = FormTextarea;
CompoundForm.ImageCheck = FormImageCheck;
CompoundForm.ImageCheckItem = FormImageCheckItem;
CompoundForm.ColorCheck = FormColorCheck;
CompoundForm.ColorCheckItem = FormColorCheckItem;
CompoundForm.InputGroup = FormInputGroup;
CompoundForm.Help = FormHelp;
CompoundForm.Select = FormSelect;
CompoundForm.Footer = FormFooter;
CompoundForm.Ratio = FormRatio;
CompoundForm.FieldSet = FormFieldSet;
CompoundForm.SelectGroup = FormSelectGroup;
CompoundForm.SelectGroupItem = FormSelectGroupItem;
CompoundForm.Radio = FormRadio;
CompoundForm.Checkbox = FormCheckbox;
CompoundForm.FileInput = FormFileInput;
CompoundForm.SwitchStack = FormToggleStack;
CompoundForm.Switch = FormToggle;
CompoundForm.InputGroupAppend = FormInputGroupAppend;
CompoundForm.InputGroupPrepend = FormInputGroupPrepend;
CompoundForm.InputGroupText = FormInputGroupText;
CompoundForm.MaskedInput = FormMaskedInput;
CompoundForm.DatePicker = FormDatePicker;
function FormWithSingleInputAndButton(_ref) {
  var formProps = _ref.formProps, inputProps = _ref.inputProps, buttonProps = _ref.buttonProps;
  var button = react_1.createElement(CompoundButton, buttonProps);
  return react_1.createElement(CompoundForm, formProps, react_1.createElement(CompoundForm.InputGroup, {
    inputProps: inputProps,
    append: button
  }));
}
function CommentsCard(_ref) {
  var className = _ref.className, children = _ref.children;
  var classes = classnames(className);
  return react_1.createElement(CompoundCard, {
    className: classes
  }, react_1.createElement(CompoundCard.Header, null, react_1.createElement(FormWithSingleInputAndButton, {
    inputProps: {
      placeholder: "Message"
    },
    buttonProps: {
      icon: "camera",
      color: "secondary"
    }
  }), react_1.createElement(Comment, null, children)));
}
function H1$1(_ref) {
  var children = _ref.children, _ref$as = _ref.as, as = _ref$as === void 0 ? "h1" : _ref$as, _ref$mt = _ref.mt, mt = _ref$mt === void 0 ? 0 : _ref$mt, _ref$mb = _ref.mb, mb = _ref$mb === void 0 ? 4 : _ref$mb, _ref$size = _ref.size, size = _ref$size === void 0 ? 1 : _ref$size, props = _objectWithoutProperties(_ref, ["children", "as", "mt", "mb", "size"]);
  return react_1d.default.createElement(Header$1, _extends({
    as: as,
    size: size,
    mt: mt,
    mb: mb
  }, props), children);
}
function H2$1(_ref) {
  var children = _ref.children, _ref$as = _ref.as, as = _ref$as === void 0 ? "h2" : _ref$as, _ref$mt = _ref.mt, mt = _ref$mt === void 0 ? 0 : _ref$mt, _ref$mb = _ref.mb, mb = _ref$mb === void 0 ? 4 : _ref$mb, _ref$size = _ref.size, size = _ref$size === void 0 ? 2 : _ref$size, props = _objectWithoutProperties(_ref, ["children", "as", "mt", "mb", "size"]);
  return react_1d.default.createElement(Header$1, _extends({
    as: as,
    size: size,
    mt: mt,
    mb: mb
  }, props), children);
}
function H3$1(_ref) {
  var children = _ref.children, _ref$as = _ref.as, as = _ref$as === void 0 ? "h3" : _ref$as, _ref$mt = _ref.mt, mt = _ref$mt === void 0 ? 0 : _ref$mt, _ref$mb = _ref.mb, mb = _ref$mb === void 0 ? 4 : _ref$mb, _ref$size = _ref.size, size = _ref$size === void 0 ? 3 : _ref$size, props = _objectWithoutProperties(_ref, ["children", "as", "mt", "mb", "size"]);
  return react_1d.default.createElement(Header$1, _extends({
    as: as,
    size: size,
    mt: mt,
    mb: mb
  }, props), children);
}
function H4$1(_ref) {
  var children = _ref.children, _ref$as = _ref.as, as = _ref$as === void 0 ? "h4" : _ref$as, _ref$mt = _ref.mt, mt = _ref$mt === void 0 ? 0 : _ref$mt, _ref$mb = _ref.mb, mb = _ref$mb === void 0 ? 4 : _ref$mb, _ref$size = _ref.size, size = _ref$size === void 0 ? 4 : _ref$size, props = _objectWithoutProperties(_ref, ["children", "as", "mt", "mb", "size"]);
  return react_1d.default.createElement(Header$1, _extends({
    as: as,
    size: size,
    mt: mt,
    mb: mb
  }, props), children);
}
function H5$1(_ref) {
  var children = _ref.children, _ref$as = _ref.as, as = _ref$as === void 0 ? "h5" : _ref$as, _ref$mt = _ref.mt, mt = _ref$mt === void 0 ? 0 : _ref$mt, _ref$mb = _ref.mb, mb = _ref$mb === void 0 ? 4 : _ref$mb, _ref$size = _ref.size, size = _ref$size === void 0 ? 5 : _ref$size, props = _objectWithoutProperties(_ref, ["children", "as", "mt", "mb", "size"]);
  return react_1d.default.createElement(Header$1, _extends({
    as: as,
    size: size,
    mt: mt,
    mb: mb
  }, props), children);
}
var CompoundHeader = Header$1;
CompoundHeader.H1 = H1$1;
CompoundHeader.H2 = H2$1;
CompoundHeader.H3 = H3$1;
CompoundHeader.H4 = H4$1;
CompoundHeader.H5 = H5$1;
CompoundHeader.H6 = H6$1;
function ContactCard(_ref) {
  var children = _ref.children, className = _ref.className, cardTitle = _ref.cardTitle, map = _ref.map, mapPlaceholder = _ref.mapPlaceholder, rounded = _ref.rounded, avatar = _ref.avatar, objectURL = _ref.objectURL, alt = _ref.alt, name = _ref.name, address = _ref.address, details = _ref.details, description = _ref.description;
  var cardClassName = classnames(className);
  return react_1.createElement(CompoundCard, {
    className: cardClassName,
    title: cardTitle
  }, (mapPlaceholder || map) && react_1.createElement(CompoundCard.Map, {
    placeholder: mapPlaceholder
  }, map), react_1.createElement(CompoundCard.Body, null, react_1.createElement(CompoundMedia, {
    className: "mb-5"
  }, react_1.createElement(CompoundMedia.Object, {
    size: "md",
    className: "mr-4",
    avatar: avatar,
    rounded: rounded,
    objectURL: objectURL,
    alt: alt
  }), react_1.createElement(CompoundMedia.Body, null, name && react_1.createElement(CompoundHeader.H5, null, name), address && react_1.createElement("address", {
    className: "text-muted small"
  }, address.line1, address.line2 && react_1.createElement("br", null), address.line2))), details && react_1.createElement(Grid.Row, null, details.map(function (d, i) {
    return react_1.createElement(Grid.Col, {
      width: 6,
      key: i
    }, react_1.createElement(CompoundHeader.H6, null, d.title), react_1.createElement("p", null, d.content));
  })), description && react_1.createElement(react_1.Fragment, null, react_1.createElement(CompoundHeader.H6, null, typeof description === "string" ? "Description" : description.title), react_1.createElement("p", null, typeof description === "string" ? description : description.content)), children));
}
function Container(_ref) {
  var children = _ref.children, rest = _objectWithoutProperties(_ref, ["children"]);
  return react_1d.default.createElement(El.Div, _extends({
    classNames: "container"
  }, rest), children);
}
function Loader(_ref) {
  var className = _ref.className, children = _ref.children, rest = _objectWithoutProperties(_ref, ["className", "children"]);
  var classes = classnames({
    loader: true
  }, className);
  return react_1.createElement(El.Div, _extends({
    className: classes
  }, rest), children);
}
function DimmerContent(_ref) {
  var className = _ref.className, children = _ref.children;
  var classes = classnames({
    "dimmer-content": true
  }, className);
  return react_1.createElement("div", {
    className: classes
  }, children);
}
function Dimmer(_ref) {
  var className = _ref.className, children = _ref.children, active = _ref.active, loader = _ref.loader;
  var classes = classnames({
    dimmer: true,
    active: active
  }, className);
  return react_1.createElement("div", {
    className: classes
  }, react_1.createElement(react_1.Fragment, null, loader && react_1.createElement(Loader, null), react_1.createElement(DimmerContent, null, children)));
}
Dimmer.Content = DimmerContent;
function GalleryCardDetails(_ref) {
  var className = _ref.className, children = _ref.children, avatarURL = _ref.avatarURL, fullName = _ref.fullName, dateString = _ref.dateString;
  var avatarClasses = classnames("mr-3");
  var dateStringClasses = classnames("d-block text-muted");
  var hasOtherDetails = fullName !== null || dateString !== null;
  var avatar = react_1.createElement(Avatar, {
    imageURL: avatarURL,
    size: "md",
    className: avatarClasses
  });
  var otherDetails = react_1.createElement("div", null, react_1.createElement("div", null, fullName), react_1.createElement("small", {
    className: dateStringClasses
  }, " ", dateString), " ");
  return react_1.createElement(react_1.Fragment, null, avatarURL && avatar, hasOtherDetails && otherDetails, children);
}
function GalleryCardFooter(_ref) {
  var children = _ref.children;
  var classes = classnames("d-flex", "align-items-center", "px-2");
  return react_1.createElement("div", {
    className: classes
  }, children);
}
function GalleryCardIconGroup(_ref) {
  var children = _ref.children, className = _ref.className;
  var classes = classnames("ml-auto", "text-muted", className);
  return react_1.createElement("div", {
    className: classes
  }, children);
}
function GalleryCardIconItem(_ref) {
  var className = _ref.className, label = _ref.label, name = _ref.name, href = _ref.href, right = _ref.right, to = _ref.to, RootComponent = _ref.RootComponent;
  var positionRightClasses = "d-none d-md-inline-block ml-3";
  var componentClasses = !right ? classnames("icon", className) : classnames("icon", positionRightClasses, className);
  var iconClasses = classnames("mr-1");
  var childrenForAll = react_1.createElement(react_1.Fragment, null, react_1.createElement(Icon, {
    name: name,
    className: iconClasses
  }), label);
  var extraProps = {
    href: undefined
  };
  if (href) {
    extraProps.href = href;
  }
  return RootComponent ? react_1.createElement(RootComponent, {
    className: componentClasses,
    to: to
  }, childrenForAll) : react_1.createElement("a", _extends({
    className: componentClasses
  }, extraProps), childrenForAll);
}
function GalleryCardImage(_ref) {
  var src = _ref.src, alt = _ref.alt, href = _ref.href, _ref$rounded = _ref.rounded, rounded = _ref$rounded === void 0 ? true : _ref$rounded, className = _ref.className, to = _ref.to, RootComponent = _ref.RootComponent;
  var componentClasses = classnames("mb-3");
  var imageClasses = classnames({
    rounded: rounded
  }, className);
  var componentOptionalProps = {
    href: undefined
  };
  if (href) {
    componentOptionalProps.href = href;
  }
  var image = react_1.createElement("img", {
    src: src,
    alt: alt,
    className: imageClasses
  });
  return RootComponent ? react_1.createElement(RootComponent, {
    className: componentClasses,
    to: to
  }, image) : react_1.createElement("a", _extends({
    className: componentClasses
  }, componentOptionalProps), image);
}
function GalleryCard(_ref) {
  var children = _ref.children, className = _ref.className;
  var cardClassName = classnames("p-3", className);
  return react_1.createElement(CompoundCard, {
    className: cardClassName
  }, children);
}
GalleryCard.Details = GalleryCardDetails;
GalleryCard.Footer = GalleryCardFooter;
GalleryCard.IconGroup = GalleryCardIconGroup;
GalleryCard.IconItem = GalleryCardIconItem;
GalleryCard.Image = GalleryCardImage;
function Page(_ref) {
  var className = _ref.className, children = _ref.children, rest = _objectWithoutProperties(_ref, ["className", "children"]);
  var classes = classnames("page d-flex h-auto min-h-screen", className);
  return react_1d.default.createElement(El.Div, _extends({
    className: classes
  }, rest), react_1d.default.createElement("div", {
    className: "d-flex flex-fill"
  }, children));
}
function PageMain(_ref) {
  var children = _ref.children;
  return react_1.createElement("div", {
    className: "page-main flex-fill d-flex flex-column max-w-full"
  }, children);
}
function PageTitle(_ref) {
  var className = _ref.className, children = _ref.children, rest = _objectWithoutProperties(_ref, ["className", "children"]);
  var classes = classnames("page-title-box", className);
  return react_1.createElement(El.Div, _extends({
    className: classes
  }, rest), react_1.createElement(El.H1, {
    className: "page-title"
  }, children));
}
function PageSubTitle(_ref) {
  var children = _ref.children;
  return react_1.createElement("div", {
    className: "page-subtitle"
  }, children);
}
function PageOptions(_ref) {
  var children = _ref.children;
  return react_1.createElement("div", {
    className: "page-options d-flex"
  }, children);
}
function PageHeader(_ref) {
  var children = _ref.children, title = _ref.title, subTitle = _ref.subTitle, options = _ref.options;
  return react_1.createElement("div", {
    className: "page-header"
  }, title && react_1.createElement(PageTitle, null, title), subTitle && react_1.createElement(PageSubTitle, null, subTitle), options && react_1.createElement(PageOptions, null, options), children);
}
function PageContent(_ref) {
  var className = _ref.className, children = _ref.children, title = _ref.title, subTitle = _ref.subTitle, options = _ref.options;
  var classes = classnames("page-content d-flex flex-fill max-w-full", className);
  return react_1.createElement("div", {
    className: classes
  }, react_1.createElement("div", {
    className: "flex-fill px-lg-2 mw-100"
  }, react_1.createElement(Container, {
    className: "my-4"
  }, (title || subTitle || options) && react_1.createElement(PageHeader, {
    title: title,
    subTitle: subTitle,
    options: options
  }), children)));
}
function PageContentWithSidebar(_ref) {
  var children = _ref.children, header = _ref.header, sidebar = _ref.sidebar;
  return react_1.createElement(PageContent, null, header, react_1.createElement(Grid.Row, null, react_1.createElement(Grid.Col, {
    lg: 3,
    className: "order-lg-1 mb-4"
  }, sidebar), react_1.createElement(Grid.Col, {
    lg: 9
  }, children)));
}
function PageCard(_ref) {
  var children = _ref.children, title = _ref.title, header = _ref.header, footer = _ref.footer, RootComponent = _ref.RootComponent;
  return react_1.createElement("div", {
    className: "my-3 my-md-5"
  }, react_1.createElement(Container, null, react_1.createElement(Grid.Row, null, react_1.createElement(Grid.Col, {
    width: 12
  }, react_1.createElement(CompoundCard, {
    RootComponent: RootComponent
  }, title && react_1.createElement(CompoundCard.Header, null, react_1.createElement(CompoundCard.Title, null, title)), header, react_1.createElement(CompoundCard.Body, null, children), footer)))));
}
function PageMapHeader(_ref) {
  var children = _ref.children;
  return react_1.createElement("div", {
    className: "map-header"
  }, children);
}
var CompoundPage = Object.assign(Page, {
  Main: PageMain,
  Content: PageContent,
  Header: PageHeader,
  ContentWithSidebar: PageContentWithSidebar,
  Card: PageCard,
  Title: PageTitle,
  MapHeader: PageMapHeader
});
function PricingCardCategory(_ref) {
  var className = _ref.className, children = _ref.children;
  var classes = classnames("card-category", className);
  return react_1.createElement("div", {
    className: classes
  }, children);
}
function PricingCardPrice(_ref) {
  var className = _ref.className, children = _ref.children;
  var classes = classnames("display-3 my-4", className);
  return react_1.createElement("div", {
    className: classes
  }, children);
}
function PricingCardAttributeList(_ref) {
  var className = _ref.className, children = _ref.children;
  var classes = classnames("list-unstyled", "leading-loose", className);
  return react_1.createElement("ul", {
    className: classes
  }, children);
}
function PricingCardAttributeItem(_ref) {
  var children = _ref.children, available = _ref.available, hasIcon = _ref.hasIcon;
  var iconClasses = available ? classnames("text-success", "mr-2") : classnames("text-danger", "mr-2");
  return hasIcon ? react_1.createElement("li", null, " ", react_1.createElement(Icon, {
    prefix: "fe",
    name: available ? "check" : "x",
    className: iconClasses,
    isAriaHidden: true
  }), children) : react_1.createElement("li", null, " ", children, " ");
}
function PricingCardButton(_ref) {
  var className = _ref.className, children = _ref.children, RootComponent = _ref.RootComponent, active = _ref.active, href = _ref.href, to = _ref.to, onClick = _ref.onClick;
  var classes = classnames("text-center", "mt-6");
  var Component = RootComponent || "a";
  var componentClasses = classnames("btn", active ? "btn-green" : "btn-secondary", "btn-block", className);
  var otherProps = {
    href: undefined,
    to: undefined,
    role: undefined,
    onClick: undefined
  };
  if (href) {
    otherProps.href = href;
  }
  if (to) {
    otherProps.to = to;
  }
  if (onClick) {
    otherProps.role = "button";
    otherProps.onClick = onClick;
  }
  return react_1.createElement("div", {
    className: classes
  }, react_1.createElement(Component, _extends({
    className: componentClasses
  }, otherProps), children));
}
function PricingCard(_ref) {
  var className = _ref.className, children = _ref.children, _ref$active = _ref.active, active = _ref$active === void 0 ? false : _ref$active, category = _ref.category;
  var cardBodyClassName = classnames("text-center");
  var cardStatusClassName = classnames("card-status", "bg-green");
  var cardStatus = react_1.createElement("div", {
    className: cardStatusClassName
  });
  var cardCategory = react_1.createElement(PricingCardCategory, null, category);
  return react_1.createElement(CompoundCard, null, active && cardStatus, react_1.createElement(CompoundCard.Body, {
    className: cardBodyClassName
  }, category && cardCategory, children));
}
PricingCard.Category = PricingCardCategory;
PricingCard.Price = PricingCardPrice;
PricingCard.AttributeList = PricingCardAttributeList;
PricingCard.AttributeItem = PricingCardAttributeItem;
PricingCard.Button = PricingCardButton;
function ProfileImage(_ref) {
  var avatarURL = _ref.avatarURL;
  return react_1.createElement("img", {
    className: "card-profile-img",
    alt: "Profile",
    src: avatarURL
  });
}
function Profile(_ref) {
  var className = _ref.className, children = _ref.children, name = _ref.name, _ref$avatarURL = _ref.avatarURL, avatarURL = _ref$avatarURL === void 0 ? "" : _ref$avatarURL, _ref$twitterURL = _ref.twitterURL, _ref$backgroundURL = _ref.backgroundURL, backgroundURL = _ref$backgroundURL === void 0 ? "" : _ref$backgroundURL, bio = _ref.bio;
  var classes = classnames("card-profile", className);
  return react_1.createElement(CompoundCard, {
    className: classes
  }, react_1.createElement(CompoundCard.Header, {
    backgroundURL: backgroundURL
  }), react_1.createElement(CompoundCard.Body, {
    className: "text-center"
  }, react_1.createElement(ProfileImage, {
    avatarURL: avatarURL
  }), react_1.createElement(CompoundHeader.H3, {
    className: "mb-3"
  }, name), react_1.createElement("p", {
    className: "mb-4"
  }, bio || children), react_1.createElement(SocialNetworksList, {
    itemsObjects: [{
      name: "twitter",
      label: "Follow"
    }],
    prefix: "fa",
    asButtons: true
  })));
}
Profile.Image = ProfileImage;
function ProgressBar(_ref) {
  var className = _ref.className, color = _ref.color, _ref$width = _ref.width, width = _ref$width === void 0 ? 0 : _ref$width, style = _ref.style, rest = _objectWithoutProperties(_ref, ["className", "color", "width", "style"]);
  var classes = classnames("progress-bar", _defineProperty({}, ("bg-").concat(color), !!color), className);
  return react_1.createElement(El.Div, _extends({
    className: classes,
    style: _objectSpread({
      width: ("").concat(width, "%")
    }, style)
  }, rest));
}
function Progress(_ref) {
  var className = _ref.className, children = _ref.children, _ref$size = _ref.size, size = _ref$size === void 0 ? "" : _ref$size, rest = _objectWithoutProperties(_ref, ["className", "children", "size"]);
  var classes = classnames("progress", _defineProperty({}, ("progress-").concat(size), !!size), className);
  return react_1.createElement(El.Div, _extends({
    className: classes
  }, rest), children);
}
Progress.Bar = ProgressBar;
function ProgressCard(_ref) {
  var className = _ref.className, header = _ref.header, content = _ref.content, progressColor = _ref.progressColor, progressWidth = _ref.progressWidth;
  var classes = classnames(className);
  return react_1.createElement(CompoundCard, {
    className: classes
  }, react_1.createElement(CompoundCard.Body, {
    className: "text-center"
  }, react_1.createElement(CompoundHeader, {
    size: 5
  }, header), react_1.createElement("div", {
    className: "display-4 font-weight-bold mb-4"
  }, content), react_1.createElement(Progress, {
    size: "sm"
  }, react_1.createElement(Progress.Bar, {
    color: progressColor,
    width: progressWidth
  }))));
}
function Ribbon(_ref) {
  var _cn;
  var children = _ref.children, className = _ref.className, color = _ref.color, icon = _ref.icon, bookmark = _ref.bookmark, position = _ref.position, rest = _objectWithoutProperties(_ref, ["children", "className", "color", "icon", "bookmark", "position"]);
  var _className = classnames("ribbon", (_cn = {}, _defineProperty(_cn, ("bg-").concat(color), color), _defineProperty(_cn, "ribbon-bookmark", bookmark), _defineProperty(_cn, "ribbon-top", position && position.substr(0, 3) === "top"), _defineProperty(_cn, "ribbon-bottom", position && position.substr(0, 6) === "bottom"), _defineProperty(_cn, "ribbon-left", position && position.substr(-4) === "left"), _defineProperty(_cn, "ribbon-right", position && position.substr(-5) === "right"), _cn), className);
  return react_1d.default.createElement(El.Div, _extends({
    className: _className
  }, rest), icon && react_1d.default.createElement(Icon, {
    name: icon
  }), children);
}
function Site(props) {
  return props.children;
}
var SiteLogo = function SiteLogo(_ref) {
  var className = _ref.className, props = _objectWithoutProperties(_ref, ["className"]);
  var _className = classnames("navbar-brand", className);
  return react_1.createElement("a", _extends({
    className: _className,
    href: props.href
  }, props), react_1.createElement("img", {
    src: props.src,
    className: "d-none d-md-block navbar-brand-logo",
    alt: props.alt
  }), props.srcSmall && react_1.createElement("img", {
    src: props.srcSmall,
    className: "d-md-none navbar-brand-logo",
    alt: props.alt
  }));
};
var SiteHeader = function SiteHeader(_ref) {
  var children = _ref.children, href = _ref.href, align = _ref.align, imageURL = _ref.imageURL, alt = _ref.alt, notificationsTrayFromProps = _ref.notificationsTray, accountDropdownFromProps = _ref.accountDropdown, navItems = _ref.navItems, onMenuToggleClick = _ref.onMenuToggleClick, searchBar = _ref.searchBar;
  return react_1d.default.createElement(CompoundNav.Bar, {
    expand: "md",
    as: "header"
  }, react_1d.default.createElement(Container, {
    className: align
  }, children || react_1d.default.createElement(react_1d.default.Fragment, null, react_1d.default.createElement("a", {
    className: "navbar-toggler",
    onClick: onMenuToggleClick
  }, react_1d.default.createElement("span", {
    className: "navbar-toggler-icon"
  })), react_1d.default.createElement(SiteLogo, {
    className: "text-inherit mr-md-3",
    href: href,
    alt: alt,
    src: imageURL
  }), searchBar && react_1d.default.createElement(El.Div, {
    ml: {
      xs: 0,
      md: 8
    },
    mr: "auto",
    d: {
      xs: "none",
      lg: "block"
    },
    className: "w-auto flex-fill max-w-md"
  }, searchBar), react_1d.default.createElement(CompoundNav, {
    isMenu: true,
    className: "align-items-center order-1 order-lg-2"
  }, navItems, notificationsTrayFromProps && react_1d.default.createElement(CompoundNav.Item, {
    link: false,
    className: "d-none d-md-flex"
  }, react_1d.default.createElement(CompoundNotification.Tray, notificationsTrayFromProps)), accountDropdownFromProps && react_1d.default.createElement(AccountDropdown, accountDropdownFromProps)))));
};
var SiteFooter = function SiteFooter(_ref) {
  var links = _ref.links, note = _ref.note, copyright = _ref.copyright, nav = _ref.nav;
  return react_1.createElement(react_1.Fragment, null, (links || note) && react_1.createElement("div", {
    className: "footer"
  }, react_1.createElement(Container, null, react_1.createElement(Grid.Row, null, react_1.createElement(Grid.Col, {
    lg: 8
  }, react_1.createElement(Grid.Row, null, links && react_1.createElement(react_1.Fragment, null, react_1.createElement(Grid.Col, {
    width: 6,
    md: 3
  }, react_1.createElement(List, {
    unstyled: true,
    className: "mb-0"
  }, react_1.createElement(List.Item, null, links[0]), react_1.createElement(List.Item, null, links[1]))), react_1.createElement(Grid.Col, {
    width: 6,
    md: 3
  }, react_1.createElement(List, {
    unstyled: true,
    className: "mb-0"
  }, react_1.createElement(List.Item, null, links[2]), react_1.createElement(List.Item, null, links[3]))), react_1.createElement(Grid.Col, {
    width: 6,
    md: 3
  }, react_1.createElement(List, {
    unstyled: true,
    className: "mb-0"
  }, react_1.createElement(List.Item, null, links[4]), react_1.createElement(List.Item, null, links[5]))), react_1.createElement(Grid.Col, {
    width: 6,
    md: 3
  }, react_1.createElement(List, {
    unstyled: true,
    className: "mb-0"
  }, react_1.createElement(List.Item, null, links[6]), react_1.createElement(List.Item, null, links[7])))))), react_1.createElement(Grid.Col, {
    lg: 4,
    className: "mt-4 mt-lg-0"
  }, note)))), (nav || copyright) && react_1.createElement("footer", {
    className: "footer"
  }, react_1.createElement(Container, null, react_1.createElement(Grid.Row, {
    className: "align-items-center flex-row-reverse"
  }, react_1.createElement(Grid.Col, {
    auto: true,
    className: "ml-auto"
  }, react_1.createElement(Grid.Row, {
    className: "align-items-center"
  }, nav)), react_1.createElement(Grid.Col, {
    width: 12,
    lgAuto: true,
    className: "mt-3 mt-lg-0 text-center"
  }, copyright)))));
};
var SiteNav = function SiteNav(_ref) {
  var children = _ref.children, items = _ref.items, itemsObjects = _ref.itemsObjects, _ref$withSearchForm = _ref.withSearchForm, rightColumnComponent = _ref.rightColumnComponent, _ref$collapse = _ref.collapse, collapse = _ref$collapse === void 0 ? false : _ref$collapse, routerContextComponentType = _ref.routerContextComponentType, logoURL = _ref.logoURL, rest = _objectWithoutProperties(_ref, ["children", "items", "itemsObjects", "withSearchForm", "rightColumnComponent", "collapse", "routerContextComponentType", "logoURL"]);
  var classes = classnames({
    collapse: collapse
  });
  var _children = react_1.createElement(react_1.Fragment, null, (items || itemsObjects) && react_1.createElement(CompoundNav, {
    className: "navbar-nav",
    items: items,
    itemsObjects: itemsObjects,
    routerContextComponentType: routerContextComponentType
  }), children, rightColumnComponent);
  if (rest.isSide) {
    return react_1.createElement(CompoundNav.Bar, _extends({
      expand: "md",
      className: classes
    }, rest), logoURL && react_1.createElement(El.Div, {
      p: 3
    }, react_1.createElement(SiteLogo, {
      src: logoURL
    })), _children);
  }
  return react_1.createElement(CompoundNav.Bar, _extends({
    expand: "md",
    className: classes
  }, rest), react_1.createElement(Container, null, logoURL && react_1.createElement(SiteLogo, {
    src: logoURL
  }), _children));
};
var SiteWrapper = function SiteWrapper(_ref) {
  var _ref$header = _ref.header, Header = _ref$header === void 0 ? SiteHeader : _ref$header, _ref$headerProps = _ref.headerProps, headerProps = _ref$headerProps === void 0 ? {} : _ref$headerProps, _ref$nav = _ref.nav, Nav = _ref$nav === void 0 ? SiteNav : _ref$nav, _ref$navProps = _ref.navProps, navProps = _ref$navProps === void 0 ? {} : _ref$navProps, _ref$footer = _ref.footer, _ref$footerProps = _ref.footerProps, children = _ref.children, navIsSide = _ref.navIsSide;
  var _useState = react_1.useState(false), _useState2 = _slicedToArray(_useState, 2), collapseMobileMenu = _useState2[0], setCollapseMobileMenu = _useState2[1];
  var handleCollapseMobileMenu = function handleCollapseMobileMenu() {
    setCollapseMobileMenu(function (s) {
      return !s;
    });
  };
  var nav = react_1d.default.createElement(Nav, _extends({
    collapse: collapseMobileMenu
  }, navProps));
  var _isSide = navIsSide || navProps.isSide;
  return react_1d.default.createElement(CompoundPage, null, _isSide && nav, react_1d.default.createElement(CompoundPage.Main, null, react_1d.default.createElement(Header, _extends({
    onMenuToggleClick: handleCollapseMobileMenu
  }, headerProps)), !_isSide && nav, children));
};
var CompoundSite = Site;
CompoundSite.Header = SiteHeader;
CompoundSite.Footer = SiteFooter;
CompoundSite.Nav = SiteNav;
CompoundSite.Logo = SiteLogo;
CompoundSite.Wrapper = SiteWrapper;
function Stamp(_ref) {
  var _cn;
  var children = _ref.children, className = _ref.className, _ref$size = _ref.size, size = _ref$size === void 0 ? "md" : _ref$size, icon = _ref.icon, color = _ref.color, rest = _objectWithoutProperties(_ref, ["children", "className", "size", "icon", "color"]);
  var classes = classnames((_cn = {
    stamp: true
  }, _defineProperty(_cn, ("stamp-").concat(size), size), _defineProperty(_cn, ("bg-").concat(color), color), _defineProperty(_cn, "text-white", true), _cn), className);
  return react_1.createElement(El.Span, _extends({
    className: classes
  }, rest), icon && react_1.createElement(Icon, {
    name: icon
  }), children);
}
function StampCard(_ref) {
  var children = _ref.children, className = _ref.className, icon = _ref.icon, color = _ref.color, header = _ref.header, footer = _ref.footer;
  var classes = classnames(className);
  return react_1.createElement(CompoundCard, {
    className: classes
  }, react_1.createElement("div", {
    className: "p-3 d-flex align-items-center"
  }, react_1.createElement(Stamp, {
    color: color,
    icon: icon,
    mr: 3
  }), react_1.createElement("div", null, header && react_1.createElement(CompoundHeader, {
    size: 3,
    m: 0
  }, header), children, footer && react_1.createElement(CompoundText.Small, {
    muted: true
  }, footer))));
}
function StatsCard(_ref) {
  var children = _ref.children, className = _ref.className, movement = _ref.movement, movementLabel = _ref.movementLabel, total = _ref.total, label = _ref.label, _ref$layout = _ref.layout, layout = _ref$layout === void 0 ? 1 : _ref$layout, chart = _ref.chart, progressWidth = _ref.progressWidth, _ref$progressColor = _ref.progressColor, progressColor = _ref$progressColor === void 0 ? "primary" : _ref$progressColor, actions = _ref.actions;
  var classes = classnames(className);
  var movementString = ("").concat(movement > 0 ? "+" : "").concat(movement, "%");
  var movementColor = !movement ? "yellow" : movement > 0 ? "green" : "red";
  if (layout === 3 || layout === 4) {
    return react_1.createElement(CompoundCard, {
      className: classes
    }, react_1.createElement(CompoundCard.Body, null, react_1.createElement(El.Div, {
      d: "flex"
    }, react_1.createElement("div", null, label), actions && react_1.createElement(El.Div, {
      ml: "auto"
    }, actions)), react_1.createElement(El.Div, {
      d: "flex",
      mb: layout === 3 ? 3 : 0,
      className: "align-items-baseline"
    }, react_1.createElement(CompoundHeader, {
      mb: 0,
      mr: 2
    }, total), layout === 4 && react_1.createElement(El.Div, {
      mr: "auto",
      className: ("text-").concat(movementColor)
    }, movementString, " ", react_1.createElement(Icon, {
      name: !movement ? "minus" : movement > 0 ? "trending-up" : "trending-down",
      thin: true
    }))), layout === 3 && react_1.createElement(react_1.Fragment, null, react_1.createElement(El.Div, {
      d: "flex",
      mb: 2
    }, react_1.createElement("div", null, movementLabel), react_1.createElement(El.Div, {
      ml: "auto",
      className: ("text-").concat(movementColor)
    }, movementString, " ", react_1.createElement(Icon, {
      name: !movement ? "minus" : movement > 0 ? "trending-up" : "trending-down",
      thin: true
    }))), typeof progressWidth !== "undefined" && react_1.createElement(Progress, {
      size: "sm"
    }, react_1.createElement(Progress.Bar, {
      color: progressColor,
      width: progressWidth
    }))), children), chart && react_1.createElement("div", {
      className: "card-chart"
    }, chart));
  }
  if (layout === 2) {
    return react_1.createElement(CompoundCard, {
      className: classes
    }, react_1.createElement(CompoundCard.Body, null, react_1.createElement("div", {
      className: ("card-value float-right text-").concat(movementColor)
    }, movementString), react_1.createElement(CompoundHeader.H3, {
      className: "mb-1"
    }, total), react_1.createElement(CompoundText, {
      muted: true
    }, label)), chart && react_1.createElement("div", {
      className: "card-chart-bg"
    }, chart));
  }
  return react_1.createElement(CompoundCard, {
    className: classes
  }, react_1.createElement(CompoundCard.Body, {
    className: "p-3 text-center"
  }, react_1.createElement(CompoundText, {
    color: movementColor,
    className: "text-right"
  }, movementString, react_1.createElement(Icon, {
    name: !movement ? "minus" : movement > 0 ? "chevron-up" : "chevron-down"
  })), react_1.createElement(CompoundHeader, {
    className: "m-0"
  }, total), react_1.createElement(CompoundText, {
    color: "gray",
    className: " mb-4"
  }, label)));
}
var Steps = function Steps(_ref) {
  var _cn;
  var children = _ref.children, className = _ref.className, color = _ref.color, counter = _ref.counter, rest = _objectWithoutProperties(_ref, ["children", "className", "color", "counter"]);
  var _className = classnames("steps", (_cn = {}, _defineProperty(_cn, ("steps-").concat(color), color), _defineProperty(_cn, "steps-counter", counter), _cn), className);
  return react_1d.default.createElement(El.Div, _extends({
    p: 6,
    className: _className
  }, rest), children);
};
var Step = function Step(_ref) {
  var children = _ref.children, className = _ref.className, active = _ref.active, tooltip = _ref.tooltip, rest = _objectWithoutProperties(_ref, ["children", "className", "active", "tooltip"]);
  var _className = classnames("step-item", {
    active: active
  }, className);
  var component = react_1d.default.createElement(El.Span, _extends({
    className: _className
  }, rest), children);
  if (tooltip) {
    return react_1d.default.createElement(Tooltip, {
      content: tooltip,
      placement: "top",
      arrow: false
    }, component);
  }
  return component;
};
var CompoundSteps = Steps;
CompoundSteps.Step = Step;
function StoreCard(_ref) {
  var children = _ref.children, title = _ref.title, subtitle = _ref.subtitle, price = _ref.price, imgUrl = _ref.imgUrl, imgAlt = _ref.imgAlt;
  return react_1.createElement(CompoundCard, null, react_1.createElement(CompoundCard.Body, null, react_1.createElement("div", {
    className: "mb-4 text-center"
  }, react_1.createElement("img", {
    src: imgUrl,
    alt: imgAlt
  })), react_1.createElement(CompoundCard.Title, null, title), react_1.createElement(CompoundText, {
    className: "card-subtitle"
  }, subtitle), react_1.createElement("div", {
    className: "mt-5 d-flex align-items-center"
  }, react_1.createElement("div", {
    className: "product-price"
  }, react_1.createElement("strong", null, price)), react_1.createElement("div", {
    className: "ml-auto"
  }, react_1.createElement(CompoundButton, {
    color: "primary"
  }, react_1.createElement(Icon, {
    prefix: "fe",
    name: "plus"
  }), "Add to cart")))));
}
var Tab = (function (_React$PureComponent) {
  _inherits(Tab, _React$PureComponent);
  function Tab() {
    _classCallCheck(this, Tab);
    return _possibleConstructorReturn(this, _getPrototypeOf(Tab).apply(this, arguments));
  }
  _createClass(Tab, [{
    key: "render",
    value: function render() {
      return this.props.children;
    }
  }]);
  return Tab;
})(react_1.PureComponent);
function TabbedContainer(props) {
  var tabs = react_1.Children.toArray(props.children);
  return react_1.createElement(react_1.Fragment, null, tabs.filter(function (tab) {
    return tab.props.title === props.selectedTitle;
  }));
}
function TabbedHeader(_ref) {
  var children = _ref.children, stateCallback = _ref.stateCallback, selectedTitle = _ref.selectedTitle, rest = _objectWithoutProperties(_ref, ["children", "stateCallback", "selectedTitle"]);
  var tabs = react_1.Children.toArray(children);
  return react_1.createElement(El.Ul, _extends({
    classNames: "nav nav-tabs Tab_header_tabs"
  }, rest), tabs.map(function (_ref2, index) {
    var _ref2$props = _ref2.props, title = _ref2$props.title, tabRest = _objectWithoutProperties(_ref2$props, ["title"]);
    return react_1.createElement(CompoundNav.Item, _extends({
      key: index,
      value: title,
      onClick: function onClick() {
        return stateCallback(title);
      },
      active: title === selectedTitle
    }, tabRest));
  }));
}
var Tabs = function Tabs(_ref) {
  var children = _ref.children, initialTab = _ref.initialTab;
  var _useState = react_1.useState(initialTab), _useState2 = _slicedToArray(_useState, 2), selectedTitle = _useState2[0], setSelectedTitle = _useState2[1];
  return react_1d.default.createElement(react_1d.default.Fragment, null, react_1d.default.createElement(TabbedHeader, {
    selectedTitle: selectedTitle,
    stateCallback: setSelectedTitle
  }, children), react_1d.default.createElement("div", {
    className: "margin-bottom-24"
  }), react_1d.default.createElement(TabbedContainer, {
    selectedTitle: selectedTitle
  }, children));
};
var TabbedCard = (function (_React$PureComponent) {
  _inherits(TabbedCard, _React$PureComponent);
  function TabbedCard() {
    var _getPrototypeOf2;
    var _this;
    _classCallCheck(this, TabbedCard);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(TabbedCard)).call.apply(_getPrototypeOf2, [this].concat(args)));
    _defineProperty(_assertThisInitialized(_this), "state", {
      selectedTitle: _this.props.initialTab
    });
    return _this;
  }
  _createClass(TabbedCard, [{
    key: "render",
    value: function render() {
      var _this2 = this;
      var children = this.props.children;
      var selectedTitle = this.state.selectedTitle;
      return react_1.createElement(CompoundCard, null, react_1.createElement(CompoundCard.Header, null, react_1.createElement(TabbedHeader, {
        selectedTitle: selectedTitle,
        stateCallback: function stateCallback(newTitle) {
          return _this2.setState({
            selectedTitle: newTitle
          });
        }
      }, children)), react_1.createElement(CompoundCard.Body, null, react_1.createElement(TabbedContainer, {
        selectedTitle: selectedTitle
      }, children)));
    }
  }]);
  return TabbedCard;
})(react_1.PureComponent);
function TableHeader(_ref) {
  var className = _ref.className, children = _ref.children, props = _objectWithoutProperties(_ref, ["className", "children"]);
  var classes = classnames(className);
  return react_1d.default.createElement(El.Thead, _extends({
    className: classes
  }, props), children);
}
function TableBody(_ref) {
  var className = _ref.className, children = _ref.children, props = _objectWithoutProperties(_ref, ["className", "children"]);
  var classes = classnames(className);
  return react_1.createElement(El.Tbody, _extends({
    className: classes
  }, props), children);
}
function TableRow(_ref) {
  var className = _ref.className, children = _ref.children, props = _objectWithoutProperties(_ref, ["className", "children"]);
  var classes = classnames(className);
  return react_1.createElement(El.Tr, _extends({
    className: classes
  }, props), children);
}
function TableCol(_ref) {
  var className = _ref.className, children = _ref.children, alignContent = _ref.alignContent, rest = _objectWithoutProperties(_ref, ["className", "children", "alignContent"]);
  var classes = classnames(_defineProperty({}, ("text-").concat(alignContent), alignContent), className);
  return react_1.createElement(El.Td, _extends({
    className: classes
  }, rest), children);
}
function TableColHeader(_ref) {
  var className = _ref.className, children = _ref.children, alignContent = _ref.alignContent, rest = _objectWithoutProperties(_ref, ["className", "children", "alignContent"]);
  var classes = classnames(_defineProperty({}, ("text-").concat(alignContent), alignContent), className);
  return react_1d.default.createElement(El.Th, _extends({
    className: classes
  }, rest), children);
}
function Table$1(_ref) {
  var className = _ref.className, children = _ref.children, cards = _ref.cards, striped = _ref.striped, responsive = _ref.responsive, highlightRowOnHover = _ref.highlightRowOnHover, hasOutline = _ref.hasOutline, verticalAlign = _ref.verticalAlign, headerItems = _ref.headerItems, bodyItems = _ref.bodyItems, props = _objectWithoutProperties(_ref, ["className", "children", "cards", "striped", "responsive", "highlightRowOnHover", "hasOutline", "verticalAlign", "headerItems", "bodyItems"]);
  var classes = classnames("table", {
    "card-table": cards,
    "table-striped": striped,
    "table-hover": highlightRowOnHover,
    "table-outline": hasOutline,
    "table-vcenter": verticalAlign === "center"
  }, className);
  var header = headerItems && react_1d.default.createElement(Table$1.Header, null, react_1d.default.createElement(Table$1.Row, null, headerItems.map(function (_ref2, i) {
    var content = _ref2.content, item = _objectWithoutProperties(_ref2, ["content"]);
    return react_1d.default.createElement(Table$1.ColHeader, _extends({
      key: i
    }, item), content);
  })));
  var body = bodyItems && react_1d.default.createElement(Table$1.Body, null, bodyItems.map(function (row, i) {
    return react_1d.default.createElement(Table$1.Row, _extends({
      key: row.key
    }, row), row.item.map(function (_ref3, i) {
      var content = _ref3.content, col = _objectWithoutProperties(_ref3, ["content"]);
      return react_1d.default.createElement(Table$1.Col, _extends({
        key: i
      }, col), content);
    }));
  }));
  var table = react_1d.default.createElement(El.Table, _extends({
    className: classes
  }, props), header, body || children);
  return !responsive ? table : react_1d.default.createElement("div", {
    className: "table-responsive"
  }, table);
}
Table$1.defaultProps = {
  cards: false,
  striped: false,
  responsive: false
};
Table$1.Header = TableHeader;
Table$1.Body = TableBody;
Table$1.Row = TableRow;
Table$1.Col = TableCol;
Table$1.ColHeader = TableColHeader;
var CompoundTag = Badge;
CompoundTag.AddOn = BadgeAddOn;
CompoundTag.List = BadgeList;
function Timeline(_ref) {
  var className = _ref.className, children = _ref.children, simple = _ref.simple, rest = _objectWithoutProperties(_ref, ["className", "children", "simple"]);
  var classes = classnames("list-timeline", {
    "list-timeline-simple": simple
  }, className);
  return react_1d.default.createElement(El.Ul, _extends({
    className: classes
  }, rest), children);
}
function TimelineItemBadge(_ref) {
  var className = _ref.className, children = _ref.children, color = _ref.color, rest = _objectWithoutProperties(_ref, ["className", "children", "color"]);
  var classes = classnames(_defineProperty({
    "list-timeline-badge": true
  }, ("bg-").concat(color), color), className);
  return react_1d.default.createElement(El.Div, _extends({
    className: classes
  }, rest), children);
}
var TimelineItemTime = function TimelineItemTime(_ref) {
  var className = _ref.className, children = _ref.children, active = _ref.active, rest = _objectWithoutProperties(_ref, ["className", "children", "active"]);
  var classes = classnames({
    "list-timeline-time": true,
    "text-muted-black": active
  }, className);
  return react_1d.default.createElement(El.Div, _extends({
    className: classes
  }, rest), children);
};
function TimelineItemTitle(_ref) {
  var children = _ref.children, className = _ref.className, active = _ref.active, rest = _objectWithoutProperties(_ref, ["children", "className", "active"]);
  var _className = classnames("list-timeline-title", {}, className);
  return react_1d.default.createElement(El.P, _extends({
    className: _className
  }, rest), active ? react_1d.default.createElement("strong", null, children) : children);
}
var TimelineItemDescription = react_1.forwardRef(function TimelineItemDescription(_ref, ref) {
  var children = _ref.children, rest = _objectWithoutProperties(_ref, ["children"]);
  return react_1.createElement(El.P, _extends({
    classNames: "text-muted",
    ref: ref
  }, rest), children);
});
function TimelineItem(_ref) {
  var className = _ref.className, children = _ref.children, titleFromProps = _ref.title, description = _ref.description, badge = _ref.badge, badgeColor = _ref.badgeColor, time = _ref.time, active = _ref.active, rest = _objectWithoutProperties(_ref, ["className", "children", "title", "description", "badge", "badgeColor", "time", "active"]);
  var classes = classnames("timeline-item", {}, className);
  var titleString = titleFromProps || typeof children === "string" && children;
  var title = titleString && react_1d.default.createElement(TimelineItemTitle, {
    active: active
  }, titleString);
  var titleAndDescription = title && react_1d.default.createElement(react_1d.default.Fragment, null, title, description && react_1d.default.createElement(TimelineItemDescription, null, description));
  return react_1d.default.createElement(El.Li, _extends({
    className: classes
  }, rest), (badge || badgeColor) && react_1d.default.createElement(TimelineItemBadge, {
    color: badgeColor
  }), active ? react_1d.default.createElement("div", null, titleAndDescription) : titleAndDescription, children, time && react_1d.default.createElement(TimelineItemTime, {
    active: active
  }, time));
}
function TimelineItemContent(_ref) {
  var children = _ref.children, className = _ref.className, rest = _objectWithoutProperties(_ref, ["children", "className"]);
  var _className = classnames("list-timeline-content", {}, className);
  return react_1d.default.createElement(El.Div, _extends({
    className: _className
  }, rest), children);
}
function TimelineItemIcon(_ref) {
  var children = _ref.children, className = _ref.className, active = _ref.active, bg = _ref.bg, rest = _objectWithoutProperties(_ref, ["children", "className", "active", "bg"]);
  var _className = classnames("list-timeline-icon", _defineProperty({}, ("bg-").concat(bg), bg), className);
  return react_1d.default.createElement(Icon, _extends({
    className: _className
  }, rest), active ? react_1d.default.createElement("strong", null, children) : children);
}
var CompoundTimeline = Timeline;
CompoundTimeline.Item = TimelineItem;
CompoundTimeline.ItemBadge = TimelineItemBadge;
CompoundTimeline.ItemDescription = TimelineItemDescription;
CompoundTimeline.ItemTime = TimelineItemTime;
CompoundTimeline.ItemTitle = TimelineItemTitle;
CompoundTimeline.ItemContent = TimelineItemContent;
CompoundTimeline.ItemIcon = TimelineItemIcon;
var ToastHeader = function ToastHeader(_ref) {
  var children = _ref.children, className = _ref.className, avatar = _ref.avatar, title = _ref.title, timestamp = _ref.timestamp, rest = _objectWithoutProperties(_ref, ["children", "className", "avatar", "title", "timestamp"]);
  var _className = classnames("toast-header", className);
  return react_1d.default.createElement(El.Div, _extends({
    className: _className
  }, rest), avatar && react_1d.default.createElement(Avatar, {
    size: "sm",
    mr: 2,
    imageURL: avatar
  }), title && react_1d.default.createElement("strong", {
    className: "mr-auto"
  }, title), timestamp && react_1d.default.createElement("small", null, "11 mins ago"), react_1d.default.createElement(Button$1, {
    ml: 2,
    className: "close",
    "data-dismiss": "toast",
    "aria-label": "Close"
  }, react_1d.default.createElement("span", {
    "aria-hidden": "true"
  }, "\xD7")), children);
};
var ToastBody = function ToastBody(_ref) {
  var children = _ref.children, className = _ref.className, rest = _objectWithoutProperties(_ref, ["children", "className"]);
  var _className = classnames("toast-body", className);
  return react_1d.default.createElement(El.Div, _extends({
    className: _className
  }, rest), children);
};
var Toast = function Toast(_ref) {
  var children = _ref.children, className = _ref.className, show = _ref.show, header = _ref.header, body = _ref.body, rest = _objectWithoutProperties(_ref, ["children", "className", "show", "header", "body"]);
  var _className = classnames("toast", {
    show: show
  }, className);
  return react_1d.default.createElement(El.Div, _extends({
    className: _className,
    role: "alert",
    "aria-live": "assertive",
    "aria-atomic": "true"
  }, rest), header && react_1d.default.createElement(ToastHeader, header), body && react_1d.default.createElement(ToastBody, null, body), children);
};
var CompoundToast = Toast;
CompoundToast.Header = ToastHeader;
CompoundToast.Body = ToastBody;
var RouterContextProvider = (function (_React$Component) {
  _inherits(RouterContextProvider, _React$Component);
  function RouterContextProvider() {
    _classCallCheck(this, RouterContextProvider);
    return _possibleConstructorReturn(this, _getPrototypeOf(RouterContextProvider).apply(this, arguments));
  }
  _createClass(RouterContextProvider, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this$props = this.props, callback = _this$props.callback, location = _this$props.location;
      callback(location);
    }
  }, {
    key: "render",
    value: function render() {
      return null;
    }
  }]);
  return RouterContextProvider;
})(react_1.Component);
function StandaloneFormPage(props) {
  return react_1.createElement("div", {
    className: "page"
  }, react_1.createElement("div", {
    className: "page-single"
  }, react_1.createElement("div", {
    className: "container"
  }, react_1.createElement("div", {
    className: "row"
  }, react_1.createElement("div", {
    className: "col col-login mx-auto"
  }, react_1.createElement("div", {
    className: "text-center mb-6"
  }, react_1.createElement("img", {
    src: props.imageURL,
    className: "h-6",
    alt: "logo"
  })), props.children)))));
}
function DefaultErrorPage(props) {
  var _onBackClick = function _onBackClick(event) {
    window.history.back();
    event.preventDefault();
    return true;
  };
  var _props$title = props.title, title = _props$title === void 0 ? "Error" : _props$title, _props$subtitle = props.subtitle, subtitle = _props$subtitle === void 0 ? "Sorry an unkown error occurred" : _props$subtitle, details = props.details, _props$action = props.action, action = _props$action === void 0 ? "Go back" : _props$action;
  return react_1.createElement(CompoundPage, {
    className: "text-center"
  }, react_1.createElement(Container, null, react_1.createElement(CompoundHeader.H1, {
    className: "display-1 text-muted mb-5"
  }, title), react_1.createElement(CompoundHeader.H2, null, subtitle), details && react_1.createElement(CompoundHeader.H4, {
    className: "text-muted font-weight-normal mb-7"
  }, details), react_1.createElement(CompoundButton, {
    onClick: _onBackClick,
    className: "btn-primary",
    href: ""
  }, react_1.createElement(Icon, {
    className: "mr-2",
    name: "arrow-left"
  }), action)));
}
function Error400Page(_ref) {
  var _ref$title = _ref.title, title = _ref$title === void 0 ? "400" : _ref$title, _ref$subtitle = _ref.subtitle, subtitle = _ref$subtitle === void 0 ? "Oops... You just found an error page..." : _ref$subtitle, _ref$details = _ref.details, details = _ref$details === void 0 ? "We are sorry but your request contains bad syntax and cannot be fulfilled..." : _ref$details, action = _ref.action;
  return react_1.createElement(DefaultErrorPage, {
    title: title,
    subtitle: subtitle,
    details: details,
    action: action
  });
}
function Error401Page(_ref) {
  var _ref$title = _ref.title, title = _ref$title === void 0 ? "401" : _ref$title, _ref$subtitle = _ref.subtitle, subtitle = _ref$subtitle === void 0 ? "Oops... You just found an error page..." : _ref$subtitle, _ref$details = _ref.details, details = _ref$details === void 0 ? "We are sorry but you are not authorized to access this page..." : _ref$details, action = _ref.action;
  return react_1.createElement(DefaultErrorPage, {
    title: title,
    subtitle: subtitle,
    details: details,
    action: action
  });
}
function Error403Page(_ref) {
  var _ref$title = _ref.title, title = _ref$title === void 0 ? "403" : _ref$title, _ref$subtitle = _ref.subtitle, subtitle = _ref$subtitle === void 0 ? "Oops... You just found an error page..." : _ref$subtitle, _ref$details = _ref.details, details = _ref$details === void 0 ? "We are sorry but you do not have permission to access this page..." : _ref$details, action = _ref.action;
  return react_1.createElement(DefaultErrorPage, {
    title: title,
    subtitle: subtitle,
    details: details,
    action: action
  });
}
function Error404Page(_ref) {
  var _ref$title = _ref.title, title = _ref$title === void 0 ? "404" : _ref$title, _ref$subtitle = _ref.subtitle, subtitle = _ref$subtitle === void 0 ? "Oops... You just found an error page..." : _ref$subtitle, _ref$details = _ref.details, details = _ref$details === void 0 ? "We are sorry but the page you have requested can not be found..." : _ref$details, action = _ref.action;
  return react_1.createElement(DefaultErrorPage, {
    title: title,
    subtitle: subtitle,
    details: details,
    action: action
  });
}
function Error500Page(_ref) {
  var _ref$title = _ref.title, title = _ref$title === void 0 ? "500" : _ref$title, _ref$subtitle = _ref.subtitle, subtitle = _ref$subtitle === void 0 ? "Oops... You just found an error page..." : _ref$subtitle, _ref$details = _ref.details, details = _ref$details === void 0 ? "We are sorry but your request contains bad syntax and cannot be fulfilled..." : _ref$details, action = _ref.action;
  return react_1.createElement(DefaultErrorPage, {
    title: title,
    subtitle: subtitle,
    details: details,
    action: action
  });
}
function Error503Page(_ref) {
  var _ref$title = _ref.title, title = _ref$title === void 0 ? "503" : _ref$title, _ref$subtitle = _ref.subtitle, subtitle = _ref$subtitle === void 0 ? "Oops... You just found an error page..." : _ref$subtitle, _ref$details = _ref.details, details = _ref$details === void 0 ? "This page is temporarily unavailable.  Please reload your browser..." : _ref$details, action = _ref.action;
  return react_1.createElement(DefaultErrorPage, {
    title: title,
    subtitle: subtitle,
    details: details,
    action: action
  });
}
function FormCard(_ref) {
  var children = _ref.children, action = _ref.action, method = _ref.method, onSubmit = _ref.onSubmit, title = _ref.title, buttonText = _ref.buttonText;
  return react_1.createElement(CompoundForm, {
    className: "card",
    onSubmit: onSubmit,
    action: action,
    method: method
  }, react_1.createElement(CompoundCard.Body, {
    className: "p-6"
  }, react_1.createElement(CompoundCard.Title, {
    RootComponent: "div"
  }, title), children, react_1.createElement(CompoundForm.Footer, null, react_1.createElement(CompoundButton, {
    type: "submit",
    color: "primary",
    block: true
  }, buttonText))));
}
function FormTextInput(props) {
  var label = props.label, propsForInput = _objectWithoutProperties(props, ["label"]);
  var formInputComponent = react_1.createElement(CompoundForm.Input, propsForInput);
  return react_1.createElement(CompoundForm.Group, {
    label: label
  }, formInputComponent);
}
function FormCheckboxInput(props) {
  var formCheckboxComponent = react_1.createElement(CompoundForm.Checkbox, props);
  return react_1.createElement(CompoundForm.Group, null, formCheckboxComponent);
}
function touchedErrors() {
  var touched = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var errors = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var fields = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
  return fields.reduce(function (acc, cur) {
    return Object.assign(acc, _defineProperty({}, cur, touched && touched[cur] && errors ? errors[cur] : ""));
  }, {});
}
function withTouchedErrors() {
  var fields = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  return function withComponent(Component) {
    return function WithTouchedErrors(props) {
      var errors = touchedErrors(props.touched, props.errors, fields);
      return react_1.createElement(Component, _extends({}, props, {
        errors: errors
      }));
    };
  };
}
var strings = {
  title: "Login to your Account",
  buttonText: "Login",
  emailLabel: "Email Address",
  emailPlaceholder: "Enter email",
  passwordLabel: "Password",
  passwordPlaceholder: "Password"
};
function LoginPage(props) {
  var action = props.action, method = props.method, onSubmit = props.onSubmit, onChange = props.onChange, onBlur = props.onBlur, values = props.values, _props$strings = props.strings, strings$1 = _props$strings === void 0 ? {} : _props$strings, errors = props.errors, logoUrl = props.logoUrl;
  return react_1.createElement(StandaloneFormPage, {
    imageURL: logoUrl
  }, react_1.createElement(FormCard, {
    buttonText: strings$1.buttonText || strings.buttonText,
    title: strings$1.title || strings.title,
    onSubmit: onSubmit,
    action: action,
    method: method
  }, react_1.createElement(FormTextInput, {
    name: "email",
    label: strings$1.emailLabel || strings.emailLabel,
    placeholder: strings$1.emailPlaceholder || strings.emailPlaceholder,
    onChange: onChange,
    onBlur: onBlur,
    value: values && values.email,
    error: errors && errors.email
  }), react_1.createElement(FormTextInput, {
    name: "password",
    type: "password",
    label: strings$1.passwordLabel || strings.passwordLabel,
    placeholder: strings$1.passwordPlaceholder || strings.passwordPlaceholder,
    onChange: onChange,
    onBlur: onBlur,
    value: values && values.password,
    error: errors && errors.password
  })));
}
var LoginPageWithTouchedErrors = withTouchedErrors(["email", "password"])(LoginPage);
var strings$1 = {
  title: "Create New Account",
  buttonText: "Create Account",
  nameLabel: "Name",
  namePlaceholder: "Enter name",
  emailLabel: "Email Address",
  emailPlaceholder: "Enter email",
  passwordLabel: "Password",
  passwordPlaceholder: "Password",
  termsLabel: "Agree to the terms and policy"
};
function RegisterPage(props) {
  var action = props.action, method = props.method, onSubmit = props.onSubmit, onChange = props.onChange, onBlur = props.onBlur, values = props.values, _props$strings = props.strings, strings = _props$strings === void 0 ? {} : _props$strings, errors = props.errors, logoUrl = props.logoUrl;
  return react_1.createElement(StandaloneFormPage, {
    imageURL: logoUrl
  }, react_1.createElement(FormCard, {
    buttonText: strings.buttonText || strings$1.buttonText,
    title: strings.title || strings$1.title,
    onSubmit: onSubmit,
    action: action,
    method: method
  }, react_1.createElement(FormTextInput, {
    name: "name",
    label: strings.nameLabel || strings$1.nameLabel,
    placeholder: strings.namePlaceholder || strings$1.namePlaceholder,
    onChange: onChange,
    onBlur: onBlur,
    value: values && values.name,
    error: errors && errors.name
  }), react_1.createElement(FormTextInput, {
    name: "email",
    label: strings.emailLabel || strings$1.emailLabel,
    placeholder: strings.emailPlaceholder || strings$1.emailPlaceholder,
    onChange: onChange,
    onBlur: onBlur,
    value: values && values.email,
    error: errors && errors.email
  }), react_1.createElement(FormTextInput, {
    name: "password",
    type: "password",
    label: strings.passwordLabel || strings$1.passwordLabel,
    placeholder: strings.passwordPlaceholder || strings$1.passwordPlaceholder,
    onChange: onChange,
    onBlur: onBlur,
    value: values && values.password,
    error: errors && errors.password
  }), react_1.createElement(FormCheckboxInput, {
    onChange: onChange,
    onBlur: onBlur,
    value: values && values.terms,
    name: "terms",
    label: strings.termsLabel || strings$1.termsLabel
  })));
}
var RegisterPageWithTouchedErrors = withTouchedErrors(["name", "email", "password", "terms"])(RegisterPage);
var strings$2 = {
  title: "Forgot Password",
  buttonText: "Request Password Change",
  emailLabel: "Email Address",
  emailPlaceholder: "Enter email",
  instructions: "Enter your email address and your password will be reset and emailed to you."
};
function ForgotPasswordPage(props) {
  var action = props.action, method = props.method, onSubmit = props.onSubmit, onChange = props.onChange, onBlur = props.onBlur, values = props.values, _props$strings = props.strings, strings = _props$strings === void 0 ? {} : _props$strings, errors = props.errors, logoUrl = props.logoUrl;
  return react_1.createElement(StandaloneFormPage, {
    imageURL: logoUrl
  }, react_1.createElement(FormCard, {
    buttonText: strings.buttonText || strings$2.buttonText,
    title: strings.title || strings$2.title,
    onSubmit: onSubmit,
    action: action,
    method: method
  }, react_1.createElement("p", {
    className: "text-muted"
  }, strings.instructions || strings$2.instructions), react_1.createElement(FormTextInput, {
    name: "email",
    label: strings.emailLabel || strings$2.emailLabel,
    placeholder: strings.emailPlaceholder || strings$2.emailPlaceholder,
    onChange: onChange,
    onBlur: onBlur,
    value: values && values.email,
    error: errors && errors.email
  })));
}
var ForgotPasswordPageWithTouchedErrors = withTouchedErrors(["email"])(ForgotPasswordPage);
exports.AccountDropdown = AccountDropdown;
exports.Alert = CompoundAlert;
exports.Avatar = Avatar;
exports.Badge = CompoundBadge;
exports.BlogCard = BlogCard;
exports.Breadcrumb = Breadcrumb;
exports.BreadcrumbItem = BreadcrumbItem;
exports.Button = CompoundButton;
exports.Card = CompoundCard;
exports.Comment = Comment;
exports.CommentsCard = CommentsCard;
exports.ContactCard = ContactCard;
exports.Container = Container;
exports.DefaultErrorPage = DefaultErrorPage;
exports.Dimmer = Dimmer;
exports.Dropdown = CompoundDropdown;
exports.El = El;
exports.Error400Page = Error400Page;
exports.Error401Page = Error401Page;
exports.Error403Page = Error403Page;
exports.Error404Page = Error404Page;
exports.Error500Page = Error500Page;
exports.Error503Page = Error503Page;
exports.ForgotPasswordPage = ForgotPasswordPageWithTouchedErrors;
exports.Form = CompoundForm;
exports.FormCard = FormCard;
exports.FormCheckboxInput = FormCheckboxInput;
exports.FormTextInput = FormTextInput;
exports.GalleryCard = GalleryCard;
exports.Grid = Grid;
exports.Header = CompoundHeader;
exports.Icon = Icon;
exports.List = List;
exports.Loader = Loader;
exports.LoginPage = LoginPageWithTouchedErrors;
exports.Media = CompoundMedia;
exports.Nav = CompoundNav;
exports.NavBarHeading = NavBarHeading;
exports.NavItem = NavItem;
exports.NavLink = NavLink;
exports.NavLinkTitle = NavLinkTitle;
exports.NavSubItem = NavSubItem;
exports.NavSubNav = NavSubNav;
exports.NavSubmenu = NavSubmenu;
exports.NavSubmenuItem = NavSubmenuItem;
exports.Notification = CompoundNotification;
exports.NotificationProps = CompoundNotification;
exports.Page = CompoundPage;
exports.PricingCard = PricingCard;
exports.Profile = Profile;
exports.Progress = Progress;
exports.ProgressCard = ProgressCard;
exports.RegisterPage = RegisterPageWithTouchedErrors;
exports.Ribbon = Ribbon;
exports.RouterContextProvider = RouterContextProvider;
exports.Site = CompoundSite;
exports.SocialNetworksList = SocialNetworksList;
exports.Stamp = Stamp;
exports.StampCard = StampCard;
exports.StandaloneFormPage = StandaloneFormPage;
exports.StatsCard = StatsCard;
exports.Steps = CompoundSteps;
exports.StoreCard = StoreCard;
exports.Tab = Tab;
exports.TabbedCard = TabbedCard;
exports.TabbedContainer = TabbedContainer;
exports.TabbedHeader = TabbedHeader;
exports.Table = Table$1;
exports.Tabs = Tabs;
exports.Tag = CompoundTag;
exports.Text = CompoundText;
exports.Timeline = CompoundTimeline;
exports.Toast = CompoundToast;
exports.Tooltip = Tooltip;
exports.colors = colors;
exports.softColors = softColors;

},

// node_modules/opacity-web2.0/src/components/footer/footer.tsx @107
107: function(__fusereq, exports, module){
exports.__esModule = true;
var react_1 = __fusereq(3);
var tabler_react_1 = __fusereq(105);
__fusereq(190);
const logo = __fusereq(184);
const github = __fusereq(185);
const reddit = __fusereq(186);
const telegram = __fusereq(187);
const twitter = __fusereq(188);
const youtube = __fusereq(189);
const Footer = () => {
  return react_1.createElement("footer", null, react_1.createElement("div", {
    className: 'container-xl'
  }, react_1.createElement("div", {
    className: 'row'
  }, react_1.createElement("div", {
    className: 'col-md-6 footer-logo'
  }, react_1.createElement("img", {
    width: '78',
    src: logo
  }), react_1.createElement("span", {
    className: 'ml-3'
  }, "OPACITY")), react_1.createElement("div", {
    className: 'col-md-6 footer-third'
  }, react_1.createElement("div", {
    className: 'd-flex h-100 align-items-center',
    style: {
      justifyContent: "flex-end"
    }
  }, react_1.createElement(tabler_react_1.NavLink, {
    to: 'https://github.com/opacity'
  }, react_1.createElement("img", {
    width: '43',
    src: github
  })), react_1.createElement(tabler_react_1.NavLink, {
    to: 'https://www.reddit.com/r/Opacity/'
  }, react_1.createElement("img", {
    width: '43',
    src: reddit
  })), react_1.createElement(tabler_react_1.NavLink, {
    to: 'https://telegram.me/opacitystorage'
  }, react_1.createElement("img", {
    width: '43',
    src: telegram
  })), react_1.createElement(tabler_react_1.NavLink, {
    to: 'https://twitter.com/Opacity_Storage'
  }, react_1.createElement("img", {
    width: '43',
    src: twitter
  })), react_1.createElement(tabler_react_1.NavLink, {
    to: 'https://www.youtube.com/opacitystorage'
  }, react_1.createElement("img", {
    width: '43',
    src: youtube
  }))))), react_1.createElement("div", {
    className: 'divider'
  }), react_1.createElement("div", {
    className: ' footer-links'
  }, react_1.createElement("div", {
    className: 'link-wrapper'
  }, react_1.createElement("span", {
    className: 'title'
  }, " Company"), react_1.createElement(tabler_react_1.NavLink, {
    to: 'https://telegram.me/opacitystorage'
  }, "About us"), react_1.createElement(tabler_react_1.NavLink, {
    to: 'https://medium.com/opacity-storage'
  }, "Blog"), react_1.createElement(tabler_react_1.NavLink, null, "Press")), react_1.createElement("div", {
    className: 'link-wrapper'
  }, react_1.createElement("span", {
    className: 'title'
  }, " Resources"), react_1.createElement(tabler_react_1.NavLink, null, "Products"), react_1.createElement(tabler_react_1.NavLink, {
    to: 'https://dev2.opacity.io/community'
  }, "Downloads"), react_1.createElement(tabler_react_1.NavLink, null, "Learn"), react_1.createElement(tabler_react_1.NavLink, {
    to: 'https://api.opacity.io:3000/swagger/index.html'
  }, "API for Developers")), react_1.createElement("div", {
    className: 'link-wrapper'
  }, react_1.createElement("span", {
    className: 'title'
  }, " Help"), react_1.createElement(tabler_react_1.NavLink, {
    to: 'https://telegram.me/opacitystorage'
  }, "Contact us"), react_1.createElement(tabler_react_1.NavLink, {
    to: 'https://telegram.me/opacitystorage'
  }, "Telegram"), react_1.createElement(tabler_react_1.NavLink, {
    to: 'http://discord.opacity.io/'
  }, "Discord")), react_1.createElement("div", {
    className: 'link-wrapper'
  }, react_1.createElement("span", {
    className: 'title'
  }, " Legal"), react_1.createElement(tabler_react_1.NavLink, {
    to: 'https://www.opacity.io/terms-of-service'
  }, "Terms of Service"), react_1.createElement(tabler_react_1.NavLink, {
    to: 'https://www.opacity.io/privacy-policy'
  }, "Privacy Policy"), react_1.createElement(tabler_react_1.NavLink, {
    to: 'https://www.opacity.io/code-review-license'
  }, "Code License"))), react_1.createElement("div", {
    className: 'divider'
  }), react_1.createElement("div", {
    className: 'row'
  }, react_1.createElement("div", {
    className: 'col-md-12 text-center copywrite'
  }, " © 2018-2021 Opacity Storage Inc. All rights reserved."))));
};
exports.default = Footer;

},

// node_modules/opacity-web2.0/src/assets/logo.svg @184
184: function(__fusereq, exports, module){
module.exports = "/resources/03fbe6df8.svg";
},

// node_modules/opacity-web2.0/src/assets/github.svg @185
185: function(__fusereq, exports, module){
module.exports = "/resources/03ca8f180.svg";
},

// node_modules/opacity-web2.0/src/assets/reddit.svg @186
186: function(__fusereq, exports, module){
module.exports = "/resources/073bb0c85.svg";
},

// node_modules/opacity-web2.0/src/assets/telegram.svg @187
187: function(__fusereq, exports, module){
module.exports = "/resources/0e337122.svg";
},

// node_modules/opacity-web2.0/src/assets/twitter.svg @188
188: function(__fusereq, exports, module){
module.exports = "/resources/0195f7f5e.svg";
},

// node_modules/opacity-web2.0/src/assets/youtube.svg @189
189: function(__fusereq, exports, module){
module.exports = "/resources/4f122952.svg";
},

// node_modules/opacity-web2.0/src/components/footer/footer.scss @190
190: function(__fusereq, exports, module){
__fusereq(7)("node_modules/opacity-web2.0/src/components/footer/footer.scss","footer {\n  background-color: #2e6dde;\n  padding: 40px 0; }\n  footer .footer-logo {\n    display: flex;\n    font-weight: bold;\n    font-size: 30px;\n    line-height: 45px;\n    color: #ffffff;\n    align-items: center;\n    cursor: pointer; }\n    footer .footer-logo:hover {\n      opacity: 0.8; }\n    @media (max-width: 767.9px) {\n      footer .footer-logo {\n        justify-content: center;\n        margin-bottom: 20px; } }\n  @media (max-width: 767.9px) {\n    footer .footer-third > div {\n      justify-content: center !important; } }\n  footer .nav-link {\n    cursor: pointer; }\n    footer .nav-link:hover {\n      opacity: 0.8; }\n  footer .divider {\n    border: 1px solid #357bf7;\n    margin: 35px 0; }\n  footer .footer-links {\n    display: flex;\n    justify-content: space-between; }\n    @media (max-width: 767.9px) {\n      footer .footer-links {\n        flex-wrap: wrap; }\n        footer .footer-links .link-wrapper {\n          flex: 50%;\n          padding: 0 10px; }\n          footer .footer-links .link-wrapper:nth-child(3), footer .footer-links .link-wrapper:nth-child(4) {\n            margin-top: 20px; } }\n    footer .footer-links .title {\n      font-weight: 600;\n      font-size: 20px;\n      line-height: 30px;\n      color: #ffffff;\n      border-bottom: 1px solid #b7d1ff;\n      display: inline-block;\n      padding-bottom: 10px;\n      margin-bottom: 15px; }\n    footer .footer-links .nav-link {\n      font-size: 16px;\n      color: #e2edff;\n      padding-left: 0; }\n  footer .copywrite {\n    font-size: 16px;\n    line-height: 24px;\n    color: #e4ecfc; }\n")
},

// node_modules/tinycolor2/tinycolor.js @131
131: function(__fusereq, exports, module){
(function (Math) {
  var trimLeft = /^\s+/, trimRight = /\s+$/, tinyCounter = 0, mathRound = Math.round, mathMin = Math.min, mathMax = Math.max, mathRandom = Math.random;
  function tinycolor(color, opts) {
    color = color ? color : '';
    opts = opts || ({});
    if (color instanceof tinycolor) {
      return color;
    }
    if (!(this instanceof tinycolor)) {
      return new tinycolor(color, opts);
    }
    var rgb = inputToRGB(color);
    (this._originalInput = color, this._r = rgb.r, this._g = rgb.g, this._b = rgb.b, this._a = rgb.a, this._roundA = mathRound(100 * this._a) / 100, this._format = opts.format || rgb.format);
    this._gradientType = opts.gradientType;
    if (this._r < 1) {
      this._r = mathRound(this._r);
    }
    if (this._g < 1) {
      this._g = mathRound(this._g);
    }
    if (this._b < 1) {
      this._b = mathRound(this._b);
    }
    this._ok = rgb.ok;
    this._tc_id = tinyCounter++;
  }
  tinycolor.prototype = {
    isDark: function () {
      return this.getBrightness() < 128;
    },
    isLight: function () {
      return !this.isDark();
    },
    isValid: function () {
      return this._ok;
    },
    getOriginalInput: function () {
      return this._originalInput;
    },
    getFormat: function () {
      return this._format;
    },
    getAlpha: function () {
      return this._a;
    },
    getBrightness: function () {
      var rgb = this.toRgb();
      return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;
    },
    getLuminance: function () {
      var rgb = this.toRgb();
      var RsRGB, GsRGB, BsRGB, R, G, B;
      RsRGB = rgb.r / 255;
      GsRGB = rgb.g / 255;
      BsRGB = rgb.b / 255;
      if (RsRGB <= 0.03928) {
        R = RsRGB / 12.92;
      } else {
        R = Math.pow((RsRGB + 0.055) / 1.055, 2.4);
      }
      if (GsRGB <= 0.03928) {
        G = GsRGB / 12.92;
      } else {
        G = Math.pow((GsRGB + 0.055) / 1.055, 2.4);
      }
      if (BsRGB <= 0.03928) {
        B = BsRGB / 12.92;
      } else {
        B = Math.pow((BsRGB + 0.055) / 1.055, 2.4);
      }
      return 0.2126 * R + 0.7152 * G + 0.0722 * B;
    },
    setAlpha: function (value) {
      this._a = boundAlpha(value);
      this._roundA = mathRound(100 * this._a) / 100;
      return this;
    },
    toHsv: function () {
      var hsv = rgbToHsv(this._r, this._g, this._b);
      return {
        h: hsv.h * 360,
        s: hsv.s,
        v: hsv.v,
        a: this._a
      };
    },
    toHsvString: function () {
      var hsv = rgbToHsv(this._r, this._g, this._b);
      var h = mathRound(hsv.h * 360), s = mathRound(hsv.s * 100), v = mathRound(hsv.v * 100);
      return this._a == 1 ? "hsv(" + h + ", " + s + "%, " + v + "%)" : "hsva(" + h + ", " + s + "%, " + v + "%, " + this._roundA + ")";
    },
    toHsl: function () {
      var hsl = rgbToHsl(this._r, this._g, this._b);
      return {
        h: hsl.h * 360,
        s: hsl.s,
        l: hsl.l,
        a: this._a
      };
    },
    toHslString: function () {
      var hsl = rgbToHsl(this._r, this._g, this._b);
      var h = mathRound(hsl.h * 360), s = mathRound(hsl.s * 100), l = mathRound(hsl.l * 100);
      return this._a == 1 ? "hsl(" + h + ", " + s + "%, " + l + "%)" : "hsla(" + h + ", " + s + "%, " + l + "%, " + this._roundA + ")";
    },
    toHex: function (allow3Char) {
      return rgbToHex(this._r, this._g, this._b, allow3Char);
    },
    toHexString: function (allow3Char) {
      return '#' + this.toHex(allow3Char);
    },
    toHex8: function (allow4Char) {
      return rgbaToHex(this._r, this._g, this._b, this._a, allow4Char);
    },
    toHex8String: function (allow4Char) {
      return '#' + this.toHex8(allow4Char);
    },
    toRgb: function () {
      return {
        r: mathRound(this._r),
        g: mathRound(this._g),
        b: mathRound(this._b),
        a: this._a
      };
    },
    toRgbString: function () {
      return this._a == 1 ? "rgb(" + mathRound(this._r) + ", " + mathRound(this._g) + ", " + mathRound(this._b) + ")" : "rgba(" + mathRound(this._r) + ", " + mathRound(this._g) + ", " + mathRound(this._b) + ", " + this._roundA + ")";
    },
    toPercentageRgb: function () {
      return {
        r: mathRound(bound01(this._r, 255) * 100) + "%",
        g: mathRound(bound01(this._g, 255) * 100) + "%",
        b: mathRound(bound01(this._b, 255) * 100) + "%",
        a: this._a
      };
    },
    toPercentageRgbString: function () {
      return this._a == 1 ? "rgb(" + mathRound(bound01(this._r, 255) * 100) + "%, " + mathRound(bound01(this._g, 255) * 100) + "%, " + mathRound(bound01(this._b, 255) * 100) + "%)" : "rgba(" + mathRound(bound01(this._r, 255) * 100) + "%, " + mathRound(bound01(this._g, 255) * 100) + "%, " + mathRound(bound01(this._b, 255) * 100) + "%, " + this._roundA + ")";
    },
    toName: function () {
      if (this._a === 0) {
        return "transparent";
      }
      if (this._a < 1) {
        return false;
      }
      return hexNames[rgbToHex(this._r, this._g, this._b, true)] || false;
    },
    toFilter: function (secondColor) {
      var hex8String = '#' + rgbaToArgbHex(this._r, this._g, this._b, this._a);
      var secondHex8String = hex8String;
      var gradientType = this._gradientType ? "GradientType = 1, " : "";
      if (secondColor) {
        var s = tinycolor(secondColor);
        secondHex8String = '#' + rgbaToArgbHex(s._r, s._g, s._b, s._a);
      }
      return "progid:DXImageTransform.Microsoft.gradient(" + gradientType + "startColorstr=" + hex8String + ",endColorstr=" + secondHex8String + ")";
    },
    toString: function (format) {
      var formatSet = !!format;
      format = format || this._format;
      var formattedString = false;
      var hasAlpha = this._a < 1 && this._a >= 0;
      var needsAlphaFormat = !formatSet && hasAlpha && (format === "hex" || format === "hex6" || format === "hex3" || format === "hex4" || format === "hex8" || format === "name");
      if (needsAlphaFormat) {
        if (format === "name" && this._a === 0) {
          return this.toName();
        }
        return this.toRgbString();
      }
      if (format === "rgb") {
        formattedString = this.toRgbString();
      }
      if (format === "prgb") {
        formattedString = this.toPercentageRgbString();
      }
      if (format === "hex" || format === "hex6") {
        formattedString = this.toHexString();
      }
      if (format === "hex3") {
        formattedString = this.toHexString(true);
      }
      if (format === "hex4") {
        formattedString = this.toHex8String(true);
      }
      if (format === "hex8") {
        formattedString = this.toHex8String();
      }
      if (format === "name") {
        formattedString = this.toName();
      }
      if (format === "hsl") {
        formattedString = this.toHslString();
      }
      if (format === "hsv") {
        formattedString = this.toHsvString();
      }
      return formattedString || this.toHexString();
    },
    clone: function () {
      return tinycolor(this.toString());
    },
    _applyModification: function (fn, args) {
      var color = fn.apply(null, [this].concat([].slice.call(args)));
      this._r = color._r;
      this._g = color._g;
      this._b = color._b;
      this.setAlpha(color._a);
      return this;
    },
    lighten: function () {
      return this._applyModification(lighten, arguments);
    },
    brighten: function () {
      return this._applyModification(brighten, arguments);
    },
    darken: function () {
      return this._applyModification(darken, arguments);
    },
    desaturate: function () {
      return this._applyModification(desaturate, arguments);
    },
    saturate: function () {
      return this._applyModification(saturate, arguments);
    },
    greyscale: function () {
      return this._applyModification(greyscale, arguments);
    },
    spin: function () {
      return this._applyModification(spin, arguments);
    },
    _applyCombination: function (fn, args) {
      return fn.apply(null, [this].concat([].slice.call(args)));
    },
    analogous: function () {
      return this._applyCombination(analogous, arguments);
    },
    complement: function () {
      return this._applyCombination(complement, arguments);
    },
    monochromatic: function () {
      return this._applyCombination(monochromatic, arguments);
    },
    splitcomplement: function () {
      return this._applyCombination(splitcomplement, arguments);
    },
    triad: function () {
      return this._applyCombination(triad, arguments);
    },
    tetrad: function () {
      return this._applyCombination(tetrad, arguments);
    }
  };
  tinycolor.fromRatio = function (color, opts) {
    if (typeof color == "object") {
      var newColor = {};
      for (var i in color) {
        if (color.hasOwnProperty(i)) {
          if (i === "a") {
            newColor[i] = color[i];
          } else {
            newColor[i] = convertToPercentage(color[i]);
          }
        }
      }
      color = newColor;
    }
    return tinycolor(color, opts);
  };
  function inputToRGB(color) {
    var rgb = {
      r: 0,
      g: 0,
      b: 0
    };
    var a = 1;
    var s = null;
    var v = null;
    var l = null;
    var ok = false;
    var format = false;
    if (typeof color == "string") {
      color = stringInputToObject(color);
    }
    if (typeof color == "object") {
      if (isValidCSSUnit(color.r) && isValidCSSUnit(color.g) && isValidCSSUnit(color.b)) {
        rgb = rgbToRgb(color.r, color.g, color.b);
        ok = true;
        format = String(color.r).substr(-1) === "%" ? "prgb" : "rgb";
      } else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.v)) {
        s = convertToPercentage(color.s);
        v = convertToPercentage(color.v);
        rgb = hsvToRgb(color.h, s, v);
        ok = true;
        format = "hsv";
      } else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.l)) {
        s = convertToPercentage(color.s);
        l = convertToPercentage(color.l);
        rgb = hslToRgb(color.h, s, l);
        ok = true;
        format = "hsl";
      }
      if (color.hasOwnProperty("a")) {
        a = color.a;
      }
    }
    a = boundAlpha(a);
    return {
      ok: ok,
      format: color.format || format,
      r: mathMin(255, mathMax(rgb.r, 0)),
      g: mathMin(255, mathMax(rgb.g, 0)),
      b: mathMin(255, mathMax(rgb.b, 0)),
      a: a
    };
  }
  function rgbToRgb(r, g, b) {
    return {
      r: bound01(r, 255) * 255,
      g: bound01(g, 255) * 255,
      b: bound01(b, 255) * 255
    };
  }
  function rgbToHsl(r, g, b) {
    r = bound01(r, 255);
    g = bound01(g, 255);
    b = bound01(b, 255);
    var max = mathMax(r, g, b), min = mathMin(r, g, b);
    var h, s, l = (max + min) / 2;
    if (max == min) {
      h = s = 0;
    } else {
      var d = max - min;
      s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
      switch (max) {
        case r:
          h = (g - b) / d + (g < b ? 6 : 0);
          break;
        case g:
          h = (b - r) / d + 2;
          break;
        case b:
          h = (r - g) / d + 4;
          break;
      }
      h /= 6;
    }
    return {
      h: h,
      s: s,
      l: l
    };
  }
  function hslToRgb(h, s, l) {
    var r, g, b;
    h = bound01(h, 360);
    s = bound01(s, 100);
    l = bound01(l, 100);
    function hue2rgb(p, q, t) {
      if (t < 0) t += 1;
      if (t > 1) t -= 1;
      if (t < 1 / 6) return p + (q - p) * 6 * t;
      if (t < 1 / 2) return q;
      if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;
      return p;
    }
    if (s === 0) {
      r = g = b = l;
    } else {
      var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
      var p = 2 * l - q;
      r = hue2rgb(p, q, h + 1 / 3);
      g = hue2rgb(p, q, h);
      b = hue2rgb(p, q, h - 1 / 3);
    }
    return {
      r: r * 255,
      g: g * 255,
      b: b * 255
    };
  }
  function rgbToHsv(r, g, b) {
    r = bound01(r, 255);
    g = bound01(g, 255);
    b = bound01(b, 255);
    var max = mathMax(r, g, b), min = mathMin(r, g, b);
    var h, s, v = max;
    var d = max - min;
    s = max === 0 ? 0 : d / max;
    if (max == min) {
      h = 0;
    } else {
      switch (max) {
        case r:
          h = (g - b) / d + (g < b ? 6 : 0);
          break;
        case g:
          h = (b - r) / d + 2;
          break;
        case b:
          h = (r - g) / d + 4;
          break;
      }
      h /= 6;
    }
    return {
      h: h,
      s: s,
      v: v
    };
  }
  function hsvToRgb(h, s, v) {
    h = bound01(h, 360) * 6;
    s = bound01(s, 100);
    v = bound01(v, 100);
    var i = Math.floor(h), f = h - i, p = v * (1 - s), q = v * (1 - f * s), t = v * (1 - (1 - f) * s), mod = i % 6, r = [v, q, p, p, t, v][mod], g = [t, v, v, q, p, p][mod], b = [p, p, t, v, v, q][mod];
    return {
      r: r * 255,
      g: g * 255,
      b: b * 255
    };
  }
  function rgbToHex(r, g, b, allow3Char) {
    var hex = [pad2(mathRound(r).toString(16)), pad2(mathRound(g).toString(16)), pad2(mathRound(b).toString(16))];
    if (allow3Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1)) {
      return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);
    }
    return hex.join("");
  }
  function rgbaToHex(r, g, b, a, allow4Char) {
    var hex = [pad2(mathRound(r).toString(16)), pad2(mathRound(g).toString(16)), pad2(mathRound(b).toString(16)), pad2(convertDecimalToHex(a))];
    if (allow4Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1) && hex[3].charAt(0) == hex[3].charAt(1)) {
      return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0) + hex[3].charAt(0);
    }
    return hex.join("");
  }
  function rgbaToArgbHex(r, g, b, a) {
    var hex = [pad2(convertDecimalToHex(a)), pad2(mathRound(r).toString(16)), pad2(mathRound(g).toString(16)), pad2(mathRound(b).toString(16))];
    return hex.join("");
  }
  tinycolor.equals = function (color1, color2) {
    if (!color1 || !color2) {
      return false;
    }
    return tinycolor(color1).toRgbString() == tinycolor(color2).toRgbString();
  };
  tinycolor.random = function () {
    return tinycolor.fromRatio({
      r: mathRandom(),
      g: mathRandom(),
      b: mathRandom()
    });
  };
  function desaturate(color, amount) {
    amount = amount === 0 ? 0 : amount || 10;
    var hsl = tinycolor(color).toHsl();
    hsl.s -= amount / 100;
    hsl.s = clamp01(hsl.s);
    return tinycolor(hsl);
  }
  function saturate(color, amount) {
    amount = amount === 0 ? 0 : amount || 10;
    var hsl = tinycolor(color).toHsl();
    hsl.s += amount / 100;
    hsl.s = clamp01(hsl.s);
    return tinycolor(hsl);
  }
  function greyscale(color) {
    return tinycolor(color).desaturate(100);
  }
  function lighten(color, amount) {
    amount = amount === 0 ? 0 : amount || 10;
    var hsl = tinycolor(color).toHsl();
    hsl.l += amount / 100;
    hsl.l = clamp01(hsl.l);
    return tinycolor(hsl);
  }
  function brighten(color, amount) {
    amount = amount === 0 ? 0 : amount || 10;
    var rgb = tinycolor(color).toRgb();
    rgb.r = mathMax(0, mathMin(255, rgb.r - mathRound(255 * -(amount / 100))));
    rgb.g = mathMax(0, mathMin(255, rgb.g - mathRound(255 * -(amount / 100))));
    rgb.b = mathMax(0, mathMin(255, rgb.b - mathRound(255 * -(amount / 100))));
    return tinycolor(rgb);
  }
  function darken(color, amount) {
    amount = amount === 0 ? 0 : amount || 10;
    var hsl = tinycolor(color).toHsl();
    hsl.l -= amount / 100;
    hsl.l = clamp01(hsl.l);
    return tinycolor(hsl);
  }
  function spin(color, amount) {
    var hsl = tinycolor(color).toHsl();
    var hue = (hsl.h + amount) % 360;
    hsl.h = hue < 0 ? 360 + hue : hue;
    return tinycolor(hsl);
  }
  function complement(color) {
    var hsl = tinycolor(color).toHsl();
    hsl.h = (hsl.h + 180) % 360;
    return tinycolor(hsl);
  }
  function triad(color) {
    var hsl = tinycolor(color).toHsl();
    var h = hsl.h;
    return [tinycolor(color), tinycolor({
      h: (h + 120) % 360,
      s: hsl.s,
      l: hsl.l
    }), tinycolor({
      h: (h + 240) % 360,
      s: hsl.s,
      l: hsl.l
    })];
  }
  function tetrad(color) {
    var hsl = tinycolor(color).toHsl();
    var h = hsl.h;
    return [tinycolor(color), tinycolor({
      h: (h + 90) % 360,
      s: hsl.s,
      l: hsl.l
    }), tinycolor({
      h: (h + 180) % 360,
      s: hsl.s,
      l: hsl.l
    }), tinycolor({
      h: (h + 270) % 360,
      s: hsl.s,
      l: hsl.l
    })];
  }
  function splitcomplement(color) {
    var hsl = tinycolor(color).toHsl();
    var h = hsl.h;
    return [tinycolor(color), tinycolor({
      h: (h + 72) % 360,
      s: hsl.s,
      l: hsl.l
    }), tinycolor({
      h: (h + 216) % 360,
      s: hsl.s,
      l: hsl.l
    })];
  }
  function analogous(color, results, slices) {
    results = results || 6;
    slices = slices || 30;
    var hsl = tinycolor(color).toHsl();
    var part = 360 / slices;
    var ret = [tinycolor(color)];
    for (hsl.h = (hsl.h - (part * results >> 1) + 720) % 360; --results; ) {
      hsl.h = (hsl.h + part) % 360;
      ret.push(tinycolor(hsl));
    }
    return ret;
  }
  function monochromatic(color, results) {
    results = results || 6;
    var hsv = tinycolor(color).toHsv();
    var h = hsv.h, s = hsv.s, v = hsv.v;
    var ret = [];
    var modification = 1 / results;
    while (results--) {
      ret.push(tinycolor({
        h: h,
        s: s,
        v: v
      }));
      v = (v + modification) % 1;
    }
    return ret;
  }
  tinycolor.mix = function (color1, color2, amount) {
    amount = amount === 0 ? 0 : amount || 50;
    var rgb1 = tinycolor(color1).toRgb();
    var rgb2 = tinycolor(color2).toRgb();
    var p = amount / 100;
    var rgba = {
      r: (rgb2.r - rgb1.r) * p + rgb1.r,
      g: (rgb2.g - rgb1.g) * p + rgb1.g,
      b: (rgb2.b - rgb1.b) * p + rgb1.b,
      a: (rgb2.a - rgb1.a) * p + rgb1.a
    };
    return tinycolor(rgba);
  };
  tinycolor.readability = function (color1, color2) {
    var c1 = tinycolor(color1);
    var c2 = tinycolor(color2);
    return (Math.max(c1.getLuminance(), c2.getLuminance()) + 0.05) / (Math.min(c1.getLuminance(), c2.getLuminance()) + 0.05);
  };
  tinycolor.isReadable = function (color1, color2, wcag2) {
    var readability = tinycolor.readability(color1, color2);
    var wcag2Parms, out;
    out = false;
    wcag2Parms = validateWCAG2Parms(wcag2);
    switch (wcag2Parms.level + wcag2Parms.size) {
      case "AAsmall":
      case "AAAlarge":
        out = readability >= 4.5;
        break;
      case "AAlarge":
        out = readability >= 3;
        break;
      case "AAAsmall":
        out = readability >= 7;
        break;
    }
    return out;
  };
  tinycolor.mostReadable = function (baseColor, colorList, args) {
    var bestColor = null;
    var bestScore = 0;
    var readability;
    var includeFallbackColors, level, size;
    args = args || ({});
    includeFallbackColors = args.includeFallbackColors;
    level = args.level;
    size = args.size;
    for (var i = 0; i < colorList.length; i++) {
      readability = tinycolor.readability(baseColor, colorList[i]);
      if (readability > bestScore) {
        bestScore = readability;
        bestColor = tinycolor(colorList[i]);
      }
    }
    if (tinycolor.isReadable(baseColor, bestColor, {
      "level": level,
      "size": size
    }) || !includeFallbackColors) {
      return bestColor;
    } else {
      args.includeFallbackColors = false;
      return tinycolor.mostReadable(baseColor, ["#fff", "#000"], args);
    }
  };
  var names = tinycolor.names = {
    aliceblue: "f0f8ff",
    antiquewhite: "faebd7",
    aqua: "0ff",
    aquamarine: "7fffd4",
    azure: "f0ffff",
    beige: "f5f5dc",
    bisque: "ffe4c4",
    black: "000",
    blanchedalmond: "ffebcd",
    blue: "00f",
    blueviolet: "8a2be2",
    brown: "a52a2a",
    burlywood: "deb887",
    burntsienna: "ea7e5d",
    cadetblue: "5f9ea0",
    chartreuse: "7fff00",
    chocolate: "d2691e",
    coral: "ff7f50",
    cornflowerblue: "6495ed",
    cornsilk: "fff8dc",
    crimson: "dc143c",
    cyan: "0ff",
    darkblue: "00008b",
    darkcyan: "008b8b",
    darkgoldenrod: "b8860b",
    darkgray: "a9a9a9",
    darkgreen: "006400",
    darkgrey: "a9a9a9",
    darkkhaki: "bdb76b",
    darkmagenta: "8b008b",
    darkolivegreen: "556b2f",
    darkorange: "ff8c00",
    darkorchid: "9932cc",
    darkred: "8b0000",
    darksalmon: "e9967a",
    darkseagreen: "8fbc8f",
    darkslateblue: "483d8b",
    darkslategray: "2f4f4f",
    darkslategrey: "2f4f4f",
    darkturquoise: "00ced1",
    darkviolet: "9400d3",
    deeppink: "ff1493",
    deepskyblue: "00bfff",
    dimgray: "696969",
    dimgrey: "696969",
    dodgerblue: "1e90ff",
    firebrick: "b22222",
    floralwhite: "fffaf0",
    forestgreen: "228b22",
    fuchsia: "f0f",
    gainsboro: "dcdcdc",
    ghostwhite: "f8f8ff",
    gold: "ffd700",
    goldenrod: "daa520",
    gray: "808080",
    green: "008000",
    greenyellow: "adff2f",
    grey: "808080",
    honeydew: "f0fff0",
    hotpink: "ff69b4",
    indianred: "cd5c5c",
    indigo: "4b0082",
    ivory: "fffff0",
    khaki: "f0e68c",
    lavender: "e6e6fa",
    lavenderblush: "fff0f5",
    lawngreen: "7cfc00",
    lemonchiffon: "fffacd",
    lightblue: "add8e6",
    lightcoral: "f08080",
    lightcyan: "e0ffff",
    lightgoldenrodyellow: "fafad2",
    lightgray: "d3d3d3",
    lightgreen: "90ee90",
    lightgrey: "d3d3d3",
    lightpink: "ffb6c1",
    lightsalmon: "ffa07a",
    lightseagreen: "20b2aa",
    lightskyblue: "87cefa",
    lightslategray: "789",
    lightslategrey: "789",
    lightsteelblue: "b0c4de",
    lightyellow: "ffffe0",
    lime: "0f0",
    limegreen: "32cd32",
    linen: "faf0e6",
    magenta: "f0f",
    maroon: "800000",
    mediumaquamarine: "66cdaa",
    mediumblue: "0000cd",
    mediumorchid: "ba55d3",
    mediumpurple: "9370db",
    mediumseagreen: "3cb371",
    mediumslateblue: "7b68ee",
    mediumspringgreen: "00fa9a",
    mediumturquoise: "48d1cc",
    mediumvioletred: "c71585",
    midnightblue: "191970",
    mintcream: "f5fffa",
    mistyrose: "ffe4e1",
    moccasin: "ffe4b5",
    navajowhite: "ffdead",
    navy: "000080",
    oldlace: "fdf5e6",
    olive: "808000",
    olivedrab: "6b8e23",
    orange: "ffa500",
    orangered: "ff4500",
    orchid: "da70d6",
    palegoldenrod: "eee8aa",
    palegreen: "98fb98",
    paleturquoise: "afeeee",
    palevioletred: "db7093",
    papayawhip: "ffefd5",
    peachpuff: "ffdab9",
    peru: "cd853f",
    pink: "ffc0cb",
    plum: "dda0dd",
    powderblue: "b0e0e6",
    purple: "800080",
    rebeccapurple: "663399",
    red: "f00",
    rosybrown: "bc8f8f",
    royalblue: "4169e1",
    saddlebrown: "8b4513",
    salmon: "fa8072",
    sandybrown: "f4a460",
    seagreen: "2e8b57",
    seashell: "fff5ee",
    sienna: "a0522d",
    silver: "c0c0c0",
    skyblue: "87ceeb",
    slateblue: "6a5acd",
    slategray: "708090",
    slategrey: "708090",
    snow: "fffafa",
    springgreen: "00ff7f",
    steelblue: "4682b4",
    tan: "d2b48c",
    teal: "008080",
    thistle: "d8bfd8",
    tomato: "ff6347",
    turquoise: "40e0d0",
    violet: "ee82ee",
    wheat: "f5deb3",
    white: "fff",
    whitesmoke: "f5f5f5",
    yellow: "ff0",
    yellowgreen: "9acd32"
  };
  var hexNames = tinycolor.hexNames = flip(names);
  function flip(o) {
    var flipped = {};
    for (var i in o) {
      if (o.hasOwnProperty(i)) {
        flipped[o[i]] = i;
      }
    }
    return flipped;
  }
  function boundAlpha(a) {
    a = parseFloat(a);
    if (isNaN(a) || a < 0 || a > 1) {
      a = 1;
    }
    return a;
  }
  function bound01(n, max) {
    if (isOnePointZero(n)) {
      n = "100%";
    }
    var processPercent = isPercentage(n);
    n = mathMin(max, mathMax(0, parseFloat(n)));
    if (processPercent) {
      n = parseInt(n * max, 10) / 100;
    }
    if (Math.abs(n - max) < 0.000001) {
      return 1;
    }
    return n % max / parseFloat(max);
  }
  function clamp01(val) {
    return mathMin(1, mathMax(0, val));
  }
  function parseIntFromHex(val) {
    return parseInt(val, 16);
  }
  function isOnePointZero(n) {
    return typeof n == "string" && n.indexOf('.') != -1 && parseFloat(n) === 1;
  }
  function isPercentage(n) {
    return typeof n === "string" && n.indexOf('%') != -1;
  }
  function pad2(c) {
    return c.length == 1 ? '0' + c : '' + c;
  }
  function convertToPercentage(n) {
    if (n <= 1) {
      n = n * 100 + "%";
    }
    return n;
  }
  function convertDecimalToHex(d) {
    return Math.round(parseFloat(d) * 255).toString(16);
  }
  function convertHexToDecimal(h) {
    return parseIntFromHex(h) / 255;
  }
  var matchers = (function () {
    var CSS_INTEGER = "[-\\+]?\\d+%?";
    var CSS_NUMBER = "[-\\+]?\\d*\\.\\d+%?";
    var CSS_UNIT = "(?:" + CSS_NUMBER + ")|(?:" + CSS_INTEGER + ")";
    var PERMISSIVE_MATCH3 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";
    var PERMISSIVE_MATCH4 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";
    return {
      CSS_UNIT: new RegExp(CSS_UNIT),
      rgb: new RegExp("rgb" + PERMISSIVE_MATCH3),
      rgba: new RegExp("rgba" + PERMISSIVE_MATCH4),
      hsl: new RegExp("hsl" + PERMISSIVE_MATCH3),
      hsla: new RegExp("hsla" + PERMISSIVE_MATCH4),
      hsv: new RegExp("hsv" + PERMISSIVE_MATCH3),
      hsva: new RegExp("hsva" + PERMISSIVE_MATCH4),
      hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
      hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,
      hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
      hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/
    };
  })();
  function isValidCSSUnit(color) {
    return !!matchers.CSS_UNIT.exec(color);
  }
  function stringInputToObject(color) {
    color = color.replace(trimLeft, '').replace(trimRight, '').toLowerCase();
    var named = false;
    if (names[color]) {
      color = names[color];
      named = true;
    } else if (color == 'transparent') {
      return {
        r: 0,
        g: 0,
        b: 0,
        a: 0,
        format: "name"
      };
    }
    var match;
    if (match = matchers.rgb.exec(color)) {
      return {
        r: match[1],
        g: match[2],
        b: match[3]
      };
    }
    if (match = matchers.rgba.exec(color)) {
      return {
        r: match[1],
        g: match[2],
        b: match[3],
        a: match[4]
      };
    }
    if (match = matchers.hsl.exec(color)) {
      return {
        h: match[1],
        s: match[2],
        l: match[3]
      };
    }
    if (match = matchers.hsla.exec(color)) {
      return {
        h: match[1],
        s: match[2],
        l: match[3],
        a: match[4]
      };
    }
    if (match = matchers.hsv.exec(color)) {
      return {
        h: match[1],
        s: match[2],
        v: match[3]
      };
    }
    if (match = matchers.hsva.exec(color)) {
      return {
        h: match[1],
        s: match[2],
        v: match[3],
        a: match[4]
      };
    }
    if (match = matchers.hex8.exec(color)) {
      return {
        r: parseIntFromHex(match[1]),
        g: parseIntFromHex(match[2]),
        b: parseIntFromHex(match[3]),
        a: convertHexToDecimal(match[4]),
        format: named ? "name" : "hex8"
      };
    }
    if (match = matchers.hex6.exec(color)) {
      return {
        r: parseIntFromHex(match[1]),
        g: parseIntFromHex(match[2]),
        b: parseIntFromHex(match[3]),
        format: named ? "name" : "hex"
      };
    }
    if (match = matchers.hex4.exec(color)) {
      return {
        r: parseIntFromHex(match[1] + '' + match[1]),
        g: parseIntFromHex(match[2] + '' + match[2]),
        b: parseIntFromHex(match[3] + '' + match[3]),
        a: convertHexToDecimal(match[4] + '' + match[4]),
        format: named ? "name" : "hex8"
      };
    }
    if (match = matchers.hex3.exec(color)) {
      return {
        r: parseIntFromHex(match[1] + '' + match[1]),
        g: parseIntFromHex(match[2] + '' + match[2]),
        b: parseIntFromHex(match[3] + '' + match[3]),
        format: named ? "name" : "hex"
      };
    }
    return false;
  }
  function validateWCAG2Parms(parms) {
    var level, size;
    parms = parms || ({
      "level": "AA",
      "size": "small"
    });
    level = (parms.level || "AA").toUpperCase();
    size = (parms.size || "small").toLowerCase();
    if (level !== "AA" && level !== "AAA") {
      level = "AA";
    }
    if (size !== "small" && size !== "large") {
      size = "small";
    }
    return {
      "level": level,
      "size": size
    };
  }
  if (typeof module !== "undefined" && module.exports) {
    module.exports = tinycolor;
  } else if (typeof define === 'function' && define.amd) {
    define(function () {
      return tinycolor;
    });
  } else {
    window.tinycolor = tinycolor;
  }
})(Math);

},

// node_modules/lodash.uniqueid/index.js @132
132: function(__fusereq, exports, module){
var INFINITY = 1 / 0;
var symbolTag = '[object Symbol]';
var freeGlobal = typeof window == 'object' && window && window.Object === Object && window;
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;
var root = freeGlobal || freeSelf || Function('return this')();
var objectProto = Object.prototype;
var idCounter = 0;
var objectToString = objectProto.toString;
var Symbol = root.Symbol;
var symbolProto = Symbol ? Symbol.prototype : undefined, symbolToString = symbolProto ? symbolProto.toString : undefined;
function baseToString(value) {
  if (typeof value == 'string') {
    return value;
  }
  if (isSymbol(value)) {
    return symbolToString ? symbolToString.call(value) : '';
  }
  var result = value + '';
  return result == '0' && 1 / value == -INFINITY ? '-0' : result;
}
function isObjectLike(value) {
  return !!value && typeof value == 'object';
}
function isSymbol(value) {
  return typeof value == 'symbol' || isObjectLike(value) && objectToString.call(value) == symbolTag;
}
function toString(value) {
  return value == null ? '' : baseToString(value);
}
function uniqueId(prefix) {
  var id = ++idCounter;
  return toString(prefix) + id;
}
module.exports = uniqueId;

},

// node_modules/react-file-icon/dist/react-file-icon.esm.js @24
24: function(__fusereq, exports, module){
exports.__esModule = true;
var react_1 = __fusereq(3);
var react_1d = __fuse.dt(react_1);
var prop_types_1 = __fusereq(112);
var prop_types_1d = __fuse.dt(prop_types_1);
var tinycolor2_1 = __fusereq(131);
var tinycolor2_1d = __fuse.dt(tinycolor2_1);
var lodash_uniqueid_1 = __fusereq(132);
var lodash_uniqueid_1d = __fuse.dt(lodash_uniqueid_1);
var glyphs = {
  '3d': react_1d.default.createElement("path", {
    d: "M18 14.625V3.375L9 0 0 3.375v11.25L9 18l9-3.375zM9 2.136l5.918 2.22-5.98 2.242-5.919-2.22L9 2.137zM2 13.239V5.065l6.438 2.414v8.174L2 13.24zM9.438 15.7L16 13.239V5.018l-6.563 2.46V15.7z",
    transform: "translate(15 10)",
    fillRule: "evenodd"
  }),
  acrobat: react_1d.default.createElement("path", {
    d: "M10.15 1.095C9.938.33 9.42-.051 8.984.005c-.528.068-1.09.382-1.314.876-.63 1.416.685 5.582.887 6.279-1.28 3.863-5.66 11.5-7.806 12.017-.045-.505.225-1.965 3.055-3.785.146-.157.315-.348.393-.472-2.392 1.168-5.492 3.044-3.628 4.448.102.079.259.146.439.213 1.426.528 3.425-1.201 5.435-5.121 2.213-.73 3.999-1.28 6.526-1.662 2.762 1.875 4.616 2.257 5.874 1.774.348-.135.898-.573 1.055-1.145-1.022 1.258-3.414.382-5.323-.82 1.763-.191 3.582-.303 4.369-.056 1 .314.965.808.954.876.079-.27.191-.708-.022-1.056-.842-1.37-4.706-.573-6.11-.427-2.212-1.336-3.74-3.717-4.358-5.436.573-2.212 1.19-3.818.742-5.413zm-.954 4.638C8.826 4.42 8.309 1.5 9.14.556c1.628.932.618 3.144.056 5.177zm3.044 6.514c-2.134.393-3.583.944-5.66 1.764.617-1.202 1.785-4.268 2.346-6.29.787 1.573 1.741 3.111 3.314 4.526z",
    transform: "translate(14 9)",
    fillRule: "evenodd"
  }),
  audio: react_1d.default.createElement("path", {
    d: "M.25 4.75v4.5h3L7 13V1L3.25 4.75h-3zM10.375 7A3.375 3.375 0 0 0 8.5 3.977v6.037A3.355 3.355 0 0 0 10.375 7zM8.5.421v1.545A5.254 5.254 0 0 1 12.25 7a5.254 5.254 0 0 1-3.75 5.032v1.545A6.747 6.747 0 0 0 13.75 7 6.747 6.747 0 0 0 8.5.421z",
    transform: "translate(17 12)",
    fillRule: "evenodd"
  }),
  binary: react_1d.default.createElement("path", {
    d: "M2.338 6.112c1.192 0 1.928-1.072 1.928-2.68 0-1.56-.576-2.504-1.8-2.504C1.274.928.538 2 .538 3.608c0 1.56.576 2.504 1.8 2.504zM1.61 3.408c0-1.008.24-1.568.776-1.568.376 0 .616.336.728.888l-1.504.776v-.096zM2.418 5.2c-.368 0-.608-.32-.72-.856l1.496-.768v.056c0 1.008-.24 1.568-.776 1.568zm7.03.8l.088-.944H8.36V.896L7.272.984v.592l-1.184.112.024.824h1.16v2.544h-1.32V6zm5.199 0l.088-.944h-1.176V.896L12.47.984v.592l-1.184.112.024.824h1.16v2.544h-1.32V6zM4.25 14l.088-.944H3.162v-4.16l-1.088.088v.592L.89 9.688l.024.824h1.16v2.544H.754V14zm5.198 0l.088-.944H8.36v-4.16l-1.088.088v.592l-1.184.112.024.824h1.16v2.544h-1.32V14zm3.287.112c1.192 0 1.928-1.072 1.928-2.68 0-1.56-.576-2.504-1.8-2.504-1.192 0-1.928 1.072-1.928 2.68 0 1.56.576 2.504 1.8 2.504zm-.728-2.704c0-1.008.24-1.568.776-1.568.376 0 .616.336.728.888l-1.504.776v-.096zm.808 1.792c-.368 0-.608-.32-.72-.856l1.496-.768v.056c0 1.008-.24 1.568-.776 1.568z",
    transform: "translate(16 11)",
    fillRule: "evenodd"
  }),
  code: react_1d.default.createElement("path", {
    d: "M4.078 13.67c-1.875-.527-2.812-1.738-2.812-3.634V9.49C1.266 8.437.844 7.911 0 7.911V6.138c.844 0 1.266-.529 1.266-1.586v-.64c.015-.938.257-1.696.726-2.274C2.466 1.06 3.162.64 4.078.38l.492 1.375c-.656.25-.997.95-1.023 2.102v.695c0 1.167-.482 1.99-1.445 2.469.963.479 1.445 1.304 1.445 2.476v.688c.026 1.15.367 1.851 1.023 2.101l-.492 1.383zm7.844 0c1.875-.527 2.812-1.738 2.812-3.634V9.49c0-1.052.422-1.578 1.266-1.578V6.138c-.844 0-1.266-.529-1.266-1.586v-.64c-.015-.938-.257-1.696-.726-2.274-.474-.578-1.17-.998-2.086-1.258l-.492 1.375c.656.25.997.95 1.023 2.102v.695c0 1.167.482 1.99 1.445 2.469-.963.479-1.445 1.304-1.445 2.476v.688c-.026 1.15-.367 1.851-1.023 2.101l.492 1.383z",
    transform: "translate(16 13)",
    fillRule: "evenodd"
  }),
  code2: react_1d.default.createElement("path", {
    d: "M7.4 10.6L2.8 6l4.6-4.6L6 0 0 6l6 6 1.4-1.4zm5.2 0L17.2 6l-4.6-4.6L14 0l6 6-6 6-1.4-1.4z",
    transform: "translate(14 14)",
    fillRule: "evenodd"
  }),
  compressed: react_1d.default.createElement("path", {
    d: "M.25 0A.25.25 0 0 0 0 .25v1.5c0 .138.112.25.25.25h1.5A.25.25 0 0 0 2 1.75V.25A.25.25 0 0 0 1.75 0H.25zM1 17a1 1 0 0 0-1 1v6a1 1 0 0 0 1 1h2a1 1 0 0 0 1-1v-6a1 1 0 0 0-1-1H1zm0 4v3h2v-3H1zM2 2.25A.25.25 0 0 1 2.25 2h1.5a.25.25 0 0 1 .25.25v1.5a.25.25 0 0 1-.25.25h-1.5A.25.25 0 0 1 2 3.75v-1.5zM.25 4a.25.25 0 0 0-.25.25v1.5c0 .138.112.25.25.25h1.5A.25.25 0 0 0 2 5.75v-1.5A.25.25 0 0 0 1.75 4H.25zM2 6.25A.25.25 0 0 1 2.25 6h1.5a.25.25 0 0 1 .25.25v1.5a.25.25 0 0 1-.25.25h-1.5A.25.25 0 0 1 2 7.75v-1.5zM.25 8a.25.25 0 0 0-.25.25v1.5c0 .138.112.25.25.25h1.5A.25.25 0 0 0 2 9.75v-1.5A.25.25 0 0 0 1.75 8H.25zM2 10.25a.25.25 0 0 1 .25-.25h1.5a.25.25 0 0 1 .25.25v1.5a.25.25 0 0 1-.25.25h-1.5a.25.25 0 0 1-.25-.25v-1.5zM.25 12a.25.25 0 0 0-.25.25v1.5c0 .138.112.25.25.25h1.5a.25.25 0 0 0 .25-.25v-1.5a.25.25 0 0 0-.25-.25H.25zM2 14.25a.25.25 0 0 1 .25-.25h1.5a.25.25 0 0 1 .25.25v1.5a.25.25 0 0 1-.25.25h-1.5a.25.25 0 0 1-.25-.25v-1.5z",
    transform: "translate(15 1)",
    fillRule: "evenodd"
  }),
  document: react_1d.default.createElement("path", {
    d: "M12 4H0v2h12V4zM0 10h18V8H0v2zM0 0v2h18V0H0z",
    transform: "translate(15 15)",
    fillRule: "evenodd"
  }),
  drive: react_1d.default.createElement("path", {
    d: "M2.199.289A.5.5 0 0 1 2.652 0h8.696a.5.5 0 0 1 .453.289l1.867 4a.5.5 0 0 1-.453.711H.785a.5.5 0 0 1-.453-.711l1.867-4zM13 6H1a.752.752 0 0 0-.75.75v4.5c0 .412.338.75.75.75h12c.412 0 .75-.338.75-.75v-4.5A.752.752 0 0 0 13 6zm-9.75 4.5c-.825 0-1.5-.675-1.5-1.5s.675-1.5 1.5-1.5 1.5.675 1.5 1.5-.675 1.5-1.5 1.5z",
    transform: "translate(17 13)",
    fillRule: "evenodd"
  }),
  font: react_1d.default.createElement("path", {
    d: "M3.722 8.702l-.686 1.89c-.053.14-.094.28-.123.421-.03.135-.044.252-.044.352 0 .304.097.527.29.668.2.14.501.21.905.21h.414V13H.083v-.756h.343c.176 0 .325-.018.448-.053a.81.81 0 0 0 .334-.22c.1-.105.193-.249.281-.43.094-.182.197-.416.308-.704L5.787.15h1.406l4.07 11.136c.07.187.14.343.21.466.077.123.165.222.264.298.1.07.214.12.343.15.129.03.281.044.457.044h.237V13H7.826v-.756h.413c.72 0 1.081-.287 1.081-.862 0-.1-.014-.202-.044-.307a3.274 3.274 0 0 0-.105-.36l-.72-2.013H3.72zM7.009 4.65c-.188-.533-.36-1.031-.519-1.494a15.92 15.92 0 0 1-.378-1.354 7.12 7.12 0 0 1-.15.633 16.95 16.95 0 0 1-.395 1.283c-.082.229-.175.484-.28.765L4.063 7.796h4.061L7.009 4.65zm8.411 5.74c0 .562.117.984.351 1.265.24.275.61.413 1.108.413.363 0 .691-.059.984-.176.3-.117.551-.284.756-.5.211-.218.372-.481.483-.792.112-.31.168-.656.168-1.037V8.104l-1.152.053c-.51.023-.937.088-1.283.193-.34.1-.615.243-.826.43a1.546 1.546 0 0 0-.457.678c-.088.27-.132.58-.132.931zm2.18-6.32c-.346 0-.627.05-.844.15a1.182 1.182 0 0 0-.501.404 1.594 1.594 0 0 0-.237.624c-.041.24-.062.5-.062.782-.498 0-.879-.085-1.143-.255-.257-.17-.386-.463-.386-.879 0-.31.085-.574.255-.79.17-.218.401-.393.694-.528.299-.14.644-.243 1.037-.308a7.76 7.76 0 0 1 1.257-.097c.55 0 1.031.056 1.441.167.41.106.753.282 1.029.528.275.246.48.568.615.967.14.392.21.876.21 1.45v4.667c0 .252.021.46.062.624a.928.928 0 0 0 .194.395c.088.1.202.17.343.211.146.041.319.062.518.062h.053V13H19.7l-.281-1.547h-.15c-.187.252-.369.483-.544.694-.176.211-.37.393-.58.545-.211.152-.452.27-.721.352a3.053 3.053 0 0 1-.958.131c-.399 0-.77-.058-1.116-.175a2.369 2.369 0 0 1-.888-.519 2.516 2.516 0 0 1-.58-.896c-.14-.364-.211-.791-.211-1.284 0-.955.34-1.664 1.02-2.127.68-.462 1.707-.714 3.084-.755l1.495-.053V6.285a6.93 6.93 0 0 0-.053-.888 1.778 1.778 0 0 0-.229-.703 1.14 1.14 0 0 0-.51-.457c-.216-.111-.51-.167-.878-.167z",
    transform: "translate(13 12)",
    fillRule: "evenodd"
  }),
  image: react_1d.default.createElement("path", {
    d: "M13 0L9.25 5l2.85 3.8-1.6 1.2C8.81 7.75 6 4 6 4l-6 8h22L13 0z",
    transform: "translate(13 14)",
    fillRule: "evenodd"
  }),
  presentation: react_1d.default.createElement("path", {
    d: "M2 4H0v10c0 1.1.9 2 2 2h14v-2H2V4zm16-4H6C4.9 0 4 .9 4 2v8c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V2c0-1.1-.9-2-2-2zm0 10H6V2h12v8z",
    transform: "matrix(-1 0 0 1 34 12)",
    fillRule: "evenodd"
  }),
  settings: react_1d.default.createElement("path", {
    d: "M13.572 8.735c.03-.24.053-.48.053-.735s-.023-.495-.053-.735l1.583-1.237a.378.378 0 0 0 .09-.48l-1.5-2.595a.377.377 0 0 0-.457-.165l-1.868.75a5.48 5.48 0 0 0-1.268-.735L9.868.815A.366.366 0 0 0 9.5.5h-3a.366.366 0 0 0-.367.315l-.285 1.988a5.762 5.762 0 0 0-1.268.735l-1.868-.75a.366.366 0 0 0-.457.165l-1.5 2.595a.37.37 0 0 0 .09.48l1.583 1.237c-.03.24-.053.488-.053.735 0 .248.022.495.053.735L.845 9.973a.378.378 0 0 0-.09.48l1.5 2.595c.09.165.292.225.458.165l1.867-.75c.39.3.81.547 1.268.735l.285 1.987c.022.18.18.315.367.315h3a.366.366 0 0 0 .367-.315l.285-1.988a5.762 5.762 0 0 0 1.268-.734l1.867.75c.173.067.368 0 .458-.165l1.5-2.595a.378.378 0 0 0-.09-.48l-1.582-1.238zM8 10.625A2.628 2.628 0 0 1 5.375 8 2.628 2.628 0 0 1 8 5.375 2.628 2.628 0 0 1 10.625 8 2.628 2.628 0 0 1 8 10.625z",
    transform: "translate(16 11)",
    fillRule: "evenodd"
  }),
  spreadsheet: react_1d.default.createElement("path", {
    d: "M0 8h6V5H0v3zm0 5h6v-3H0v3zM0 3h6V0H0v3zm8 5h12V5H8v3zm0 5h12v-3H8v3zM8 0v3h12V0H8z",
    transform: "translate(14 14)",
    fillRule: "evenodd"
  }),
  vector: react_1d.default.createElement("path", {
    d: "M14.5 2V1a1 1 0 0 0-1-1h-3a1 1 0 0 0-1 1v1H3.937a2 2 0 1 0 0 1h3.936A9 9 0 0 0 3 11v1h2v-1a7.003 7.003 0 0 1 4.594-6.576A1 1 0 0 0 10.5 5h3a1 1 0 0 0 .906-.576A7.003 7.003 0 0 1 19 11v1h2v-1a9 9 0 0 0-4.873-8h3.936a2 2 0 1 0 0-1H14.5zm-1-1h-3v3h3V1zM2 1.5a1 1 0 1 0 0 2 1 1 0 0 0 0-2zm19 1a1 1 0 1 0 2 0 1 1 0 0 0-2 0z",
    transform: "translate(12 14)",
    fillRule: "evenodd"
  }),
  video: react_1d.default.createElement("path", {
    d: "M10.75 3.875V1.25A.752.752 0 0 0 10 .5H1a.752.752 0 0 0-.75.75v7.5c0 .412.338.75.75.75h9c.412 0 .75-.338.75-.75V6.125l3 3V.875l-3 3z",
    transform: "translate(17 14)"
  })
};
var propTypes = {
  color: prop_types_1d.default.string,
  extension: prop_types_1d.default.string,
  fold: prop_types_1d.default.bool,
  foldColor: prop_types_1d.default.string,
  glyphColor: prop_types_1d.default.string,
  gradientColor: prop_types_1d.default.string,
  gradientOpacity: prop_types_1d.default.number,
  labelColor: prop_types_1d.default.string,
  labelTextColor: prop_types_1d.default.string,
  labelUppercase: prop_types_1d.default.bool,
  radius: prop_types_1d.default.number,
  type: prop_types_1d.default.oneOf(['3d', 'acrobat', 'audio', 'binary', 'code', 'code2', 'compressed', 'document', 'drive', 'font', 'image', 'presentation', 'settings', 'spreadsheet', 'vector', 'video'])
};
var VIEWBOX = {
  WIDTH: 40,
  HEIGHT: 48
};
var ICON = {
  WIDTH: VIEWBOX.WIDTH,
  HEIGHT: VIEWBOX.HEIGHT,
  X_OFFSET: 0
};
var FOLD = {
  HEIGHT: 12
};
var LABEL_HEIGHT = 14;
var FileIcon = function FileIcon(_ref) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? 'whitesmoke' : _ref$color, extension = _ref.extension, _ref$fold = _ref.fold, fold = _ref$fold === void 0 ? true : _ref$fold, foldColor = _ref.foldColor, glyphColor = _ref.glyphColor, _ref$gradientColor = _ref.gradientColor, gradientColor = _ref$gradientColor === void 0 ? 'white' : _ref$gradientColor, _ref$gradientOpacity = _ref.gradientOpacity, gradientOpacity = _ref$gradientOpacity === void 0 ? 0.25 : _ref$gradientOpacity, labelColor = _ref.labelColor, _ref$labelTextColor = _ref.labelTextColor, labelTextColor = _ref$labelTextColor === void 0 ? 'white' : _ref$labelTextColor, _ref$labelUppercase = _ref.labelUppercase, labelUppercase = _ref$labelUppercase === void 0 ? false : _ref$labelUppercase, _ref$radius = _ref.radius, radius = _ref$radius === void 0 ? 4 : _ref$radius, type = _ref.type;
  var UNIQUE_ID = lodash_uniqueid_1d.default();
  return react_1d.default.createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 " + VIEWBOX.WIDTH + " " + VIEWBOX.HEIGHT,
    width: "100%",
    style: {
      maxWidth: '100%'
    }
  }, react_1d.default.createElement("defs", null, react_1d.default.createElement("clipPath", {
    id: "pageRadius" + UNIQUE_ID
  }, react_1d.default.createElement("rect", {
    x: ICON.X_OFFSET,
    y: "0",
    rx: radius,
    ry: radius,
    width: ICON.WIDTH,
    height: ICON.HEIGHT
  })), react_1d.default.createElement("clipPath", {
    id: "foldCrop"
  }, react_1d.default.createElement("rect", {
    width: ICON.WIDTH,
    height: FOLD.HEIGHT,
    transform: "rotate(-45 0 " + FOLD.HEIGHT + ")"
  })), react_1d.default.createElement("linearGradient", {
    x1: "100%",
    y1: "0%",
    y2: "100%",
    id: "pageGradient" + UNIQUE_ID
  }, react_1d.default.createElement("stop", {
    stopColor: gradientColor,
    stopOpacity: gradientOpacity,
    offset: "0%"
  }), react_1d.default.createElement("stop", {
    stopColor: gradientColor,
    stopOpacity: "0",
    offset: "66.67%"
  }))), react_1d.default.createElement("g", {
    id: "file",
    clipPath: "url(#pageRadius" + UNIQUE_ID + ")"
  }, fold ? react_1d.default.createElement(react_1d.default.Fragment, null, react_1d.default.createElement("path", {
    d: "M" + ICON.X_OFFSET + " 0 h " + (ICON.WIDTH - FOLD.HEIGHT) + " L " + (ICON.WIDTH + ICON.X_OFFSET) + " " + FOLD.HEIGHT + " v " + (ICON.HEIGHT - FOLD.HEIGHT) + " H " + ICON.X_OFFSET + " Z",
    fill: color
  }), react_1d.default.createElement("path", {
    d: "M" + ICON.X_OFFSET + " 0 h " + (ICON.WIDTH - FOLD.HEIGHT) + " L " + (ICON.WIDTH + ICON.X_OFFSET) + " " + FOLD.HEIGHT + " v " + (ICON.HEIGHT - FOLD.HEIGHT) + " H " + ICON.X_OFFSET + " Z",
    fill: "url(#pageGradient" + UNIQUE_ID + ")"
  })) : react_1d.default.createElement(react_1d.default.Fragment, null, react_1d.default.createElement("rect", {
    x: ICON.X_OFFSET,
    y: "0",
    width: ICON.WIDTH,
    height: ICON.HEIGHT,
    fill: color
  }), react_1d.default.createElement("rect", {
    x: ICON.X_OFFSET,
    y: "0",
    width: ICON.WIDTH,
    height: ICON.HEIGHT,
    fill: "url(#pageGradient" + UNIQUE_ID + ")"
  }))), fold && react_1d.default.createElement("g", {
    transform: "translate(28 " + FOLD.HEIGHT + ") rotate(-90)"
  }, react_1d.default.createElement("rect", {
    width: ICON.WIDTH,
    height: ICON.HEIGHT,
    fill: foldColor || tinycolor2_1d.default(color).darken(10).toString(),
    rx: radius,
    ry: radius,
    clipPath: "url(#foldCrop)"
  })), extension && react_1d.default.createElement(react_1d.default.Fragment, null, react_1d.default.createElement("g", {
    id: "label"
  }, react_1d.default.createElement("rect", {
    fill: labelColor || tinycolor2_1d.default(color).darken(30).toString(),
    x: ICON.X_OFFSET,
    y: ICON.HEIGHT - LABEL_HEIGHT,
    width: ICON.WIDTH,
    height: LABEL_HEIGHT,
    clipPath: "url(#pageRadius" + UNIQUE_ID + ")"
  })), react_1d.default.createElement("g", {
    id: "labelText",
    transform: "translate(" + ICON.X_OFFSET + " 34)"
  }, react_1d.default.createElement("text", {
    x: ICON.WIDTH / 2,
    y: "10",
    fontFamily: "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif",
    fontSize: "9",
    fill: labelTextColor,
    textAnchor: "middle",
    style: {
      fontWeight: 'bold',
      textAlign: 'center',
      pointerEvents: 'none',
      textTransform: labelUppercase ? 'uppercase' : 'none',
      userSelect: 'none'
    }
  }, extension))), type && react_1d.default.createElement("g", {
    transform: "translate(-4 " + (!extension ? 6 : 0) + ")",
    fill: glyphColor || tinycolor2_1d.default(color).darken(15).toString()
  }, glyphs[type]));
};
FileIcon.propTypes = propTypes;
var defaultStyles = {
  '3dm': {
    labelColor: '#8D1A11',
    type: '3d'
  },
  '3ds': {
    labelColor: '#5FB9AD',
    type: '3d'
  },
  '3g2': {
    type: 'video'
  },
  '3gp': {
    type: 'video'
  },
  '7zip': {
    type: 'compressed'
  },
  aac: {
    type: 'audio'
  },
  aep: {
    type: 'video'
  },
  ai: {
    color: '#423325',
    gradientOpacity: 0,
    labelColor: '#423325',
    labelTextColor: '#FF7F18',
    labelUppercase: true,
    foldColor: '#FF7F18',
    radius: 2
  },
  aif: {
    type: 'audio'
  },
  aiff: {
    type: 'audio'
  },
  asf: {
    type: 'video'
  },
  asp: {
    type: 'code'
  },
  aspx: {
    type: 'code'
  },
  avi: {
    type: 'video'
  },
  bin: {
    type: 'binary'
  },
  bmp: {
    type: 'image'
  },
  c: {
    type: 'code'
  },
  cpp: {
    type: 'code'
  },
  cs: {
    type: 'code'
  },
  css: {
    type: 'code'
  },
  csv: {
    type: 'spreadsheet'
  },
  cue: {
    type: 'document'
  },
  dll: {
    type: 'settings'
  },
  dmg: {
    type: 'drive'
  },
  doc: {
    color: '#2C5898',
    foldColor: '#254A80',
    glyphColor: 'rgba(255,255,255,0.4)',
    labelColor: '#2C5898',
    labelUppercase: true,
    type: 'document'
  },
  docx: {
    color: '#2C5898',
    foldColor: '#254A80',
    glyphColor: 'rgba(255,255,255,0.4)',
    labelColor: '#2C5898',
    labelUppercase: true,
    type: 'document'
  },
  dwg: {
    type: 'vector'
  },
  dxf: {
    type: 'vector'
  },
  eot: {
    type: 'font'
  },
  eps: {
    type: 'vector'
  },
  exe: {
    type: 'settings'
  },
  flac: {
    type: 'audio'
  },
  flv: {
    type: 'video'
  },
  fnt: {
    type: 'font'
  },
  fodp: {
    type: 'presentation'
  },
  fods: {
    type: 'spreadsheet'
  },
  fodt: {
    type: 'document'
  },
  fon: {
    type: 'font'
  },
  gif: {
    type: 'image'
  },
  gz: {
    type: 'compressed'
  },
  htm: {
    type: 'code'
  },
  html: {
    type: 'code'
  },
  indd: {
    color: '#4B2B36',
    gradientOpacity: 0,
    labelColor: '#4B2B36',
    labelTextColor: '#FF408C',
    labelUppercase: true,
    foldColor: '#FF408C',
    radius: 2
  },
  ini: {
    type: 'settings'
  },
  java: {
    type: 'code'
  },
  jpeg: {
    type: 'image'
  },
  jpg: {
    type: 'image'
  },
  js: {
    labelColor: '#F7DF1E',
    type: 'code'
  },
  json: {
    type: 'code'
  },
  jsx: {
    labelColor: '#00D8FF',
    type: 'code'
  },
  m4a: {
    type: 'audio'
  },
  m4v: {
    type: 'video'
  },
  max: {
    labelColor: '#5FB9AD',
    type: '3d'
  },
  md: {
    type: 'document'
  },
  mid: {
    type: 'audio'
  },
  mkv: {
    type: 'video'
  },
  mov: {
    type: 'video'
  },
  mp3: {
    type: 'audio'
  },
  mp4: {
    type: 'video'
  },
  mpeg: {
    type: 'video'
  },
  mpg: {
    type: 'video'
  },
  obj: {
    type: '3d'
  },
  odp: {
    type: 'presentation'
  },
  ods: {
    type: 'spreadsheet'
  },
  odt: {
    type: 'document'
  },
  ogg: {
    type: 'audio'
  },
  ogv: {
    type: 'video'
  },
  otf: {
    type: 'font'
  },
  pdf: {
    labelColor: '#D93831',
    type: 'acrobat'
  },
  php: {
    labelColor: '#8892BE',
    type: 'code'
  },
  pkg: {
    type: '3d'
  },
  plist: {
    type: 'settings'
  },
  png: {
    type: 'image'
  },
  ppt: {
    color: '#D14423',
    foldColor: '#AB381D',
    glyphColor: 'rgba(255,255,255,0.4)',
    labelColor: '#D14423',
    labelUppercase: true,
    type: 'presentation'
  },
  pptx: {
    color: '#D14423',
    foldColor: '#AB381D',
    glyphColor: 'rgba(255,255,255,0.4)',
    labelColor: '#D14423',
    labelUppercase: true,
    type: 'presentation'
  },
  pr: {
    type: 'video'
  },
  ps: {
    type: 'vector'
  },
  psd: {
    color: '#34364E',
    gradientOpacity: 0,
    labelColor: '#34364E',
    labelTextColor: '#31C5F0',
    labelUppercase: true,
    foldColor: '#31C5F0',
    radius: 2
  },
  py: {
    labelColor: '#FFDE57',
    type: 'code'
  },
  rar: {
    type: 'compressed'
  },
  rb: {
    labelColor: '#BB271A',
    type: 'code'
  },
  rm: {
    type: 'video'
  },
  rtf: {
    type: 'document'
  },
  scss: {
    labelColor: '#C16A98',
    type: 'code'
  },
  sitx: {
    type: 'compressed'
  },
  svg: {
    type: 'vector'
  },
  swf: {
    type: 'video'
  },
  sys: {
    type: 'settings'
  },
  tar: {
    type: 'compressed'
  },
  tex: {
    type: 'document'
  },
  tif: {
    type: 'image'
  },
  tiff: {
    type: 'image'
  },
  ts: {
    labelColor: '#3478C7',
    type: 'code'
  },
  ttf: {
    type: 'font'
  },
  txt: {
    type: 'document'
  },
  wav: {
    type: 'audio'
  },
  webm: {
    type: 'video'
  },
  wmv: {
    type: 'video'
  },
  woff: {
    type: 'font'
  },
  wpd: {
    type: 'document'
  },
  wps: {
    type: 'document'
  },
  xlr: {
    type: 'spreadsheet'
  },
  xls: {
    color: '#1A754C',
    foldColor: '#16613F',
    glyphColor: 'rgba(255,255,255,0.4)',
    labelColor: '#1A754C',
    labelUppercase: true,
    type: 'spreadsheet'
  },
  xlsx: {
    color: '#1A754C',
    foldColor: '#16613F',
    glyphColor: 'rgba(255,255,255,0.4)',
    labelColor: '#1A754C',
    labelUppercase: true,
    type: 'spreadsheet'
  },
  yml: {
    type: 'code'
  },
  zip: {
    type: 'compressed'
  },
  zipx: {
    type: 'compressed'
  }
};
exports.FileIcon = FileIcon;
exports.defaultStyles = defaultStyles;

},

// node_modules/xtend/immutable.js @109
109: function(__fusereq, exports, module){
module.exports = extend;
var hasOwnProperty = Object.prototype.hasOwnProperty;
function extend() {
  var target = {};
  for (var i = 0; i < arguments.length; i++) {
    var source = arguments[i];
    for (var key in source) {
      if (hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }
  return target;
}

},

// node_modules/unist-util-visit/index.js @193
193: function(__fusereq, exports, module){
'use strict';
module.exports = visit;
var visitParents = __fusereq(237);
var CONTINUE = visitParents.CONTINUE;
var SKIP = visitParents.SKIP;
var EXIT = visitParents.EXIT;
visit.CONTINUE = CONTINUE;
visit.SKIP = SKIP;
visit.EXIT = EXIT;
function visit(tree, test, visitor, reverse) {
  if (typeof test === 'function' && typeof visitor !== 'function') {
    reverse = visitor;
    visitor = test;
    test = null;
  }
  visitParents(tree, test, overload, reverse);
  function overload(node, parents) {
    var parent = parents[parents.length - 1];
    var index = parent ? parent.children.indexOf(node) : null;
    return visitor(node, index, parent);
  }
}

},

// node_modules/unist-util-visit/node_modules/unist-util-visit-parents/index.js @237
237: function(__fusereq, exports, module){
'use strict';
module.exports = visitParents;
var convert = __fusereq(296);
var CONTINUE = true;
var SKIP = 'skip';
var EXIT = false;
visitParents.CONTINUE = CONTINUE;
visitParents.SKIP = SKIP;
visitParents.EXIT = EXIT;
function visitParents(tree, test, visitor, reverse) {
  var is;
  if (typeof test === 'function' && typeof visitor !== 'function') {
    reverse = visitor;
    visitor = test;
    test = null;
  }
  is = convert(test);
  one(tree, null, []);
  function one(node, index, parents) {
    var result = [];
    var subresult;
    if (!test || is(node, index, parents[parents.length - 1] || null)) {
      result = toResult(visitor(node, parents));
      if (result[0] === EXIT) {
        return result;
      }
    }
    if (node.children && result[0] !== SKIP) {
      subresult = toResult(all(node.children, parents.concat(node)));
      return subresult[0] === EXIT ? subresult : result;
    }
    return result;
  }
  function all(children, parents) {
    var min = -1;
    var step = reverse ? -1 : 1;
    var index = (reverse ? children.length : min) + step;
    var result;
    while (index > min && index < children.length) {
      result = one(children[index], index, parents);
      if (result[0] === EXIT) {
        return result;
      }
      index = typeof result[1] === 'number' ? result[1] : index + step;
    }
  }
}
function toResult(value) {
  if (value !== null && typeof value === 'object' && ('length' in value)) {
    return value;
  }
  if (typeof value === 'number') {
    return [CONTINUE, value];
  }
  return [value];
}

},

// node_modules/unist-util-is/convert.js @296
296: function(__fusereq, exports, module){
'use strict';
module.exports = convert;
function convert(test) {
  if (typeof test === 'string') {
    return typeFactory(test);
  }
  if (test === null || test === undefined) {
    return ok;
  }
  if (typeof test === 'object') {
    return (('length' in test) ? anyFactory : matchesFactory)(test);
  }
  if (typeof test === 'function') {
    return test;
  }
  throw new Error('Expected function, string, or object as test');
}
function convertAll(tests) {
  var results = [];
  var length = tests.length;
  var index = -1;
  while (++index < length) {
    results[index] = convert(tests[index]);
  }
  return results;
}
function matchesFactory(test) {
  return matches;
  function matches(node) {
    var key;
    for (key in test) {
      if (node[key] !== test[key]) {
        return false;
      }
    }
    return true;
  }
}
function anyFactory(tests) {
  var checks = convertAll(tests);
  var length = checks.length;
  return matches;
  function matches() {
    var index = -1;
    while (++index < length) {
      if (checks[index].apply(this, arguments)) {
        return true;
      }
    }
    return false;
  }
}
function typeFactory(test) {
  return type;
  function type(node) {
    return Boolean(node && node.type === test);
  }
}
function ok() {
  return true;
}

},

// node_modules/mdast-add-list-metadata/index.js @113
113: function(__fusereq, exports, module){
var visitWithParents = __fusereq(200);
function addListMetadata() {
  return function (ast) {
    visitWithParents(ast, 'list', function (listNode, parents) {
      var depth = 0, i, n;
      for ((i = 0, n = parents.length); i < n; i++) {
        if (parents[i].type === 'list') depth += 1;
      }
      for ((i = 0, n = listNode.children.length); i < n; i++) {
        var child = listNode.children[i];
        child.index = i;
        child.ordered = listNode.ordered;
      }
      listNode.depth = depth;
    });
    return ast;
  };
}
module.exports = addListMetadata;

},

// node_modules/unist-util-visit-parents/index.js @200
200: function(__fusereq, exports, module){
'use strict';
module.exports = visitParents;
function visitParents(tree, type, visitor) {
  var stack = [];
  if (typeof type === 'function') {
    visitor = type;
    type = null;
  }
  one(tree);
  function one(node) {
    var result;
    if (!type || node.type === type) {
      result = visitor(node, stack.concat());
    }
    if (node.children && result !== false) {
      return all(node.children, node);
    }
    return result;
  }
  function all(children, parent) {
    var length = children.length;
    var index = -1;
    var child;
    stack.push(parent);
    while (++index < length) {
      child = children[index];
      if (child && one(child) === false) {
        return false;
      }
    }
    stack.pop();
    return true;
  }
}

},

// node_modules/unified/index.js @110
110: function(__fusereq, exports, module){
'use strict';
var extend = __fusereq(194);
var bail = __fusereq(195);
var vfile = __fusereq(196);
var trough = __fusereq(197);
var string = __fusereq(198);
var plain = __fusereq(199);
module.exports = unified().freeze();
var slice = [].slice;
var own = ({}).hasOwnProperty;
var pipeline = trough().use(pipelineParse).use(pipelineRun).use(pipelineStringify);
function pipelineParse(p, ctx) {
  ctx.tree = p.parse(ctx.file);
}
function pipelineRun(p, ctx, next) {
  p.run(ctx.tree, ctx.file, done);
  function done(err, tree, file) {
    if (err) {
      next(err);
    } else {
      ctx.tree = tree;
      ctx.file = file;
      next();
    }
  }
}
function pipelineStringify(p, ctx) {
  ctx.file.contents = p.stringify(ctx.tree, ctx.file);
}
function unified() {
  var attachers = [];
  var transformers = trough();
  var namespace = {};
  var frozen = false;
  var freezeIndex = -1;
  processor.data = data;
  processor.freeze = freeze;
  processor.attachers = attachers;
  processor.use = use;
  processor.parse = parse;
  processor.stringify = stringify;
  processor.run = run;
  processor.runSync = runSync;
  processor.process = process;
  processor.processSync = processSync;
  return processor;
  function processor() {
    var destination = unified();
    var length = attachers.length;
    var index = -1;
    while (++index < length) {
      destination.use.apply(null, attachers[index]);
    }
    destination.data(extend(true, {}, namespace));
    return destination;
  }
  function freeze() {
    var values;
    var plugin;
    var options;
    var transformer;
    if (frozen) {
      return processor;
    }
    while (++freezeIndex < attachers.length) {
      values = attachers[freezeIndex];
      plugin = values[0];
      options = values[1];
      transformer = null;
      if (options === false) {
        continue;
      }
      if (options === true) {
        values[1] = undefined;
      }
      transformer = plugin.apply(processor, values.slice(1));
      if (typeof transformer === 'function') {
        transformers.use(transformer);
      }
    }
    frozen = true;
    freezeIndex = Infinity;
    return processor;
  }
  function data(key, value) {
    if (string(key)) {
      if (arguments.length === 2) {
        assertUnfrozen('data', frozen);
        namespace[key] = value;
        return processor;
      }
      return own.call(namespace, key) && namespace[key] || null;
    }
    if (key) {
      assertUnfrozen('data', frozen);
      namespace = key;
      return processor;
    }
    return namespace;
  }
  function use(value) {
    var settings;
    assertUnfrozen('use', frozen);
    if (value === null || value === undefined) {} else if (typeof value === 'function') {
      addPlugin.apply(null, arguments);
    } else if (typeof value === 'object') {
      if (('length' in value)) {
        addList(value);
      } else {
        addPreset(value);
      }
    } else {
      throw new Error('Expected usable value, not `' + value + '`');
    }
    if (settings) {
      namespace.settings = extend(namespace.settings || ({}), settings);
    }
    return processor;
    function addPreset(result) {
      addList(result.plugins);
      if (result.settings) {
        settings = extend(settings || ({}), result.settings);
      }
    }
    function add(value) {
      if (typeof value === 'function') {
        addPlugin(value);
      } else if (typeof value === 'object') {
        if (('length' in value)) {
          addPlugin.apply(null, value);
        } else {
          addPreset(value);
        }
      } else {
        throw new Error('Expected usable value, not `' + value + '`');
      }
    }
    function addList(plugins) {
      var length;
      var index;
      if (plugins === null || plugins === undefined) {} else if (typeof plugins === 'object' && ('length' in plugins)) {
        length = plugins.length;
        index = -1;
        while (++index < length) {
          add(plugins[index]);
        }
      } else {
        throw new Error('Expected a list of plugins, not `' + plugins + '`');
      }
    }
    function addPlugin(plugin, value) {
      var entry = find(plugin);
      if (entry) {
        if (plain(entry[1]) && plain(value)) {
          value = extend(entry[1], value);
        }
        entry[1] = value;
      } else {
        attachers.push(slice.call(arguments));
      }
    }
  }
  function find(plugin) {
    var length = attachers.length;
    var index = -1;
    var entry;
    while (++index < length) {
      entry = attachers[index];
      if (entry[0] === plugin) {
        return entry;
      }
    }
  }
  function parse(doc) {
    var file = vfile(doc);
    var Parser;
    freeze();
    Parser = processor.Parser;
    assertParser('parse', Parser);
    if (newable(Parser)) {
      return new Parser(String(file), file).parse();
    }
    return Parser(String(file), file);
  }
  function run(node, file, cb) {
    assertNode(node);
    freeze();
    if (!cb && typeof file === 'function') {
      cb = file;
      file = null;
    }
    if (!cb) {
      return new Promise(executor);
    }
    executor(null, cb);
    function executor(resolve, reject) {
      transformers.run(node, vfile(file), done);
      function done(err, tree, file) {
        tree = tree || node;
        if (err) {
          reject(err);
        } else if (resolve) {
          resolve(tree);
        } else {
          cb(null, tree, file);
        }
      }
    }
  }
  function runSync(node, file) {
    var complete = false;
    var result;
    run(node, file, done);
    assertDone('runSync', 'run', complete);
    return result;
    function done(err, tree) {
      complete = true;
      bail(err);
      result = tree;
    }
  }
  function stringify(node, doc) {
    var file = vfile(doc);
    var Compiler;
    freeze();
    Compiler = processor.Compiler;
    assertCompiler('stringify', Compiler);
    assertNode(node);
    if (newable(Compiler)) {
      return new Compiler(node, file).compile();
    }
    return Compiler(node, file);
  }
  function process(doc, cb) {
    freeze();
    assertParser('process', processor.Parser);
    assertCompiler('process', processor.Compiler);
    if (!cb) {
      return new Promise(executor);
    }
    executor(null, cb);
    function executor(resolve, reject) {
      var file = vfile(doc);
      pipeline.run(processor, {
        file: file
      }, done);
      function done(err) {
        if (err) {
          reject(err);
        } else if (resolve) {
          resolve(file);
        } else {
          cb(null, file);
        }
      }
    }
  }
  function processSync(doc) {
    var complete = false;
    var file;
    freeze();
    assertParser('processSync', processor.Parser);
    assertCompiler('processSync', processor.Compiler);
    file = vfile(doc);
    process(file, done);
    assertDone('processSync', 'process', complete);
    return file;
    function done(err) {
      complete = true;
      bail(err);
    }
  }
}
function newable(value) {
  return typeof value === 'function' && keys(value.prototype);
}
function keys(value) {
  var key;
  for (key in value) {
    return true;
  }
  return false;
}
function assertParser(name, Parser) {
  if (typeof Parser !== 'function') {
    throw new Error('Cannot `' + name + '` without `Parser`');
  }
}
function assertCompiler(name, Compiler) {
  if (typeof Compiler !== 'function') {
    throw new Error('Cannot `' + name + '` without `Compiler`');
  }
}
function assertUnfrozen(name, frozen) {
  if (frozen) {
    throw new Error(['Cannot invoke `' + name + '` on a frozen processor.\nCreate a new ', 'processor first, by invoking it: use `processor()` instead of ', '`processor`.'].join(''));
  }
}
function assertNode(node) {
  if (!node || !string(node.type)) {
    throw new Error('Expected node, got `' + node + '`');
  }
}
function assertDone(name, asyncName, complete) {
  if (!complete) {
    throw new Error('`' + name + '` finished async. Use `' + asyncName + '` instead');
  }
}

},

// node_modules/extend/index.js @194
194: function(__fusereq, exports, module){
'use strict';
var hasOwn = Object.prototype.hasOwnProperty;
var toStr = Object.prototype.toString;
var defineProperty = Object.defineProperty;
var gOPD = Object.getOwnPropertyDescriptor;
var isArray = function isArray(arr) {
  if (typeof Array.isArray === 'function') {
    return Array.isArray(arr);
  }
  return toStr.call(arr) === '[object Array]';
};
var isPlainObject = function isPlainObject(obj) {
  if (!obj || toStr.call(obj) !== '[object Object]') {
    return false;
  }
  var hasOwnConstructor = hasOwn.call(obj, 'constructor');
  var hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');
  if (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {
    return false;
  }
  var key;
  for (key in obj) {}
  return typeof key === 'undefined' || hasOwn.call(obj, key);
};
var setProperty = function setProperty(target, options) {
  if (defineProperty && options.name === '__proto__') {
    defineProperty(target, options.name, {
      enumerable: true,
      configurable: true,
      value: options.newValue,
      writable: true
    });
  } else {
    target[options.name] = options.newValue;
  }
};
var getProperty = function getProperty(obj, name) {
  if (name === '__proto__') {
    if (!hasOwn.call(obj, name)) {
      return void 0;
    } else if (gOPD) {
      return gOPD(obj, name).value;
    }
  }
  return obj[name];
};
module.exports = function extend() {
  var options, name, src, copy, copyIsArray, clone;
  var target = arguments[0];
  var i = 1;
  var length = arguments.length;
  var deep = false;
  if (typeof target === 'boolean') {
    deep = target;
    target = arguments[1] || ({});
    i = 2;
  }
  if (target == null || typeof target !== 'object' && typeof target !== 'function') {
    target = {};
  }
  for (; i < length; ++i) {
    options = arguments[i];
    if (options != null) {
      for (name in options) {
        src = getProperty(target, name);
        copy = getProperty(options, name);
        if (target !== copy) {
          if (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {
            if (copyIsArray) {
              copyIsArray = false;
              clone = src && isArray(src) ? src : [];
            } else {
              clone = src && isPlainObject(src) ? src : {};
            }
            setProperty(target, {
              name: name,
              newValue: extend(deep, clone, copy)
            });
          } else if (typeof copy !== 'undefined') {
            setProperty(target, {
              name: name,
              newValue: copy
            });
          }
        }
      }
    }
  }
  return target;
};

},

// node_modules/bail/index.js @195
195: function(__fusereq, exports, module){
'use strict';
module.exports = bail;
function bail(err) {
  if (err) {
    throw err;
  }
}

},

// node_modules/x-is-string/index.js @198
198: function(__fusereq, exports, module){
var toString = Object.prototype.toString;
module.exports = isString;
function isString(obj) {
  return toString.call(obj) === "[object String]";
}

},

// node_modules/is-plain-obj/index.js @199
199: function(__fusereq, exports, module){
'use strict';
var toString = Object.prototype.toString;
module.exports = function (x) {
  var prototype;
  return toString.call(x) === '[object Object]' && (prototype = Object.getPrototypeOf(x), prototype === null || prototype === Object.getPrototypeOf({}));
};

},

// node_modules/trough/index.js @197
197: function(__fusereq, exports, module){
'use strict';
var wrap = __fusereq(273);
module.exports = trough;
trough.wrap = wrap;
var slice = [].slice;
function trough() {
  var fns = [];
  var middleware = {};
  middleware.run = run;
  middleware.use = use;
  return middleware;
  function run() {
    var index = -1;
    var input = slice.call(arguments, 0, -1);
    var done = arguments[arguments.length - 1];
    if (typeof done !== 'function') {
      throw new Error('Expected function as last argument, not ' + done);
    }
    next.apply(null, [null].concat(input));
    function next(err) {
      var fn = fns[++index];
      var params = slice.call(arguments, 0);
      var values = params.slice(1);
      var length = input.length;
      var pos = -1;
      if (err) {
        done(err);
        return;
      }
      while (++pos < length) {
        if (values[pos] === null || values[pos] === undefined) {
          values[pos] = input[pos];
        }
      }
      input = values;
      if (fn) {
        wrap(fn, next).apply(null, input);
      } else {
        done.apply(null, [null].concat(input));
      }
    }
  }
  function use(fn) {
    if (typeof fn !== 'function') {
      throw new Error('Expected `fn` to be a function, not ' + fn);
    }
    fns.push(fn);
    return middleware;
  }
}

},

// node_modules/trough/wrap.js @273
273: function(__fusereq, exports, module){
'use strict';
var slice = [].slice;
module.exports = wrap;
function wrap(fn, callback) {
  var invoked;
  return wrapped;
  function wrapped() {
    var params = slice.call(arguments, 0);
    var callback = fn.length > params.length;
    var result;
    if (callback) {
      params.push(done);
    }
    try {
      result = fn.apply(null, params);
    } catch (error) {
      if (callback && invoked) {
        throw error;
      }
      return done(error);
    }
    if (!callback) {
      if (result && typeof result.then === 'function') {
        result.then(then, done);
      } else if (result instanceof Error) {
        done(result);
      } else {
        then(result);
      }
    }
  }
  function done() {
    if (!invoked) {
      invoked = true;
      callback.apply(null, arguments);
    }
  }
  function then(value) {
    done(null, value);
  }
}

},

// node_modules/fuse-box/modules/path/index.js @323
323: function(__fusereq, exports, module){
function normalizeArray(parts, allowAboveRoot) {
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];
    if (last === '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }
  return parts;
}
var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
var splitPath = function (filename) {
  return splitPathRe.exec(filename).slice(1);
};
exports.resolve = function () {
  var resolvedPath = '', resolvedAbsolute = false;
  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = i >= 0 ? arguments[i] : '/';
    if (typeof path !== 'string') {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }
    resolvedPath = path + '/' + resolvedPath;
    resolvedAbsolute = path.charAt(0) === '/';
  }
  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function (p) {
    return !!p;
  }), !resolvedAbsolute).join('/');
  return (resolvedAbsolute ? '/' : '') + resolvedPath || '.';
};
exports.normalize = function (path) {
  var isAbsolute = exports.isAbsolute(path), trailingSlash = substr(path, -1) === '/';
  path = normalizeArray(filter(path.split('/'), function (p) {
    return !!p;
  }), !isAbsolute).join('/');
  if (!path && !isAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }
  return (isAbsolute ? '/' : '') + path;
};
exports.isAbsolute = function (path) {
  return path.charAt(0) === '/';
};
exports.join = function () {
  var paths = Array.prototype.slice.call(arguments, 0);
  return exports.normalize(filter(paths, function (p, index) {
    if (typeof p !== 'string') {
      throw new TypeError('Arguments to path.join must be strings');
    }
    return p;
  }).join('/'));
};
exports.relative = function (from, to) {
  from = exports.resolve(from).substr(1);
  to = exports.resolve(to).substr(1);
  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== '') break;
    }
    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== '') break;
    }
    if (start > end) return [];
    return arr.slice(start, end - start + 1);
  }
  var fromParts = trim(from.split('/'));
  var toParts = trim(to.split('/'));
  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }
  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }
  outputParts = outputParts.concat(toParts.slice(samePartsLength));
  return outputParts.join('/');
};
exports.sep = '/';
exports.delimiter = ':';
exports.dirname = function (path) {
  var result = splitPath(path), root = result[0], dir = result[1];
  if (!root && !dir) {
    return '.';
  }
  if (dir) {
    dir = dir.substr(0, dir.length - 1);
  }
  return root + dir;
};
exports.basename = function (path, ext) {
  var f = splitPath(path)[2];
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};
exports.extname = function (path) {
  return splitPath(path)[3];
};
function filter(xs, f) {
  if (xs.filter) return xs.filter(f);
  var res = [];
  for (var i = 0; i < xs.length; i++) {
    if (f(xs[i], i, xs)) res.push(xs[i]);
  }
  return res;
}
var substr = ('ab').substr(-1) === 'b' ? function (str, start, len) {
  return str.substr(start, len);
} : function (str, start, len) {
  if (start < 0) start = str.length + start;
  return str.substr(start, len);
};

},

// node_modules/replace-ext/index.js @324
324: function(__fusereq, exports, module){
'use strict';
var path = __fusereq(323);
function replaceExt(npath, ext) {
  if (typeof npath !== 'string') {
    return npath;
  }
  if (npath.length === 0) {
    return npath;
  }
  var nFileName = path.basename(npath, path.extname(npath)) + ext;
  return path.join(path.dirname(npath), nFileName);
}
module.exports = replaceExt;

},

// node_modules/fuse-box/modules/process/index.js @326
326: function(__fusereq, exports, module){
if (typeof Object.assign != 'function') {
  Object.assign = function (target, varArgs) {
    'use strict';
    if (target == null) {
      throw new TypeError('Cannot convert undefined or null to object');
    }
    var to = Object(target);
    for (var index = 1; index < arguments.length; index++) {
      var nextSource = arguments[index];
      if (nextSource != null) {
        for (var nextKey in nextSource) {
          if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {
            to[nextKey] = nextSource[nextKey];
          }
        }
      }
    }
    return to;
  };
}
var productionEnv = false;
var process = module.exports = {};
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;
function cleanUpNextTick() {
  draining = false;
  if (currentQueue.length) {
    queue = currentQueue.concat(queue);
  } else {
    queueIndex = -1;
  }
  if (queue.length) {
    drainQueue();
  }
}
function drainQueue() {
  if (draining) {
    return;
  }
  var timeout = setTimeout(cleanUpNextTick);
  draining = true;
  var len = queue.length;
  while (len) {
    currentQueue = queue;
    queue = [];
    while (++queueIndex < len) {
      if (currentQueue) {
        currentQueue[queueIndex].run();
      }
    }
    queueIndex = -1;
    len = queue.length;
  }
  currentQueue = null;
  draining = false;
  clearTimeout(timeout);
}
process.nextTick = function (fun) {
  var args = new Array(arguments.length - 1);
  if (arguments.length > 1) {
    for (var i = 1; i < arguments.length; i++) {
      args[i - 1] = arguments[i];
    }
  }
  queue.push(new Item(fun, args));
  if (queue.length === 1 && !draining) {
    setTimeout(drainQueue, 0);
  }
};
function Item(fun, array) {
  this.fun = fun;
  this.array = array;
}
Item.prototype.run = function () {
  this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = '';
process.versions = {};
function noop() {}
process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.binding = function (name) {
  throw new Error('process.binding is not supported');
};
process.cwd = function () {
  return '/';
};
process.chdir = function (dir) {
  throw new Error('process.chdir is not supported');
};
process.umask = function () {
  return 0;
};

},

// node_modules/is-buffer/index.js @325
325: function(__fusereq, exports, module){
module.exports = function (obj) {
  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer);
};
function isBuffer(obj) {
  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj);
}
function isSlowBuffer(obj) {
  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0));
}

},

// node_modules/vfile/index.js @196
196: function(__fusereq, exports, module){
'use strict';
var VMessage = __fusereq(271);
var VFile = __fusereq(272);
module.exports = VFile;
var proto = VFile.prototype;
proto.message = message;
proto.info = info;
proto.fail = fail;
proto.warn = message;
function message(reason, position, origin) {
  var filePath = this.path;
  var message = new VMessage(reason, position, origin);
  if (filePath) {
    message.name = filePath + ':' + message.name;
    message.file = filePath;
  }
  message.fatal = false;
  this.messages.push(message);
  return message;
}
function fail() {
  var message = this.message.apply(this, arguments);
  message.fatal = true;
  throw message;
}
function info() {
  var message = this.message.apply(this, arguments);
  message.fatal = null;
  return message;
}

},

// node_modules/vfile/core.js @272
272: function(__fusereq, exports, module){
var process = __fusereq(326);
'use strict';
var path = __fusereq(323);
var replace = __fusereq(324);
var buffer = __fusereq(325);
module.exports = VFile;
var own = ({}).hasOwnProperty;
var proto = VFile.prototype;
proto.toString = toString;
var order = ['history', 'path', 'basename', 'stem', 'extname', 'dirname'];
function VFile(options) {
  var prop;
  var index;
  var length;
  if (!options) {
    options = {};
  } else if (typeof options === 'string' || buffer(options)) {
    options = {
      contents: options
    };
  } else if (('message' in options) && ('messages' in options)) {
    return options;
  }
  if (!(this instanceof VFile)) {
    return new VFile(options);
  }
  this.data = {};
  this.messages = [];
  this.history = [];
  this.cwd = process.cwd();
  index = -1;
  length = order.length;
  while (++index < length) {
    prop = order[index];
    if (own.call(options, prop)) {
      this[prop] = options[prop];
    }
  }
  for (prop in options) {
    if (order.indexOf(prop) === -1) {
      this[prop] = options[prop];
    }
  }
}
Object.defineProperty(proto, 'path', {
  get: function () {
    return this.history[this.history.length - 1];
  },
  set: function (path) {
    assertNonEmpty(path, 'path');
    if (path !== this.path) {
      this.history.push(path);
    }
  }
});
Object.defineProperty(proto, 'dirname', {
  get: function () {
    return typeof this.path === 'string' ? path.dirname(this.path) : undefined;
  },
  set: function (dirname) {
    assertPath(this.path, 'dirname');
    this.path = path.join(dirname || '', this.basename);
  }
});
Object.defineProperty(proto, 'basename', {
  get: function () {
    return typeof this.path === 'string' ? path.basename(this.path) : undefined;
  },
  set: function (basename) {
    assertNonEmpty(basename, 'basename');
    assertPart(basename, 'basename');
    this.path = path.join(this.dirname || '', basename);
  }
});
Object.defineProperty(proto, 'extname', {
  get: function () {
    return typeof this.path === 'string' ? path.extname(this.path) : undefined;
  },
  set: function (extname) {
    var ext = extname || '';
    assertPart(ext, 'extname');
    assertPath(this.path, 'extname');
    if (ext) {
      if (ext.charAt(0) !== '.') {
        throw new Error('`extname` must start with `.`');
      }
      if (ext.indexOf('.', 1) !== -1) {
        throw new Error('`extname` cannot contain multiple dots');
      }
    }
    this.path = replace(this.path, ext);
  }
});
Object.defineProperty(proto, 'stem', {
  get: function () {
    return typeof this.path === 'string' ? path.basename(this.path, this.extname) : undefined;
  },
  set: function (stem) {
    assertNonEmpty(stem, 'stem');
    assertPart(stem, 'stem');
    this.path = path.join(this.dirname || '', stem + (this.extname || ''));
  }
});
function toString(encoding) {
  var value = this.contents || '';
  return buffer(value) ? value.toString(encoding) : String(value);
}
function assertPart(part, name) {
  if (part.indexOf(path.sep) !== -1) {
    throw new Error('`' + name + '` cannot be a path: did not expect `' + path.sep + '`');
  }
}
function assertNonEmpty(part, name) {
  if (!part) {
    throw new Error('`' + name + '` cannot be empty');
  }
}
function assertPath(path, name) {
  if (!path) {
    throw new Error('Setting `' + name + '` requires `path` to be set too');
  }
}

},

// node_modules/vfile-message/index.js @271
271: function(__fusereq, exports, module){
'use strict';
var stringify = __fusereq(322);
module.exports = VMessage;
function VMessagePrototype() {}
VMessagePrototype.prototype = Error.prototype;
VMessage.prototype = new VMessagePrototype();
var proto = VMessage.prototype;
proto.file = '';
proto.name = '';
proto.reason = '';
proto.message = '';
proto.stack = '';
proto.fatal = null;
proto.column = null;
proto.line = null;
function VMessage(reason, position, origin) {
  var parts;
  var range;
  var location;
  if (typeof position === 'string') {
    origin = position;
    position = null;
  }
  parts = parseOrigin(origin);
  range = stringify(position) || '1:1';
  location = {
    start: {
      line: null,
      column: null
    },
    end: {
      line: null,
      column: null
    }
  };
  if (position && position.position) {
    position = position.position;
  }
  if (position) {
    if (position.start) {
      location = position;
      position = position.start;
    } else {
      location.start = position;
    }
  }
  if (reason.stack) {
    this.stack = reason.stack;
    reason = reason.message;
  }
  this.message = reason;
  this.name = range;
  this.reason = reason;
  this.line = position ? position.line : null;
  this.column = position ? position.column : null;
  this.location = location;
  this.source = parts[0];
  this.ruleId = parts[1];
}
function parseOrigin(origin) {
  var result = [null, null];
  var index;
  if (typeof origin === 'string') {
    index = origin.indexOf(':');
    if (index === -1) {
      result[1] = origin;
    } else {
      result[0] = origin.slice(0, index);
      result[1] = origin.slice(index + 1);
    }
  }
  return result;
}

},

// node_modules/unist-util-stringify-position/index.js @322
322: function(__fusereq, exports, module){
'use strict';
var own = ({}).hasOwnProperty;
module.exports = stringify;
function stringify(value) {
  if (!value || typeof value !== 'object') {
    return null;
  }
  if (own.call(value, 'position') || own.call(value, 'type')) {
    return position(value.position);
  }
  if (own.call(value, 'start') || own.call(value, 'end')) {
    return position(value);
  }
  if (own.call(value, 'line') || own.call(value, 'column')) {
    return point(value);
  }
  return null;
}
function point(point) {
  if (!point || typeof point !== 'object') {
    point = {};
  }
  return index(point.line) + ':' + index(point.column);
}
function position(pos) {
  if (!pos || typeof pos !== 'object') {
    pos = {};
  }
  return point(pos.start) + '-' + point(pos.end);
}
function index(value) {
  return value && typeof value === 'number' ? value : 1;
}

},

// node_modules/state-toggle/index.js @238
238: function(__fusereq, exports, module){
'use strict';
module.exports = factory;
function factory(key, state, ctx) {
  return enter;
  function enter() {
    var context = ctx || this;
    var current = context[key];
    context[key] = !state;
    return exit;
    function exit() {
      context[key] = current;
    }
  }
}

},

// node_modules/vfile-location/index.js @239
239: function(__fusereq, exports, module){
'use strict';
module.exports = factory;
function factory(file) {
  var contents = indices(String(file));
  return {
    toPosition: offsetToPositionFactory(contents),
    toOffset: positionToOffsetFactory(contents)
  };
}
function offsetToPositionFactory(indices) {
  return offsetToPosition;
  function offsetToPosition(offset) {
    var index = -1;
    var length = indices.length;
    if (offset < 0) {
      return {};
    }
    while (++index < length) {
      if (indices[index] > offset) {
        return {
          line: index + 1,
          column: offset - (indices[index - 1] || 0) + 1,
          offset: offset
        };
      }
    }
    return {};
  }
}
function positionToOffsetFactory(indices) {
  return positionToOffset;
  function positionToOffset(position) {
    var line = position && position.line;
    var column = position && position.column;
    if (!isNaN(line) && !isNaN(column) && (line - 1 in indices)) {
      return (indices[line - 2] || 0) + column - 1 || 0;
    }
    return -1;
  }
}
function indices(value) {
  var result = [];
  var index = value.indexOf('\n');
  while (index !== -1) {
    result.push(index + 1);
    index = value.indexOf('\n', index + 1);
  }
  result.push(value.length + 1);
  return result;
}

},

// node_modules/is-whitespace-character/index.js @300
300: function(__fusereq, exports, module){
'use strict';
module.exports = whitespace;
var fromCode = String.fromCharCode;
var re = /\s/;
function whitespace(character) {
  return re.test(typeof character === 'number' ? fromCode(character) : character.charAt(0));
}

},

// node_modules/trim-trailing-lines/index.js @304
304: function(__fusereq, exports, module){
'use strict';
module.exports = trimTrailingLines;
function trimTrailingLines(value) {
  return String(value).replace(/\n+$/, '');
}

},

// node_modules/trim/index.js @301
301: function(__fusereq, exports, module){
exports = module.exports = trim;
function trim(str) {
  return str.replace(/^\s*|\s*$/g, '');
}
exports.left = function (str) {
  return str.replace(/^\s*/, '');
};
exports.right = function (str) {
  return str.replace(/\s*$/, '');
};

},

// node_modules/is-decimal/index.js @306
306: function(__fusereq, exports, module){
'use strict';
module.exports = decimal;
function decimal(character) {
  var code = typeof character === 'string' ? character.charCodeAt(0) : character;
  return code >= 48 && code <= 57;
}

},

// node_modules/collapse-white-space/index.js @355
355: function(__fusereq, exports, module){
'use strict';
module.exports = collapse;
function collapse(value) {
  return String(value).replace(/\s+/g, ' ');
}

},

// node_modules/markdown-escapes/index.js @297
297: function(__fusereq, exports, module){
'use strict';
module.exports = escapes;
var defaults = ['\\', '`', '*', '{', '}', '[', ']', '(', ')', '#', '+', '-', '.', '!', '_', '>'];
var gfm = defaults.concat(['~', '|']);
var commonmark = gfm.concat(['\n', '"', '$', '%', '&', "'", ',', '/', ':', ';', '<', '=', '?', '@', '^']);
escapes.default = defaults;
escapes.gfm = gfm;
escapes.commonmark = commonmark;
function escapes(options) {
  var settings = options || ({});
  if (settings.commonmark) {
    return commonmark;
  }
  return settings.gfm ? gfm : defaults;
}

},

// node_modules/repeat-string/index.js @303
303: function(__fusereq, exports, module){
'use strict';
var res = '';
var cache;
module.exports = repeat;
function repeat(str, num) {
  if (typeof str !== 'string') {
    throw new TypeError('expected a string');
  }
  if (num === 1) return str;
  if (num === 2) return str + str;
  var max = str.length * num;
  if (cache !== str || typeof cache === 'undefined') {
    cache = str;
    res = '';
  } else if (res.length >= max) {
    return res.substr(0, max);
  }
  while (max > res.length && num > 1) {
    if (num & 1) {
      res += str;
    }
    num >>= 1;
    str += str;
  }
  res += str;
  res = res.substr(0, max);
  return res;
}

},

// node_modules/unist-util-remove-position/index.js @299
299: function(__fusereq, exports, module){
'use strict';
var visit = __fusereq(193);
module.exports = removePosition;
function removePosition(node, force) {
  visit(node, force ? hard : soft);
  return node;
}
function hard(node) {
  delete node.position;
}
function soft(node) {
  node.position = undefined;
}

},

// node_modules/parse-entities/index.js @298
298: function(__fusereq, exports, module){
'use strict';
var legacy = __fusereq(350);
var invalid = __fusereq(351);
var decimal = __fusereq(306);
var hexadecimal = __fusereq(352);
var alphanumerical = __fusereq(353);
var decodeEntity = __fusereq(354);
module.exports = parseEntities;
var own = ({}).hasOwnProperty;
var fromCharCode = String.fromCharCode;
var noop = Function.prototype;
var defaults = {
  warning: null,
  reference: null,
  text: null,
  warningContext: null,
  referenceContext: null,
  textContext: null,
  position: {},
  additional: null,
  attribute: false,
  nonTerminated: true
};
var tab = 9;
var lineFeed = 10;
var formFeed = 12;
var space = 32;
var ampersand = 38;
var semicolon = 59;
var lessThan = 60;
var equalsTo = 61;
var numberSign = 35;
var uppercaseX = 88;
var lowercaseX = 120;
var replacementCharacter = 65533;
var name = 'named';
var hexa = 'hexadecimal';
var deci = 'decimal';
var bases = {};
bases[hexa] = 16;
bases[deci] = 10;
var tests = {};
tests[name] = alphanumerical;
tests[deci] = decimal;
tests[hexa] = hexadecimal;
var namedNotTerminated = 1;
var numericNotTerminated = 2;
var namedEmpty = 3;
var numericEmpty = 4;
var namedUnknown = 5;
var numericDisallowed = 6;
var numericProhibited = 7;
var messages = {};
messages[namedNotTerminated] = 'Named character references must be terminated by a semicolon';
messages[numericNotTerminated] = 'Numeric character references must be terminated by a semicolon';
messages[namedEmpty] = 'Named character references cannot be empty';
messages[numericEmpty] = 'Numeric character references cannot be empty';
messages[namedUnknown] = 'Named character references must be known';
messages[numericDisallowed] = 'Numeric character references cannot be disallowed';
messages[numericProhibited] = 'Numeric character references cannot be outside the permissible Unicode range';
function parseEntities(value, options) {
  var settings = {};
  var option;
  var key;
  if (!options) {
    options = {};
  }
  for (key in defaults) {
    option = options[key];
    settings[key] = option === null || option === undefined ? defaults[key] : option;
  }
  if (settings.position.indent || settings.position.start) {
    settings.indent = settings.position.indent || [];
    settings.position = settings.position.start;
  }
  return parse(value, settings);
}
function parse(value, settings) {
  var additional = settings.additional;
  var nonTerminated = settings.nonTerminated;
  var handleText = settings.text;
  var handleReference = settings.reference;
  var handleWarning = settings.warning;
  var textContext = settings.textContext;
  var referenceContext = settings.referenceContext;
  var warningContext = settings.warningContext;
  var pos = settings.position;
  var indent = settings.indent || [];
  var length = value.length;
  var index = 0;
  var lines = -1;
  var column = pos.column || 1;
  var line = pos.line || 1;
  var queue = '';
  var result = [];
  var entityCharacters;
  var namedEntity;
  var terminated;
  var characters;
  var character;
  var reference;
  var following;
  var warning;
  var reason;
  var output;
  var entity;
  var begin;
  var start;
  var type;
  var test;
  var prev;
  var next;
  var diff;
  var end;
  if (typeof additional === 'string') {
    additional = additional.charCodeAt(0);
  }
  prev = now();
  warning = handleWarning ? parseError : noop;
  index--;
  length++;
  while (++index < length) {
    if (character === lineFeed) {
      column = indent[lines] || 1;
    }
    character = value.charCodeAt(index);
    if (character === ampersand) {
      following = value.charCodeAt(index + 1);
      if (following === tab || following === lineFeed || following === formFeed || following === space || following === ampersand || following === lessThan || following !== following || additional && following === additional) {
        queue += fromCharCode(character);
        column++;
        continue;
      }
      start = index + 1;
      begin = start;
      end = start;
      if (following === numberSign) {
        end = ++begin;
        following = value.charCodeAt(end);
        if (following === uppercaseX || following === lowercaseX) {
          type = hexa;
          end = ++begin;
        } else {
          type = deci;
        }
      } else {
        type = name;
      }
      entityCharacters = '';
      entity = '';
      characters = '';
      test = tests[type];
      end--;
      while (++end < length) {
        following = value.charCodeAt(end);
        if (!test(following)) {
          break;
        }
        characters += fromCharCode(following);
        if (type === name && own.call(legacy, characters)) {
          entityCharacters = characters;
          entity = legacy[characters];
        }
      }
      terminated = value.charCodeAt(end) === semicolon;
      if (terminated) {
        end++;
        namedEntity = type === name ? decodeEntity(characters) : false;
        if (namedEntity) {
          entityCharacters = characters;
          entity = namedEntity;
        }
      }
      diff = 1 + end - start;
      if (!terminated && !nonTerminated) {} else if (!characters) {
        if (type !== name) {
          warning(numericEmpty, diff);
        }
      } else if (type === name) {
        if (terminated && !entity) {
          warning(namedUnknown, 1);
        } else {
          if (entityCharacters !== characters) {
            end = begin + entityCharacters.length;
            diff = 1 + end - begin;
            terminated = false;
          }
          if (!terminated) {
            reason = entityCharacters ? namedNotTerminated : namedEmpty;
            if (settings.attribute) {
              following = value.charCodeAt(end);
              if (following === equalsTo) {
                warning(reason, diff);
                entity = null;
              } else if (alphanumerical(following)) {
                entity = null;
              } else {
                warning(reason, diff);
              }
            } else {
              warning(reason, diff);
            }
          }
        }
        reference = entity;
      } else {
        if (!terminated) {
          warning(numericNotTerminated, diff);
        }
        reference = parseInt(characters, bases[type]);
        if (prohibited(reference)) {
          warning(numericProhibited, diff);
          reference = fromCharCode(replacementCharacter);
        } else if ((reference in invalid)) {
          warning(numericDisallowed, diff);
          reference = invalid[reference];
        } else {
          output = '';
          if (disallowed(reference)) {
            warning(numericDisallowed, diff);
          }
          if (reference > 0xffff) {
            reference -= 0x10000;
            output += fromCharCode(reference >>> (10 & 0x3ff) | 0xd800);
            reference = 0xdc00 | reference & 0x3ff;
          }
          reference = output + fromCharCode(reference);
        }
      }
      if (reference) {
        flush();
        prev = now();
        index = end - 1;
        column += end - start + 1;
        result.push(reference);
        next = now();
        next.offset++;
        if (handleReference) {
          handleReference.call(referenceContext, reference, {
            start: prev,
            end: next
          }, value.slice(start - 1, end));
        }
        prev = next;
      } else {
        characters = value.slice(start - 1, end);
        queue += characters;
        column += characters.length;
        index = end - 1;
      }
    } else {
      if (character === 10) {
        line++;
        lines++;
        column = 0;
      }
      if (character === character) {
        queue += fromCharCode(character);
        column++;
      } else {
        flush();
      }
    }
  }
  return result.join('');
  function now() {
    return {
      line: line,
      column: column,
      offset: index + (pos.offset || 0)
    };
  }
  function parseError(code, offset) {
    var position = now();
    position.column += offset;
    position.offset += offset;
    handleWarning.call(warningContext, messages[code], position, code);
  }
  function flush() {
    if (queue) {
      result.push(queue);
      if (handleText) {
        handleText.call(textContext, queue, {
          start: prev,
          end: now()
        });
      }
      queue = '';
    }
  }
}
function prohibited(code) {
  return code >= 0xd800 && code <= 0xdfff || code > 0x10ffff;
}
function disallowed(code) {
  return code >= 0x0001 && code <= 0x0008 || code === 0x000b || code >= 0x000d && code <= 0x001f || code >= 0x007f && code <= 0x009f || code >= 0xfdd0 && code <= 0xfdef || (code & 0xffff) === 0xffff || (code & 0xffff) === 0xfffe;
}

},

// node_modules/parse-entities/decode-entity.browser.js @354
354: function(__fusereq, exports, module){
'use strict';
var el;
var semicolon = 59;
module.exports = decodeEntity;
function decodeEntity(characters) {
  var entity = '&' + characters + ';';
  var char;
  el = el || document.createElement('i');
  el.innerHTML = entity;
  char = el.textContent;
  if (char.charCodeAt(char.length - 1) === semicolon && characters !== 'semi') {
    return false;
  }
  return char === entity ? false : char;
}

},

// node_modules/character-entities-legacy/index.json @350
350: function(__fusereq, exports, module){
module.exports = {
  "AElig": "Æ",
  "AMP": "&",
  "Aacute": "Á",
  "Acirc": "Â",
  "Agrave": "À",
  "Aring": "Å",
  "Atilde": "Ã",
  "Auml": "Ä",
  "COPY": "©",
  "Ccedil": "Ç",
  "ETH": "Ð",
  "Eacute": "É",
  "Ecirc": "Ê",
  "Egrave": "È",
  "Euml": "Ë",
  "GT": ">",
  "Iacute": "Í",
  "Icirc": "Î",
  "Igrave": "Ì",
  "Iuml": "Ï",
  "LT": "<",
  "Ntilde": "Ñ",
  "Oacute": "Ó",
  "Ocirc": "Ô",
  "Ograve": "Ò",
  "Oslash": "Ø",
  "Otilde": "Õ",
  "Ouml": "Ö",
  "QUOT": "\"",
  "REG": "®",
  "THORN": "Þ",
  "Uacute": "Ú",
  "Ucirc": "Û",
  "Ugrave": "Ù",
  "Uuml": "Ü",
  "Yacute": "Ý",
  "aacute": "á",
  "acirc": "â",
  "acute": "´",
  "aelig": "æ",
  "agrave": "à",
  "amp": "&",
  "aring": "å",
  "atilde": "ã",
  "auml": "ä",
  "brvbar": "¦",
  "ccedil": "ç",
  "cedil": "¸",
  "cent": "¢",
  "copy": "©",
  "curren": "¤",
  "deg": "°",
  "divide": "÷",
  "eacute": "é",
  "ecirc": "ê",
  "egrave": "è",
  "eth": "ð",
  "euml": "ë",
  "frac12": "½",
  "frac14": "¼",
  "frac34": "¾",
  "gt": ">",
  "iacute": "í",
  "icirc": "î",
  "iexcl": "¡",
  "igrave": "ì",
  "iquest": "¿",
  "iuml": "ï",
  "laquo": "«",
  "lt": "<",
  "macr": "¯",
  "micro": "µ",
  "middot": "·",
  "nbsp": " ",
  "not": "¬",
  "ntilde": "ñ",
  "oacute": "ó",
  "ocirc": "ô",
  "ograve": "ò",
  "ordf": "ª",
  "ordm": "º",
  "oslash": "ø",
  "otilde": "õ",
  "ouml": "ö",
  "para": "¶",
  "plusmn": "±",
  "pound": "£",
  "quot": "\"",
  "raquo": "»",
  "reg": "®",
  "sect": "§",
  "shy": "­",
  "sup1": "¹",
  "sup2": "²",
  "sup3": "³",
  "szlig": "ß",
  "thorn": "þ",
  "times": "×",
  "uacute": "ú",
  "ucirc": "û",
  "ugrave": "ù",
  "uml": "¨",
  "uuml": "ü",
  "yacute": "ý",
  "yen": "¥",
  "yuml": "ÿ"
}
;
},

// node_modules/character-reference-invalid/index.json @351
351: function(__fusereq, exports, module){
module.exports = {
  "0": "�",
  "128": "€",
  "130": "‚",
  "131": "ƒ",
  "132": "„",
  "133": "…",
  "134": "†",
  "135": "‡",
  "136": "ˆ",
  "137": "‰",
  "138": "Š",
  "139": "‹",
  "140": "Œ",
  "142": "Ž",
  "145": "‘",
  "146": "’",
  "147": "“",
  "148": "”",
  "149": "•",
  "150": "–",
  "151": "—",
  "152": "˜",
  "153": "™",
  "154": "š",
  "155": "›",
  "156": "œ",
  "158": "ž",
  "159": "Ÿ"
}
;
},

// node_modules/is-hexadecimal/index.js @352
352: function(__fusereq, exports, module){
'use strict';
module.exports = hexadecimal;
function hexadecimal(character) {
  var code = typeof character === 'string' ? character.charCodeAt(0) : character;
  return code >= 97 && code <= 102 || code >= 65 && code <= 70 || code >= 48 && code <= 57;
}

},

// node_modules/is-alphanumerical/index.js @353
353: function(__fusereq, exports, module){
'use strict';
var alphabetical = __fusereq(314);
var decimal = __fusereq(306);
module.exports = alphanumerical;
function alphanumerical(character) {
  return alphabetical(character) || decimal(character);
}

},

// node_modules/is-alphabetical/index.js @314
314: function(__fusereq, exports, module){
'use strict';
module.exports = alphabetical;
function alphabetical(character) {
  var code = typeof character === 'string' ? character.charCodeAt(0) : character;
  return code >= 97 && code <= 122 || code >= 65 && code <= 90;
}

},

// node_modules/is-word-character/index.js @318
318: function(__fusereq, exports, module){
'use strict';
module.exports = wordCharacter;
var fromCode = String.fromCharCode;
var re = /\w/;
function wordCharacter(character) {
  return re.test(typeof character === 'number' ? fromCode(character) : character.charAt(0));
}

},

// node_modules/remark-parse/index.js @111
111: function(__fusereq, exports, module){
'use strict';
var unherit = __fusereq(191);
var xtend = __fusereq(109);
var Parser = __fusereq(192);
module.exports = parse;
parse.Parser = Parser;
function parse(options) {
  var Local = unherit(Parser);
  Local.prototype.options = xtend(Local.prototype.options, this.data('settings'), options);
  this.Parser = Local;
}

},

// node_modules/remark-parse/lib/parser.js @192
192: function(__fusereq, exports, module){
'use strict';
var xtend = __fusereq(109);
var toggle = __fusereq(238);
var vfileLocation = __fusereq(239);
var unescape = __fusereq(240);
var decode = __fusereq(241);
var tokenizer = __fusereq(242);
module.exports = Parser;
function Parser(doc, file) {
  this.file = file;
  this.offset = {};
  this.options = xtend(this.options);
  this.setOptions({});
  this.inList = false;
  this.inBlock = false;
  this.inLink = false;
  this.atStart = true;
  this.toOffset = vfileLocation(file).toOffset;
  this.unescape = unescape(this, 'escape');
  this.decode = decode(this);
}
var proto = Parser.prototype;
proto.setOptions = __fusereq(243);
proto.parse = __fusereq(244);
proto.options = __fusereq(245);
proto.exitStart = toggle('atStart', true);
proto.enterList = toggle('inList', false);
proto.enterLink = toggle('inLink', false);
proto.enterBlock = toggle('inBlock', false);
proto.interruptParagraph = [['thematicBreak'], ['atxHeading'], ['fencedCode'], ['blockquote'], ['html'], ['setextHeading', {
  commonmark: false
}], ['definition', {
  commonmark: false
}], ['footnote', {
  commonmark: false
}]];
proto.interruptList = [['atxHeading', {
  pedantic: false
}], ['fencedCode', {
  pedantic: false
}], ['thematicBreak', {
  pedantic: false
}], ['definition', {
  commonmark: false
}], ['footnote', {
  commonmark: false
}]];
proto.interruptBlockquote = [['indentedCode', {
  commonmark: true
}], ['fencedCode', {
  commonmark: true
}], ['atxHeading', {
  commonmark: true
}], ['setextHeading', {
  commonmark: true
}], ['thematicBreak', {
  commonmark: true
}], ['html', {
  commonmark: true
}], ['list', {
  commonmark: true
}], ['definition', {
  commonmark: false
}], ['footnote', {
  commonmark: false
}]];
proto.blockTokenizers = {
  newline: __fusereq(246),
  indentedCode: __fusereq(247),
  fencedCode: __fusereq(248),
  blockquote: __fusereq(249),
  atxHeading: __fusereq(250),
  thematicBreak: __fusereq(251),
  list: __fusereq(252),
  setextHeading: __fusereq(253),
  html: __fusereq(254),
  footnote: __fusereq(255),
  definition: __fusereq(256),
  table: __fusereq(257),
  paragraph: __fusereq(258)
};
proto.inlineTokenizers = {
  escape: __fusereq(259),
  autoLink: __fusereq(260),
  url: __fusereq(261),
  html: __fusereq(262),
  link: __fusereq(263),
  reference: __fusereq(264),
  strong: __fusereq(265),
  emphasis: __fusereq(266),
  deletion: __fusereq(267),
  code: __fusereq(268),
  break: __fusereq(269),
  text: __fusereq(270)
};
proto.blockMethods = keys(proto.blockTokenizers);
proto.inlineMethods = keys(proto.inlineTokenizers);
proto.tokenizeBlock = tokenizer('block');
proto.tokenizeInline = tokenizer('inline');
proto.tokenizeFactory = tokenizer;
function keys(value) {
  var result = [];
  var key;
  for (key in value) {
    result.push(key);
  }
  return result;
}

},

// node_modules/remark-parse/lib/unescape.js @240
240: function(__fusereq, exports, module){
'use strict';
module.exports = factory;
function factory(ctx, key) {
  return unescape;
  function unescape(value) {
    var prev = 0;
    var index = value.indexOf('\\');
    var escape = ctx[key];
    var queue = [];
    var character;
    while (index !== -1) {
      queue.push(value.slice(prev, index));
      prev = index + 1;
      character = value.charAt(prev);
      if (!character || escape.indexOf(character) === -1) {
        queue.push('\\');
      }
      index = value.indexOf('\\', prev);
    }
    queue.push(value.slice(prev));
    return queue.join('');
  }
}

},

// node_modules/remark-parse/lib/decode.js @241
241: function(__fusereq, exports, module){
'use strict';
var xtend = __fusereq(109);
var entities = __fusereq(298);
module.exports = factory;
function factory(ctx) {
  decoder.raw = decodeRaw;
  return decoder;
  function normalize(position) {
    var offsets = ctx.offset;
    var line = position.line;
    var result = [];
    while (++line) {
      if (!((line in offsets))) {
        break;
      }
      result.push((offsets[line] || 0) + 1);
    }
    return {
      start: position,
      indent: result
    };
  }
  function handleWarning(reason, position, code) {
    if (code === 3) {
      return;
    }
    ctx.file.message(reason, position);
  }
  function decoder(value, position, handler) {
    entities(value, {
      position: normalize(position),
      warning: handleWarning,
      text: handler,
      reference: handler,
      textContext: ctx,
      referenceContext: ctx
    });
  }
  function decodeRaw(value, position, options) {
    return entities(value, xtend(options, {
      position: normalize(position),
      warning: handleWarning
    }));
  }
}

},

// node_modules/remark-parse/lib/tokenizer.js @242
242: function(__fusereq, exports, module){
'use strict';
module.exports = factory;
var MERGEABLE_NODES = {
  text: mergeText,
  blockquote: mergeBlockquote
};
function mergeable(node) {
  var start;
  var end;
  if (node.type !== 'text' || !node.position) {
    return true;
  }
  start = node.position.start;
  end = node.position.end;
  return start.line !== end.line || end.column - start.column === node.value.length;
}
function mergeText(prev, node) {
  prev.value += node.value;
  return prev;
}
function mergeBlockquote(prev, node) {
  if (this.options.commonmark) {
    return node;
  }
  prev.children = prev.children.concat(node.children);
  return prev;
}
function factory(type) {
  return tokenize;
  function tokenize(value, location) {
    var self = this;
    var offset = self.offset;
    var tokens = [];
    var methods = self[type + 'Methods'];
    var tokenizers = self[type + 'Tokenizers'];
    var line = location.line;
    var column = location.column;
    var index;
    var length;
    var method;
    var name;
    var matched;
    var valueLength;
    if (!value) {
      return tokens;
    }
    eat.now = now;
    eat.file = self.file;
    updatePosition('');
    while (value) {
      index = -1;
      length = methods.length;
      matched = false;
      while (++index < length) {
        name = methods[index];
        method = tokenizers[name];
        if (method && (!method.onlyAtStart || self.atStart) && (!method.notInList || !self.inList) && (!method.notInBlock || !self.inBlock) && (!method.notInLink || !self.inLink)) {
          valueLength = value.length;
          method.apply(self, [eat, value]);
          matched = valueLength !== value.length;
          if (matched) {
            break;
          }
        }
      }
      if (!matched) {
        self.file.fail(new Error('Infinite loop'), eat.now());
      }
    }
    self.eof = now();
    return tokens;
    function updatePosition(subvalue) {
      var lastIndex = -1;
      var index = subvalue.indexOf('\n');
      while (index !== -1) {
        line++;
        lastIndex = index;
        index = subvalue.indexOf('\n', index + 1);
      }
      if (lastIndex === -1) {
        column += subvalue.length;
      } else {
        column = subvalue.length - lastIndex;
      }
      if ((line in offset)) {
        if (lastIndex !== -1) {
          column += offset[line];
        } else if (column <= offset[line]) {
          column = offset[line] + 1;
        }
      }
    }
    function getOffset() {
      var indentation = [];
      var pos = line + 1;
      return function () {
        var last = line + 1;
        while (pos < last) {
          indentation.push((offset[pos] || 0) + 1);
          pos++;
        }
        return indentation;
      };
    }
    function now() {
      var pos = {
        line: line,
        column: column
      };
      pos.offset = self.toOffset(pos);
      return pos;
    }
    function Position(start) {
      this.start = start;
      this.end = now();
    }
    function validateEat(subvalue) {
      if (value.substring(0, subvalue.length) !== subvalue) {
        self.file.fail(new Error('Incorrectly eaten value: please report this ' + 'warning on http://git.io/vg5Ft'), now());
      }
    }
    function position() {
      var before = now();
      return update;
      function update(node, indent) {
        var prev = node.position;
        var start = prev ? prev.start : before;
        var combined = [];
        var n = prev && prev.end.line;
        var l = before.line;
        node.position = new Position(start);
        if (prev && indent && prev.indent) {
          combined = prev.indent;
          if (n < l) {
            while (++n < l) {
              combined.push((offset[n] || 0) + 1);
            }
            combined.push(before.column);
          }
          indent = combined.concat(indent);
        }
        node.position.indent = indent || [];
        return node;
      }
    }
    function add(node, parent) {
      var children = parent ? parent.children : tokens;
      var prev = children[children.length - 1];
      if (prev && node.type === prev.type && (node.type in MERGEABLE_NODES) && mergeable(prev) && mergeable(node)) {
        node = MERGEABLE_NODES[node.type].call(self, prev, node);
      }
      if (node !== prev) {
        children.push(node);
      }
      if (self.atStart && tokens.length !== 0) {
        self.exitStart();
      }
      return node;
    }
    function eat(subvalue) {
      var indent = getOffset();
      var pos = position();
      var current = now();
      validateEat(subvalue);
      apply.reset = reset;
      reset.test = test;
      apply.test = test;
      value = value.substring(subvalue.length);
      updatePosition(subvalue);
      indent = indent();
      return apply;
      function apply(node, parent) {
        return pos(add(pos(node), parent), indent);
      }
      function reset() {
        var node = apply.apply(null, arguments);
        line = current.line;
        column = current.column;
        value = subvalue + value;
        return node;
      }
      function test() {
        var result = pos({});
        line = current.line;
        column = current.column;
        value = subvalue + value;
        return result.position;
      }
    }
  }
}

},

// node_modules/remark-parse/lib/set-options.js @243
243: function(__fusereq, exports, module){
'use strict';
var xtend = __fusereq(109);
var escapes = __fusereq(297);
var defaults = __fusereq(245);
module.exports = setOptions;
function setOptions(options) {
  var self = this;
  var current = self.options;
  var key;
  var value;
  if (options == null) {
    options = {};
  } else if (typeof options === 'object') {
    options = xtend(options);
  } else {
    throw new Error('Invalid value `' + options + '` ' + 'for setting `options`');
  }
  for (key in defaults) {
    value = options[key];
    if (value == null) {
      value = current[key];
    }
    if (key !== 'blocks' && typeof value !== 'boolean' || key === 'blocks' && typeof value !== 'object') {
      throw new Error('Invalid value `' + value + '` for setting `options.' + key + '`');
    }
    options[key] = value;
  }
  self.options = options;
  self.escape = escapes(options);
  return self;
}

},

// node_modules/remark-parse/lib/parse.js @244
244: function(__fusereq, exports, module){
'use strict';
var xtend = __fusereq(109);
var removePosition = __fusereq(299);
module.exports = parse;
var C_NEWLINE = '\n';
var EXPRESSION_LINE_BREAKS = /\r\n|\r/g;
function parse() {
  var self = this;
  var value = String(self.file);
  var start = {
    line: 1,
    column: 1,
    offset: 0
  };
  var content = xtend(start);
  var node;
  value = value.replace(EXPRESSION_LINE_BREAKS, C_NEWLINE);
  if (value.charCodeAt(0) === 0xFEFF) {
    value = value.slice(1);
    content.column++;
    content.offset++;
  }
  node = {
    type: 'root',
    children: self.tokenizeBlock(value, content),
    position: {
      start: start,
      end: self.eof || xtend(start)
    }
  };
  if (!self.options.position) {
    removePosition(node, true);
  }
  return node;
}

},

// node_modules/remark-parse/lib/defaults.js @245
245: function(__fusereq, exports, module){
'use strict';
module.exports = {
  position: true,
  gfm: true,
  commonmark: false,
  footnotes: false,
  pedantic: false,
  blocks: __fusereq(305)
};

},

// node_modules/remark-parse/lib/tokenize/newline.js @246
246: function(__fusereq, exports, module){
'use strict';
var whitespace = __fusereq(300);
module.exports = newline;
function newline(eat, value, silent) {
  var character = value.charAt(0);
  var length;
  var subvalue;
  var queue;
  var index;
  if (character !== '\n') {
    return;
  }
  if (silent) {
    return true;
  }
  index = 1;
  length = value.length;
  subvalue = character;
  queue = '';
  while (index < length) {
    character = value.charAt(index);
    if (!whitespace(character)) {
      break;
    }
    queue += character;
    if (character === '\n') {
      subvalue += queue;
      queue = '';
    }
    index++;
  }
  eat(subvalue);
}

},

// node_modules/remark-parse/lib/tokenize/code-indented.js @247
247: function(__fusereq, exports, module){
'use strict';
var repeat = __fusereq(303);
var trim = __fusereq(304);
module.exports = indentedCode;
var C_NEWLINE = '\n';
var C_TAB = '\t';
var C_SPACE = ' ';
var CODE_INDENT_COUNT = 4;
var CODE_INDENT = repeat(C_SPACE, CODE_INDENT_COUNT);
function indentedCode(eat, value, silent) {
  var index = -1;
  var length = value.length;
  var subvalue = '';
  var content = '';
  var subvalueQueue = '';
  var contentQueue = '';
  var character;
  var blankQueue;
  var indent;
  while (++index < length) {
    character = value.charAt(index);
    if (indent) {
      indent = false;
      subvalue += subvalueQueue;
      content += contentQueue;
      subvalueQueue = '';
      contentQueue = '';
      if (character === C_NEWLINE) {
        subvalueQueue = character;
        contentQueue = character;
      } else {
        subvalue += character;
        content += character;
        while (++index < length) {
          character = value.charAt(index);
          if (!character || character === C_NEWLINE) {
            contentQueue = character;
            subvalueQueue = character;
            break;
          }
          subvalue += character;
          content += character;
        }
      }
    } else if (character === C_SPACE && value.charAt(index + 1) === character && value.charAt(index + 2) === character && value.charAt(index + 3) === character) {
      subvalueQueue += CODE_INDENT;
      index += 3;
      indent = true;
    } else if (character === C_TAB) {
      subvalueQueue += character;
      indent = true;
    } else {
      blankQueue = '';
      while (character === C_TAB || character === C_SPACE) {
        blankQueue += character;
        character = value.charAt(++index);
      }
      if (character !== C_NEWLINE) {
        break;
      }
      subvalueQueue += blankQueue + character;
      contentQueue += character;
    }
  }
  if (content) {
    if (silent) {
      return true;
    }
    return eat(subvalue)({
      type: 'code',
      lang: null,
      value: trim(content)
    });
  }
}

},

// node_modules/remark-parse/lib/tokenize/code-fenced.js @248
248: function(__fusereq, exports, module){
'use strict';
var trim = __fusereq(304);
module.exports = fencedCode;
var C_NEWLINE = '\n';
var C_TAB = '\t';
var C_SPACE = ' ';
var C_TILDE = '~';
var C_TICK = '`';
var MIN_FENCE_COUNT = 3;
var CODE_INDENT_COUNT = 4;
function fencedCode(eat, value, silent) {
  var self = this;
  var settings = self.options;
  var length = value.length + 1;
  var index = 0;
  var subvalue = '';
  var fenceCount;
  var marker;
  var character;
  var flag;
  var queue;
  var content;
  var exdentedContent;
  var closing;
  var exdentedClosing;
  var indent;
  var now;
  if (!settings.gfm) {
    return;
  }
  while (index < length) {
    character = value.charAt(index);
    if (character !== C_SPACE && character !== C_TAB) {
      break;
    }
    subvalue += character;
    index++;
  }
  indent = index;
  character = value.charAt(index);
  if (character !== C_TILDE && character !== C_TICK) {
    return;
  }
  index++;
  marker = character;
  fenceCount = 1;
  subvalue += character;
  while (index < length) {
    character = value.charAt(index);
    if (character !== marker) {
      break;
    }
    subvalue += character;
    fenceCount++;
    index++;
  }
  if (fenceCount < MIN_FENCE_COUNT) {
    return;
  }
  while (index < length) {
    character = value.charAt(index);
    if (character !== C_SPACE && character !== C_TAB) {
      break;
    }
    subvalue += character;
    index++;
  }
  flag = '';
  queue = '';
  while (index < length) {
    character = value.charAt(index);
    if (character === C_NEWLINE || character === C_TILDE || character === C_TICK) {
      break;
    }
    if (character === C_SPACE || character === C_TAB) {
      queue += character;
    } else {
      flag += queue + character;
      queue = '';
    }
    index++;
  }
  character = value.charAt(index);
  if (character && character !== C_NEWLINE) {
    return;
  }
  if (silent) {
    return true;
  }
  now = eat.now();
  now.column += subvalue.length;
  now.offset += subvalue.length;
  subvalue += flag;
  flag = self.decode.raw(self.unescape(flag), now);
  if (queue) {
    subvalue += queue;
  }
  queue = '';
  closing = '';
  exdentedClosing = '';
  content = '';
  exdentedContent = '';
  while (index < length) {
    character = value.charAt(index);
    content += closing;
    exdentedContent += exdentedClosing;
    closing = '';
    exdentedClosing = '';
    if (character !== C_NEWLINE) {
      content += character;
      exdentedClosing += character;
      index++;
      continue;
    }
    if (content) {
      closing += character;
      exdentedClosing += character;
    } else {
      subvalue += character;
    }
    queue = '';
    index++;
    while (index < length) {
      character = value.charAt(index);
      if (character !== C_SPACE) {
        break;
      }
      queue += character;
      index++;
    }
    closing += queue;
    exdentedClosing += queue.slice(indent);
    if (queue.length >= CODE_INDENT_COUNT) {
      continue;
    }
    queue = '';
    while (index < length) {
      character = value.charAt(index);
      if (character !== marker) {
        break;
      }
      queue += character;
      index++;
    }
    closing += queue;
    exdentedClosing += queue;
    if (queue.length < fenceCount) {
      continue;
    }
    queue = '';
    while (index < length) {
      character = value.charAt(index);
      if (character !== C_SPACE && character !== C_TAB) {
        break;
      }
      closing += character;
      exdentedClosing += character;
      index++;
    }
    if (!character || character === C_NEWLINE) {
      break;
    }
  }
  subvalue += content + closing;
  return eat(subvalue)({
    type: 'code',
    lang: flag || null,
    value: trim(exdentedContent)
  });
}

},

// node_modules/remark-parse/lib/tokenize/blockquote.js @249
249: function(__fusereq, exports, module){
'use strict';
var trim = __fusereq(301);
var interrupt = __fusereq(302);
module.exports = blockquote;
var C_NEWLINE = '\n';
var C_TAB = '\t';
var C_SPACE = ' ';
var C_GT = '>';
function blockquote(eat, value, silent) {
  var self = this;
  var offsets = self.offset;
  var tokenizers = self.blockTokenizers;
  var interruptors = self.interruptBlockquote;
  var now = eat.now();
  var currentLine = now.line;
  var length = value.length;
  var values = [];
  var contents = [];
  var indents = [];
  var add;
  var index = 0;
  var character;
  var rest;
  var nextIndex;
  var content;
  var line;
  var startIndex;
  var prefixed;
  var exit;
  while (index < length) {
    character = value.charAt(index);
    if (character !== C_SPACE && character !== C_TAB) {
      break;
    }
    index++;
  }
  if (value.charAt(index) !== C_GT) {
    return;
  }
  if (silent) {
    return true;
  }
  index = 0;
  while (index < length) {
    nextIndex = value.indexOf(C_NEWLINE, index);
    startIndex = index;
    prefixed = false;
    if (nextIndex === -1) {
      nextIndex = length;
    }
    while (index < length) {
      character = value.charAt(index);
      if (character !== C_SPACE && character !== C_TAB) {
        break;
      }
      index++;
    }
    if (value.charAt(index) === C_GT) {
      index++;
      prefixed = true;
      if (value.charAt(index) === C_SPACE) {
        index++;
      }
    } else {
      index = startIndex;
    }
    content = value.slice(index, nextIndex);
    if (!prefixed && !trim(content)) {
      index = startIndex;
      break;
    }
    if (!prefixed) {
      rest = value.slice(index);
      if (interrupt(interruptors, tokenizers, self, [eat, rest, true])) {
        break;
      }
    }
    line = startIndex === index ? content : value.slice(startIndex, nextIndex);
    indents.push(index - startIndex);
    values.push(line);
    contents.push(content);
    index = nextIndex + 1;
  }
  index = -1;
  length = indents.length;
  add = eat(values.join(C_NEWLINE));
  while (++index < length) {
    offsets[currentLine] = (offsets[currentLine] || 0) + indents[index];
    currentLine++;
  }
  exit = self.enterBlock();
  contents = self.tokenizeBlock(contents.join(C_NEWLINE), now);
  exit();
  return add({
    type: 'blockquote',
    children: contents
  });
}

},

// node_modules/remark-parse/lib/tokenize/heading-atx.js @250
250: function(__fusereq, exports, module){
'use strict';
module.exports = atxHeading;
var C_NEWLINE = '\n';
var C_TAB = '\t';
var C_SPACE = ' ';
var C_HASH = '#';
var MAX_ATX_COUNT = 6;
function atxHeading(eat, value, silent) {
  var self = this;
  var settings = self.options;
  var length = value.length + 1;
  var index = -1;
  var now = eat.now();
  var subvalue = '';
  var content = '';
  var character;
  var queue;
  var depth;
  while (++index < length) {
    character = value.charAt(index);
    if (character !== C_SPACE && character !== C_TAB) {
      index--;
      break;
    }
    subvalue += character;
  }
  depth = 0;
  while (++index <= length) {
    character = value.charAt(index);
    if (character !== C_HASH) {
      index--;
      break;
    }
    subvalue += character;
    depth++;
  }
  if (depth > MAX_ATX_COUNT) {
    return;
  }
  if (!depth || !settings.pedantic && value.charAt(index + 1) === C_HASH) {
    return;
  }
  length = value.length + 1;
  queue = '';
  while (++index < length) {
    character = value.charAt(index);
    if (character !== C_SPACE && character !== C_TAB) {
      index--;
      break;
    }
    queue += character;
  }
  if (!settings.pedantic && queue.length === 0 && character && character !== C_NEWLINE) {
    return;
  }
  if (silent) {
    return true;
  }
  subvalue += queue;
  queue = '';
  content = '';
  while (++index < length) {
    character = value.charAt(index);
    if (!character || character === C_NEWLINE) {
      break;
    }
    if (character !== C_SPACE && character !== C_TAB && character !== C_HASH) {
      content += queue + character;
      queue = '';
      continue;
    }
    while (character === C_SPACE || character === C_TAB) {
      queue += character;
      character = value.charAt(++index);
    }
    while (character === C_HASH) {
      queue += character;
      character = value.charAt(++index);
    }
    while (character === C_SPACE || character === C_TAB) {
      queue += character;
      character = value.charAt(++index);
    }
    index--;
  }
  now.column += subvalue.length;
  now.offset += subvalue.length;
  subvalue += content + queue;
  return eat(subvalue)({
    type: 'heading',
    depth: depth,
    children: self.tokenizeInline(content, now)
  });
}

},

// node_modules/remark-parse/lib/tokenize/thematic-break.js @251
251: function(__fusereq, exports, module){
'use strict';
module.exports = thematicBreak;
var C_NEWLINE = '\n';
var C_TAB = '\t';
var C_SPACE = ' ';
var C_ASTERISK = '*';
var C_UNDERSCORE = '_';
var C_DASH = '-';
var THEMATIC_BREAK_MARKER_COUNT = 3;
function thematicBreak(eat, value, silent) {
  var index = -1;
  var length = value.length + 1;
  var subvalue = '';
  var character;
  var marker;
  var markerCount;
  var queue;
  while (++index < length) {
    character = value.charAt(index);
    if (character !== C_TAB && character !== C_SPACE) {
      break;
    }
    subvalue += character;
  }
  if (character !== C_ASTERISK && character !== C_DASH && character !== C_UNDERSCORE) {
    return;
  }
  marker = character;
  subvalue += character;
  markerCount = 1;
  queue = '';
  while (++index < length) {
    character = value.charAt(index);
    if (character === marker) {
      markerCount++;
      subvalue += queue + marker;
      queue = '';
    } else if (character === C_SPACE) {
      queue += character;
    } else if (markerCount >= THEMATIC_BREAK_MARKER_COUNT && (!character || character === C_NEWLINE)) {
      subvalue += queue;
      if (silent) {
        return true;
      }
      return eat(subvalue)({
        type: 'thematicBreak'
      });
    } else {
      return;
    }
  }
}

},

// node_modules/remark-parse/lib/tokenize/list.js @252
252: function(__fusereq, exports, module){
'use strict';
var trim = __fusereq(301);
var repeat = __fusereq(303);
var decimal = __fusereq(306);
var getIndent = __fusereq(307);
var removeIndent = __fusereq(308);
var interrupt = __fusereq(302);
module.exports = list;
var C_ASTERISK = '*';
var C_UNDERSCORE = '_';
var C_PLUS = '+';
var C_DASH = '-';
var C_DOT = '.';
var C_SPACE = ' ';
var C_NEWLINE = '\n';
var C_TAB = '\t';
var C_PAREN_CLOSE = ')';
var C_X_LOWER = 'x';
var TAB_SIZE = 4;
var EXPRESSION_LOOSE_LIST_ITEM = /\n\n(?!\s*$)/;
var EXPRESSION_TASK_ITEM = /^\[([ \t]|x|X)][ \t]/;
var EXPRESSION_BULLET = /^([ \t]*)([*+-]|\d+[.)])( {1,4}(?! )| |\t|$|(?=\n))([^\n]*)/;
var EXPRESSION_PEDANTIC_BULLET = /^([ \t]*)([*+-]|\d+[.)])([ \t]+)/;
var EXPRESSION_INITIAL_INDENT = /^( {1,4}|\t)?/gm;
var LIST_UNORDERED_MARKERS = {};
LIST_UNORDERED_MARKERS[C_ASTERISK] = true;
LIST_UNORDERED_MARKERS[C_PLUS] = true;
LIST_UNORDERED_MARKERS[C_DASH] = true;
var LIST_ORDERED_MARKERS = {};
LIST_ORDERED_MARKERS[C_DOT] = true;
var LIST_ORDERED_COMMONMARK_MARKERS = {};
LIST_ORDERED_COMMONMARK_MARKERS[C_DOT] = true;
LIST_ORDERED_COMMONMARK_MARKERS[C_PAREN_CLOSE] = true;
function list(eat, value, silent) {
  var self = this;
  var commonmark = self.options.commonmark;
  var pedantic = self.options.pedantic;
  var tokenizers = self.blockTokenizers;
  var interuptors = self.interruptList;
  var markers;
  var index = 0;
  var length = value.length;
  var start = null;
  var size = 0;
  var queue;
  var ordered;
  var character;
  var marker;
  var nextIndex;
  var startIndex;
  var prefixed;
  var currentMarker;
  var content;
  var line;
  var prevEmpty;
  var empty;
  var items;
  var allLines;
  var emptyLines;
  var item;
  var enterTop;
  var exitBlockquote;
  var isLoose;
  var node;
  var now;
  var end;
  var indented;
  while (index < length) {
    character = value.charAt(index);
    if (character === C_TAB) {
      size += TAB_SIZE - size % TAB_SIZE;
    } else if (character === C_SPACE) {
      size++;
    } else {
      break;
    }
    index++;
  }
  if (size >= TAB_SIZE) {
    return;
  }
  character = value.charAt(index);
  markers = commonmark ? LIST_ORDERED_COMMONMARK_MARKERS : LIST_ORDERED_MARKERS;
  if (LIST_UNORDERED_MARKERS[character] === true) {
    marker = character;
    ordered = false;
  } else {
    ordered = true;
    queue = '';
    while (index < length) {
      character = value.charAt(index);
      if (!decimal(character)) {
        break;
      }
      queue += character;
      index++;
    }
    character = value.charAt(index);
    if (!queue || markers[character] !== true) {
      return;
    }
    start = parseInt(queue, 10);
    marker = character;
  }
  character = value.charAt(++index);
  if (character !== C_SPACE && character !== C_TAB) {
    return;
  }
  if (silent) {
    return true;
  }
  index = 0;
  items = [];
  allLines = [];
  emptyLines = [];
  while (index < length) {
    nextIndex = value.indexOf(C_NEWLINE, index);
    startIndex = index;
    prefixed = false;
    indented = false;
    if (nextIndex === -1) {
      nextIndex = length;
    }
    end = index + TAB_SIZE;
    size = 0;
    while (index < length) {
      character = value.charAt(index);
      if (character === C_TAB) {
        size += TAB_SIZE - size % TAB_SIZE;
      } else if (character === C_SPACE) {
        size++;
      } else {
        break;
      }
      index++;
    }
    if (size >= TAB_SIZE) {
      indented = true;
    }
    if (item && size >= item.indent) {
      indented = true;
    }
    character = value.charAt(index);
    currentMarker = null;
    if (!indented) {
      if (LIST_UNORDERED_MARKERS[character] === true) {
        currentMarker = character;
        index++;
        size++;
      } else {
        queue = '';
        while (index < length) {
          character = value.charAt(index);
          if (!decimal(character)) {
            break;
          }
          queue += character;
          index++;
        }
        character = value.charAt(index);
        index++;
        if (queue && markers[character] === true) {
          currentMarker = character;
          size += queue.length + 1;
        }
      }
      if (currentMarker) {
        character = value.charAt(index);
        if (character === C_TAB) {
          size += TAB_SIZE - size % TAB_SIZE;
          index++;
        } else if (character === C_SPACE) {
          end = index + TAB_SIZE;
          while (index < end) {
            if (value.charAt(index) !== C_SPACE) {
              break;
            }
            index++;
            size++;
          }
          if (index === end && value.charAt(index) === C_SPACE) {
            index -= TAB_SIZE - 1;
            size -= TAB_SIZE - 1;
          }
        } else if (character !== C_NEWLINE && character !== '') {
          currentMarker = null;
        }
      }
    }
    if (currentMarker) {
      if (!pedantic && marker !== currentMarker) {
        break;
      }
      prefixed = true;
    } else {
      if (!commonmark && !indented && value.charAt(startIndex) === C_SPACE) {
        indented = true;
      } else if (commonmark && item) {
        indented = size >= item.indent || size > TAB_SIZE;
      }
      prefixed = false;
      index = startIndex;
    }
    line = value.slice(startIndex, nextIndex);
    content = startIndex === index ? line : value.slice(index, nextIndex);
    if (currentMarker === C_ASTERISK || currentMarker === C_UNDERSCORE || currentMarker === C_DASH) {
      if (tokenizers.thematicBreak.call(self, eat, line, true)) {
        break;
      }
    }
    prevEmpty = empty;
    empty = !trim(content).length;
    if (indented && item) {
      item.value = item.value.concat(emptyLines, line);
      allLines = allLines.concat(emptyLines, line);
      emptyLines = [];
    } else if (prefixed) {
      if (emptyLines.length !== 0) {
        item.value.push('');
        item.trail = emptyLines.concat();
      }
      item = {
        value: [line],
        indent: size,
        trail: []
      };
      items.push(item);
      allLines = allLines.concat(emptyLines, line);
      emptyLines = [];
    } else if (empty) {
      if (prevEmpty) {
        break;
      }
      emptyLines.push(line);
    } else {
      if (prevEmpty) {
        break;
      }
      if (interrupt(interuptors, tokenizers, self, [eat, line, true])) {
        break;
      }
      item.value = item.value.concat(emptyLines, line);
      allLines = allLines.concat(emptyLines, line);
      emptyLines = [];
    }
    index = nextIndex + 1;
  }
  node = eat(allLines.join(C_NEWLINE)).reset({
    type: 'list',
    ordered: ordered,
    start: start,
    loose: null,
    children: []
  });
  enterTop = self.enterList();
  exitBlockquote = self.enterBlock();
  isLoose = false;
  index = -1;
  length = items.length;
  while (++index < length) {
    item = items[index].value.join(C_NEWLINE);
    now = eat.now();
    item = eat(item)(listItem(self, item, now), node);
    if (item.loose) {
      isLoose = true;
    }
    item = items[index].trail.join(C_NEWLINE);
    if (index !== length - 1) {
      item += C_NEWLINE;
    }
    eat(item);
  }
  enterTop();
  exitBlockquote();
  node.loose = isLoose;
  return node;
}
function listItem(ctx, value, position) {
  var offsets = ctx.offset;
  var fn = ctx.options.pedantic ? pedanticListItem : normalListItem;
  var checked = null;
  var task;
  var indent;
  value = fn.apply(null, arguments);
  if (ctx.options.gfm) {
    task = value.match(EXPRESSION_TASK_ITEM);
    if (task) {
      indent = task[0].length;
      checked = task[1].toLowerCase() === C_X_LOWER;
      offsets[position.line] += indent;
      value = value.slice(indent);
    }
  }
  return {
    type: 'listItem',
    loose: EXPRESSION_LOOSE_LIST_ITEM.test(value) || value.charAt(value.length - 1) === C_NEWLINE,
    checked: checked,
    children: ctx.tokenizeBlock(value, position)
  };
}
function pedanticListItem(ctx, value, position) {
  var offsets = ctx.offset;
  var line = position.line;
  value = value.replace(EXPRESSION_PEDANTIC_BULLET, replacer);
  line = position.line;
  return value.replace(EXPRESSION_INITIAL_INDENT, replacer);
  function replacer($0) {
    offsets[line] = (offsets[line] || 0) + $0.length;
    line++;
    return '';
  }
}
function normalListItem(ctx, value, position) {
  var offsets = ctx.offset;
  var line = position.line;
  var max;
  var bullet;
  var rest;
  var lines;
  var trimmedLines;
  var index;
  var length;
  value = value.replace(EXPRESSION_BULLET, replacer);
  lines = value.split(C_NEWLINE);
  trimmedLines = removeIndent(value, getIndent(max).indent).split(C_NEWLINE);
  trimmedLines[0] = rest;
  offsets[line] = (offsets[line] || 0) + bullet.length;
  line++;
  index = 0;
  length = lines.length;
  while (++index < length) {
    offsets[line] = (offsets[line] || 0) + lines[index].length - trimmedLines[index].length;
    line++;
  }
  return trimmedLines.join(C_NEWLINE);
  function replacer($0, $1, $2, $3, $4) {
    bullet = $1 + $2 + $3;
    rest = $4;
    if (Number($2) < 10 && bullet.length % 2 === 1) {
      $2 = C_SPACE + $2;
    }
    max = $1 + repeat(C_SPACE, $2.length) + $3;
    return max + rest;
  }
}

},

// node_modules/remark-parse/lib/tokenize/heading-setext.js @253
253: function(__fusereq, exports, module){
'use strict';
module.exports = setextHeading;
var C_NEWLINE = '\n';
var C_TAB = '\t';
var C_SPACE = ' ';
var C_EQUALS = '=';
var C_DASH = '-';
var MAX_HEADING_INDENT = 3;
var SETEXT_MARKERS = {};
SETEXT_MARKERS[C_EQUALS] = 1;
SETEXT_MARKERS[C_DASH] = 2;
function setextHeading(eat, value, silent) {
  var self = this;
  var now = eat.now();
  var length = value.length;
  var index = -1;
  var subvalue = '';
  var content;
  var queue;
  var character;
  var marker;
  var depth;
  while (++index < length) {
    character = value.charAt(index);
    if (character !== C_SPACE || index >= MAX_HEADING_INDENT) {
      index--;
      break;
    }
    subvalue += character;
  }
  content = '';
  queue = '';
  while (++index < length) {
    character = value.charAt(index);
    if (character === C_NEWLINE) {
      index--;
      break;
    }
    if (character === C_SPACE || character === C_TAB) {
      queue += character;
    } else {
      content += queue + character;
      queue = '';
    }
  }
  now.column += subvalue.length;
  now.offset += subvalue.length;
  subvalue += content + queue;
  character = value.charAt(++index);
  marker = value.charAt(++index);
  if (character !== C_NEWLINE || !SETEXT_MARKERS[marker]) {
    return;
  }
  subvalue += character;
  queue = marker;
  depth = SETEXT_MARKERS[marker];
  while (++index < length) {
    character = value.charAt(index);
    if (character !== marker) {
      if (character !== C_NEWLINE) {
        return;
      }
      index--;
      break;
    }
    queue += character;
  }
  if (silent) {
    return true;
  }
  return eat(subvalue + queue)({
    type: 'heading',
    depth: depth,
    children: self.tokenizeInline(content, now)
  });
}

},

// node_modules/remark-parse/lib/tokenize/html-block.js @254
254: function(__fusereq, exports, module){
'use strict';
var openCloseTag = __fusereq(309).openCloseTag;
module.exports = blockHTML;
var C_TAB = '\t';
var C_SPACE = ' ';
var C_NEWLINE = '\n';
var C_LT = '<';
function blockHTML(eat, value, silent) {
  var self = this;
  var blocks = self.options.blocks;
  var length = value.length;
  var index = 0;
  var next;
  var line;
  var offset;
  var character;
  var count;
  var sequence;
  var subvalue;
  var sequences = [[/^<(script|pre|style)(?=(\s|>|$))/i, /<\/(script|pre|style)>/i, true], [/^<!--/, /-->/, true], [/^<\?/, /\?>/, true], [/^<![A-Za-z]/, />/, true], [/^<!\[CDATA\[/, /\]\]>/, true], [new RegExp('^</?(' + blocks.join('|') + ')(?=(\\s|/?>|$))', 'i'), /^$/, true], [new RegExp(openCloseTag.source + '\\s*$'), /^$/, false]];
  while (index < length) {
    character = value.charAt(index);
    if (character !== C_TAB && character !== C_SPACE) {
      break;
    }
    index++;
  }
  if (value.charAt(index) !== C_LT) {
    return;
  }
  next = value.indexOf(C_NEWLINE, index + 1);
  next = next === -1 ? length : next;
  line = value.slice(index, next);
  offset = -1;
  count = sequences.length;
  while (++offset < count) {
    if (sequences[offset][0].test(line)) {
      sequence = sequences[offset];
      break;
    }
  }
  if (!sequence) {
    return;
  }
  if (silent) {
    return sequence[2];
  }
  index = next;
  if (!sequence[1].test(line)) {
    while (index < length) {
      next = value.indexOf(C_NEWLINE, index + 1);
      next = next === -1 ? length : next;
      line = value.slice(index + 1, next);
      if (sequence[1].test(line)) {
        if (line) {
          index = next;
        }
        break;
      }
      index = next;
    }
  }
  subvalue = value.slice(0, index);
  return eat(subvalue)({
    type: 'html',
    value: subvalue
  });
}

},

// node_modules/remark-parse/lib/tokenize/footnote-definition.js @255
255: function(__fusereq, exports, module){
'use strict';
var whitespace = __fusereq(300);
var normalize = __fusereq(310);
module.exports = footnoteDefinition;
footnoteDefinition.notInList = true;
footnoteDefinition.notInBlock = true;
var C_BACKSLASH = '\\';
var C_NEWLINE = '\n';
var C_TAB = '\t';
var C_SPACE = ' ';
var C_BRACKET_OPEN = '[';
var C_BRACKET_CLOSE = ']';
var C_CARET = '^';
var C_COLON = ':';
var EXPRESSION_INITIAL_TAB = /^( {4}|\t)?/gm;
function footnoteDefinition(eat, value, silent) {
  var self = this;
  var offsets = self.offset;
  var index;
  var length;
  var subvalue;
  var now;
  var currentLine;
  var content;
  var queue;
  var subqueue;
  var character;
  var identifier;
  var add;
  var exit;
  if (!self.options.footnotes) {
    return;
  }
  index = 0;
  length = value.length;
  subvalue = '';
  now = eat.now();
  currentLine = now.line;
  while (index < length) {
    character = value.charAt(index);
    if (!whitespace(character)) {
      break;
    }
    subvalue += character;
    index++;
  }
  if (value.charAt(index) !== C_BRACKET_OPEN || value.charAt(index + 1) !== C_CARET) {
    return;
  }
  subvalue += C_BRACKET_OPEN + C_CARET;
  index = subvalue.length;
  queue = '';
  while (index < length) {
    character = value.charAt(index);
    if (character === C_BRACKET_CLOSE) {
      break;
    } else if (character === C_BACKSLASH) {
      queue += character;
      index++;
      character = value.charAt(index);
    }
    queue += character;
    index++;
  }
  if (!queue || value.charAt(index) !== C_BRACKET_CLOSE || value.charAt(index + 1) !== C_COLON) {
    return;
  }
  if (silent) {
    return true;
  }
  identifier = normalize(queue);
  subvalue += queue + C_BRACKET_CLOSE + C_COLON;
  index = subvalue.length;
  while (index < length) {
    character = value.charAt(index);
    if (character !== C_TAB && character !== C_SPACE) {
      break;
    }
    subvalue += character;
    index++;
  }
  now.column += subvalue.length;
  now.offset += subvalue.length;
  queue = '';
  content = '';
  subqueue = '';
  while (index < length) {
    character = value.charAt(index);
    if (character === C_NEWLINE) {
      subqueue = character;
      index++;
      while (index < length) {
        character = value.charAt(index);
        if (character !== C_NEWLINE) {
          break;
        }
        subqueue += character;
        index++;
      }
      queue += subqueue;
      subqueue = '';
      while (index < length) {
        character = value.charAt(index);
        if (character !== C_SPACE) {
          break;
        }
        subqueue += character;
        index++;
      }
      if (subqueue.length === 0) {
        break;
      }
      queue += subqueue;
    }
    if (queue) {
      content += queue;
      queue = '';
    }
    content += character;
    index++;
  }
  subvalue += content;
  content = content.replace(EXPRESSION_INITIAL_TAB, function (line) {
    offsets[currentLine] = (offsets[currentLine] || 0) + line.length;
    currentLine++;
    return '';
  });
  add = eat(subvalue);
  exit = self.enterBlock();
  content = self.tokenizeBlock(content, now);
  exit();
  return add({
    type: 'footnoteDefinition',
    identifier: identifier,
    children: content
  });
}

},

// node_modules/remark-parse/lib/tokenize/definition.js @256
256: function(__fusereq, exports, module){
'use strict';
var whitespace = __fusereq(300);
var normalize = __fusereq(310);
module.exports = definition;
definition.notInList = true;
definition.notInBlock = true;
var C_DOUBLE_QUOTE = '"';
var C_SINGLE_QUOTE = '\'';
var C_BACKSLASH = '\\';
var C_NEWLINE = '\n';
var C_TAB = '\t';
var C_SPACE = ' ';
var C_BRACKET_OPEN = '[';
var C_BRACKET_CLOSE = ']';
var C_PAREN_OPEN = '(';
var C_PAREN_CLOSE = ')';
var C_COLON = ':';
var C_LT = '<';
var C_GT = '>';
function definition(eat, value, silent) {
  var self = this;
  var commonmark = self.options.commonmark;
  var index = 0;
  var length = value.length;
  var subvalue = '';
  var beforeURL;
  var beforeTitle;
  var queue;
  var character;
  var test;
  var identifier;
  var url;
  var title;
  while (index < length) {
    character = value.charAt(index);
    if (character !== C_SPACE && character !== C_TAB) {
      break;
    }
    subvalue += character;
    index++;
  }
  character = value.charAt(index);
  if (character !== C_BRACKET_OPEN) {
    return;
  }
  index++;
  subvalue += character;
  queue = '';
  while (index < length) {
    character = value.charAt(index);
    if (character === C_BRACKET_CLOSE) {
      break;
    } else if (character === C_BACKSLASH) {
      queue += character;
      index++;
      character = value.charAt(index);
    }
    queue += character;
    index++;
  }
  if (!queue || value.charAt(index) !== C_BRACKET_CLOSE || value.charAt(index + 1) !== C_COLON) {
    return;
  }
  identifier = queue;
  subvalue += queue + C_BRACKET_CLOSE + C_COLON;
  index = subvalue.length;
  queue = '';
  while (index < length) {
    character = value.charAt(index);
    if (character !== C_TAB && character !== C_SPACE && character !== C_NEWLINE) {
      break;
    }
    subvalue += character;
    index++;
  }
  character = value.charAt(index);
  queue = '';
  beforeURL = subvalue;
  if (character === C_LT) {
    index++;
    while (index < length) {
      character = value.charAt(index);
      if (!isEnclosedURLCharacter(character)) {
        break;
      }
      queue += character;
      index++;
    }
    character = value.charAt(index);
    if (character === isEnclosedURLCharacter.delimiter) {
      subvalue += C_LT + queue + character;
      index++;
    } else {
      if (commonmark) {
        return;
      }
      index -= queue.length + 1;
      queue = '';
    }
  }
  if (!queue) {
    while (index < length) {
      character = value.charAt(index);
      if (!isUnclosedURLCharacter(character)) {
        break;
      }
      queue += character;
      index++;
    }
    subvalue += queue;
  }
  if (!queue) {
    return;
  }
  url = queue;
  queue = '';
  while (index < length) {
    character = value.charAt(index);
    if (character !== C_TAB && character !== C_SPACE && character !== C_NEWLINE) {
      break;
    }
    queue += character;
    index++;
  }
  character = value.charAt(index);
  test = null;
  if (character === C_DOUBLE_QUOTE) {
    test = C_DOUBLE_QUOTE;
  } else if (character === C_SINGLE_QUOTE) {
    test = C_SINGLE_QUOTE;
  } else if (character === C_PAREN_OPEN) {
    test = C_PAREN_CLOSE;
  }
  if (!test) {
    queue = '';
    index = subvalue.length;
  } else if (queue) {
    subvalue += queue + character;
    index = subvalue.length;
    queue = '';
    while (index < length) {
      character = value.charAt(index);
      if (character === test) {
        break;
      }
      if (character === C_NEWLINE) {
        index++;
        character = value.charAt(index);
        if (character === C_NEWLINE || character === test) {
          return;
        }
        queue += C_NEWLINE;
      }
      queue += character;
      index++;
    }
    character = value.charAt(index);
    if (character !== test) {
      return;
    }
    beforeTitle = subvalue;
    subvalue += queue + character;
    index++;
    title = queue;
    queue = '';
  } else {
    return;
  }
  while (index < length) {
    character = value.charAt(index);
    if (character !== C_TAB && character !== C_SPACE) {
      break;
    }
    subvalue += character;
    index++;
  }
  character = value.charAt(index);
  if (!character || character === C_NEWLINE) {
    if (silent) {
      return true;
    }
    beforeURL = eat(beforeURL).test().end;
    url = self.decode.raw(self.unescape(url), beforeURL, {
      nonTerminated: false
    });
    if (title) {
      beforeTitle = eat(beforeTitle).test().end;
      title = self.decode.raw(self.unescape(title), beforeTitle);
    }
    return eat(subvalue)({
      type: 'definition',
      identifier: normalize(identifier),
      title: title || null,
      url: url
    });
  }
}
function isEnclosedURLCharacter(character) {
  return character !== C_GT && character !== C_BRACKET_OPEN && character !== C_BRACKET_CLOSE;
}
isEnclosedURLCharacter.delimiter = C_GT;
function isUnclosedURLCharacter(character) {
  return character !== C_BRACKET_OPEN && character !== C_BRACKET_CLOSE && !whitespace(character);
}

},

// node_modules/remark-parse/lib/tokenize/table.js @257
257: function(__fusereq, exports, module){
'use strict';
var whitespace = __fusereq(300);
module.exports = table;
var C_BACKSLASH = '\\';
var C_TICK = '`';
var C_DASH = '-';
var C_PIPE = '|';
var C_COLON = ':';
var C_SPACE = ' ';
var C_NEWLINE = '\n';
var C_TAB = '\t';
var MIN_TABLE_COLUMNS = 1;
var MIN_TABLE_ROWS = 2;
var TABLE_ALIGN_LEFT = 'left';
var TABLE_ALIGN_CENTER = 'center';
var TABLE_ALIGN_RIGHT = 'right';
var TABLE_ALIGN_NONE = null;
function table(eat, value, silent) {
  var self = this;
  var index;
  var alignments;
  var alignment;
  var subvalue;
  var row;
  var length;
  var lines;
  var queue;
  var character;
  var hasDash;
  var align;
  var cell;
  var preamble;
  var count;
  var opening;
  var now;
  var position;
  var lineCount;
  var line;
  var rows;
  var table;
  var lineIndex;
  var pipeIndex;
  var first;
  if (!self.options.gfm) {
    return;
  }
  index = 0;
  lineCount = 0;
  length = value.length + 1;
  lines = [];
  while (index < length) {
    lineIndex = value.indexOf(C_NEWLINE, index);
    pipeIndex = value.indexOf(C_PIPE, index + 1);
    if (lineIndex === -1) {
      lineIndex = value.length;
    }
    if (pipeIndex === -1 || pipeIndex > lineIndex) {
      if (lineCount < MIN_TABLE_ROWS) {
        return;
      }
      break;
    }
    lines.push(value.slice(index, lineIndex));
    lineCount++;
    index = lineIndex + 1;
  }
  subvalue = lines.join(C_NEWLINE);
  alignments = lines.splice(1, 1)[0] || [];
  index = 0;
  length = alignments.length;
  lineCount--;
  alignment = false;
  align = [];
  while (index < length) {
    character = alignments.charAt(index);
    if (character === C_PIPE) {
      hasDash = null;
      if (alignment === false) {
        if (first === false) {
          return;
        }
      } else {
        align.push(alignment);
        alignment = false;
      }
      first = false;
    } else if (character === C_DASH) {
      hasDash = true;
      alignment = alignment || TABLE_ALIGN_NONE;
    } else if (character === C_COLON) {
      if (alignment === TABLE_ALIGN_LEFT) {
        alignment = TABLE_ALIGN_CENTER;
      } else if (hasDash && alignment === TABLE_ALIGN_NONE) {
        alignment = TABLE_ALIGN_RIGHT;
      } else {
        alignment = TABLE_ALIGN_LEFT;
      }
    } else if (!whitespace(character)) {
      return;
    }
    index++;
  }
  if (alignment !== false) {
    align.push(alignment);
  }
  if (align.length < MIN_TABLE_COLUMNS) {
    return;
  }
  if (silent) {
    return true;
  }
  position = -1;
  rows = [];
  table = eat(subvalue).reset({
    type: 'table',
    align: align,
    children: rows
  });
  while (++position < lineCount) {
    line = lines[position];
    row = {
      type: 'tableRow',
      children: []
    };
    if (position) {
      eat(C_NEWLINE);
    }
    eat(line).reset(row, table);
    length = line.length + 1;
    index = 0;
    queue = '';
    cell = '';
    preamble = true;
    count = null;
    opening = null;
    while (index < length) {
      character = line.charAt(index);
      if (character === C_TAB || character === C_SPACE) {
        if (cell) {
          queue += character;
        } else {
          eat(character);
        }
        index++;
        continue;
      }
      if (character === '' || character === C_PIPE) {
        if (preamble) {
          eat(character);
        } else {
          if (character && opening) {
            queue += character;
            index++;
            continue;
          }
          if ((cell || character) && !preamble) {
            subvalue = cell;
            if (queue.length > 1) {
              if (character) {
                subvalue += queue.slice(0, queue.length - 1);
                queue = queue.charAt(queue.length - 1);
              } else {
                subvalue += queue;
                queue = '';
              }
            }
            now = eat.now();
            eat(subvalue)({
              type: 'tableCell',
              children: self.tokenizeInline(cell, now)
            }, row);
          }
          eat(queue + character);
          queue = '';
          cell = '';
        }
      } else {
        if (queue) {
          cell += queue;
          queue = '';
        }
        cell += character;
        if (character === C_BACKSLASH && index !== length - 2) {
          cell += line.charAt(index + 1);
          index++;
        }
        if (character === C_TICK) {
          count = 1;
          while (line.charAt(index + 1) === character) {
            cell += character;
            index++;
            count++;
          }
          if (!opening) {
            opening = count;
          } else if (count >= opening) {
            opening = 0;
          }
        }
      }
      preamble = false;
      index++;
    }
    if (!position) {
      eat(C_NEWLINE + alignments);
    }
  }
  return table;
}

},

// node_modules/remark-parse/lib/tokenize/paragraph.js @258
258: function(__fusereq, exports, module){
'use strict';
var trim = __fusereq(301);
var decimal = __fusereq(306);
var trimTrailingLines = __fusereq(304);
var interrupt = __fusereq(302);
module.exports = paragraph;
var C_NEWLINE = '\n';
var C_TAB = '\t';
var C_SPACE = ' ';
var TAB_SIZE = 4;
function paragraph(eat, value, silent) {
  var self = this;
  var settings = self.options;
  var commonmark = settings.commonmark;
  var gfm = settings.gfm;
  var tokenizers = self.blockTokenizers;
  var interruptors = self.interruptParagraph;
  var index = value.indexOf(C_NEWLINE);
  var length = value.length;
  var position;
  var subvalue;
  var character;
  var size;
  var now;
  while (index < length) {
    if (index === -1) {
      index = length;
      break;
    }
    if (value.charAt(index + 1) === C_NEWLINE) {
      break;
    }
    if (commonmark) {
      size = 0;
      position = index + 1;
      while (position < length) {
        character = value.charAt(position);
        if (character === C_TAB) {
          size = TAB_SIZE;
          break;
        } else if (character === C_SPACE) {
          size++;
        } else {
          break;
        }
        position++;
      }
      if (size >= TAB_SIZE) {
        index = value.indexOf(C_NEWLINE, index + 1);
        continue;
      }
    }
    subvalue = value.slice(index + 1);
    if (interrupt(interruptors, tokenizers, self, [eat, subvalue, true])) {
      break;
    }
    if (tokenizers.list.call(self, eat, subvalue, true) && (self.inList || commonmark || gfm && !decimal(trim.left(subvalue).charAt(0)))) {
      break;
    }
    position = index;
    index = value.indexOf(C_NEWLINE, index + 1);
    if (index !== -1 && trim(value.slice(position, index)) === '') {
      index = position;
      break;
    }
  }
  subvalue = value.slice(0, index);
  if (trim(subvalue) === '') {
    eat(subvalue);
    return null;
  }
  if (silent) {
    return true;
  }
  now = eat.now();
  subvalue = trimTrailingLines(subvalue);
  return eat(subvalue)({
    type: 'paragraph',
    children: self.tokenizeInline(subvalue, now)
  });
}

},

// node_modules/remark-parse/lib/tokenize/escape.js @259
259: function(__fusereq, exports, module){
'use strict';
var locate = __fusereq(311);
module.exports = escape;
escape.locator = locate;
function escape(eat, value, silent) {
  var self = this;
  var character;
  var node;
  if (value.charAt(0) === '\\') {
    character = value.charAt(1);
    if (self.escape.indexOf(character) !== -1) {
      if (silent) {
        return true;
      }
      if (character === '\n') {
        node = {
          type: 'break'
        };
      } else {
        node = {
          type: 'text',
          value: character
        };
      }
      return eat('\\' + character)(node);
    }
  }
}

},

// node_modules/remark-parse/lib/tokenize/auto-link.js @260
260: function(__fusereq, exports, module){
'use strict';
var whitespace = __fusereq(300);
var decode = __fusereq(298);
var locate = __fusereq(312);
module.exports = autoLink;
autoLink.locator = locate;
autoLink.notInLink = true;
var C_LT = '<';
var C_GT = '>';
var C_AT_SIGN = '@';
var C_SLASH = '/';
var MAILTO = 'mailto:';
var MAILTO_LENGTH = MAILTO.length;
function autoLink(eat, value, silent) {
  var self;
  var subvalue;
  var length;
  var index;
  var queue;
  var character;
  var hasAtCharacter;
  var link;
  var now;
  var content;
  var tokenizers;
  var exit;
  if (value.charAt(0) !== C_LT) {
    return;
  }
  self = this;
  subvalue = '';
  length = value.length;
  index = 0;
  queue = '';
  hasAtCharacter = false;
  link = '';
  index++;
  subvalue = C_LT;
  while (index < length) {
    character = value.charAt(index);
    if (whitespace(character) || character === C_GT || character === C_AT_SIGN || character === ':' && value.charAt(index + 1) === C_SLASH) {
      break;
    }
    queue += character;
    index++;
  }
  if (!queue) {
    return;
  }
  link += queue;
  queue = '';
  character = value.charAt(index);
  link += character;
  index++;
  if (character === C_AT_SIGN) {
    hasAtCharacter = true;
  } else {
    if (character !== ':' || value.charAt(index + 1) !== C_SLASH) {
      return;
    }
    link += C_SLASH;
    index++;
  }
  while (index < length) {
    character = value.charAt(index);
    if (whitespace(character) || character === C_GT) {
      break;
    }
    queue += character;
    index++;
  }
  character = value.charAt(index);
  if (!queue || character !== C_GT) {
    return;
  }
  if (silent) {
    return true;
  }
  link += queue;
  content = link;
  subvalue += link + character;
  now = eat.now();
  now.column++;
  now.offset++;
  if (hasAtCharacter) {
    if (link.slice(0, MAILTO_LENGTH).toLowerCase() === MAILTO) {
      content = content.substr(MAILTO_LENGTH);
      now.column += MAILTO_LENGTH;
      now.offset += MAILTO_LENGTH;
    } else {
      link = MAILTO + link;
    }
  }
  tokenizers = self.inlineTokenizers;
  self.inlineTokenizers = {
    text: tokenizers.text
  };
  exit = self.enterLink();
  content = self.tokenizeInline(content, now);
  self.inlineTokenizers = tokenizers;
  exit();
  return eat(subvalue)({
    type: 'link',
    title: null,
    url: decode(link, {
      nonTerminated: false
    }),
    children: content
  });
}

},

// node_modules/remark-parse/lib/tokenize/url.js @261
261: function(__fusereq, exports, module){
'use strict';
var decode = __fusereq(298);
var whitespace = __fusereq(300);
var locate = __fusereq(313);
module.exports = url;
url.locator = locate;
url.notInLink = true;
var C_BRACKET_OPEN = '[';
var C_BRACKET_CLOSE = ']';
var C_PAREN_OPEN = '(';
var C_PAREN_CLOSE = ')';
var C_LT = '<';
var C_AT_SIGN = '@';
var HTTP_PROTOCOL = 'http://';
var HTTPS_PROTOCOL = 'https://';
var MAILTO_PROTOCOL = 'mailto:';
var PROTOCOLS = [HTTP_PROTOCOL, HTTPS_PROTOCOL, MAILTO_PROTOCOL];
var PROTOCOLS_LENGTH = PROTOCOLS.length;
function url(eat, value, silent) {
  var self = this;
  var subvalue;
  var content;
  var character;
  var index;
  var position;
  var protocol;
  var match;
  var length;
  var queue;
  var parenCount;
  var nextCharacter;
  var exit;
  if (!self.options.gfm) {
    return;
  }
  subvalue = '';
  index = -1;
  length = PROTOCOLS_LENGTH;
  while (++index < length) {
    protocol = PROTOCOLS[index];
    match = value.slice(0, protocol.length);
    if (match.toLowerCase() === protocol) {
      subvalue = match;
      break;
    }
  }
  if (!subvalue) {
    return;
  }
  index = subvalue.length;
  length = value.length;
  queue = '';
  parenCount = 0;
  while (index < length) {
    character = value.charAt(index);
    if (whitespace(character) || character === C_LT) {
      break;
    }
    if (character === '.' || character === ',' || character === ':' || character === ';' || character === '"' || character === '\'' || character === ')' || character === ']') {
      nextCharacter = value.charAt(index + 1);
      if (!nextCharacter || whitespace(nextCharacter)) {
        break;
      }
    }
    if (character === C_PAREN_OPEN || character === C_BRACKET_OPEN) {
      parenCount++;
    }
    if (character === C_PAREN_CLOSE || character === C_BRACKET_CLOSE) {
      parenCount--;
      if (parenCount < 0) {
        break;
      }
    }
    queue += character;
    index++;
  }
  if (!queue) {
    return;
  }
  subvalue += queue;
  content = subvalue;
  if (protocol === MAILTO_PROTOCOL) {
    position = queue.indexOf(C_AT_SIGN);
    if (position === -1 || position === length - 1) {
      return;
    }
    content = content.substr(MAILTO_PROTOCOL.length);
  }
  if (silent) {
    return true;
  }
  exit = self.enterLink();
  content = self.tokenizeInline(content, eat.now());
  exit();
  return eat(subvalue)({
    type: 'link',
    title: null,
    url: decode(subvalue, {
      nonTerminated: false
    }),
    children: content
  });
}

},

// node_modules/remark-parse/lib/tokenize/html-inline.js @262
262: function(__fusereq, exports, module){
'use strict';
var alphabetical = __fusereq(314);
var locate = __fusereq(312);
var tag = __fusereq(309).tag;
module.exports = inlineHTML;
inlineHTML.locator = locate;
var EXPRESSION_HTML_LINK_OPEN = /^<a /i;
var EXPRESSION_HTML_LINK_CLOSE = /^<\/a>/i;
function inlineHTML(eat, value, silent) {
  var self = this;
  var length = value.length;
  var character;
  var subvalue;
  if (value.charAt(0) !== '<' || length < 3) {
    return;
  }
  character = value.charAt(1);
  if (!alphabetical(character) && character !== '?' && character !== '!' && character !== '/') {
    return;
  }
  subvalue = value.match(tag);
  if (!subvalue) {
    return;
  }
  if (silent) {
    return true;
  }
  subvalue = subvalue[0];
  if (!self.inLink && EXPRESSION_HTML_LINK_OPEN.test(subvalue)) {
    self.inLink = true;
  } else if (self.inLink && EXPRESSION_HTML_LINK_CLOSE.test(subvalue)) {
    self.inLink = false;
  }
  return eat(subvalue)({
    type: 'html',
    value: subvalue
  });
}

},

// node_modules/remark-parse/lib/tokenize/link.js @263
263: function(__fusereq, exports, module){
'use strict';
var whitespace = __fusereq(300);
var locate = __fusereq(315);
module.exports = link;
link.locator = locate;
var own = ({}).hasOwnProperty;
var C_BACKSLASH = '\\';
var C_BRACKET_OPEN = '[';
var C_BRACKET_CLOSE = ']';
var C_PAREN_OPEN = '(';
var C_PAREN_CLOSE = ')';
var C_LT = '<';
var C_GT = '>';
var C_TICK = '`';
var C_DOUBLE_QUOTE = '"';
var C_SINGLE_QUOTE = '\'';
var LINK_MARKERS = {};
LINK_MARKERS[C_DOUBLE_QUOTE] = C_DOUBLE_QUOTE;
LINK_MARKERS[C_SINGLE_QUOTE] = C_SINGLE_QUOTE;
var COMMONMARK_LINK_MARKERS = {};
COMMONMARK_LINK_MARKERS[C_DOUBLE_QUOTE] = C_DOUBLE_QUOTE;
COMMONMARK_LINK_MARKERS[C_SINGLE_QUOTE] = C_SINGLE_QUOTE;
COMMONMARK_LINK_MARKERS[C_PAREN_OPEN] = C_PAREN_CLOSE;
function link(eat, value, silent) {
  var self = this;
  var subvalue = '';
  var index = 0;
  var character = value.charAt(0);
  var pedantic = self.options.pedantic;
  var commonmark = self.options.commonmark;
  var gfm = self.options.gfm;
  var closed;
  var count;
  var opening;
  var beforeURL;
  var beforeTitle;
  var subqueue;
  var hasMarker;
  var markers;
  var isImage;
  var content;
  var marker;
  var length;
  var title;
  var depth;
  var queue;
  var url;
  var now;
  var exit;
  var node;
  if (character === '!') {
    isImage = true;
    subvalue = character;
    character = value.charAt(++index);
  }
  if (character !== C_BRACKET_OPEN) {
    return;
  }
  if (!isImage && self.inLink) {
    return;
  }
  subvalue += character;
  queue = '';
  index++;
  length = value.length;
  now = eat.now();
  depth = 0;
  now.column += index;
  now.offset += index;
  while (index < length) {
    character = value.charAt(index);
    subqueue = character;
    if (character === C_TICK) {
      count = 1;
      while (value.charAt(index + 1) === C_TICK) {
        subqueue += character;
        index++;
        count++;
      }
      if (!opening) {
        opening = count;
      } else if (count >= opening) {
        opening = 0;
      }
    } else if (character === C_BACKSLASH) {
      index++;
      subqueue += value.charAt(index);
    } else if ((!opening || gfm) && character === C_BRACKET_OPEN) {
      depth++;
    } else if ((!opening || gfm) && character === C_BRACKET_CLOSE) {
      if (depth) {
        depth--;
      } else {
        if (!pedantic) {
          while (index < length) {
            character = value.charAt(index + 1);
            if (!whitespace(character)) {
              break;
            }
            subqueue += character;
            index++;
          }
        }
        if (value.charAt(index + 1) !== C_PAREN_OPEN) {
          return;
        }
        subqueue += C_PAREN_OPEN;
        closed = true;
        index++;
        break;
      }
    }
    queue += subqueue;
    subqueue = '';
    index++;
  }
  if (!closed) {
    return;
  }
  content = queue;
  subvalue += queue + subqueue;
  index++;
  while (index < length) {
    character = value.charAt(index);
    if (!whitespace(character)) {
      break;
    }
    subvalue += character;
    index++;
  }
  character = value.charAt(index);
  markers = commonmark ? COMMONMARK_LINK_MARKERS : LINK_MARKERS;
  queue = '';
  beforeURL = subvalue;
  if (character === C_LT) {
    index++;
    beforeURL += C_LT;
    while (index < length) {
      character = value.charAt(index);
      if (character === C_GT) {
        break;
      }
      if (commonmark && character === '\n') {
        return;
      }
      queue += character;
      index++;
    }
    if (value.charAt(index) !== C_GT) {
      return;
    }
    subvalue += C_LT + queue + C_GT;
    url = queue;
    index++;
  } else {
    character = null;
    subqueue = '';
    while (index < length) {
      character = value.charAt(index);
      if (subqueue && own.call(markers, character)) {
        break;
      }
      if (whitespace(character)) {
        if (!pedantic) {
          break;
        }
        subqueue += character;
      } else {
        if (character === C_PAREN_OPEN) {
          depth++;
        } else if (character === C_PAREN_CLOSE) {
          if (depth === 0) {
            break;
          }
          depth--;
        }
        queue += subqueue;
        subqueue = '';
        if (character === C_BACKSLASH) {
          queue += C_BACKSLASH;
          character = value.charAt(++index);
        }
        queue += character;
      }
      index++;
    }
    subvalue += queue;
    url = queue;
    index = subvalue.length;
  }
  queue = '';
  while (index < length) {
    character = value.charAt(index);
    if (!whitespace(character)) {
      break;
    }
    queue += character;
    index++;
  }
  character = value.charAt(index);
  subvalue += queue;
  if (queue && own.call(markers, character)) {
    index++;
    subvalue += character;
    queue = '';
    marker = markers[character];
    beforeTitle = subvalue;
    if (commonmark) {
      while (index < length) {
        character = value.charAt(index);
        if (character === marker) {
          break;
        }
        if (character === C_BACKSLASH) {
          queue += C_BACKSLASH;
          character = value.charAt(++index);
        }
        index++;
        queue += character;
      }
      character = value.charAt(index);
      if (character !== marker) {
        return;
      }
      title = queue;
      subvalue += queue + character;
      index++;
      while (index < length) {
        character = value.charAt(index);
        if (!whitespace(character)) {
          break;
        }
        subvalue += character;
        index++;
      }
    } else {
      subqueue = '';
      while (index < length) {
        character = value.charAt(index);
        if (character === marker) {
          if (hasMarker) {
            queue += marker + subqueue;
            subqueue = '';
          }
          hasMarker = true;
        } else if (!hasMarker) {
          queue += character;
        } else if (character === C_PAREN_CLOSE) {
          subvalue += queue + marker + subqueue;
          title = queue;
          break;
        } else if (whitespace(character)) {
          subqueue += character;
        } else {
          queue += marker + subqueue + character;
          subqueue = '';
          hasMarker = false;
        }
        index++;
      }
    }
  }
  if (value.charAt(index) !== C_PAREN_CLOSE) {
    return;
  }
  if (silent) {
    return true;
  }
  subvalue += C_PAREN_CLOSE;
  url = self.decode.raw(self.unescape(url), eat(beforeURL).test().end, {
    nonTerminated: false
  });
  if (title) {
    beforeTitle = eat(beforeTitle).test().end;
    title = self.decode.raw(self.unescape(title), beforeTitle);
  }
  node = {
    type: isImage ? 'image' : 'link',
    title: title || null,
    url: url
  };
  if (isImage) {
    node.alt = self.decode.raw(self.unescape(content), now) || null;
  } else {
    exit = self.enterLink();
    node.children = self.tokenizeInline(content, now);
    exit();
  }
  return eat(subvalue)(node);
}

},

// node_modules/remark-parse/lib/tokenize/reference.js @264
264: function(__fusereq, exports, module){
'use strict';
var whitespace = __fusereq(300);
var locate = __fusereq(315);
var normalize = __fusereq(310);
module.exports = reference;
reference.locator = locate;
var T_LINK = 'link';
var T_IMAGE = 'image';
var T_FOOTNOTE = 'footnote';
var REFERENCE_TYPE_SHORTCUT = 'shortcut';
var REFERENCE_TYPE_COLLAPSED = 'collapsed';
var REFERENCE_TYPE_FULL = 'full';
var C_CARET = '^';
var C_BACKSLASH = '\\';
var C_BRACKET_OPEN = '[';
var C_BRACKET_CLOSE = ']';
function reference(eat, value, silent) {
  var self = this;
  var character = value.charAt(0);
  var index = 0;
  var length = value.length;
  var subvalue = '';
  var intro = '';
  var type = T_LINK;
  var referenceType = REFERENCE_TYPE_SHORTCUT;
  var content;
  var identifier;
  var now;
  var node;
  var exit;
  var queue;
  var bracketed;
  var depth;
  if (character === '!') {
    type = T_IMAGE;
    intro = character;
    character = value.charAt(++index);
  }
  if (character !== C_BRACKET_OPEN) {
    return;
  }
  index++;
  intro += character;
  queue = '';
  if (self.options.footnotes && value.charAt(index) === C_CARET) {
    if (type === T_IMAGE) {
      return;
    }
    intro += C_CARET;
    index++;
    type = T_FOOTNOTE;
  }
  depth = 0;
  while (index < length) {
    character = value.charAt(index);
    if (character === C_BRACKET_OPEN) {
      bracketed = true;
      depth++;
    } else if (character === C_BRACKET_CLOSE) {
      if (!depth) {
        break;
      }
      depth--;
    }
    if (character === C_BACKSLASH) {
      queue += C_BACKSLASH;
      character = value.charAt(++index);
    }
    queue += character;
    index++;
  }
  subvalue = queue;
  content = queue;
  character = value.charAt(index);
  if (character !== C_BRACKET_CLOSE) {
    return;
  }
  index++;
  subvalue += character;
  queue = '';
  while (index < length) {
    character = value.charAt(index);
    if (!whitespace(character)) {
      break;
    }
    queue += character;
    index++;
  }
  character = value.charAt(index);
  if (type !== T_FOOTNOTE && character === C_BRACKET_OPEN) {
    identifier = '';
    queue += character;
    index++;
    while (index < length) {
      character = value.charAt(index);
      if (character === C_BRACKET_OPEN || character === C_BRACKET_CLOSE) {
        break;
      }
      if (character === C_BACKSLASH) {
        identifier += C_BACKSLASH;
        character = value.charAt(++index);
      }
      identifier += character;
      index++;
    }
    character = value.charAt(index);
    if (character === C_BRACKET_CLOSE) {
      referenceType = identifier ? REFERENCE_TYPE_FULL : REFERENCE_TYPE_COLLAPSED;
      queue += identifier + character;
      index++;
    } else {
      identifier = '';
    }
    subvalue += queue;
    queue = '';
  } else {
    if (!content) {
      return;
    }
    identifier = content;
  }
  if (referenceType !== REFERENCE_TYPE_FULL && bracketed) {
    return;
  }
  subvalue = intro + subvalue;
  if (type === T_LINK && self.inLink) {
    return null;
  }
  if (silent) {
    return true;
  }
  if (type === T_FOOTNOTE && content.indexOf(' ') !== -1) {
    return eat(subvalue)({
      type: 'footnote',
      children: this.tokenizeInline(content, eat.now())
    });
  }
  now = eat.now();
  now.column += intro.length;
  now.offset += intro.length;
  identifier = referenceType === REFERENCE_TYPE_FULL ? identifier : content;
  node = {
    type: type + 'Reference',
    identifier: normalize(identifier)
  };
  if (type === T_LINK || type === T_IMAGE) {
    node.referenceType = referenceType;
  }
  if (type === T_LINK) {
    exit = self.enterLink();
    node.children = self.tokenizeInline(content, now);
    exit();
  } else if (type === T_IMAGE) {
    node.alt = self.decode.raw(self.unescape(content), now) || null;
  }
  return eat(subvalue)(node);
}

},

// node_modules/remark-parse/lib/tokenize/strong.js @265
265: function(__fusereq, exports, module){
'use strict';
var trim = __fusereq(301);
var whitespace = __fusereq(300);
var locate = __fusereq(316);
module.exports = strong;
strong.locator = locate;
var C_ASTERISK = '*';
var C_UNDERSCORE = '_';
function strong(eat, value, silent) {
  var self = this;
  var index = 0;
  var character = value.charAt(index);
  var now;
  var pedantic;
  var marker;
  var queue;
  var subvalue;
  var length;
  var prev;
  if (character !== C_ASTERISK && character !== C_UNDERSCORE || value.charAt(++index) !== character) {
    return;
  }
  pedantic = self.options.pedantic;
  marker = character;
  subvalue = marker + marker;
  length = value.length;
  index++;
  queue = '';
  character = '';
  if (pedantic && whitespace(value.charAt(index))) {
    return;
  }
  while (index < length) {
    prev = character;
    character = value.charAt(index);
    if (character === marker && value.charAt(index + 1) === marker && (!pedantic || !whitespace(prev))) {
      character = value.charAt(index + 2);
      if (character !== marker) {
        if (!trim(queue)) {
          return;
        }
        if (silent) {
          return true;
        }
        now = eat.now();
        now.column += 2;
        now.offset += 2;
        return eat(subvalue + queue + subvalue)({
          type: 'strong',
          children: self.tokenizeInline(queue, now)
        });
      }
    }
    if (!pedantic && character === '\\') {
      queue += character;
      character = value.charAt(++index);
    }
    queue += character;
    index++;
  }
}

},

// node_modules/remark-parse/lib/tokenize/emphasis.js @266
266: function(__fusereq, exports, module){
'use strict';
var trim = __fusereq(301);
var word = __fusereq(318);
var whitespace = __fusereq(300);
var locate = __fusereq(319);
module.exports = emphasis;
emphasis.locator = locate;
var C_ASTERISK = '*';
var C_UNDERSCORE = '_';
function emphasis(eat, value, silent) {
  var self = this;
  var index = 0;
  var character = value.charAt(index);
  var now;
  var pedantic;
  var marker;
  var queue;
  var subvalue;
  var length;
  var prev;
  if (character !== C_ASTERISK && character !== C_UNDERSCORE) {
    return;
  }
  pedantic = self.options.pedantic;
  subvalue = character;
  marker = character;
  length = value.length;
  index++;
  queue = '';
  character = '';
  if (pedantic && whitespace(value.charAt(index))) {
    return;
  }
  while (index < length) {
    prev = character;
    character = value.charAt(index);
    if (character === marker && (!pedantic || !whitespace(prev))) {
      character = value.charAt(++index);
      if (character !== marker) {
        if (!trim(queue) || prev === marker) {
          return;
        }
        if (!pedantic && marker === C_UNDERSCORE && word(character)) {
          queue += marker;
          continue;
        }
        if (silent) {
          return true;
        }
        now = eat.now();
        now.column++;
        now.offset++;
        return eat(subvalue + queue + marker)({
          type: 'emphasis',
          children: self.tokenizeInline(queue, now)
        });
      }
      queue += marker;
    }
    if (!pedantic && character === '\\') {
      queue += character;
      character = value.charAt(++index);
    }
    queue += character;
    index++;
  }
}

},

// node_modules/remark-parse/lib/tokenize/delete.js @267
267: function(__fusereq, exports, module){
'use strict';
var whitespace = __fusereq(300);
var locate = __fusereq(317);
module.exports = strikethrough;
strikethrough.locator = locate;
var C_TILDE = '~';
var DOUBLE = '~~';
function strikethrough(eat, value, silent) {
  var self = this;
  var character = '';
  var previous = '';
  var preceding = '';
  var subvalue = '';
  var index;
  var length;
  var now;
  if (!self.options.gfm || value.charAt(0) !== C_TILDE || value.charAt(1) !== C_TILDE || whitespace(value.charAt(2))) {
    return;
  }
  index = 1;
  length = value.length;
  now = eat.now();
  now.column += 2;
  now.offset += 2;
  while (++index < length) {
    character = value.charAt(index);
    if (character === C_TILDE && previous === C_TILDE && (!preceding || !whitespace(preceding))) {
      if (silent) {
        return true;
      }
      return eat(DOUBLE + subvalue + DOUBLE)({
        type: 'delete',
        children: self.tokenizeInline(subvalue, now)
      });
    }
    subvalue += previous;
    preceding = previous;
    previous = character;
  }
}

},

// node_modules/remark-parse/lib/tokenize/code-inline.js @268
268: function(__fusereq, exports, module){
'use strict';
var whitespace = __fusereq(300);
var locate = __fusereq(321);
module.exports = inlineCode;
inlineCode.locator = locate;
var C_TICK = '`';
function inlineCode(eat, value, silent) {
  var length = value.length;
  var index = 0;
  var queue = '';
  var tickQueue = '';
  var contentQueue;
  var subqueue;
  var count;
  var openingCount;
  var subvalue;
  var character;
  var found;
  var next;
  while (index < length) {
    if (value.charAt(index) !== C_TICK) {
      break;
    }
    queue += C_TICK;
    index++;
  }
  if (!queue) {
    return;
  }
  subvalue = queue;
  openingCount = index;
  queue = '';
  next = value.charAt(index);
  count = 0;
  while (index < length) {
    character = next;
    next = value.charAt(index + 1);
    if (character === C_TICK) {
      count++;
      tickQueue += character;
    } else {
      count = 0;
      queue += character;
    }
    if (count && next !== C_TICK) {
      if (count === openingCount) {
        subvalue += queue + tickQueue;
        found = true;
        break;
      }
      queue += tickQueue;
      tickQueue = '';
    }
    index++;
  }
  if (!found) {
    if (openingCount % 2 !== 0) {
      return;
    }
    queue = '';
  }
  if (silent) {
    return true;
  }
  contentQueue = '';
  subqueue = '';
  length = queue.length;
  index = -1;
  while (++index < length) {
    character = queue.charAt(index);
    if (whitespace(character)) {
      subqueue += character;
      continue;
    }
    if (subqueue) {
      if (contentQueue) {
        contentQueue += subqueue;
      }
      subqueue = '';
    }
    contentQueue += character;
  }
  return eat(subvalue)({
    type: 'inlineCode',
    value: contentQueue
  });
}

},

// node_modules/remark-parse/lib/tokenize/break.js @269
269: function(__fusereq, exports, module){
'use strict';
var locate = __fusereq(320);
module.exports = hardBreak;
hardBreak.locator = locate;
var MIN_BREAK_LENGTH = 2;
function hardBreak(eat, value, silent) {
  var length = value.length;
  var index = -1;
  var queue = '';
  var character;
  while (++index < length) {
    character = value.charAt(index);
    if (character === '\n') {
      if (index < MIN_BREAK_LENGTH) {
        return;
      }
      if (silent) {
        return true;
      }
      queue += character;
      return eat(queue)({
        type: 'break'
      });
    }
    if (character !== ' ') {
      return;
    }
    queue += character;
  }
}

},

// node_modules/remark-parse/lib/tokenize/text.js @270
270: function(__fusereq, exports, module){
'use strict';
module.exports = text;
function text(eat, value, silent) {
  var self = this;
  var methods;
  var tokenizers;
  var index;
  var length;
  var subvalue;
  var position;
  var tokenizer;
  var name;
  var min;
  var now;
  if (silent) {
    return true;
  }
  methods = self.inlineMethods;
  length = methods.length;
  tokenizers = self.inlineTokenizers;
  index = -1;
  min = value.length;
  while (++index < length) {
    name = methods[index];
    if (name === 'text' || !tokenizers[name]) {
      continue;
    }
    tokenizer = tokenizers[name].locator;
    if (!tokenizer) {
      eat.file.fail('Missing locator: `' + name + '`');
    }
    position = tokenizer.call(self, value, 1);
    if (position !== -1 && position < min) {
      min = position;
    }
  }
  subvalue = value.slice(0, min);
  now = eat.now();
  self.decode(subvalue, now, function (content, position, source) {
    eat(source || content)({
      type: 'text',
      value: content
    });
  });
}

},

// node_modules/remark-parse/lib/util/interrupt.js @302
302: function(__fusereq, exports, module){
'use strict';
module.exports = interrupt;
function interrupt(interruptors, tokenizers, ctx, params) {
  var bools = ['pedantic', 'commonmark'];
  var count = bools.length;
  var length = interruptors.length;
  var index = -1;
  var interruptor;
  var config;
  var fn;
  var offset;
  var bool;
  var ignore;
  while (++index < length) {
    interruptor = interruptors[index];
    config = interruptor[1] || ({});
    fn = interruptor[0];
    offset = -1;
    ignore = false;
    while (++offset < count) {
      bool = bools[offset];
      if (config[bool] !== undefined && config[bool] !== ctx.options[bool]) {
        ignore = true;
        break;
      }
    }
    if (ignore) {
      continue;
    }
    if (tokenizers[fn].apply(ctx, params)) {
      return true;
    }
  }
  return false;
}

},

// node_modules/remark-parse/lib/block-elements.json @305
305: function(__fusereq, exports, module){
module.exports = [
  "address",
  "article",
  "aside",
  "base",
  "basefont",
  "blockquote",
  "body",
  "caption",
  "center",
  "col",
  "colgroup",
  "dd",
  "details",
  "dialog",
  "dir",
  "div",
  "dl",
  "dt",
  "fieldset",
  "figcaption",
  "figure",
  "footer",
  "form",
  "frame",
  "frameset",
  "h1",
  "h2",
  "h3",
  "h4",
  "h5",
  "h6",
  "head",
  "header",
  "hgroup",
  "hr",
  "html",
  "iframe",
  "legend",
  "li",
  "link",
  "main",
  "menu",
  "menuitem",
  "meta",
  "nav",
  "noframes",
  "ol",
  "optgroup",
  "option",
  "p",
  "param",
  "pre",
  "section",
  "source",
  "title",
  "summary",
  "table",
  "tbody",
  "td",
  "tfoot",
  "th",
  "thead",
  "title",
  "tr",
  "track",
  "ul"
]
;
},

// node_modules/remark-parse/lib/util/get-indentation.js @307
307: function(__fusereq, exports, module){
'use strict';
module.exports = indentation;
var characters = {
  ' ': 1,
  '\t': 4
};
function indentation(value) {
  var index = 0;
  var indent = 0;
  var character = value.charAt(index);
  var stops = {};
  var size;
  while ((character in characters)) {
    size = characters[character];
    indent += size;
    if (size > 1) {
      indent = Math.floor(indent / size) * size;
    }
    stops[indent] = index;
    character = value.charAt(++index);
  }
  return {
    indent: indent,
    stops: stops
  };
}

},

// node_modules/remark-parse/lib/util/remove-indentation.js @308
308: function(__fusereq, exports, module){
'use strict';
var trim = __fusereq(301);
var repeat = __fusereq(303);
var getIndent = __fusereq(307);
module.exports = indentation;
var C_SPACE = ' ';
var C_NEWLINE = '\n';
var C_TAB = '\t';
function indentation(value, maximum) {
  var values = value.split(C_NEWLINE);
  var position = values.length + 1;
  var minIndent = Infinity;
  var matrix = [];
  var index;
  var indentation;
  var stops;
  var padding;
  values.unshift(repeat(C_SPACE, maximum) + '!');
  while (position--) {
    indentation = getIndent(values[position]);
    matrix[position] = indentation.stops;
    if (trim(values[position]).length === 0) {
      continue;
    }
    if (indentation.indent) {
      if (indentation.indent > 0 && indentation.indent < minIndent) {
        minIndent = indentation.indent;
      }
    } else {
      minIndent = Infinity;
      break;
    }
  }
  if (minIndent !== Infinity) {
    position = values.length;
    while (position--) {
      stops = matrix[position];
      index = minIndent;
      while (index && !((index in stops))) {
        index--;
      }
      if (trim(values[position]).length !== 0 && minIndent && index !== minIndent) {
        padding = C_TAB;
      } else {
        padding = '';
      }
      values[position] = padding + values[position].slice((index in stops) ? stops[index] + 1 : 0);
    }
  }
  values.shift();
  return values.join(C_NEWLINE);
}

},

// node_modules/remark-parse/lib/util/html.js @309
309: function(__fusereq, exports, module){
'use strict';
var attributeName = '[a-zA-Z_:][a-zA-Z0-9:._-]*';
var unquoted = '[^"\'=<>`\\u0000-\\u0020]+';
var singleQuoted = '\'[^\']*\'';
var doubleQuoted = '"[^"]*"';
var attributeValue = '(?:' + unquoted + '|' + singleQuoted + '|' + doubleQuoted + ')';
var attribute = '(?:\\s+' + attributeName + '(?:\\s*=\\s*' + attributeValue + ')?)';
var openTag = '<[A-Za-z][A-Za-z0-9\\-]*' + attribute + '*\\s*\\/?>';
var closeTag = '<\\/[A-Za-z][A-Za-z0-9\\-]*\\s*>';
var comment = '<!---->|<!--(?:-?[^>-])(?:-?[^-])*-->';
var processing = '<[?].*?[?]>';
var declaration = '<![A-Za-z]+\\s+[^>]*>';
var cdata = '<!\\[CDATA\\[[\\s\\S]*?\\]\\]>';
exports.openCloseTag = new RegExp('^(?:' + openTag + '|' + closeTag + ')');
exports.tag = new RegExp('^(?:' + openTag + '|' + closeTag + '|' + comment + '|' + processing + '|' + declaration + '|' + cdata + ')');

},

// node_modules/remark-parse/lib/util/normalize.js @310
310: function(__fusereq, exports, module){
'use strict';
var collapseWhiteSpace = __fusereq(355);
module.exports = normalize;
function normalize(value) {
  return collapseWhiteSpace(value).toLowerCase();
}

},

// node_modules/remark-parse/lib/locate/escape.js @311
311: function(__fusereq, exports, module){
'use strict';
module.exports = locate;
function locate(value, fromIndex) {
  return value.indexOf('\\', fromIndex);
}

},

// node_modules/remark-parse/lib/locate/tag.js @312
312: function(__fusereq, exports, module){
'use strict';
module.exports = locate;
function locate(value, fromIndex) {
  return value.indexOf('<', fromIndex);
}

},

// node_modules/remark-parse/lib/locate/url.js @313
313: function(__fusereq, exports, module){
'use strict';
module.exports = locate;
var PROTOCOLS = ['https://', 'http://', 'mailto:'];
function locate(value, fromIndex) {
  var length = PROTOCOLS.length;
  var index = -1;
  var min = -1;
  var position;
  if (!this.options.gfm) {
    return -1;
  }
  while (++index < length) {
    position = value.indexOf(PROTOCOLS[index], fromIndex);
    if (position !== -1 && (position < min || min === -1)) {
      min = position;
    }
  }
  return min;
}

},

// node_modules/remark-parse/lib/locate/link.js @315
315: function(__fusereq, exports, module){
'use strict';
module.exports = locate;
function locate(value, fromIndex) {
  var link = value.indexOf('[', fromIndex);
  var image = value.indexOf('![', fromIndex);
  if (image === -1) {
    return link;
  }
  return link < image ? link : image;
}

},

// node_modules/remark-parse/lib/locate/strong.js @316
316: function(__fusereq, exports, module){
'use strict';
module.exports = locate;
function locate(value, fromIndex) {
  var asterisk = value.indexOf('**', fromIndex);
  var underscore = value.indexOf('__', fromIndex);
  if (underscore === -1) {
    return asterisk;
  }
  if (asterisk === -1) {
    return underscore;
  }
  return underscore < asterisk ? underscore : asterisk;
}

},

// node_modules/remark-parse/lib/locate/delete.js @317
317: function(__fusereq, exports, module){
'use strict';
module.exports = locate;
function locate(value, fromIndex) {
  return value.indexOf('~~', fromIndex);
}

},

// node_modules/remark-parse/lib/locate/emphasis.js @319
319: function(__fusereq, exports, module){
'use strict';
module.exports = locate;
function locate(value, fromIndex) {
  var asterisk = value.indexOf('*', fromIndex);
  var underscore = value.indexOf('_', fromIndex);
  if (underscore === -1) {
    return asterisk;
  }
  if (asterisk === -1) {
    return underscore;
  }
  return underscore < asterisk ? underscore : asterisk;
}

},

// node_modules/remark-parse/lib/locate/break.js @320
320: function(__fusereq, exports, module){
'use strict';
module.exports = locate;
function locate(value, fromIndex) {
  var index = value.indexOf('\n', fromIndex);
  while (index > fromIndex) {
    if (value.charAt(index - 1) !== ' ') {
      break;
    }
    index--;
  }
  return index;
}

},

// node_modules/remark-parse/lib/locate/code-inline.js @321
321: function(__fusereq, exports, module){
'use strict';
module.exports = locate;
function locate(value, fromIndex) {
  return value.indexOf('`', fromIndex);
}

},

// node_modules/unherit/index.js @191
191: function(__fusereq, exports, module){
'use strict';
var xtend = __fusereq(109);
var inherits = __fusereq(236);
module.exports = unherit;
function unherit(Super) {
  var result;
  var key;
  var value;
  inherits(Of, Super);
  inherits(From, Of);
  result = Of.prototype;
  for (key in result) {
    value = result[key];
    if (value && typeof value === 'object') {
      result[key] = ('concat' in value) ? value.concat() : xtend(value);
    }
  }
  return Of;
  function From(parameters) {
    return Super.apply(this, parameters);
  }
  function Of() {
    if (!(this instanceof Of)) {
      return new From(arguments);
    }
    return Super.apply(this, arguments);
  }
}

},

// node_modules/inherits/inherits_browser.js @236
236: function(__fusereq, exports, module){
if (typeof Object.create === 'function') {
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor;
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
    }
  };
} else {
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor;
      var TempCtor = function () {};
      TempCtor.prototype = superCtor.prototype;
      ctor.prototype = new TempCtor();
      ctor.prototype.constructor = ctor;
    }
  };
}

},

// node_modules/react-markdown/lib/react-markdown.js @23
23: function(__fusereq, exports, module){
'use strict';
function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
}
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance");
}
function _iterableToArray(iter) {
  if ((Symbol.iterator in Object(iter)) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
}
function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {
      arr2[i] = arr[i];
    }
    return arr2;
  }
}
var xtend = __fusereq(109);
var unified = __fusereq(110);
var parse = __fusereq(111);
var PropTypes = __fusereq(112);
var addListMetadata = __fusereq(113);
var naiveHtml = __fusereq(114);
var disallowNode = __fusereq(115);
var astToReact = __fusereq(116);
var wrapTableRows = __fusereq(117);
var getDefinitions = __fusereq(118);
var uriTransformer = __fusereq(119);
var defaultRenderers = __fusereq(120);
var symbols = __fusereq(121);
var allTypes = Object.keys(defaultRenderers);
var ReactMarkdown = function ReactMarkdown(props) {
  var src = props.source || props.children || '';
  if (props.allowedTypes && props.disallowedTypes) {
    throw new Error('Only one of `allowedTypes` and `disallowedTypes` should be defined');
  }
  var renderers = xtend(defaultRenderers, props.renderers);
  var plugins = [parse].concat(props.plugins || []);
  var parser = plugins.reduce(applyParserPlugin, unified());
  var rawAst = parser.parse(src);
  var renderProps = xtend(props, {
    renderers: renderers,
    definitions: getDefinitions(rawAst)
  });
  var astPlugins = determineAstPlugins(props);
  var ast = astPlugins.reduce(function (node, plugin) {
    return plugin(node, renderProps);
  }, rawAst);
  return astToReact(ast, renderProps);
};
function applyParserPlugin(parser, plugin) {
  return Array.isArray(plugin) ? parser.use.apply(parser, _toConsumableArray(plugin)) : parser.use(plugin);
}
function determineAstPlugins(props) {
  var plugins = [wrapTableRows, addListMetadata()];
  var disallowedTypes = props.disallowedTypes;
  if (props.allowedTypes) {
    disallowedTypes = allTypes.filter(function (type) {
      return type !== 'root' && props.allowedTypes.indexOf(type) === -1;
    });
  }
  var removalMethod = props.unwrapDisallowed ? 'unwrap' : 'remove';
  if (disallowedTypes && disallowedTypes.length > 0) {
    plugins.push(disallowNode.ofType(disallowedTypes, removalMethod));
  }
  if (props.allowNode) {
    plugins.push(disallowNode.ifNotMatch(props.allowNode, removalMethod));
  }
  var renderHtml = !props.escapeHtml && !props.skipHtml;
  var hasHtmlParser = (props.astPlugins || []).some(function (item) {
    var plugin = Array.isArray(item) ? item[0] : item;
    return plugin.identity === symbols.HtmlParser;
  });
  if (renderHtml && !hasHtmlParser) {
    plugins.push(naiveHtml);
  }
  return props.astPlugins ? plugins.concat(props.astPlugins) : plugins;
}
ReactMarkdown.defaultProps = {
  renderers: {},
  escapeHtml: true,
  skipHtml: false,
  sourcePos: false,
  rawSourcePos: false,
  transformLinkUri: uriTransformer,
  astPlugins: [],
  plugins: []
};
ReactMarkdown.propTypes = {
  className: PropTypes.string,
  source: PropTypes.string,
  children: PropTypes.string,
  sourcePos: PropTypes.bool,
  rawSourcePos: PropTypes.bool,
  escapeHtml: PropTypes.bool,
  skipHtml: PropTypes.bool,
  allowNode: PropTypes.func,
  allowedTypes: PropTypes.arrayOf(PropTypes.oneOf(allTypes)),
  disallowedTypes: PropTypes.arrayOf(PropTypes.oneOf(allTypes)),
  transformLinkUri: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),
  linkTarget: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),
  transformImageUri: PropTypes.func,
  astPlugins: PropTypes.arrayOf(PropTypes.func),
  unwrapDisallowed: PropTypes.bool,
  renderers: PropTypes.object,
  plugins: PropTypes.array
};
ReactMarkdown.types = allTypes;
ReactMarkdown.renderers = defaultRenderers;
ReactMarkdown.uriTransformer = uriTransformer;
module.exports = ReactMarkdown;

},

// node_modules/react-markdown/lib/plugins/naive-html.js @114
114: function(__fusereq, exports, module){
"use strict";
var visit = __fusereq(193);
var type = 'virtualHtml';
var selfClosingRe = /^<(area|base|br|col|embed|hr|img|input|keygen|link|meta|param|source|track|wbr)\s*\/?>$/i;
var simpleTagRe = /^<(\/?)([a-z]+)\s*>$/;
module.exports = function (tree) {
  var open;
  var currentParent;
  visit(tree, 'html', function (node, index, parent) {
    if (currentParent !== parent) {
      open = [];
      currentParent = parent;
    }
    var selfClosing = getSelfClosing(node);
    if (selfClosing) {
      parent.children.splice(index, 1, {
        type: type,
        tag: selfClosing,
        position: node.position
      });
      return true;
    }
    var current = getSimpleTag(node, parent);
    if (!current) {
      return true;
    }
    var matching = findAndPull(open, current.tag);
    if (matching) {
      parent.children.splice(index, 0, virtual(current, matching, parent));
    } else if (!current.opening) {
      open.push(current);
    }
    return true;
  }, true);
  return tree;
};
function findAndPull(open, matchingTag) {
  var i = open.length;
  while (i--) {
    if (open[i].tag === matchingTag) {
      return open.splice(i, 1)[0];
    }
  }
  return false;
}
function getSimpleTag(node, parent) {
  var match = node.value.match(simpleTagRe);
  return match ? {
    tag: match[2],
    opening: !match[1],
    node: node
  } : false;
}
function getSelfClosing(node) {
  var match = node.value.match(selfClosingRe);
  return match ? match[1] : false;
}
function virtual(fromNode, toNode, parent) {
  var fromIndex = parent.children.indexOf(fromNode.node);
  var toIndex = parent.children.indexOf(toNode.node);
  var extracted = parent.children.splice(fromIndex, toIndex - fromIndex + 1);
  var children = extracted.slice(1, -1);
  return {
    type: type,
    children: children,
    tag: fromNode.tag,
    position: {
      start: fromNode.node.position.start,
      end: toNode.node.position.end,
      indent: []
    }
  };
}

},

// node_modules/react-markdown/lib/plugins/disallow-node.js @115
115: function(__fusereq, exports, module){
"use strict";
var visit = __fusereq(193);
exports.ofType = function (types, mode) {
  return function (node) {
    types.forEach(function (type) {
      return visit(node, type, disallow, true);
    });
    return node;
  };
  function disallow(node, index, parent) {
    if (parent) {
      untangle(node, index, parent, mode);
    }
  }
};
exports.ifNotMatch = function (allowNode, mode) {
  return function (node) {
    visit(node, disallow, true);
    return node;
  };
  function disallow(node, index, parent) {
    if (parent && !allowNode(node, index, parent)) {
      untangle(node, index, parent, mode);
    }
  }
};
function untangle(node, index, parent, mode) {
  if (mode === 'remove') {
    parent.children.splice(index, 1);
  } else if (mode === 'unwrap') {
    var args = [index, 1];
    if (node.children) {
      args = args.concat(node.children);
    }
    Array.prototype.splice.apply(parent.children, args);
  }
}

},

// node_modules/react-markdown/lib/ast-to-react.js @116
116: function(__fusereq, exports, module){
'use strict';
var React = __fusereq(3);
var xtend = __fusereq(109);
function astToReact(node, options) {
  var parent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var index = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
  var renderer = options.renderers[node.type];
  var pos = node.position.start;
  var key = [node.type, pos.line, pos.column].join('-');
  if (typeof renderer !== 'function' && typeof renderer !== 'string' && !isReactFragment(renderer)) {
    throw new Error(("Renderer for type `").concat(node.type, "` not defined or is not renderable"));
  }
  var nodeProps = getNodeProps(node, key, options, renderer, parent, index);
  return React.createElement(renderer, nodeProps, nodeProps.children || resolveChildren() || undefined);
  function resolveChildren() {
    return node.children && node.children.map(function (childNode, i) {
      return astToReact(childNode, options, {
        node: node,
        props: nodeProps
      }, i);
    });
  }
}
function isReactFragment(renderer) {
  return React.Fragment && React.Fragment === renderer;
}
function getNodeProps(node, key, opts, renderer, parent, index) {
  var props = {
    key: key
  };
  var isTagRenderer = typeof renderer === 'string';
  if (opts.sourcePos && node.position) {
    props['data-sourcepos'] = flattenPosition(node.position);
  }
  if (opts.rawSourcePos && !isTagRenderer) {
    props.sourcePosition = node.position;
  }
  if (opts.includeNodeIndex && parent.node && parent.node.children && !isTagRenderer) {
    props.index = parent.node.children.indexOf(node);
    props.parentChildCount = parent.node.children.length;
  }
  var ref = node.identifier !== null && node.identifier !== undefined ? opts.definitions[node.identifier] || ({}) : null;
  switch (node.type) {
    case 'root':
      assignDefined(props, {
        className: opts.className
      });
      break;
    case 'text':
      props.nodeKey = key;
      props.children = node.value;
      break;
    case 'heading':
      props.level = node.depth;
      break;
    case 'list':
      props.start = node.start;
      props.ordered = node.ordered;
      props.tight = !node.loose;
      props.depth = node.depth;
      break;
    case 'listItem':
      props.checked = node.checked;
      props.tight = !node.loose;
      props.ordered = node.ordered;
      props.index = node.index;
      props.children = getListItemChildren(node, parent).map(function (childNode, i) {
        return astToReact(childNode, opts, {
          node: node,
          props: props
        }, i);
      });
      break;
    case 'definition':
      assignDefined(props, {
        identifier: node.identifier,
        title: node.title,
        url: node.url
      });
      break;
    case 'code':
      assignDefined(props, {
        language: node.lang && node.lang.split(/\s/, 1)[0]
      });
      break;
    case 'inlineCode':
      props.children = node.value;
      props.inline = true;
      break;
    case 'link':
      assignDefined(props, {
        title: node.title || undefined,
        target: typeof opts.linkTarget === 'function' ? opts.linkTarget(node.url, node.children, node.title) : opts.linkTarget,
        href: opts.transformLinkUri ? opts.transformLinkUri(node.url, node.children, node.title) : node.url
      });
      break;
    case 'image':
      assignDefined(props, {
        alt: node.alt || undefined,
        title: node.title || undefined,
        src: opts.transformImageUri ? opts.transformImageUri(node.url, node.children, node.title, node.alt) : node.url
      });
      break;
    case 'linkReference':
      assignDefined(props, xtend(ref, {
        href: opts.transformLinkUri ? opts.transformLinkUri(ref.href) : ref.href
      }));
      break;
    case 'imageReference':
      assignDefined(props, {
        src: opts.transformImageUri && ref.href ? opts.transformImageUri(ref.href, node.children, ref.title, node.alt) : ref.href,
        title: ref.title || undefined,
        alt: node.alt || undefined
      });
      break;
    case 'table':
    case 'tableHead':
    case 'tableBody':
      props.columnAlignment = node.align;
      break;
    case 'tableRow':
      props.isHeader = parent.node.type === 'tableHead';
      props.columnAlignment = parent.props.columnAlignment;
      break;
    case 'tableCell':
      assignDefined(props, {
        isHeader: parent.props.isHeader,
        align: parent.props.columnAlignment[index]
      });
      break;
    case 'virtualHtml':
      props.tag = node.tag;
      break;
    case 'html':
      props.isBlock = node.position.start.line !== node.position.end.line;
      props.escapeHtml = opts.escapeHtml;
      props.skipHtml = opts.skipHtml;
      break;
    case 'parsedHtml':
      props.escapeHtml = opts.escapeHtml;
      props.skipHtml = opts.skipHtml;
      props.element = mergeNodeChildren(node, (node.children || []).map(function (child, i) {
        return astToReact(child, opts, {
          node: node,
          props: props
        }, i);
      }));
      break;
    default:
      assignDefined(props, xtend(node, {
        type: undefined,
        position: undefined,
        children: undefined
      }));
  }
  if (!isTagRenderer && node.value) {
    props.value = node.value;
  }
  return props;
}
function assignDefined(target, attrs) {
  for (var key in attrs) {
    if (typeof attrs[key] !== 'undefined') {
      target[key] = attrs[key];
    }
  }
}
function mergeNodeChildren(node, parsedChildren) {
  var el = node.element;
  if (Array.isArray(el)) {
    var Fragment = React.Fragment || 'div';
    return React.createElement(Fragment, null, el);
  }
  var children = (el.props.children || []).concat(parsedChildren);
  return React.cloneElement(el, null, children);
}
function flattenPosition(pos) {
  return [pos.start.line, ':', pos.start.column, '-', pos.end.line, ':', pos.end.column].map(String).join('');
}
function getListItemChildren(node, parent) {
  if (node.loose) {
    return node.children;
  }
  if (parent.node && node.index > 0 && parent.node.children[node.index - 1].loose) {
    return node.children;
  }
  return unwrapParagraphs(node);
}
function unwrapParagraphs(node) {
  return node.children.reduce(function (array, child) {
    return array.concat(child.type === 'paragraph' ? child.children || [] : [child]);
  }, []);
}
module.exports = astToReact;

},

// node_modules/react-markdown/lib/wrap-table-rows.js @117
117: function(__fusereq, exports, module){
'use strict';
var visit = __fusereq(193);
module.exports = function (node) {
  visit(node, 'table', wrap);
  return node;
};
function wrap(table) {
  var children = table.children;
  table.children = [{
    type: 'tableHead',
    align: table.align,
    children: [children[0]],
    position: children[0].position
  }];
  if (children.length > 1) {
    table.children.push({
      type: 'tableBody',
      align: table.align,
      children: children.slice(1),
      position: {
        start: children[1].position.start,
        end: children[children.length - 1].position.end
      }
    });
  }
}

},

// node_modules/react-markdown/lib/get-definitions.js @118
118: function(__fusereq, exports, module){
'use strict';
module.exports = function getDefinitions(node) {
  var defs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  return (node.children || []).reduce(function (definitions, child) {
    if (child.type === 'definition') {
      definitions[child.identifier] = {
        href: child.url,
        title: child.title
      };
    }
    return getDefinitions(child, definitions);
  }, defs);
};

},

// node_modules/react-markdown/lib/uri-transformer.js @119
119: function(__fusereq, exports, module){
"use strict";
var protocols = ['http', 'https', 'mailto', 'tel'];
module.exports = function uriTransformer(uri) {
  var url = (uri || '').trim();
  var first = url.charAt(0);
  if (first === '#' || first === '/') {
    return url;
  }
  var colon = url.indexOf(':');
  if (colon === -1) {
    return url;
  }
  var length = protocols.length;
  var index = -1;
  while (++index < length) {
    var protocol = protocols[index];
    if (colon === protocol.length && url.slice(0, protocol.length).toLowerCase() === protocol) {
      return url;
    }
  }
  index = url.indexOf('?');
  if (index !== -1 && colon > index) {
    return url;
  }
  index = url.indexOf('#');
  if (index !== -1 && colon > index) {
    return url;
  }
  return 'javascript:void(0)';
};

},

// node_modules/react-markdown/lib/renderers.js @120
120: function(__fusereq, exports, module){
'use strict';
var xtend = __fusereq(109);
var React = __fusereq(3);
var supportsStringRender = parseInt((React.version || '16').slice(0, 2), 10) >= 16;
var createElement = React.createElement;
module.exports = {
  break: 'br',
  paragraph: 'p',
  emphasis: 'em',
  strong: 'strong',
  thematicBreak: 'hr',
  blockquote: 'blockquote',
  delete: 'del',
  link: 'a',
  image: 'img',
  linkReference: 'a',
  imageReference: 'img',
  table: SimpleRenderer.bind(null, 'table'),
  tableHead: SimpleRenderer.bind(null, 'thead'),
  tableBody: SimpleRenderer.bind(null, 'tbody'),
  tableRow: SimpleRenderer.bind(null, 'tr'),
  tableCell: TableCell,
  root: Root,
  text: TextRenderer,
  list: List,
  listItem: ListItem,
  definition: NullRenderer,
  heading: Heading,
  inlineCode: InlineCode,
  code: CodeBlock,
  html: Html,
  virtualHtml: VirtualHtml,
  parsedHtml: ParsedHtml
};
function TextRenderer(props) {
  return supportsStringRender ? props.children : createElement('span', null, props.children);
}
function Root(props) {
  var useFragment = !props.className;
  var root = useFragment ? React.Fragment || 'div' : 'div';
  return createElement(root, useFragment ? null : props, props.children);
}
function SimpleRenderer(tag, props) {
  return createElement(tag, getCoreProps(props), props.children);
}
function TableCell(props) {
  var style = props.align ? {
    textAlign: props.align
  } : undefined;
  var coreProps = getCoreProps(props);
  return createElement(props.isHeader ? 'th' : 'td', style ? xtend({
    style: style
  }, coreProps) : coreProps, props.children);
}
function Heading(props) {
  return createElement(("h").concat(props.level), getCoreProps(props), props.children);
}
function List(props) {
  var attrs = getCoreProps(props);
  if (props.start !== null && props.start !== 1) {
    attrs.start = props.start.toString();
  }
  return createElement(props.ordered ? 'ol' : 'ul', attrs, props.children);
}
function ListItem(props) {
  var checkbox = null;
  if (props.checked !== null) {
    var checked = props.checked;
    checkbox = createElement('input', {
      type: 'checkbox',
      checked: checked,
      readOnly: true
    });
  }
  return createElement('li', getCoreProps(props), checkbox, props.children);
}
function CodeBlock(props) {
  var className = props.language && ("language-").concat(props.language);
  var code = createElement('code', className ? {
    className: className
  } : null, props.value);
  return createElement('pre', getCoreProps(props), code);
}
function InlineCode(props) {
  return createElement('code', getCoreProps(props), props.children);
}
function Html(props) {
  if (props.skipHtml) {
    return null;
  }
  var tag = props.isBlock ? 'div' : 'span';
  if (props.escapeHtml) {
    var comp = React.Fragment || tag;
    return createElement(comp, null, props.value);
  }
  var nodeProps = {
    dangerouslySetInnerHTML: {
      __html: props.value
    }
  };
  return createElement(tag, nodeProps);
}
function ParsedHtml(props) {
  return props['data-sourcepos'] ? React.cloneElement(props.element, {
    'data-sourcepos': props['data-sourcepos']
  }) : props.element;
}
function VirtualHtml(props) {
  return createElement(props.tag, getCoreProps(props), props.children);
}
function NullRenderer() {
  return null;
}
function getCoreProps(props) {
  return props['data-sourcepos'] ? {
    'data-sourcepos': props['data-sourcepos']
  } : {};
}

},

// node_modules/react-markdown/lib/symbols.js @121
121: function(__fusereq, exports, module){
"use strict";
var HtmlParser = '__RMD_HTML_PARSER__';
exports.HtmlParser = typeof Symbol === 'undefined' ? HtmlParser : Symbol(HtmlParser);

},

// node_modules/@babel/runtime/helpers/esm/extends.js @122
122: function(__fusereq, exports, module){
exports.__esModule = true;
function _extends() {
  _extends = Object.assign || (function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  });
  return _extends.apply(this, arguments);
}
exports.default = _extends;

},

// node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js @123
123: function(__fusereq, exports, module){
exports.__esModule = true;
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
exports.default = _objectWithoutPropertiesLoose;

},

// node_modules/@babel/runtime/helpers/esm/inheritsLoose.js @177
177: function(__fusereq, exports, module){
exports.__esModule = true;
var setPrototypeOf_js_1 = __fusereq(234);
var setPrototypeOf_js_1d = __fuse.dt(setPrototypeOf_js_1);
function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  setPrototypeOf_js_1d.default(subClass, superClass);
}
exports.default = _inheritsLoose;

},

// node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js @234
234: function(__fusereq, exports, module){
exports.__esModule = true;
function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || (function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  });
  return _setPrototypeOf(o, p);
}
exports.default = _setPrototypeOf;

},

// node_modules/classnames/index.js @125
125: function(__fusereq, exports, module){
(function () {
  'use strict';
  var hasOwn = ({}).hasOwnProperty;
  function classNames() {
    var classes = [];
    for (var i = 0; i < arguments.length; i++) {
      var arg = arguments[i];
      if (!arg) continue;
      var argType = typeof arg;
      if (argType === 'string' || argType === 'number') {
        classes.push(arg);
      } else if (Array.isArray(arg)) {
        if (arg.length) {
          var inner = classNames.apply(null, arg);
          if (inner) {
            classes.push(inner);
          }
        }
      } else if (argType === 'object') {
        if (arg.toString === Object.prototype.toString) {
          for (var key in arg) {
            if (hasOwn.call(arg, key) && arg[key]) {
              classes.push(key);
            }
          }
        } else {
          classes.push(arg.toString());
        }
      }
    }
    return classes.join(' ');
  }
  if (typeof module !== 'undefined' && module.exports) {
    classNames.default = classNames;
    module.exports = classNames;
  } else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {
    define('classnames', [], function () {
      return classNames;
    });
  } else {
    window.classNames = classNames;
  }
})();

},

// node_modules/invariant/browser.js @181
181: function(__fusereq, exports, module){
'use strict';
var invariant = function (condition, format, a, b, c, d, e, f) {
  if (format === undefined) {
    throw new Error('invariant requires an error message argument');
  }
  if (!condition) {
    var error;
    if (format === undefined) {
      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
    } else {
      var args = [a, b, c, d, e, f];
      var argIndex = 0;
      error = new Error(format.replace(/%s/g, function () {
        return args[argIndex++];
      }));
      error.name = 'Invariant Violation';
    }
    error.framesToPop = 1;
    throw error;
  }
};
module.exports = invariant;

},

// node_modules/react-lifecycles-compat/react-lifecycles-compat.es.js @274
274: function(__fusereq, exports, module){
exports.__esModule = true;
function componentWillMount() {
  var state = this.constructor.getDerivedStateFromProps(this.props, this.state);
  if (state !== null && state !== undefined) {
    this.setState(state);
  }
}
function componentWillReceiveProps(nextProps) {
  function updater(prevState) {
    var state = this.constructor.getDerivedStateFromProps(nextProps, prevState);
    return state !== null && state !== undefined ? state : null;
  }
  this.setState(updater.bind(this));
}
function componentWillUpdate(nextProps, nextState) {
  try {
    var prevProps = this.props;
    var prevState = this.state;
    this.props = nextProps;
    this.state = nextState;
    this.__reactInternalSnapshotFlag = true;
    this.__reactInternalSnapshot = this.getSnapshotBeforeUpdate(prevProps, prevState);
  } finally {
    this.props = prevProps;
    this.state = prevState;
  }
}
componentWillMount.__suppressDeprecationWarning = true;
componentWillReceiveProps.__suppressDeprecationWarning = true;
componentWillUpdate.__suppressDeprecationWarning = true;
function polyfill(Component) {
  var prototype = Component.prototype;
  if (!prototype || !prototype.isReactComponent) {
    throw new Error('Can only polyfill class components');
  }
  if (typeof Component.getDerivedStateFromProps !== 'function' && typeof prototype.getSnapshotBeforeUpdate !== 'function') {
    return Component;
  }
  var foundWillMountName = null;
  var foundWillReceivePropsName = null;
  var foundWillUpdateName = null;
  if (typeof prototype.componentWillMount === 'function') {
    foundWillMountName = 'componentWillMount';
  } else if (typeof prototype.UNSAFE_componentWillMount === 'function') {
    foundWillMountName = 'UNSAFE_componentWillMount';
  }
  if (typeof prototype.componentWillReceiveProps === 'function') {
    foundWillReceivePropsName = 'componentWillReceiveProps';
  } else if (typeof prototype.UNSAFE_componentWillReceiveProps === 'function') {
    foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';
  }
  if (typeof prototype.componentWillUpdate === 'function') {
    foundWillUpdateName = 'componentWillUpdate';
  } else if (typeof prototype.UNSAFE_componentWillUpdate === 'function') {
    foundWillUpdateName = 'UNSAFE_componentWillUpdate';
  }
  if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
    var componentName = Component.displayName || Component.name;
    var newApiName = typeof Component.getDerivedStateFromProps === 'function' ? 'getDerivedStateFromProps()' : 'getSnapshotBeforeUpdate()';
    throw Error('Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n' + componentName + ' uses ' + newApiName + ' but also contains the following legacy lifecycles:' + (foundWillMountName !== null ? '\n  ' + foundWillMountName : '') + (foundWillReceivePropsName !== null ? '\n  ' + foundWillReceivePropsName : '') + (foundWillUpdateName !== null ? '\n  ' + foundWillUpdateName : '') + '\n\nThe above lifecycles should be removed. Learn more about this warning here:\n' + 'https://fb.me/react-async-component-lifecycle-hooks');
  }
  if (typeof Component.getDerivedStateFromProps === 'function') {
    prototype.componentWillMount = componentWillMount;
    prototype.componentWillReceiveProps = componentWillReceiveProps;
  }
  if (typeof prototype.getSnapshotBeforeUpdate === 'function') {
    if (typeof prototype.componentDidUpdate !== 'function') {
      throw new Error('Cannot polyfill getSnapshotBeforeUpdate() for components that do not define componentDidUpdate() on the prototype');
    }
    prototype.componentWillUpdate = componentWillUpdate;
    var componentDidUpdate = prototype.componentDidUpdate;
    prototype.componentDidUpdate = function componentDidUpdatePolyfill(prevProps, prevState, maybeSnapshot) {
      var snapshot = this.__reactInternalSnapshotFlag ? this.__reactInternalSnapshot : maybeSnapshot;
      componentDidUpdate.call(this, prevProps, prevState, snapshot);
    };
  }
  return Component;
}
exports.polyfill = polyfill;

},

// node_modules/uncontrollable/lib/esm/index.js @126
126: function(__fusereq, exports, module){
exports.__esModule = true;
var hook_1 = __fusereq(203);
var hook_1d = __fuse.dt(hook_1);
exports.useUncontrolled = hook_1d.default;
exports.useUncontrolledProp = hook_1.useUncontrolledProp;
var uncontrollable_1 = __fusereq(204);
var uncontrollable_1d = __fuse.dt(uncontrollable_1);
exports.uncontrollable = uncontrollable_1d.default;

},

// node_modules/uncontrollable/lib/esm/hook.js @203
203: function(__fusereq, exports, module){
exports.__esModule = true;
var extends_1 = __fusereq(122);
var extends_1d = __fuse.dt(extends_1);
var objectWithoutPropertiesLoose_1 = __fusereq(123);
var objectWithoutPropertiesLoose_1d = __fuse.dt(objectWithoutPropertiesLoose_1);
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return typeof key === "symbol" ? key : String(key);
}
function _toPrimitive(input, hint) {
  if (typeof input !== "object" || input === null) return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== undefined) {
    var res = prim.call(input, hint || "default");
    if (typeof res !== "object") return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
var react_1 = __fusereq(3);
var utils_1 = __fusereq(275);
function useUncontrolledProp(propValue, defaultValue, handler) {
  var wasPropRef = react_1.useRef(propValue !== undefined);
  var _useState = react_1.useState(defaultValue), stateValue = _useState[0], setState = _useState[1];
  var isProp = propValue !== undefined;
  var wasProp = wasPropRef.current;
  wasPropRef.current = isProp;
  if (!isProp && wasProp && stateValue !== defaultValue) {
    setState(defaultValue);
  }
  return [isProp ? propValue : stateValue, react_1.useCallback(function (value) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    if (handler) handler.apply(void 0, [value].concat(args));
    setState(value);
  }, [handler])];
}
function useUncontrolled(props, config) {
  return Object.keys(config).reduce(function (result, fieldName) {
    var _extends2;
    var _ref = result, defaultValue = _ref[utils_1.defaultKey(fieldName)], propsValue = _ref[fieldName], rest = objectWithoutPropertiesLoose_1d.default(_ref, [utils_1.defaultKey(fieldName), fieldName].map(_toPropertyKey));
    var handlerName = config[fieldName];
    var _useUncontrolledProp = useUncontrolledProp(propsValue, defaultValue, props[handlerName]), value = _useUncontrolledProp[0], handler = _useUncontrolledProp[1];
    return extends_1d.default({}, rest, (_extends2 = {}, _extends2[fieldName] = value, _extends2[handlerName] = handler, _extends2));
  }, props);
}
exports.default = useUncontrolled;
exports.useUncontrolledProp = useUncontrolledProp;

},

// node_modules/uncontrollable/lib/esm/uncontrollable.js @204
204: function(__fusereq, exports, module){
exports.__esModule = true;
var objectWithoutPropertiesLoose_1 = __fusereq(123);
var objectWithoutPropertiesLoose_1d = __fuse.dt(objectWithoutPropertiesLoose_1);
var extends_1 = __fusereq(122);
var extends_1d = __fuse.dt(extends_1);
var inheritsLoose_1 = __fusereq(177);
var inheritsLoose_1d = __fuse.dt(inheritsLoose_1);
var _jsxFileName = "/Users/jquense/src/uncontrollable/src/uncontrollable.js";
var react_1 = __fusereq(3);
var react_1d = __fuse.dt(react_1);
var react_lifecycles_compat_1 = __fusereq(274);
var invariant_1 = __fusereq(181);
var invariant_1d = __fuse.dt(invariant_1);
var utils_1 = __fusereq(275);
function uncontrollable(Component, controlledValues, methods) {
  if (methods === void 0) {
    methods = [];
  }
  var displayName = Component.displayName || Component.name || 'Component';
  var canAcceptRef = utils_1.canAcceptRef(Component);
  var controlledProps = Object.keys(controlledValues);
  var PROPS_TO_OMIT = controlledProps.map(utils_1.defaultKey);
  !(canAcceptRef || !methods.length) ? "development" !== "production" ? invariant_1d.default(false, '[uncontrollable] stateless function components cannot pass through methods ' + 'because they have no associated instances. Check component: ' + displayName + ', ' + 'attempting to pass through methods: ' + methods.join(', ')) : invariant_1d.default(false) : void 0;
  var UncontrolledComponent = (function (_React$Component) {
    inheritsLoose_1d.default(UncontrolledComponent, _React$Component);
    function UncontrolledComponent() {
      var _this;
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
      _this.handlers = Object.create(null);
      controlledProps.forEach(function (propName) {
        var handlerName = controlledValues[propName];
        var handleChange = function handleChange(value) {
          if (_this.props[handlerName]) {
            var _this$props;
            _this._notifying = true;
            for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
              args[_key2 - 1] = arguments[_key2];
            }
            (_this$props = _this.props)[handlerName].apply(_this$props, [value].concat(args));
            _this._notifying = false;
          }
          if (!_this.unmounted) _this.setState(function (_ref) {
            var _extends2;
            var values = _ref.values;
            return {
              values: extends_1d.default(Object.create(null), values, (_extends2 = {}, _extends2[propName] = value, _extends2))
            };
          });
        };
        _this.handlers[handlerName] = handleChange;
      });
      if (methods.length) _this.attachRef = function (ref) {
        _this.inner = ref;
      };
      var values = Object.create(null);
      controlledProps.forEach(function (key) {
        values[key] = _this.props[utils_1.defaultKey(key)];
      });
      _this.state = {
        values: values,
        prevProps: {}
      };
      return _this;
    }
    var _proto = UncontrolledComponent.prototype;
    _proto.shouldComponentUpdate = function shouldComponentUpdate() {
      return !this._notifying;
    };
    UncontrolledComponent.getDerivedStateFromProps = function getDerivedStateFromProps(props, _ref2) {
      var values = _ref2.values, prevProps = _ref2.prevProps;
      var nextState = {
        values: extends_1d.default(Object.create(null), values),
        prevProps: {}
      };
      controlledProps.forEach(function (key) {
        nextState.prevProps[key] = props[key];
        if (!utils_1.isProp(props, key) && utils_1.isProp(prevProps, key)) {
          nextState.values[key] = props[utils_1.defaultKey(key)];
        }
      });
      return nextState;
    };
    _proto.componentWillUnmount = function componentWillUnmount() {
      this.unmounted = true;
    };
    _proto.render = function render() {
      var _this2 = this;
      var _this$props2 = this.props, innerRef = _this$props2.innerRef, props = objectWithoutPropertiesLoose_1d.default(_this$props2, ["innerRef"]);
      PROPS_TO_OMIT.forEach(function (prop) {
        delete props[prop];
      });
      var newProps = {};
      controlledProps.forEach(function (propName) {
        var propValue = _this2.props[propName];
        newProps[propName] = propValue !== undefined ? propValue : _this2.state.values[propName];
      });
      return react_1d.default.createElement(Component, extends_1d.default({}, props, newProps, this.handlers, {
        ref: innerRef || this.attachRef
      }));
    };
    return UncontrolledComponent;
  })(react_1d.default.Component);
  react_lifecycles_compat_1.polyfill(UncontrolledComponent);
  UncontrolledComponent.displayName = "Uncontrolled(" + displayName + ")";
  UncontrolledComponent.propTypes = extends_1d.default({
    innerRef: function innerRef() {}
  }, utils_1.uncontrolledPropTypes(controlledValues, displayName));
  methods.forEach(function (method) {
    UncontrolledComponent.prototype[method] = function $proxiedMethod() {
      var _this$inner;
      return (_this$inner = this.inner)[method].apply(_this$inner, arguments);
    };
  });
  var WrappedComponent = UncontrolledComponent;
  if (react_1d.default.forwardRef) {
    WrappedComponent = react_1d.default.forwardRef(function (props, ref) {
      return react_1d.default.createElement(UncontrolledComponent, extends_1d.default({}, props, {
        innerRef: ref,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 128
        },
        __self: this
      }));
    });
    WrappedComponent.propTypes = UncontrolledComponent.propTypes;
  }
  WrappedComponent.ControlledComponent = Component;
  WrappedComponent.deferControlTo = function (newComponent, additions, nextMethods) {
    if (additions === void 0) {
      additions = {};
    }
    return uncontrollable(newComponent, extends_1d.default({}, controlledValues, additions), nextMethods);
  };
  return WrappedComponent;
}
exports.default = uncontrollable;

},

// node_modules/uncontrollable/lib/esm/utils.js @275
275: function(__fusereq, exports, module){
exports.__esModule = true;
var invariant_1 = __fusereq(181);
var invariant_1d = __fuse.dt(invariant_1);
var noop = function noop() {};
function readOnlyPropType(handler, name) {
  return function (props, propName) {
    if (props[propName] !== undefined) {
      if (!props[handler]) {
        return new Error("You have provided a `" + propName + "` prop to `" + name + "` " + ("without an `" + handler + "` handler prop. This will render a read-only field. ") + ("If the field should be mutable use `" + defaultKey(propName) + "`. ") + ("Otherwise, set `" + handler + "`."));
      }
    }
  };
}
function uncontrolledPropTypes(controlledValues, displayName) {
  var propTypes = {};
  Object.keys(controlledValues).forEach(function (prop) {
    propTypes[defaultKey(prop)] = noop;
    var handler = controlledValues[prop];
    !(typeof handler === 'string' && handler.trim().length) ? "development" !== "production" ? invariant_1d.default(false, 'Uncontrollable - [%s]: the prop `%s` needs a valid handler key name in order to make it uncontrollable', displayName, prop) : invariant_1d.default(false) : void 0;
    propTypes[prop] = readOnlyPropType(handler, displayName);
  });
  return propTypes;
}
exports.uncontrolledPropTypes = uncontrolledPropTypes;
function isProp(props, prop) {
  return props[prop] !== undefined;
}
exports.isProp = isProp;
function defaultKey(key) {
  return 'default' + key.charAt(0).toUpperCase() + key.substr(1);
}
exports.defaultKey = defaultKey;
function canAcceptRef(component) {
  return !!component && (typeof component !== 'function' || component.prototype && component.prototype.isReactComponent);
}
exports.canAcceptRef = canAcceptRef;

},

// node_modules/dom-helpers/esm/css.js @133
133: function(__fusereq, exports, module){
exports.__esModule = true;
var getComputedStyle_1 = __fusereq(205);
var getComputedStyle_1d = __fuse.dt(getComputedStyle_1);
var hyphenateStyle_1 = __fusereq(206);
var hyphenateStyle_1d = __fuse.dt(hyphenateStyle_1);
var isTransform_1 = __fusereq(207);
var isTransform_1d = __fuse.dt(isTransform_1);
function style(node, property) {
  var css = '';
  var transforms = '';
  if (typeof property === 'string') {
    return node.style.getPropertyValue(hyphenateStyle_1d.default(property)) || getComputedStyle_1d.default(node).getPropertyValue(hyphenateStyle_1d.default(property));
  }
  Object.keys(property).forEach(function (key) {
    var value = property[key];
    if (!value && value !== 0) {
      node.style.removeProperty(hyphenateStyle_1d.default(key));
    } else if (isTransform_1d.default(key)) {
      transforms += key + "(" + value + ") ";
    } else {
      css += hyphenateStyle_1d.default(key) + ": " + value + ";";
    }
  });
  if (transforms) {
    css += "transform: " + transforms + ";";
  }
  node.style.cssText += ";" + css;
}
exports.default = style;

},

// node_modules/dom-helpers/esm/addEventListener.js @157
157: function(__fusereq, exports, module){
exports.__esModule = true;
var canUseDOM_1 = __fusereq(158);
var canUseDOM_1d = __fuse.dt(canUseDOM_1);
exports.optionsSupported = false;
exports.onceSupported = false;
try {
  var options = {
    get passive() {
      return exports.optionsSupported = true;
    },
    get once() {
      return exports.onceSupported = exports.optionsSupported = true;
    }
  };
  if (canUseDOM_1d.default) {
    window.addEventListener('test', options, options);
    window.removeEventListener('test', options, true);
  }
} catch (e) {}
function addEventListener(node, eventName, handler, options) {
  if (options && typeof options !== 'boolean' && !exports.onceSupported) {
    var once = options.once, capture = options.capture;
    var wrappedHandler = handler;
    if (!exports.onceSupported && once) {
      wrappedHandler = handler.__once || (function onceHandler(event) {
        this.removeEventListener(eventName, onceHandler, capture);
        handler.call(this, event);
      });
      handler.__once = wrappedHandler;
    }
    node.addEventListener(eventName, wrappedHandler, exports.optionsSupported ? options : capture);
  }
  node.addEventListener(eventName, handler, options);
}
exports.default = addEventListener;

},

// node_modules/dom-helpers/esm/canUseDOM.js @158
158: function(__fusereq, exports, module){
exports.__esModule = true;
exports.default = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

},

// node_modules/dom-helpers/esm/ownerDocument.js @159
159: function(__fusereq, exports, module){
exports.__esModule = true;
function ownerDocument(node) {
  return node && node.ownerDocument || document;
}
exports.default = ownerDocument;

},

// node_modules/dom-helpers/esm/removeEventListener.js @160
160: function(__fusereq, exports, module){
exports.__esModule = true;
function removeEventListener(node, eventName, handler, options) {
  var capture = options && typeof options !== 'boolean' ? options.capture : options;
  node.removeEventListener(eventName, handler, capture);
  if (handler.__once) {
    node.removeEventListener(eventName, handler.__once, capture);
  }
}
exports.default = removeEventListener;

},

// node_modules/dom-helpers/esm/scrollbarSize.js @161
161: function(__fusereq, exports, module){
exports.__esModule = true;
var canUseDOM_1 = __fusereq(158);
var canUseDOM_1d = __fuse.dt(canUseDOM_1);
var size;
function scrollbarSize(recalc) {
  if (!size && size !== 0 || recalc) {
    if (canUseDOM_1d.default) {
      var scrollDiv = document.createElement('div');
      scrollDiv.style.position = 'absolute';
      scrollDiv.style.top = '-9999px';
      scrollDiv.style.width = '50px';
      scrollDiv.style.height = '50px';
      scrollDiv.style.overflow = 'scroll';
      document.body.appendChild(scrollDiv);
      size = scrollDiv.offsetWidth - scrollDiv.clientWidth;
      document.body.removeChild(scrollDiv);
    }
  }
  return size;
}
exports.default = scrollbarSize;

},

// node_modules/dom-helpers/esm/transitionEnd.js @164
164: function(__fusereq, exports, module){
exports.__esModule = true;
var css_1 = __fusereq(133);
var css_1d = __fuse.dt(css_1);
var listen_1 = __fusereq(225);
var listen_1d = __fuse.dt(listen_1);
var triggerEvent_1 = __fusereq(226);
var triggerEvent_1d = __fuse.dt(triggerEvent_1);
function parseDuration(node) {
  var str = css_1d.default(node, 'transitionDuration') || '';
  var mult = str.indexOf('ms') === -1 ? 1000 : 1;
  return parseFloat(str) * mult;
}
function emulateTransitionEnd(element, duration, padding) {
  if (padding === void 0) {
    padding = 5;
  }
  var called = false;
  var handle = setTimeout(function () {
    if (!called) triggerEvent_1d.default(element, 'transitionend', true);
  }, duration + padding);
  var remove = listen_1d.default(element, 'transitionend', function () {
    called = true;
  }, {
    once: true
  });
  return function () {
    clearTimeout(handle);
    remove();
  };
}
function transitionEnd(element, handler, duration, padding) {
  if (duration == null) duration = parseDuration(element) || 0;
  var removeEmulate = emulateTransitionEnd(element, duration, padding);
  var remove = listen_1d.default(element, 'transitionend', handler);
  return function () {
    removeEmulate();
    remove();
  };
}
exports.default = transitionEnd;

},

// node_modules/dom-helpers/esm/contains.js @178
178: function(__fusereq, exports, module){
exports.__esModule = true;
function contains(context, node) {
  if (context.contains) return context.contains(node);
  if (context.compareDocumentPosition) return context === node || !!(context.compareDocumentPosition(node) & 16);
}
exports.default = contains;

},

// node_modules/dom-helpers/esm/getComputedStyle.js @205
205: function(__fusereq, exports, module){
exports.__esModule = true;
var ownerWindow_1 = __fusereq(276);
var ownerWindow_1d = __fuse.dt(ownerWindow_1);
function getComputedStyle(node, psuedoElement) {
  return ownerWindow_1d.default(node).getComputedStyle(node, psuedoElement);
}
exports.default = getComputedStyle;

},

// node_modules/dom-helpers/esm/hyphenateStyle.js @206
206: function(__fusereq, exports, module){
exports.__esModule = true;
var hyphenate_1 = __fusereq(278);
var hyphenate_1d = __fuse.dt(hyphenate_1);
var msPattern = /^ms-/;
function hyphenateStyleName(string) {
  return hyphenate_1d.default(string).replace(msPattern, '-ms-');
}
exports.default = hyphenateStyleName;

},

// node_modules/dom-helpers/esm/isTransform.js @207
207: function(__fusereq, exports, module){
exports.__esModule = true;
var supportedTransforms = /^((translate|rotate|scale)(X|Y|Z|3d)?|matrix(3d)?|perspective|skew(X|Y)?)$/i;
function isTransform(value) {
  return !!(value && supportedTransforms.test(value));
}
exports.default = isTransform;

},

// node_modules/dom-helpers/esm/camelize.js @216
216: function(__fusereq, exports, module){
exports.__esModule = true;
var rHyphen = /-(.)/g;
function camelize(string) {
  return string.replace(rHyphen, function (_, chr) {
    return chr.toUpperCase();
  });
}
exports.default = camelize;

},

// node_modules/dom-helpers/esm/matches.js @218
218: function(__fusereq, exports, module){
exports.__esModule = true;
var matchesImpl;
function matches(node, selector) {
  if (!matchesImpl) {
    var body = document.body;
    var nativeMatch = body.matches || body.matchesSelector || body.webkitMatchesSelector || body.mozMatchesSelector || body.msMatchesSelector;
    matchesImpl = function matchesImpl(n, s) {
      return nativeMatch.call(n, s);
    };
  }
  return matchesImpl(node, selector);
}
exports.default = matches;

},

// node_modules/dom-helpers/esm/querySelectorAll.js @219
219: function(__fusereq, exports, module){
exports.__esModule = true;
var toArray = Function.prototype.bind.call(Function.prototype.call, [].slice);
function qsa(element, selector) {
  return toArray(element.querySelectorAll(selector));
}
exports.default = qsa;

},

// node_modules/dom-helpers/esm/listen.js @225
225: function(__fusereq, exports, module){
exports.__esModule = true;
var addEventListener_1 = __fusereq(157);
var addEventListener_1d = __fuse.dt(addEventListener_1);
var removeEventListener_1 = __fusereq(160);
var removeEventListener_1d = __fuse.dt(removeEventListener_1);
function listen(node, eventName, handler, options) {
  addEventListener_1d.default(node, eventName, handler, options);
  return function () {
    removeEventListener_1d.default(node, eventName, handler, options);
  };
}
exports.default = listen;

},

// node_modules/dom-helpers/esm/triggerEvent.js @226
226: function(__fusereq, exports, module){
exports.__esModule = true;
function triggerEvent(node, eventName, bubbles, cancelable) {
  if (bubbles === void 0) {
    bubbles = false;
  }
  if (cancelable === void 0) {
    cancelable = true;
  }
  if (node) {
    var event = document.createEvent('HTMLEvents');
    event.initEvent(eventName, bubbles, cancelable);
    node.dispatchEvent(event);
  }
}
exports.default = triggerEvent;

},

// node_modules/dom-helpers/esm/hasClass.js @233
233: function(__fusereq, exports, module){
exports.__esModule = true;
function hasClass(element, className) {
  if (element.classList) return !!className && element.classList.contains(className);
  return (" " + (element.className.baseVal || element.className) + " ").indexOf(" " + className + " ") !== -1;
}
exports.default = hasClass;

},

// node_modules/dom-helpers/esm/activeElement.js @235
235: function(__fusereq, exports, module){
exports.__esModule = true;
var ownerDocument_1 = __fusereq(159);
var ownerDocument_1d = __fuse.dt(ownerDocument_1);
function activeElement(doc) {
  if (doc === void 0) {
    doc = ownerDocument_1d.default();
  }
  try {
    var active = doc.activeElement;
    if (!active || !active.nodeName) return null;
    return active;
  } catch (e) {
    return doc.body;
  }
}
exports.default = activeElement;

},

// node_modules/dom-helpers/esm/ownerWindow.js @276
276: function(__fusereq, exports, module){
exports.__esModule = true;
var ownerDocument_1 = __fusereq(159);
var ownerDocument_1d = __fuse.dt(ownerDocument_1);
function ownerWindow(node) {
  var doc = ownerDocument_1d.default(node);
  return doc && doc.defaultView || window;
}
exports.default = ownerWindow;

},

// node_modules/dom-helpers/esm/hyphenate.js @278
278: function(__fusereq, exports, module){
exports.__esModule = true;
var rUpper = /([A-Z])/g;
function hyphenate(string) {
  return string.replace(rUpper, '-$1').toLowerCase();
}
exports.default = hyphenate;

},

// node_modules/dom-helpers/esm/addClass.js @280
280: function(__fusereq, exports, module){
exports.__esModule = true;
var hasClass_1 = __fusereq(233);
var hasClass_1d = __fuse.dt(hasClass_1);
function addClass(element, className) {
  if (element.classList) element.classList.add(className); else if (!hasClass_1d.default(element, className)) if (typeof element.className === 'string') element.className = element.className + " " + className; else element.setAttribute('class', (element.className && element.className.baseVal || '') + " " + className);
}
exports.default = addClass;

},

// node_modules/dom-helpers/esm/removeClass.js @281
281: function(__fusereq, exports, module){
exports.__esModule = true;
function replaceClassName(origClass, classToRemove) {
  return origClass.replace(new RegExp("(^|\\s)" + classToRemove + "(?:\\s|$)", 'g'), '$1').replace(/\s+/g, ' ').replace(/^\s*|\s*$/g, '');
}
function removeClass(element, className) {
  if (element.classList) {
    element.classList.remove(className);
  } else if (typeof element.className === 'string') {
    element.className = replaceClassName(element.className, className);
  } else {
    element.setAttribute('class', replaceClassName(element.className && element.className.baseVal || '', className));
  }
}
exports.default = removeClass;

},

// node_modules/dom-helpers/esm/isWindow.js @327
327: function(__fusereq, exports, module){
exports.__esModule = true;
var isDocument_1 = __fusereq(369);
var isDocument_1d = __fuse.dt(isDocument_1);
function isWindow(node) {
  if (('window' in node) && node.window === node) return node;
  if (isDocument_1d.default(node)) return node.defaultView || false;
  return false;
}
exports.default = isWindow;

},

// node_modules/dom-helpers/esm/isDocument.js @369
369: function(__fusereq, exports, module){
exports.__esModule = true;
function isDocument(element) {
  return ('nodeType' in element) && element.nodeType === document.DOCUMENT_NODE;
}
exports.default = isDocument;

},

// node_modules/react-transition-group/esm/Transition.js @134
134: function(__fusereq, exports, module){
exports.__esModule = true;
var objectWithoutPropertiesLoose_1 = __fusereq(123);
var objectWithoutPropertiesLoose_1d = __fuse.dt(objectWithoutPropertiesLoose_1);
var inheritsLoose_1 = __fusereq(177);
var inheritsLoose_1d = __fuse.dt(inheritsLoose_1);
var prop_types_1 = __fusereq(112);
var prop_types_1d = __fuse.dt(prop_types_1);
var react_1 = __fusereq(3);
var react_1d = __fuse.dt(react_1);
var react_dom_1 = __fusereq(4);
var react_dom_1d = __fuse.dt(react_dom_1);
var config_1 = __fusereq(208);
var config_1d = __fuse.dt(config_1);
var PropTypes_1 = __fusereq(209);
var TransitionGroupContext_1 = __fusereq(210);
var TransitionGroupContext_1d = __fuse.dt(TransitionGroupContext_1);
exports.UNMOUNTED = 'unmounted';
exports.EXITED = 'exited';
exports.ENTERING = 'entering';
exports.ENTERED = 'entered';
exports.EXITING = 'exiting';
var Transition = (function (_React$Component) {
  inheritsLoose_1d.default(Transition, _React$Component);
  function Transition(props, context) {
    var _this;
    _this = _React$Component.call(this, props, context) || this;
    var parentGroup = context;
    var appear = parentGroup && !parentGroup.isMounting ? props.enter : props.appear;
    var initialStatus;
    _this.appearStatus = null;
    if (props.in) {
      if (appear) {
        initialStatus = exports.EXITED;
        _this.appearStatus = exports.ENTERING;
      } else {
        initialStatus = exports.ENTERED;
      }
    } else {
      if (props.unmountOnExit || props.mountOnEnter) {
        initialStatus = exports.UNMOUNTED;
      } else {
        initialStatus = exports.EXITED;
      }
    }
    _this.state = {
      status: initialStatus
    };
    _this.nextCallback = null;
    return _this;
  }
  Transition.getDerivedStateFromProps = function getDerivedStateFromProps(_ref, prevState) {
    var nextIn = _ref.in;
    if (nextIn && prevState.status === exports.UNMOUNTED) {
      return {
        status: exports.EXITED
      };
    }
    return null;
  };
  var _proto = Transition.prototype;
  _proto.componentDidMount = function componentDidMount() {
    this.updateStatus(true, this.appearStatus);
  };
  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
    var nextStatus = null;
    if (prevProps !== this.props) {
      var status = this.state.status;
      if (this.props.in) {
        if (status !== exports.ENTERING && status !== exports.ENTERED) {
          nextStatus = exports.ENTERING;
        }
      } else {
        if (status === exports.ENTERING || status === exports.ENTERED) {
          nextStatus = exports.EXITING;
        }
      }
    }
    this.updateStatus(false, nextStatus);
  };
  _proto.componentWillUnmount = function componentWillUnmount() {
    this.cancelNextCallback();
  };
  _proto.getTimeouts = function getTimeouts() {
    var timeout = this.props.timeout;
    var exit, enter, appear;
    exit = enter = appear = timeout;
    if (timeout != null && typeof timeout !== 'number') {
      exit = timeout.exit;
      enter = timeout.enter;
      appear = timeout.appear !== undefined ? timeout.appear : enter;
    }
    return {
      exit: exit,
      enter: enter,
      appear: appear
    };
  };
  _proto.updateStatus = function updateStatus(mounting, nextStatus) {
    if (mounting === void 0) {
      mounting = false;
    }
    if (nextStatus !== null) {
      this.cancelNextCallback();
      if (nextStatus === exports.ENTERING) {
        this.performEnter(mounting);
      } else {
        this.performExit();
      }
    } else if (this.props.unmountOnExit && this.state.status === exports.EXITED) {
      this.setState({
        status: exports.UNMOUNTED
      });
    }
  };
  _proto.performEnter = function performEnter(mounting) {
    var _this2 = this;
    var enter = this.props.enter;
    var appearing = this.context ? this.context.isMounting : mounting;
    var _ref2 = this.props.nodeRef ? [appearing] : [react_dom_1d.default.findDOMNode(this), appearing], maybeNode = _ref2[0], maybeAppearing = _ref2[1];
    var timeouts = this.getTimeouts();
    var enterTimeout = appearing ? timeouts.appear : timeouts.enter;
    if (!mounting && !enter || config_1d.default.disabled) {
      this.safeSetState({
        status: exports.ENTERED
      }, function () {
        _this2.props.onEntered(maybeNode);
      });
      return;
    }
    this.props.onEnter(maybeNode, maybeAppearing);
    this.safeSetState({
      status: exports.ENTERING
    }, function () {
      _this2.props.onEntering(maybeNode, maybeAppearing);
      _this2.onTransitionEnd(enterTimeout, function () {
        _this2.safeSetState({
          status: exports.ENTERED
        }, function () {
          _this2.props.onEntered(maybeNode, maybeAppearing);
        });
      });
    });
  };
  _proto.performExit = function performExit() {
    var _this3 = this;
    var exit = this.props.exit;
    var timeouts = this.getTimeouts();
    var maybeNode = this.props.nodeRef ? undefined : react_dom_1d.default.findDOMNode(this);
    if (!exit || config_1d.default.disabled) {
      this.safeSetState({
        status: exports.EXITED
      }, function () {
        _this3.props.onExited(maybeNode);
      });
      return;
    }
    this.props.onExit(maybeNode);
    this.safeSetState({
      status: exports.EXITING
    }, function () {
      _this3.props.onExiting(maybeNode);
      _this3.onTransitionEnd(timeouts.exit, function () {
        _this3.safeSetState({
          status: exports.EXITED
        }, function () {
          _this3.props.onExited(maybeNode);
        });
      });
    });
  };
  _proto.cancelNextCallback = function cancelNextCallback() {
    if (this.nextCallback !== null) {
      this.nextCallback.cancel();
      this.nextCallback = null;
    }
  };
  _proto.safeSetState = function safeSetState(nextState, callback) {
    callback = this.setNextCallback(callback);
    this.setState(nextState, callback);
  };
  _proto.setNextCallback = function setNextCallback(callback) {
    var _this4 = this;
    var active = true;
    this.nextCallback = function (event) {
      if (active) {
        active = false;
        _this4.nextCallback = null;
        callback(event);
      }
    };
    this.nextCallback.cancel = function () {
      active = false;
    };
    return this.nextCallback;
  };
  _proto.onTransitionEnd = function onTransitionEnd(timeout, handler) {
    this.setNextCallback(handler);
    var node = this.props.nodeRef ? this.props.nodeRef.current : react_dom_1d.default.findDOMNode(this);
    var doesNotHaveTimeoutOrListener = timeout == null && !this.props.addEndListener;
    if (!node || doesNotHaveTimeoutOrListener) {
      setTimeout(this.nextCallback, 0);
      return;
    }
    if (this.props.addEndListener) {
      var _ref3 = this.props.nodeRef ? [this.nextCallback] : [node, this.nextCallback], maybeNode = _ref3[0], maybeNextCallback = _ref3[1];
      this.props.addEndListener(maybeNode, maybeNextCallback);
    }
    if (timeout != null) {
      setTimeout(this.nextCallback, timeout);
    }
  };
  _proto.render = function render() {
    var status = this.state.status;
    if (status === exports.UNMOUNTED) {
      return null;
    }
    var _this$props = this.props, children = _this$props.children, _in = _this$props.in, _mountOnEnter = _this$props.mountOnEnter, _unmountOnExit = _this$props.unmountOnExit, _appear = _this$props.appear, _enter = _this$props.enter, _exit = _this$props.exit, _timeout = _this$props.timeout, _addEndListener = _this$props.addEndListener, _onEnter = _this$props.onEnter, _onEntering = _this$props.onEntering, _onEntered = _this$props.onEntered, _onExit = _this$props.onExit, _onExiting = _this$props.onExiting, _onExited = _this$props.onExited, _nodeRef = _this$props.nodeRef, childProps = objectWithoutPropertiesLoose_1d.default(_this$props, ["children", "in", "mountOnEnter", "unmountOnExit", "appear", "enter", "exit", "timeout", "addEndListener", "onEnter", "onEntering", "onEntered", "onExit", "onExiting", "onExited", "nodeRef"]);
    return react_1d.default.createElement(TransitionGroupContext_1d.default.Provider, {
      value: null
    }, typeof children === 'function' ? children(status, childProps) : react_1d.default.cloneElement(react_1d.default.Children.only(children), childProps));
  };
  return Transition;
})(react_1d.default.Component);
Transition.contextType = TransitionGroupContext_1d.default;
Transition.propTypes = "development" !== "production" ? {
  nodeRef: prop_types_1d.default.shape({
    current: typeof Element === 'undefined' ? prop_types_1d.default.any : prop_types_1d.default.instanceOf(Element)
  }),
  children: prop_types_1d.default.oneOfType([prop_types_1d.default.func.isRequired, prop_types_1d.default.element.isRequired]).isRequired,
  in: prop_types_1d.default.bool,
  mountOnEnter: prop_types_1d.default.bool,
  unmountOnExit: prop_types_1d.default.bool,
  appear: prop_types_1d.default.bool,
  enter: prop_types_1d.default.bool,
  exit: prop_types_1d.default.bool,
  timeout: function timeout(props) {
    var pt = PropTypes_1.timeoutsShape;
    if (!props.addEndListener) pt = pt.isRequired;
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    return pt.apply(void 0, [props].concat(args));
  },
  addEndListener: prop_types_1d.default.func,
  onEnter: prop_types_1d.default.func,
  onEntering: prop_types_1d.default.func,
  onEntered: prop_types_1d.default.func,
  onExit: prop_types_1d.default.func,
  onExiting: prop_types_1d.default.func,
  onExited: prop_types_1d.default.func
} : {};
function noop() {}
Transition.defaultProps = {
  in: false,
  mountOnEnter: false,
  unmountOnExit: false,
  appear: false,
  enter: true,
  exit: true,
  onEnter: noop,
  onEntering: noop,
  onEntered: noop,
  onExit: noop,
  onExiting: noop,
  onExited: noop
};
Transition.UNMOUNTED = exports.UNMOUNTED;
Transition.EXITED = exports.EXITED;
Transition.ENTERING = exports.ENTERING;
Transition.ENTERED = exports.ENTERED;
Transition.EXITING = exports.EXITING;
exports.default = Transition;

},

// node_modules/react-transition-group/esm/config.js @208
208: function(__fusereq, exports, module){
exports.__esModule = true;
exports.default = {
  disabled: false
};

},

// node_modules/react-transition-group/esm/utils/PropTypes.js @209
209: function(__fusereq, exports, module){
exports.__esModule = true;
var prop_types_1 = __fusereq(112);
var prop_types_1d = __fuse.dt(prop_types_1);
exports.timeoutsShape = "development" !== 'production' ? prop_types_1d.default.oneOfType([prop_types_1d.default.number, prop_types_1d.default.shape({
  enter: prop_types_1d.default.number,
  exit: prop_types_1d.default.number,
  appear: prop_types_1d.default.number
}).isRequired]) : null;
exports.classNamesShape = "development" !== 'production' ? prop_types_1d.default.oneOfType([prop_types_1d.default.string, prop_types_1d.default.shape({
  enter: prop_types_1d.default.string,
  exit: prop_types_1d.default.string,
  active: prop_types_1d.default.string
}), prop_types_1d.default.shape({
  enter: prop_types_1d.default.string,
  enterDone: prop_types_1d.default.string,
  enterActive: prop_types_1d.default.string,
  exit: prop_types_1d.default.string,
  exitDone: prop_types_1d.default.string,
  exitActive: prop_types_1d.default.string
})]) : null;

},

// node_modules/react-transition-group/esm/TransitionGroupContext.js @210
210: function(__fusereq, exports, module){
exports.__esModule = true;
var react_1 = __fusereq(3);
var react_1d = __fuse.dt(react_1);
exports.default = react_1d.default.createContext(null);

},

// node_modules/warning/warning.js @152
152: function(__fusereq, exports, module){
'use strict';
var __DEV__ = "development" !== 'production';
var warning = function () {};
if (__DEV__) {
  var printWarning = function printWarning(format, args) {
    var len = arguments.length;
    args = new Array(len > 1 ? len - 1 : 0);
    for (var key = 1; key < len; key++) {
      args[key - 1] = arguments[key];
    }
    var argIndex = 0;
    var message = 'Warning: ' + format.replace(/%s/g, function () {
      return args[argIndex++];
    });
    if (typeof console !== 'undefined') {
      console.error(message);
    }
    try {
      throw new Error(message);
    } catch (x) {}
  };
  warning = function (condition, format, args) {
    var len = arguments.length;
    args = new Array(len > 2 ? len - 2 : 0);
    for (var key = 2; key < len; key++) {
      args[key - 2] = arguments[key];
    }
    if (format === undefined) {
      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
    }
    if (!condition) {
      printWarning.apply(null, [format].concat(args));
    }
  };
}
module.exports = warning;

},

// node_modules/@restart/hooks/esm/useEventCallback.js @127
127: function(__fusereq, exports, module){
exports.__esModule = true;
var react_1 = __fusereq(3);
var useCommittedRef_1 = __fusereq(143);
var useCommittedRef_1d = __fuse.dt(useCommittedRef_1);
function useEventCallback(fn) {
  var ref = useCommittedRef_1d.default(fn);
  return react_1.useCallback(function () {
    return ref.current && ref.current.apply(ref, arguments);
  }, [ref]);
}
exports.default = useEventCallback;

},

// node_modules/@restart/hooks/esm/useUpdateEffect.js @142
142: function(__fusereq, exports, module){
exports.__esModule = true;
var react_1 = __fusereq(3);
function useUpdateEffect(fn, deps) {
  var isFirst = react_1.useRef(true);
  react_1.useEffect(function () {
    if (isFirst.current) {
      isFirst.current = false;
      return;
    }
    return fn();
  }, deps);
}
exports.default = useUpdateEffect;

},

// node_modules/@restart/hooks/esm/useCommittedRef.js @143
143: function(__fusereq, exports, module){
exports.__esModule = true;
var react_1 = __fusereq(3);
function useCommittedRef(value) {
  var ref = react_1.useRef(value);
  react_1.useEffect(function () {
    ref.current = value;
  }, [value]);
  return ref;
}
exports.default = useCommittedRef;

},

// node_modules/@restart/hooks/esm/useTimeout.js @144
144: function(__fusereq, exports, module){
exports.__esModule = true;
var react_1 = __fusereq(3);
var useMounted_1 = __fusereq(215);
var useMounted_1d = __fuse.dt(useMounted_1);
var useWillUnmount_1 = __fusereq(163);
var useWillUnmount_1d = __fuse.dt(useWillUnmount_1);
var MAX_DELAY_MS = Math.pow(2, 31) - 1;
function setChainedTimeout(handleRef, fn, timeoutAtMs) {
  var delayMs = timeoutAtMs - Date.now();
  handleRef.current = delayMs <= MAX_DELAY_MS ? setTimeout(fn, delayMs) : setTimeout(function () {
    return setChainedTimeout(handleRef, fn, timeoutAtMs);
  }, MAX_DELAY_MS);
}
function useTimeout() {
  var isMounted = useMounted_1d.default();
  var handleRef = react_1.useRef();
  useWillUnmount_1d.default(function () {
    return clearTimeout(handleRef.current);
  });
  return react_1.useMemo(function () {
    var clear = function clear() {
      return clearTimeout(handleRef.current);
    };
    function set(fn, delayMs) {
      if (delayMs === void 0) {
        delayMs = 0;
      }
      if (!isMounted()) return;
      clear();
      if (delayMs <= MAX_DELAY_MS) {
        handleRef.current = setTimeout(fn, delayMs);
      } else {
        setChainedTimeout(handleRef, fn, Date.now() + delayMs);
      }
    }
    return {
      set: set,
      clear: clear
    };
  }, []);
}
exports.default = useTimeout;

},

// node_modules/@restart/hooks/esm/useCallbackRef.js @162
162: function(__fusereq, exports, module){
exports.__esModule = true;
var react_1 = __fusereq(3);
function useCallbackRef() {
  return react_1.useState(null);
}
exports.default = useCallbackRef;

},

// node_modules/@restart/hooks/esm/useWillUnmount.js @163
163: function(__fusereq, exports, module){
exports.__esModule = true;
var useUpdatedRef_1 = __fusereq(224);
var useUpdatedRef_1d = __fuse.dt(useUpdatedRef_1);
var react_1 = __fusereq(3);
function useWillUnmount(fn) {
  var onUnmount = useUpdatedRef_1d.default(fn);
  react_1.useEffect(function () {
    return function () {
      return onUnmount.current();
    };
  }, []);
}
exports.default = useWillUnmount;

},

// node_modules/@restart/hooks/esm/useMergedRefs.js @213
213: function(__fusereq, exports, module){
exports.__esModule = true;
var react_1 = __fusereq(3);
var toFnRef = function toFnRef(ref) {
  return !ref || typeof ref === 'function' ? ref : function (value) {
    ref.current = value;
  };
};
function mergeRefs(refA, refB) {
  var a = toFnRef(refA);
  var b = toFnRef(refB);
  return function (value) {
    if (a) a(value);
    if (b) b(value);
  };
}
exports.mergeRefs = mergeRefs;
function useMergedRefs(refA, refB) {
  return react_1.useMemo(function () {
    return mergeRefs(refA, refB);
  }, [refA, refB]);
}
exports.default = useMergedRefs;

},

// node_modules/@restart/hooks/esm/useMounted.js @215
215: function(__fusereq, exports, module){
exports.__esModule = true;
var react_1 = __fusereq(3);
function useMounted() {
  var mounted = react_1.useRef(true);
  var isMounted = react_1.useRef(function () {
    return mounted.current;
  });
  react_1.useEffect(function () {
    return function () {
      mounted.current = false;
    };
  }, []);
  return isMounted.current;
}
exports.default = useMounted;

},

// node_modules/@restart/hooks/esm/usePrevious.js @220
220: function(__fusereq, exports, module){
exports.__esModule = true;
var react_1 = __fusereq(3);
function usePrevious(value) {
  var ref = react_1.useRef(null);
  react_1.useEffect(function () {
    ref.current = value;
  });
  return ref.current;
}
exports.default = usePrevious;

},

// node_modules/@restart/hooks/esm/useForceUpdate.js @221
221: function(__fusereq, exports, module){
exports.__esModule = true;
var react_1 = __fusereq(3);
function useForceUpdate() {
  var _useReducer = react_1.useReducer(function (state) {
    return !state;
  }, false), dispatch = _useReducer[1];
  return dispatch;
}
exports.default = useForceUpdate;

},

// node_modules/@restart/hooks/esm/useGlobalListener.js @222
222: function(__fusereq, exports, module){
exports.__esModule = true;
var useEventListener_1 = __fusereq(279);
var useEventListener_1d = __fuse.dt(useEventListener_1);
var react_1 = __fusereq(3);
function useGlobalListener(event, handler, capture) {
  if (capture === void 0) {
    capture = false;
  }
  var documentTarget = react_1.useCallback(function () {
    return document;
  }, []);
  return useEventListener_1d.default(documentTarget, event, handler, capture);
}
exports.default = useGlobalListener;

},

// node_modules/@restart/hooks/esm/useUpdatedRef.js @224
224: function(__fusereq, exports, module){
exports.__esModule = true;
var react_1 = __fusereq(3);
function useUpdatedRef(value) {
  var valueRef = react_1.useRef(value);
  valueRef.current = value;
  return valueRef;
}
exports.default = useUpdatedRef;

},

// node_modules/@restart/hooks/esm/useEventListener.js @279
279: function(__fusereq, exports, module){
exports.__esModule = true;
var react_1 = __fusereq(3);
var useEventCallback_1 = __fusereq(127);
var useEventCallback_1d = __fuse.dt(useEventCallback_1);
function useEventListener(eventTarget, event, listener, capture) {
  if (capture === void 0) {
    capture = false;
  }
  var handler = useEventCallback_1d.default(listener);
  react_1.useEffect(function () {
    var target = typeof eventTarget === 'function' ? eventTarget() : eventTarget;
    target.addEventListener(event, handler, capture);
    return function () {
      return target.removeEventListener(event, handler, capture);
    };
  }, [eventTarget]);
}
exports.default = useEventListener;

},

// node_modules/@restart/hooks/esm/useSafeState.js @284
284: function(__fusereq, exports, module){
exports.__esModule = true;
var react_1 = __fusereq(3);
var useMounted_1 = __fusereq(215);
var useMounted_1d = __fuse.dt(useMounted_1);
function useSafeState(state) {
  var isMounted = useMounted_1d.default();
  return [state[0], react_1.useCallback(function (nextState) {
    if (!isMounted()) return;
    return state[1](nextState);
  }, [isMounted, state[1]])];
}
exports.default = useSafeState;

},

// node_modules/@popperjs/core/lib/modifiers/arrow.js @286
286: function(__fusereq, exports, module){
exports.__esModule = true;
var getBasePlacement_js_1 = __fusereq(328);
var getBasePlacement_js_1d = __fuse.dt(getBasePlacement_js_1);
var getLayoutRect_js_1 = __fusereq(329);
var getLayoutRect_js_1d = __fuse.dt(getLayoutRect_js_1);
var contains_js_1 = __fusereq(330);
var contains_js_1d = __fuse.dt(contains_js_1);
var getOffsetParent_js_1 = __fusereq(331);
var getOffsetParent_js_1d = __fuse.dt(getOffsetParent_js_1);
var getMainAxisFromPlacement_js_1 = __fusereq(332);
var getMainAxisFromPlacement_js_1d = __fuse.dt(getMainAxisFromPlacement_js_1);
var within_js_1 = __fusereq(333);
var within_js_1d = __fuse.dt(within_js_1);
var mergePaddingObject_js_1 = __fusereq(334);
var mergePaddingObject_js_1d = __fuse.dt(mergePaddingObject_js_1);
var expandToHashMap_js_1 = __fusereq(335);
var expandToHashMap_js_1d = __fuse.dt(expandToHashMap_js_1);
var enums_js_1 = __fusereq(294);
var instanceOf_js_1 = __fusereq(336);
var toPaddingObject = function toPaddingObject(padding, state) {
  padding = typeof padding === 'function' ? padding(Object.assign({}, state.rects, {
    placement: state.placement
  })) : padding;
  return mergePaddingObject_js_1d.default(typeof padding !== 'number' ? padding : expandToHashMap_js_1d.default(padding, enums_js_1.basePlacements));
};
function arrow(_ref) {
  var _state$modifiersData$;
  var state = _ref.state, name = _ref.name, options = _ref.options;
  var arrowElement = state.elements.arrow;
  var popperOffsets = state.modifiersData.popperOffsets;
  var basePlacement = getBasePlacement_js_1d.default(state.placement);
  var axis = getMainAxisFromPlacement_js_1d.default(basePlacement);
  var isVertical = [enums_js_1.left, enums_js_1.right].indexOf(basePlacement) >= 0;
  var len = isVertical ? 'height' : 'width';
  if (!arrowElement || !popperOffsets) {
    return;
  }
  var paddingObject = toPaddingObject(options.padding, state);
  var arrowRect = getLayoutRect_js_1d.default(arrowElement);
  var minProp = axis === 'y' ? enums_js_1.top : enums_js_1.left;
  var maxProp = axis === 'y' ? enums_js_1.bottom : enums_js_1.right;
  var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets[axis] - state.rects.popper[len];
  var startDiff = popperOffsets[axis] - state.rects.reference[axis];
  var arrowOffsetParent = getOffsetParent_js_1d.default(arrowElement);
  var clientSize = arrowOffsetParent ? axis === 'y' ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
  var centerToReference = endDiff / 2 - startDiff / 2;
  var min = paddingObject[minProp];
  var max = clientSize - arrowRect[len] - paddingObject[maxProp];
  var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
  var offset = within_js_1d.default(min, center, max);
  var axisProp = axis;
  state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset, _state$modifiersData$.centerOffset = offset - center, _state$modifiersData$);
}
function effect(_ref2) {
  var state = _ref2.state, options = _ref2.options;
  var _options$element = options.element, arrowElement = _options$element === void 0 ? '[data-popper-arrow]' : _options$element;
  if (arrowElement == null) {
    return;
  }
  if (typeof arrowElement === 'string') {
    arrowElement = state.elements.popper.querySelector(arrowElement);
    if (!arrowElement) {
      return;
    }
  }
  if (!instanceOf_js_1.isHTMLElement(arrowElement)) {
    console.error(['Popper: "arrow" element must be an HTMLElement (not an SVGElement).', 'To use an SVG arrow, wrap it in an HTMLElement that will be used as', 'the arrow.'].join(' '));
  }
  if (!contains_js_1d.default(state.elements.popper, arrowElement)) {
    console.error(['Popper: "arrow" modifier\'s `element` must be a child of the popper', 'element.'].join(' '));
    return;
  }
  state.elements.arrow = arrowElement;
}
exports.default = {
  name: 'arrow',
  enabled: true,
  phase: 'main',
  fn: arrow,
  effect: effect,
  requires: ['popperOffsets'],
  requiresIfExists: ['preventOverflow']
};

},

// node_modules/@popperjs/core/lib/modifiers/computeStyles.js @287
287: function(__fusereq, exports, module){
exports.__esModule = true;
var enums_js_1 = __fusereq(294);
var getOffsetParent_js_1 = __fusereq(331);
var getOffsetParent_js_1d = __fuse.dt(getOffsetParent_js_1);
var getWindow_js_1 = __fusereq(337);
var getWindow_js_1d = __fuse.dt(getWindow_js_1);
var getDocumentElement_js_1 = __fusereq(338);
var getDocumentElement_js_1d = __fuse.dt(getDocumentElement_js_1);
var getComputedStyle_js_1 = __fusereq(339);
var getComputedStyle_js_1d = __fuse.dt(getComputedStyle_js_1);
var getBasePlacement_js_1 = __fusereq(328);
var getBasePlacement_js_1d = __fuse.dt(getBasePlacement_js_1);
var math_js_1 = __fusereq(340);
var unsetSides = {
  top: 'auto',
  right: 'auto',
  bottom: 'auto',
  left: 'auto'
};
function roundOffsetsByDPR(_ref) {
  var x = _ref.x, y = _ref.y;
  var win = window;
  var dpr = win.devicePixelRatio || 1;
  return {
    x: math_js_1.round(math_js_1.round(x * dpr) / dpr) || 0,
    y: math_js_1.round(math_js_1.round(y * dpr) / dpr) || 0
  };
}
function mapToStyles(_ref2) {
  var _Object$assign2;
  var popper = _ref2.popper, popperRect = _ref2.popperRect, placement = _ref2.placement, offsets = _ref2.offsets, position = _ref2.position, gpuAcceleration = _ref2.gpuAcceleration, adaptive = _ref2.adaptive, roundOffsets = _ref2.roundOffsets;
  var _ref3 = roundOffsets === true ? roundOffsetsByDPR(offsets) : typeof roundOffsets === 'function' ? roundOffsets(offsets) : offsets, _ref3$x = _ref3.x, x = _ref3$x === void 0 ? 0 : _ref3$x, _ref3$y = _ref3.y, y = _ref3$y === void 0 ? 0 : _ref3$y;
  var hasX = offsets.hasOwnProperty('x');
  var hasY = offsets.hasOwnProperty('y');
  var sideX = enums_js_1.left;
  var sideY = enums_js_1.top;
  var win = window;
  if (adaptive) {
    var offsetParent = getOffsetParent_js_1d.default(popper);
    var heightProp = 'clientHeight';
    var widthProp = 'clientWidth';
    if (offsetParent === getWindow_js_1d.default(popper)) {
      offsetParent = getDocumentElement_js_1d.default(popper);
      if (getComputedStyle_js_1d.default(offsetParent).position !== 'static') {
        heightProp = 'scrollHeight';
        widthProp = 'scrollWidth';
      }
    }
    offsetParent = offsetParent;
    if (placement === enums_js_1.top) {
      sideY = enums_js_1.bottom;
      y -= offsetParent[heightProp] - popperRect.height;
      y *= gpuAcceleration ? 1 : -1;
    }
    if (placement === enums_js_1.left) {
      sideX = enums_js_1.right;
      x -= offsetParent[widthProp] - popperRect.width;
      x *= gpuAcceleration ? 1 : -1;
    }
  }
  var commonStyles = Object.assign({
    position: position
  }, adaptive && unsetSides);
  if (gpuAcceleration) {
    var _Object$assign;
    return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? '0' : '', _Object$assign[sideX] = hasX ? '0' : '', _Object$assign.transform = (win.devicePixelRatio || 1) < 2 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
  }
  return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : '', _Object$assign2[sideX] = hasX ? x + "px" : '', _Object$assign2.transform = '', _Object$assign2));
}
exports.mapToStyles = mapToStyles;
function computeStyles(_ref4) {
  var state = _ref4.state, options = _ref4.options;
  var _options$gpuAccelerat = options.gpuAcceleration, gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat, _options$adaptive = options.adaptive, adaptive = _options$adaptive === void 0 ? true : _options$adaptive, _options$roundOffsets = options.roundOffsets, roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;
  var transitionProperty = getComputedStyle_js_1d.default(state.elements.popper).transitionProperty || '';
  if (adaptive && ['transform', 'top', 'right', 'bottom', 'left'].some(function (property) {
    return transitionProperty.indexOf(property) >= 0;
  })) {
    console.warn(['Popper: Detected CSS transitions on at least one of the following', 'CSS properties: "transform", "top", "right", "bottom", "left".', '\n\n', 'Disable the "computeStyles" modifier\'s `adaptive` option to allow', 'for smooth transitions, or remove these properties from the CSS', 'transition declaration on the popper element if only transitioning', 'opacity or background-color for example.', '\n\n', 'We recommend using the popper element as a wrapper around an inner', 'element that can have any CSS property transitioned for animations.'].join(' '));
  }
  var commonStyles = {
    placement: getBasePlacement_js_1d.default(state.placement),
    popper: state.elements.popper,
    popperRect: state.rects.popper,
    gpuAcceleration: gpuAcceleration
  };
  if (state.modifiersData.popperOffsets != null) {
    state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
      offsets: state.modifiersData.popperOffsets,
      position: state.options.strategy,
      adaptive: adaptive,
      roundOffsets: roundOffsets
    })));
  }
  if (state.modifiersData.arrow != null) {
    state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
      offsets: state.modifiersData.arrow,
      position: 'absolute',
      adaptive: false,
      roundOffsets: roundOffsets
    })));
  }
  state.attributes.popper = Object.assign({}, state.attributes.popper, {
    'data-popper-placement': state.placement
  });
}
exports.default = {
  name: 'computeStyles',
  enabled: true,
  phase: 'beforeWrite',
  fn: computeStyles,
  data: {}
};

},

// node_modules/@popperjs/core/lib/modifiers/eventListeners.js @288
288: function(__fusereq, exports, module){
exports.__esModule = true;
var getWindow_js_1 = __fusereq(337);
var getWindow_js_1d = __fuse.dt(getWindow_js_1);
var passive = {
  passive: true
};
function effect(_ref) {
  var state = _ref.state, instance = _ref.instance, options = _ref.options;
  var _options$scroll = options.scroll, scroll = _options$scroll === void 0 ? true : _options$scroll, _options$resize = options.resize, resize = _options$resize === void 0 ? true : _options$resize;
  var window = getWindow_js_1d.default(state.elements.popper);
  var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);
  if (scroll) {
    scrollParents.forEach(function (scrollParent) {
      scrollParent.addEventListener('scroll', instance.update, passive);
    });
  }
  if (resize) {
    window.addEventListener('resize', instance.update, passive);
  }
  return function () {
    if (scroll) {
      scrollParents.forEach(function (scrollParent) {
        scrollParent.removeEventListener('scroll', instance.update, passive);
      });
    }
    if (resize) {
      window.removeEventListener('resize', instance.update, passive);
    }
  };
}
exports.default = {
  name: 'eventListeners',
  enabled: true,
  phase: 'write',
  fn: function fn() {},
  effect: effect,
  data: {}
};

},

// node_modules/@popperjs/core/lib/modifiers/flip.js @289
289: function(__fusereq, exports, module){
exports.__esModule = true;
var getOppositePlacement_js_1 = __fusereq(341);
var getOppositePlacement_js_1d = __fuse.dt(getOppositePlacement_js_1);
var getBasePlacement_js_1 = __fusereq(328);
var getBasePlacement_js_1d = __fuse.dt(getBasePlacement_js_1);
var getOppositeVariationPlacement_js_1 = __fusereq(342);
var getOppositeVariationPlacement_js_1d = __fuse.dt(getOppositeVariationPlacement_js_1);
var detectOverflow_js_1 = __fusereq(343);
var detectOverflow_js_1d = __fuse.dt(detectOverflow_js_1);
var computeAutoPlacement_js_1 = __fusereq(344);
var computeAutoPlacement_js_1d = __fuse.dt(computeAutoPlacement_js_1);
var enums_js_1 = __fusereq(294);
var getVariation_js_1 = __fusereq(345);
var getVariation_js_1d = __fuse.dt(getVariation_js_1);
function getExpandedFallbackPlacements(placement) {
  if (getBasePlacement_js_1d.default(placement) === enums_js_1.auto) {
    return [];
  }
  var oppositePlacement = getOppositePlacement_js_1d.default(placement);
  return [getOppositeVariationPlacement_js_1d.default(placement), oppositePlacement, getOppositeVariationPlacement_js_1d.default(oppositePlacement)];
}
function flip(_ref) {
  var state = _ref.state, options = _ref.options, name = _ref.name;
  if (state.modifiersData[name]._skip) {
    return;
  }
  var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis, specifiedFallbackPlacements = options.fallbackPlacements, padding = options.padding, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, _options$flipVariatio = options.flipVariations, flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio, allowedAutoPlacements = options.allowedAutoPlacements;
  var preferredPlacement = state.options.placement;
  var basePlacement = getBasePlacement_js_1d.default(preferredPlacement);
  var isBasePlacement = basePlacement === preferredPlacement;
  var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement_js_1d.default(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
  var placements = [preferredPlacement].concat(fallbackPlacements).reduce(function (acc, placement) {
    return acc.concat(getBasePlacement_js_1d.default(placement) === enums_js_1.auto ? computeAutoPlacement_js_1d.default(state, {
      placement: placement,
      boundary: boundary,
      rootBoundary: rootBoundary,
      padding: padding,
      flipVariations: flipVariations,
      allowedAutoPlacements: allowedAutoPlacements
    }) : placement);
  }, []);
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var checksMap = new Map();
  var makeFallbackChecks = true;
  var firstFittingPlacement = placements[0];
  for (var i = 0; i < placements.length; i++) {
    var placement = placements[i];
    var _basePlacement = getBasePlacement_js_1d.default(placement);
    var isStartVariation = getVariation_js_1d.default(placement) === enums_js_1.start;
    var isVertical = [enums_js_1.top, enums_js_1.bottom].indexOf(_basePlacement) >= 0;
    var len = isVertical ? 'width' : 'height';
    var overflow = detectOverflow_js_1d.default(state, {
      placement: placement,
      boundary: boundary,
      rootBoundary: rootBoundary,
      altBoundary: altBoundary,
      padding: padding
    });
    var mainVariationSide = isVertical ? isStartVariation ? enums_js_1.right : enums_js_1.left : isStartVariation ? enums_js_1.bottom : enums_js_1.top;
    if (referenceRect[len] > popperRect[len]) {
      mainVariationSide = getOppositePlacement_js_1d.default(mainVariationSide);
    }
    var altVariationSide = getOppositePlacement_js_1d.default(mainVariationSide);
    var checks = [];
    if (checkMainAxis) {
      checks.push(overflow[_basePlacement] <= 0);
    }
    if (checkAltAxis) {
      checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
    }
    if (checks.every(function (check) {
      return check;
    })) {
      firstFittingPlacement = placement;
      makeFallbackChecks = false;
      break;
    }
    checksMap.set(placement, checks);
  }
  if (makeFallbackChecks) {
    var numberOfChecks = flipVariations ? 3 : 1;
    var _loop = function _loop(_i) {
      var fittingPlacement = placements.find(function (placement) {
        var checks = checksMap.get(placement);
        if (checks) {
          return checks.slice(0, _i).every(function (check) {
            return check;
          });
        }
      });
      if (fittingPlacement) {
        firstFittingPlacement = fittingPlacement;
        return "break";
      }
    };
    for (var _i = numberOfChecks; _i > 0; _i--) {
      var _ret = _loop(_i);
      if (_ret === "break") break;
    }
  }
  if (state.placement !== firstFittingPlacement) {
    state.modifiersData[name]._skip = true;
    state.placement = firstFittingPlacement;
    state.reset = true;
  }
}
exports.default = {
  name: 'flip',
  enabled: true,
  phase: 'main',
  fn: flip,
  requiresIfExists: ['offset'],
  data: {
    _skip: false
  }
};

},

// node_modules/@popperjs/core/lib/modifiers/hide.js @290
290: function(__fusereq, exports, module){
exports.__esModule = true;
var enums_js_1 = __fusereq(294);
var detectOverflow_js_1 = __fusereq(343);
var detectOverflow_js_1d = __fuse.dt(detectOverflow_js_1);
function getSideOffsets(overflow, rect, preventedOffsets) {
  if (preventedOffsets === void 0) {
    preventedOffsets = {
      x: 0,
      y: 0
    };
  }
  return {
    top: overflow.top - rect.height - preventedOffsets.y,
    right: overflow.right - rect.width + preventedOffsets.x,
    bottom: overflow.bottom - rect.height + preventedOffsets.y,
    left: overflow.left - rect.width - preventedOffsets.x
  };
}
function isAnySideFullyClipped(overflow) {
  return [enums_js_1.top, enums_js_1.right, enums_js_1.bottom, enums_js_1.left].some(function (side) {
    return overflow[side] >= 0;
  });
}
function hide(_ref) {
  var state = _ref.state, name = _ref.name;
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var preventedOffsets = state.modifiersData.preventOverflow;
  var referenceOverflow = detectOverflow_js_1d.default(state, {
    elementContext: 'reference'
  });
  var popperAltOverflow = detectOverflow_js_1d.default(state, {
    altBoundary: true
  });
  var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
  var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
  var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
  var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
  state.modifiersData[name] = {
    referenceClippingOffsets: referenceClippingOffsets,
    popperEscapeOffsets: popperEscapeOffsets,
    isReferenceHidden: isReferenceHidden,
    hasPopperEscaped: hasPopperEscaped
  };
  state.attributes.popper = Object.assign({}, state.attributes.popper, {
    'data-popper-reference-hidden': isReferenceHidden,
    'data-popper-escaped': hasPopperEscaped
  });
}
exports.default = {
  name: 'hide',
  enabled: true,
  phase: 'main',
  requiresIfExists: ['preventOverflow'],
  fn: hide
};

},

// node_modules/@popperjs/core/lib/modifiers/offset.js @291
291: function(__fusereq, exports, module){
exports.__esModule = true;
var getBasePlacement_js_1 = __fusereq(328);
var getBasePlacement_js_1d = __fuse.dt(getBasePlacement_js_1);
var enums_js_1 = __fusereq(294);
function distanceAndSkiddingToXY(placement, rects, offset) {
  var basePlacement = getBasePlacement_js_1d.default(placement);
  var invertDistance = [enums_js_1.left, enums_js_1.top].indexOf(basePlacement) >= 0 ? -1 : 1;
  var _ref = typeof offset === 'function' ? offset(Object.assign({}, rects, {
    placement: placement
  })) : offset, skidding = _ref[0], distance = _ref[1];
  skidding = skidding || 0;
  distance = (distance || 0) * invertDistance;
  return [enums_js_1.left, enums_js_1.right].indexOf(basePlacement) >= 0 ? {
    x: distance,
    y: skidding
  } : {
    x: skidding,
    y: distance
  };
}
exports.distanceAndSkiddingToXY = distanceAndSkiddingToXY;
function offset(_ref2) {
  var state = _ref2.state, options = _ref2.options, name = _ref2.name;
  var _options$offset = options.offset, offset = _options$offset === void 0 ? [0, 0] : _options$offset;
  var data = enums_js_1.placements.reduce(function (acc, placement) {
    acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset);
    return acc;
  }, {});
  var _data$state$placement = data[state.placement], x = _data$state$placement.x, y = _data$state$placement.y;
  if (state.modifiersData.popperOffsets != null) {
    state.modifiersData.popperOffsets.x += x;
    state.modifiersData.popperOffsets.y += y;
  }
  state.modifiersData[name] = data;
}
exports.default = {
  name: 'offset',
  enabled: true,
  phase: 'main',
  requires: ['popperOffsets'],
  fn: offset
};

},

// node_modules/@popperjs/core/lib/modifiers/popperOffsets.js @292
292: function(__fusereq, exports, module){
exports.__esModule = true;
var computeOffsets_js_1 = __fusereq(346);
var computeOffsets_js_1d = __fuse.dt(computeOffsets_js_1);
function popperOffsets(_ref) {
  var state = _ref.state, name = _ref.name;
  state.modifiersData[name] = computeOffsets_js_1d.default({
    reference: state.rects.reference,
    element: state.rects.popper,
    strategy: 'absolute',
    placement: state.placement
  });
}
exports.default = {
  name: 'popperOffsets',
  enabled: true,
  phase: 'read',
  fn: popperOffsets,
  data: {}
};

},

// node_modules/@popperjs/core/lib/modifiers/preventOverflow.js @293
293: function(__fusereq, exports, module){
exports.__esModule = true;
var enums_js_1 = __fusereq(294);
var getBasePlacement_js_1 = __fusereq(328);
var getBasePlacement_js_1d = __fuse.dt(getBasePlacement_js_1);
var getMainAxisFromPlacement_js_1 = __fusereq(332);
var getMainAxisFromPlacement_js_1d = __fuse.dt(getMainAxisFromPlacement_js_1);
var getAltAxis_js_1 = __fusereq(347);
var getAltAxis_js_1d = __fuse.dt(getAltAxis_js_1);
var within_js_1 = __fusereq(333);
var within_js_1d = __fuse.dt(within_js_1);
var getLayoutRect_js_1 = __fusereq(329);
var getLayoutRect_js_1d = __fuse.dt(getLayoutRect_js_1);
var getOffsetParent_js_1 = __fusereq(331);
var getOffsetParent_js_1d = __fuse.dt(getOffsetParent_js_1);
var detectOverflow_js_1 = __fusereq(343);
var detectOverflow_js_1d = __fuse.dt(detectOverflow_js_1);
var getVariation_js_1 = __fusereq(345);
var getVariation_js_1d = __fuse.dt(getVariation_js_1);
var getFreshSideObject_js_1 = __fusereq(348);
var getFreshSideObject_js_1d = __fuse.dt(getFreshSideObject_js_1);
var math_js_1 = __fusereq(340);
function preventOverflow(_ref) {
  var state = _ref.state, options = _ref.options, name = _ref.name;
  var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, padding = options.padding, _options$tether = options.tether, tether = _options$tether === void 0 ? true : _options$tether, _options$tetherOffset = options.tetherOffset, tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
  var overflow = detectOverflow_js_1d.default(state, {
    boundary: boundary,
    rootBoundary: rootBoundary,
    padding: padding,
    altBoundary: altBoundary
  });
  var basePlacement = getBasePlacement_js_1d.default(state.placement);
  var variation = getVariation_js_1d.default(state.placement);
  var isBasePlacement = !variation;
  var mainAxis = getMainAxisFromPlacement_js_1d.default(basePlacement);
  var altAxis = getAltAxis_js_1d.default(mainAxis);
  var popperOffsets = state.modifiersData.popperOffsets;
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var tetherOffsetValue = typeof tetherOffset === 'function' ? tetherOffset(Object.assign({}, state.rects, {
    placement: state.placement
  })) : tetherOffset;
  var data = {
    x: 0,
    y: 0
  };
  if (!popperOffsets) {
    return;
  }
  if (checkMainAxis || checkAltAxis) {
    var mainSide = mainAxis === 'y' ? enums_js_1.top : enums_js_1.left;
    var altSide = mainAxis === 'y' ? enums_js_1.bottom : enums_js_1.right;
    var len = mainAxis === 'y' ? 'height' : 'width';
    var offset = popperOffsets[mainAxis];
    var min = popperOffsets[mainAxis] + overflow[mainSide];
    var max = popperOffsets[mainAxis] - overflow[altSide];
    var additive = tether ? -popperRect[len] / 2 : 0;
    var minLen = variation === enums_js_1.start ? referenceRect[len] : popperRect[len];
    var maxLen = variation === enums_js_1.start ? -popperRect[len] : -referenceRect[len];
    var arrowElement = state.elements.arrow;
    var arrowRect = tether && arrowElement ? getLayoutRect_js_1d.default(arrowElement) : {
      width: 0,
      height: 0
    };
    var arrowPaddingObject = state.modifiersData['arrow#persistent'] ? state.modifiersData['arrow#persistent'].padding : getFreshSideObject_js_1d.default();
    var arrowPaddingMin = arrowPaddingObject[mainSide];
    var arrowPaddingMax = arrowPaddingObject[altSide];
    var arrowLen = within_js_1d.default(0, referenceRect[len], arrowRect[len]);
    var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - tetherOffsetValue : minLen - arrowLen - arrowPaddingMin - tetherOffsetValue;
    var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + tetherOffsetValue : maxLen + arrowLen + arrowPaddingMax + tetherOffsetValue;
    var arrowOffsetParent = state.elements.arrow && getOffsetParent_js_1d.default(state.elements.arrow);
    var clientOffset = arrowOffsetParent ? mainAxis === 'y' ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
    var offsetModifierValue = state.modifiersData.offset ? state.modifiersData.offset[state.placement][mainAxis] : 0;
    var tetherMin = popperOffsets[mainAxis] + minOffset - offsetModifierValue - clientOffset;
    var tetherMax = popperOffsets[mainAxis] + maxOffset - offsetModifierValue;
    if (checkMainAxis) {
      var preventedOffset = within_js_1d.default(tether ? math_js_1.min(min, tetherMin) : min, offset, tether ? math_js_1.max(max, tetherMax) : max);
      popperOffsets[mainAxis] = preventedOffset;
      data[mainAxis] = preventedOffset - offset;
    }
    if (checkAltAxis) {
      var _mainSide = mainAxis === 'x' ? enums_js_1.top : enums_js_1.left;
      var _altSide = mainAxis === 'x' ? enums_js_1.bottom : enums_js_1.right;
      var _offset = popperOffsets[altAxis];
      var _min = _offset + overflow[_mainSide];
      var _max = _offset - overflow[_altSide];
      var _preventedOffset = within_js_1d.default(tether ? math_js_1.min(_min, tetherMin) : _min, _offset, tether ? math_js_1.max(_max, tetherMax) : _max);
      popperOffsets[altAxis] = _preventedOffset;
      data[altAxis] = _preventedOffset - _offset;
    }
  }
  state.modifiersData[name] = data;
}
exports.default = {
  name: 'preventOverflow',
  enabled: true,
  phase: 'main',
  fn: preventOverflow,
  requiresIfExists: ['offset']
};

},

// node_modules/@popperjs/core/lib/enums.js @294
294: function(__fusereq, exports, module){
exports.__esModule = true;
exports.top = 'top';
exports.bottom = 'bottom';
exports.right = 'right';
exports.left = 'left';
exports.auto = 'auto';
exports.basePlacements = [exports.top, exports.bottom, exports.right, exports.left];
exports.start = 'start';
exports.end = 'end';
exports.clippingParents = 'clippingParents';
exports.viewport = 'viewport';
exports.popper = 'popper';
exports.reference = 'reference';
exports.variationPlacements = exports.basePlacements.reduce(function (acc, placement) {
  return acc.concat([placement + "-" + exports.start, placement + "-" + exports.end]);
}, []);
exports.placements = [].concat(exports.basePlacements, [exports.auto]).reduce(function (acc, placement) {
  return acc.concat([placement, placement + "-" + exports.start, placement + "-" + exports.end]);
}, []);
exports.beforeRead = 'beforeRead';
exports.read = 'read';
exports.afterRead = 'afterRead';
exports.beforeMain = 'beforeMain';
exports.main = 'main';
exports.afterMain = 'afterMain';
exports.beforeWrite = 'beforeWrite';
exports.write = 'write';
exports.afterWrite = 'afterWrite';
exports.modifierPhases = [exports.beforeRead, exports.read, exports.afterRead, exports.beforeMain, exports.main, exports.afterMain, exports.beforeWrite, exports.write, exports.afterWrite];

},

// node_modules/@popperjs/core/lib/popper-base.js @295
295: function(__fusereq, exports, module){
exports.__esModule = true;
var createPopper_js_1 = __fusereq(349);
exports.createPopper = createPopper_js_1.createPopper;
exports.popperGenerator = createPopper_js_1.popperGenerator;
exports.detectOverflow = createPopper_js_1.detectOverflow;

},

// node_modules/@popperjs/core/lib/utils/getBasePlacement.js @328
328: function(__fusereq, exports, module){
exports.__esModule = true;
function getBasePlacement(placement) {
  return placement.split('-')[0];
}
exports.default = getBasePlacement;

},

// node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js @329
329: function(__fusereq, exports, module){
exports.__esModule = true;
var getBoundingClientRect_js_1 = __fusereq(356);
var getBoundingClientRect_js_1d = __fuse.dt(getBoundingClientRect_js_1);
function getLayoutRect(element) {
  var clientRect = getBoundingClientRect_js_1d.default(element);
  var width = element.offsetWidth;
  var height = element.offsetHeight;
  if (Math.abs(clientRect.width - width) <= 1) {
    width = clientRect.width;
  }
  if (Math.abs(clientRect.height - height) <= 1) {
    height = clientRect.height;
  }
  return {
    x: element.offsetLeft,
    y: element.offsetTop,
    width: width,
    height: height
  };
}
exports.default = getLayoutRect;

},

// node_modules/@popperjs/core/lib/dom-utils/contains.js @330
330: function(__fusereq, exports, module){
exports.__esModule = true;
var instanceOf_js_1 = __fusereq(336);
function contains(parent, child) {
  var rootNode = child.getRootNode && child.getRootNode();
  if (parent.contains(child)) {
    return true;
  } else if (rootNode && instanceOf_js_1.isShadowRoot(rootNode)) {
    var next = child;
    do {
      if (next && parent.isSameNode(next)) {
        return true;
      }
      next = next.parentNode || next.host;
    } while (next);
  }
  return false;
}
exports.default = contains;

},

// node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js @331
331: function(__fusereq, exports, module){
exports.__esModule = true;
var getWindow_js_1 = __fusereq(337);
var getWindow_js_1d = __fuse.dt(getWindow_js_1);
var getNodeName_js_1 = __fusereq(357);
var getNodeName_js_1d = __fuse.dt(getNodeName_js_1);
var getComputedStyle_js_1 = __fusereq(339);
var getComputedStyle_js_1d = __fuse.dt(getComputedStyle_js_1);
var instanceOf_js_1 = __fusereq(336);
var isTableElement_js_1 = __fusereq(358);
var isTableElement_js_1d = __fuse.dt(isTableElement_js_1);
var getParentNode_js_1 = __fusereq(359);
var getParentNode_js_1d = __fuse.dt(getParentNode_js_1);
function getTrueOffsetParent(element) {
  if (!instanceOf_js_1.isHTMLElement(element) || getComputedStyle_js_1d.default(element).position === 'fixed') {
    return null;
  }
  return element.offsetParent;
}
function getContainingBlock(element) {
  var isFirefox = navigator.userAgent.toLowerCase().indexOf('firefox') !== -1;
  var isIE = navigator.userAgent.indexOf('Trident') !== -1;
  if (isIE && instanceOf_js_1.isHTMLElement(element)) {
    var elementCss = getComputedStyle_js_1d.default(element);
    if (elementCss.position === 'fixed') {
      return null;
    }
  }
  var currentNode = getParentNode_js_1d.default(element);
  while (instanceOf_js_1.isHTMLElement(currentNode) && ['html', 'body'].indexOf(getNodeName_js_1d.default(currentNode)) < 0) {
    var css = getComputedStyle_js_1d.default(currentNode);
    if (css.transform !== 'none' || css.perspective !== 'none' || css.contain === 'paint' || ['transform', 'perspective'].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === 'filter' || isFirefox && css.filter && css.filter !== 'none') {
      return currentNode;
    } else {
      currentNode = currentNode.parentNode;
    }
  }
  return null;
}
function getOffsetParent(element) {
  var window = getWindow_js_1d.default(element);
  var offsetParent = getTrueOffsetParent(element);
  while (offsetParent && isTableElement_js_1d.default(offsetParent) && getComputedStyle_js_1d.default(offsetParent).position === 'static') {
    offsetParent = getTrueOffsetParent(offsetParent);
  }
  if (offsetParent && (getNodeName_js_1d.default(offsetParent) === 'html' || getNodeName_js_1d.default(offsetParent) === 'body' && getComputedStyle_js_1d.default(offsetParent).position === 'static')) {
    return window;
  }
  return offsetParent || getContainingBlock(element) || window;
}
exports.default = getOffsetParent;

},

// node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js @332
332: function(__fusereq, exports, module){
exports.__esModule = true;
function getMainAxisFromPlacement(placement) {
  return ['top', 'bottom'].indexOf(placement) >= 0 ? 'x' : 'y';
}
exports.default = getMainAxisFromPlacement;

},

// node_modules/@popperjs/core/lib/utils/within.js @333
333: function(__fusereq, exports, module){
exports.__esModule = true;
var math_js_1 = __fusereq(340);
function within(min, value, max) {
  return math_js_1.max(min, math_js_1.min(value, max));
}
exports.default = within;

},

// node_modules/@popperjs/core/lib/utils/mergePaddingObject.js @334
334: function(__fusereq, exports, module){
exports.__esModule = true;
var getFreshSideObject_js_1 = __fusereq(348);
var getFreshSideObject_js_1d = __fuse.dt(getFreshSideObject_js_1);
function mergePaddingObject(paddingObject) {
  return Object.assign({}, getFreshSideObject_js_1d.default(), paddingObject);
}
exports.default = mergePaddingObject;

},

// node_modules/@popperjs/core/lib/utils/expandToHashMap.js @335
335: function(__fusereq, exports, module){
exports.__esModule = true;
function expandToHashMap(value, keys) {
  return keys.reduce(function (hashMap, key) {
    hashMap[key] = value;
    return hashMap;
  }, {});
}
exports.default = expandToHashMap;

},

// node_modules/@popperjs/core/lib/dom-utils/instanceOf.js @336
336: function(__fusereq, exports, module){
exports.__esModule = true;
var getWindow_js_1 = __fusereq(337);
var getWindow_js_1d = __fuse.dt(getWindow_js_1);
function isElement(node) {
  var OwnElement = getWindow_js_1d.default(node).Element;
  return node instanceof OwnElement || node instanceof Element;
}
function isHTMLElement(node) {
  var OwnElement = getWindow_js_1d.default(node).HTMLElement;
  return node instanceof OwnElement || node instanceof HTMLElement;
}
function isShadowRoot(node) {
  if (typeof ShadowRoot === 'undefined') {
    return false;
  }
  var OwnElement = getWindow_js_1d.default(node).ShadowRoot;
  return node instanceof OwnElement || node instanceof ShadowRoot;
}
exports.isElement = isElement;
exports.isHTMLElement = isHTMLElement;
exports.isShadowRoot = isShadowRoot;

},

// node_modules/@popperjs/core/lib/dom-utils/getWindow.js @337
337: function(__fusereq, exports, module){
exports.__esModule = true;
function getWindow(node) {
  if (node == null) {
    return window;
  }
  if (node.toString() !== '[object Window]') {
    var ownerDocument = node.ownerDocument;
    return ownerDocument ? ownerDocument.defaultView || window : window;
  }
  return node;
}
exports.default = getWindow;

},

// node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js @338
338: function(__fusereq, exports, module){
exports.__esModule = true;
var instanceOf_js_1 = __fusereq(336);
function getDocumentElement(element) {
  return ((instanceOf_js_1.isElement(element) ? element.ownerDocument : element.document) || window.document).documentElement;
}
exports.default = getDocumentElement;

},

// node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js @339
339: function(__fusereq, exports, module){
exports.__esModule = true;
var getWindow_js_1 = __fusereq(337);
var getWindow_js_1d = __fuse.dt(getWindow_js_1);
function getComputedStyle(element) {
  return getWindow_js_1d.default(element).getComputedStyle(element);
}
exports.default = getComputedStyle;

},

// node_modules/@popperjs/core/lib/utils/math.js @340
340: function(__fusereq, exports, module){
exports.__esModule = true;
exports.max = Math.max;
exports.min = Math.min;
exports.round = Math.round;

},

// node_modules/@popperjs/core/lib/utils/getOppositePlacement.js @341
341: function(__fusereq, exports, module){
exports.__esModule = true;
var hash = {
  left: 'right',
  right: 'left',
  bottom: 'top',
  top: 'bottom'
};
function getOppositePlacement(placement) {
  return placement.replace(/left|right|bottom|top/g, function (matched) {
    return hash[matched];
  });
}
exports.default = getOppositePlacement;

},

// node_modules/@popperjs/core/lib/utils/getOppositeVariationPlacement.js @342
342: function(__fusereq, exports, module){
exports.__esModule = true;
var hash = {
  start: 'end',
  end: 'start'
};
function getOppositeVariationPlacement(placement) {
  return placement.replace(/start|end/g, function (matched) {
    return hash[matched];
  });
}
exports.default = getOppositeVariationPlacement;

},

// node_modules/@popperjs/core/lib/utils/detectOverflow.js @343
343: function(__fusereq, exports, module){
exports.__esModule = true;
var getBoundingClientRect_js_1 = __fusereq(356);
var getBoundingClientRect_js_1d = __fuse.dt(getBoundingClientRect_js_1);
var getClippingRect_js_1 = __fusereq(360);
var getClippingRect_js_1d = __fuse.dt(getClippingRect_js_1);
var getDocumentElement_js_1 = __fusereq(338);
var getDocumentElement_js_1d = __fuse.dt(getDocumentElement_js_1);
var computeOffsets_js_1 = __fusereq(346);
var computeOffsets_js_1d = __fuse.dt(computeOffsets_js_1);
var rectToClientRect_js_1 = __fusereq(361);
var rectToClientRect_js_1d = __fuse.dt(rectToClientRect_js_1);
var enums_js_1 = __fusereq(294);
var instanceOf_js_1 = __fusereq(336);
var mergePaddingObject_js_1 = __fusereq(334);
var mergePaddingObject_js_1d = __fuse.dt(mergePaddingObject_js_1);
var expandToHashMap_js_1 = __fusereq(335);
var expandToHashMap_js_1d = __fuse.dt(expandToHashMap_js_1);
function detectOverflow(state, options) {
  if (options === void 0) {
    options = {};
  }
  var _options = options, _options$placement = _options.placement, placement = _options$placement === void 0 ? state.placement : _options$placement, _options$boundary = _options.boundary, boundary = _options$boundary === void 0 ? enums_js_1.clippingParents : _options$boundary, _options$rootBoundary = _options.rootBoundary, rootBoundary = _options$rootBoundary === void 0 ? enums_js_1.viewport : _options$rootBoundary, _options$elementConte = _options.elementContext, elementContext = _options$elementConte === void 0 ? enums_js_1.popper : _options$elementConte, _options$altBoundary = _options.altBoundary, altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary, _options$padding = _options.padding, padding = _options$padding === void 0 ? 0 : _options$padding;
  var paddingObject = mergePaddingObject_js_1d.default(typeof padding !== 'number' ? padding : expandToHashMap_js_1d.default(padding, enums_js_1.basePlacements));
  var altContext = elementContext === enums_js_1.popper ? enums_js_1.reference : enums_js_1.popper;
  var referenceElement = state.elements.reference;
  var popperRect = state.rects.popper;
  var element = state.elements[altBoundary ? altContext : elementContext];
  var clippingClientRect = getClippingRect_js_1d.default(instanceOf_js_1.isElement(element) ? element : element.contextElement || getDocumentElement_js_1d.default(state.elements.popper), boundary, rootBoundary);
  var referenceClientRect = getBoundingClientRect_js_1d.default(referenceElement);
  var popperOffsets = computeOffsets_js_1d.default({
    reference: referenceClientRect,
    element: popperRect,
    strategy: 'absolute',
    placement: placement
  });
  var popperClientRect = rectToClientRect_js_1d.default(Object.assign({}, popperRect, popperOffsets));
  var elementClientRect = elementContext === enums_js_1.popper ? popperClientRect : referenceClientRect;
  var overflowOffsets = {
    top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
    bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
    left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
    right: elementClientRect.right - clippingClientRect.right + paddingObject.right
  };
  var offsetData = state.modifiersData.offset;
  if (elementContext === enums_js_1.popper && offsetData) {
    var offset = offsetData[placement];
    Object.keys(overflowOffsets).forEach(function (key) {
      var multiply = [enums_js_1.right, enums_js_1.bottom].indexOf(key) >= 0 ? 1 : -1;
      var axis = [enums_js_1.top, enums_js_1.bottom].indexOf(key) >= 0 ? 'y' : 'x';
      overflowOffsets[key] += offset[axis] * multiply;
    });
  }
  return overflowOffsets;
}
exports.default = detectOverflow;

},

// node_modules/@popperjs/core/lib/utils/computeAutoPlacement.js @344
344: function(__fusereq, exports, module){
exports.__esModule = true;
var getVariation_js_1 = __fusereq(345);
var getVariation_js_1d = __fuse.dt(getVariation_js_1);
var enums_js_1 = __fusereq(294);
var detectOverflow_js_1 = __fusereq(343);
var detectOverflow_js_1d = __fuse.dt(detectOverflow_js_1);
var getBasePlacement_js_1 = __fusereq(328);
var getBasePlacement_js_1d = __fuse.dt(getBasePlacement_js_1);
function computeAutoPlacement(state, options) {
  if (options === void 0) {
    options = {};
  }
  var _options = options, placement = _options.placement, boundary = _options.boundary, rootBoundary = _options.rootBoundary, padding = _options.padding, flipVariations = _options.flipVariations, _options$allowedAutoP = _options.allowedAutoPlacements, allowedAutoPlacements = _options$allowedAutoP === void 0 ? enums_js_1.placements : _options$allowedAutoP;
  var variation = getVariation_js_1d.default(placement);
  var placements = variation ? flipVariations ? enums_js_1.variationPlacements : enums_js_1.variationPlacements.filter(function (placement) {
    return getVariation_js_1d.default(placement) === variation;
  }) : enums_js_1.basePlacements;
  var allowedPlacements = placements.filter(function (placement) {
    return allowedAutoPlacements.indexOf(placement) >= 0;
  });
  if (allowedPlacements.length === 0) {
    allowedPlacements = placements;
    console.error(['Popper: The `allowedAutoPlacements` option did not allow any', 'placements. Ensure the `placement` option matches the variation', 'of the allowed placements.', 'For example, "auto" cannot be used to allow "bottom-start".', 'Use "auto-start" instead.'].join(' '));
  }
  var overflows = allowedPlacements.reduce(function (acc, placement) {
    acc[placement] = detectOverflow_js_1d.default(state, {
      placement: placement,
      boundary: boundary,
      rootBoundary: rootBoundary,
      padding: padding
    })[getBasePlacement_js_1d.default(placement)];
    return acc;
  }, {});
  return Object.keys(overflows).sort(function (a, b) {
    return overflows[a] - overflows[b];
  });
}
exports.default = computeAutoPlacement;

},

// node_modules/@popperjs/core/lib/utils/getVariation.js @345
345: function(__fusereq, exports, module){
exports.__esModule = true;
function getVariation(placement) {
  return placement.split('-')[1];
}
exports.default = getVariation;

},

// node_modules/@popperjs/core/lib/utils/computeOffsets.js @346
346: function(__fusereq, exports, module){
exports.__esModule = true;
var getBasePlacement_js_1 = __fusereq(328);
var getBasePlacement_js_1d = __fuse.dt(getBasePlacement_js_1);
var getVariation_js_1 = __fusereq(345);
var getVariation_js_1d = __fuse.dt(getVariation_js_1);
var getMainAxisFromPlacement_js_1 = __fusereq(332);
var getMainAxisFromPlacement_js_1d = __fuse.dt(getMainAxisFromPlacement_js_1);
var enums_js_1 = __fusereq(294);
function computeOffsets(_ref) {
  var reference = _ref.reference, element = _ref.element, placement = _ref.placement;
  var basePlacement = placement ? getBasePlacement_js_1d.default(placement) : null;
  var variation = placement ? getVariation_js_1d.default(placement) : null;
  var commonX = reference.x + reference.width / 2 - element.width / 2;
  var commonY = reference.y + reference.height / 2 - element.height / 2;
  var offsets;
  switch (basePlacement) {
    case enums_js_1.top:
      offsets = {
        x: commonX,
        y: reference.y - element.height
      };
      break;
    case enums_js_1.bottom:
      offsets = {
        x: commonX,
        y: reference.y + reference.height
      };
      break;
    case enums_js_1.right:
      offsets = {
        x: reference.x + reference.width,
        y: commonY
      };
      break;
    case enums_js_1.left:
      offsets = {
        x: reference.x - element.width,
        y: commonY
      };
      break;
    default:
      offsets = {
        x: reference.x,
        y: reference.y
      };
  }
  var mainAxis = basePlacement ? getMainAxisFromPlacement_js_1d.default(basePlacement) : null;
  if (mainAxis != null) {
    var len = mainAxis === 'y' ? 'height' : 'width';
    switch (variation) {
      case enums_js_1.start:
        offsets[mainAxis] = offsets[mainAxis] - (reference[len] / 2 - element[len] / 2);
        break;
      case enums_js_1.end:
        offsets[mainAxis] = offsets[mainAxis] + (reference[len] / 2 - element[len] / 2);
        break;
      default:
    }
  }
  return offsets;
}
exports.default = computeOffsets;

},

// node_modules/@popperjs/core/lib/utils/getAltAxis.js @347
347: function(__fusereq, exports, module){
exports.__esModule = true;
function getAltAxis(axis) {
  return axis === 'x' ? 'y' : 'x';
}
exports.default = getAltAxis;

},

// node_modules/@popperjs/core/lib/utils/getFreshSideObject.js @348
348: function(__fusereq, exports, module){
exports.__esModule = true;
function getFreshSideObject() {
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0
  };
}
exports.default = getFreshSideObject;

},

// node_modules/@popperjs/core/lib/createPopper.js @349
349: function(__fusereq, exports, module){
exports.__esModule = true;
var getCompositeRect_js_1 = __fusereq(362);
var getCompositeRect_js_1d = __fuse.dt(getCompositeRect_js_1);
var getLayoutRect_js_1 = __fusereq(329);
var getLayoutRect_js_1d = __fuse.dt(getLayoutRect_js_1);
var listScrollParents_js_1 = __fusereq(363);
var listScrollParents_js_1d = __fuse.dt(listScrollParents_js_1);
var getOffsetParent_js_1 = __fusereq(331);
var getOffsetParent_js_1d = __fuse.dt(getOffsetParent_js_1);
var getComputedStyle_js_1 = __fusereq(339);
var getComputedStyle_js_1d = __fuse.dt(getComputedStyle_js_1);
var orderModifiers_js_1 = __fusereq(364);
var orderModifiers_js_1d = __fuse.dt(orderModifiers_js_1);
var debounce_js_1 = __fusereq(365);
var debounce_js_1d = __fuse.dt(debounce_js_1);
var validateModifiers_js_1 = __fusereq(366);
var validateModifiers_js_1d = __fuse.dt(validateModifiers_js_1);
var uniqueBy_js_1 = __fusereq(367);
var uniqueBy_js_1d = __fuse.dt(uniqueBy_js_1);
var getBasePlacement_js_1 = __fusereq(328);
var getBasePlacement_js_1d = __fuse.dt(getBasePlacement_js_1);
var mergeByName_js_1 = __fusereq(368);
var mergeByName_js_1d = __fuse.dt(mergeByName_js_1);
var detectOverflow_js_1 = __fusereq(343);
var detectOverflow_js_1d = __fuse.dt(detectOverflow_js_1);
var instanceOf_js_1 = __fusereq(336);
var enums_js_1 = __fusereq(294);
var INVALID_ELEMENT_ERROR = 'Popper: Invalid reference or popper argument provided. They must be either a DOM element or virtual element.';
var INFINITE_LOOP_ERROR = 'Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.';
var DEFAULT_OPTIONS = {
  placement: 'bottom',
  modifiers: [],
  strategy: 'absolute'
};
function areValidElements() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }
  return !args.some(function (element) {
    return !(element && typeof element.getBoundingClientRect === 'function');
  });
}
function popperGenerator(generatorOptions) {
  if (generatorOptions === void 0) {
    generatorOptions = {};
  }
  var _generatorOptions = generatorOptions, _generatorOptions$def = _generatorOptions.defaultModifiers, defaultModifiers = _generatorOptions$def === void 0 ? [] : _generatorOptions$def, _generatorOptions$def2 = _generatorOptions.defaultOptions, defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
  return function createPopper(reference, popper, options) {
    if (options === void 0) {
      options = defaultOptions;
    }
    var state = {
      placement: 'bottom',
      orderedModifiers: [],
      options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),
      modifiersData: {},
      elements: {
        reference: reference,
        popper: popper
      },
      attributes: {},
      styles: {}
    };
    var effectCleanupFns = [];
    var isDestroyed = false;
    var instance = {
      state: state,
      setOptions: function setOptions(options) {
        cleanupModifierEffects();
        state.options = Object.assign({}, defaultOptions, state.options, options);
        state.scrollParents = {
          reference: instanceOf_js_1.isElement(reference) ? listScrollParents_js_1d.default(reference) : reference.contextElement ? listScrollParents_js_1d.default(reference.contextElement) : [],
          popper: listScrollParents_js_1d.default(popper)
        };
        var orderedModifiers = orderModifiers_js_1d.default(mergeByName_js_1d.default([].concat(defaultModifiers, state.options.modifiers)));
        state.orderedModifiers = orderedModifiers.filter(function (m) {
          return m.enabled;
        });
        var modifiers = uniqueBy_js_1d.default([].concat(orderedModifiers, state.options.modifiers), function (_ref) {
          var name = _ref.name;
          return name;
        });
        validateModifiers_js_1d.default(modifiers);
        if (getBasePlacement_js_1d.default(state.options.placement) === enums_js_1.auto) {
          var flipModifier = state.orderedModifiers.find(function (_ref2) {
            var name = _ref2.name;
            return name === 'flip';
          });
          if (!flipModifier) {
            console.error(['Popper: "auto" placements require the "flip" modifier be', 'present and enabled to work.'].join(' '));
          }
        }
        var _getComputedStyle = getComputedStyle_js_1d.default(popper), marginTop = _getComputedStyle.marginTop, marginRight = _getComputedStyle.marginRight, marginBottom = _getComputedStyle.marginBottom, marginLeft = _getComputedStyle.marginLeft;
        if ([marginTop, marginRight, marginBottom, marginLeft].some(function (margin) {
          return parseFloat(margin);
        })) {
          console.warn(['Popper: CSS "margin" styles cannot be used to apply padding', 'between the popper and its reference element or boundary.', 'To replicate margin, use the `offset` modifier, as well as', 'the `padding` option in the `preventOverflow` and `flip`', 'modifiers.'].join(' '));
        }
        runModifierEffects();
        return instance.update();
      },
      forceUpdate: function forceUpdate() {
        if (isDestroyed) {
          return;
        }
        var _state$elements = state.elements, reference = _state$elements.reference, popper = _state$elements.popper;
        if (!areValidElements(reference, popper)) {
          console.error(INVALID_ELEMENT_ERROR);
          return;
        }
        state.rects = {
          reference: getCompositeRect_js_1d.default(reference, getOffsetParent_js_1d.default(popper), state.options.strategy === 'fixed'),
          popper: getLayoutRect_js_1d.default(popper)
        };
        state.reset = false;
        state.placement = state.options.placement;
        state.orderedModifiers.forEach(function (modifier) {
          return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
        });
        var __debug_loops__ = 0;
        for (var index = 0; index < state.orderedModifiers.length; index++) {
          __debug_loops__ += 1;
          if (__debug_loops__ > 100) {
            console.error(INFINITE_LOOP_ERROR);
            break;
          }
          if (state.reset === true) {
            state.reset = false;
            index = -1;
            continue;
          }
          var _state$orderedModifie = state.orderedModifiers[index], fn = _state$orderedModifie.fn, _state$orderedModifie2 = _state$orderedModifie.options, _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2, name = _state$orderedModifie.name;
          if (typeof fn === 'function') {
            state = fn({
              state: state,
              options: _options,
              name: name,
              instance: instance
            }) || state;
          }
        }
      },
      update: debounce_js_1d.default(function () {
        return new Promise(function (resolve) {
          instance.forceUpdate();
          resolve(state);
        });
      }),
      destroy: function destroy() {
        cleanupModifierEffects();
        isDestroyed = true;
      }
    };
    if (!areValidElements(reference, popper)) {
      console.error(INVALID_ELEMENT_ERROR);
      return instance;
    }
    instance.setOptions(options).then(function (state) {
      if (!isDestroyed && options.onFirstUpdate) {
        options.onFirstUpdate(state);
      }
    });
    function runModifierEffects() {
      state.orderedModifiers.forEach(function (_ref3) {
        var name = _ref3.name, _ref3$options = _ref3.options, options = _ref3$options === void 0 ? {} : _ref3$options, effect = _ref3.effect;
        if (typeof effect === 'function') {
          var cleanupFn = effect({
            state: state,
            name: name,
            instance: instance,
            options: options
          });
          var noopFn = function noopFn() {};
          effectCleanupFns.push(cleanupFn || noopFn);
        }
      });
    }
    function cleanupModifierEffects() {
      effectCleanupFns.forEach(function (fn) {
        return fn();
      });
      effectCleanupFns = [];
    }
    return instance;
  };
}
exports.popperGenerator = popperGenerator;
exports.createPopper = popperGenerator();
exports.detectOverflow = detectOverflow_js_1d.default;

},

// node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js @356
356: function(__fusereq, exports, module){
exports.__esModule = true;
function getBoundingClientRect(element) {
  var rect = element.getBoundingClientRect();
  return {
    width: rect.width,
    height: rect.height,
    top: rect.top,
    right: rect.right,
    bottom: rect.bottom,
    left: rect.left,
    x: rect.left,
    y: rect.top
  };
}
exports.default = getBoundingClientRect;

},

// node_modules/@popperjs/core/lib/dom-utils/getNodeName.js @357
357: function(__fusereq, exports, module){
exports.__esModule = true;
function getNodeName(element) {
  return element ? (element.nodeName || '').toLowerCase() : null;
}
exports.default = getNodeName;

},

// node_modules/@popperjs/core/lib/dom-utils/isTableElement.js @358
358: function(__fusereq, exports, module){
exports.__esModule = true;
var getNodeName_js_1 = __fusereq(357);
var getNodeName_js_1d = __fuse.dt(getNodeName_js_1);
function isTableElement(element) {
  return ['table', 'td', 'th'].indexOf(getNodeName_js_1d.default(element)) >= 0;
}
exports.default = isTableElement;

},

// node_modules/@popperjs/core/lib/dom-utils/getParentNode.js @359
359: function(__fusereq, exports, module){
exports.__esModule = true;
var getNodeName_js_1 = __fusereq(357);
var getNodeName_js_1d = __fuse.dt(getNodeName_js_1);
var getDocumentElement_js_1 = __fusereq(338);
var getDocumentElement_js_1d = __fuse.dt(getDocumentElement_js_1);
var instanceOf_js_1 = __fusereq(336);
function getParentNode(element) {
  if (getNodeName_js_1d.default(element) === 'html') {
    return element;
  }
  return element.assignedSlot || element.parentNode || (instanceOf_js_1.isShadowRoot(element) ? element.host : null) || getDocumentElement_js_1d.default(element);
}
exports.default = getParentNode;

},

// node_modules/@popperjs/core/lib/dom-utils/getClippingRect.js @360
360: function(__fusereq, exports, module){
exports.__esModule = true;
var enums_js_1 = __fusereq(294);
var getViewportRect_js_1 = __fusereq(370);
var getViewportRect_js_1d = __fuse.dt(getViewportRect_js_1);
var getDocumentRect_js_1 = __fusereq(371);
var getDocumentRect_js_1d = __fuse.dt(getDocumentRect_js_1);
var listScrollParents_js_1 = __fusereq(363);
var listScrollParents_js_1d = __fuse.dt(listScrollParents_js_1);
var getOffsetParent_js_1 = __fusereq(331);
var getOffsetParent_js_1d = __fuse.dt(getOffsetParent_js_1);
var getDocumentElement_js_1 = __fusereq(338);
var getDocumentElement_js_1d = __fuse.dt(getDocumentElement_js_1);
var getComputedStyle_js_1 = __fusereq(339);
var getComputedStyle_js_1d = __fuse.dt(getComputedStyle_js_1);
var instanceOf_js_1 = __fusereq(336);
var getBoundingClientRect_js_1 = __fusereq(356);
var getBoundingClientRect_js_1d = __fuse.dt(getBoundingClientRect_js_1);
var getParentNode_js_1 = __fusereq(359);
var getParentNode_js_1d = __fuse.dt(getParentNode_js_1);
var contains_js_1 = __fusereq(330);
var contains_js_1d = __fuse.dt(contains_js_1);
var getNodeName_js_1 = __fusereq(357);
var getNodeName_js_1d = __fuse.dt(getNodeName_js_1);
var rectToClientRect_js_1 = __fusereq(361);
var rectToClientRect_js_1d = __fuse.dt(rectToClientRect_js_1);
var math_js_1 = __fusereq(340);
function getInnerBoundingClientRect(element) {
  var rect = getBoundingClientRect_js_1d.default(element);
  rect.top = rect.top + element.clientTop;
  rect.left = rect.left + element.clientLeft;
  rect.bottom = rect.top + element.clientHeight;
  rect.right = rect.left + element.clientWidth;
  rect.width = element.clientWidth;
  rect.height = element.clientHeight;
  rect.x = rect.left;
  rect.y = rect.top;
  return rect;
}
function getClientRectFromMixedType(element, clippingParent) {
  return clippingParent === enums_js_1.viewport ? rectToClientRect_js_1d.default(getViewportRect_js_1d.default(element)) : instanceOf_js_1.isHTMLElement(clippingParent) ? getInnerBoundingClientRect(clippingParent) : rectToClientRect_js_1d.default(getDocumentRect_js_1d.default(getDocumentElement_js_1d.default(element)));
}
function getClippingParents(element) {
  var clippingParents = listScrollParents_js_1d.default(getParentNode_js_1d.default(element));
  var canEscapeClipping = ['absolute', 'fixed'].indexOf(getComputedStyle_js_1d.default(element).position) >= 0;
  var clipperElement = canEscapeClipping && instanceOf_js_1.isHTMLElement(element) ? getOffsetParent_js_1d.default(element) : element;
  if (!instanceOf_js_1.isElement(clipperElement)) {
    return [];
  }
  return clippingParents.filter(function (clippingParent) {
    return instanceOf_js_1.isElement(clippingParent) && contains_js_1d.default(clippingParent, clipperElement) && getNodeName_js_1d.default(clippingParent) !== 'body';
  });
}
function getClippingRect(element, boundary, rootBoundary) {
  var mainClippingParents = boundary === 'clippingParents' ? getClippingParents(element) : [].concat(boundary);
  var clippingParents = [].concat(mainClippingParents, [rootBoundary]);
  var firstClippingParent = clippingParents[0];
  var clippingRect = clippingParents.reduce(function (accRect, clippingParent) {
    var rect = getClientRectFromMixedType(element, clippingParent);
    accRect.top = math_js_1.max(rect.top, accRect.top);
    accRect.right = math_js_1.min(rect.right, accRect.right);
    accRect.bottom = math_js_1.min(rect.bottom, accRect.bottom);
    accRect.left = math_js_1.max(rect.left, accRect.left);
    return accRect;
  }, getClientRectFromMixedType(element, firstClippingParent));
  clippingRect.width = clippingRect.right - clippingRect.left;
  clippingRect.height = clippingRect.bottom - clippingRect.top;
  clippingRect.x = clippingRect.left;
  clippingRect.y = clippingRect.top;
  return clippingRect;
}
exports.default = getClippingRect;

},

// node_modules/@popperjs/core/lib/utils/rectToClientRect.js @361
361: function(__fusereq, exports, module){
exports.__esModule = true;
function rectToClientRect(rect) {
  return Object.assign({}, rect, {
    left: rect.x,
    top: rect.y,
    right: rect.x + rect.width,
    bottom: rect.y + rect.height
  });
}
exports.default = rectToClientRect;

},

// node_modules/@popperjs/core/lib/dom-utils/getCompositeRect.js @362
362: function(__fusereq, exports, module){
exports.__esModule = true;
var getBoundingClientRect_js_1 = __fusereq(356);
var getBoundingClientRect_js_1d = __fuse.dt(getBoundingClientRect_js_1);
var getNodeScroll_js_1 = __fusereq(372);
var getNodeScroll_js_1d = __fuse.dt(getNodeScroll_js_1);
var getNodeName_js_1 = __fusereq(357);
var getNodeName_js_1d = __fuse.dt(getNodeName_js_1);
var instanceOf_js_1 = __fusereq(336);
var getWindowScrollBarX_js_1 = __fusereq(373);
var getWindowScrollBarX_js_1d = __fuse.dt(getWindowScrollBarX_js_1);
var getDocumentElement_js_1 = __fusereq(338);
var getDocumentElement_js_1d = __fuse.dt(getDocumentElement_js_1);
var isScrollParent_js_1 = __fusereq(374);
var isScrollParent_js_1d = __fuse.dt(isScrollParent_js_1);
function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
  if (isFixed === void 0) {
    isFixed = false;
  }
  var documentElement = getDocumentElement_js_1d.default(offsetParent);
  var rect = getBoundingClientRect_js_1d.default(elementOrVirtualElement);
  var isOffsetParentAnElement = instanceOf_js_1.isHTMLElement(offsetParent);
  var scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  var offsets = {
    x: 0,
    y: 0
  };
  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
    if (getNodeName_js_1d.default(offsetParent) !== 'body' || isScrollParent_js_1d.default(documentElement)) {
      scroll = getNodeScroll_js_1d.default(offsetParent);
    }
    if (instanceOf_js_1.isHTMLElement(offsetParent)) {
      offsets = getBoundingClientRect_js_1d.default(offsetParent);
      offsets.x += offsetParent.clientLeft;
      offsets.y += offsetParent.clientTop;
    } else if (documentElement) {
      offsets.x = getWindowScrollBarX_js_1d.default(documentElement);
    }
  }
  return {
    x: rect.left + scroll.scrollLeft - offsets.x,
    y: rect.top + scroll.scrollTop - offsets.y,
    width: rect.width,
    height: rect.height
  };
}
exports.default = getCompositeRect;

},

// node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js @363
363: function(__fusereq, exports, module){
exports.__esModule = true;
var getScrollParent_js_1 = __fusereq(376);
var getScrollParent_js_1d = __fuse.dt(getScrollParent_js_1);
var getParentNode_js_1 = __fusereq(359);
var getParentNode_js_1d = __fuse.dt(getParentNode_js_1);
var getWindow_js_1 = __fusereq(337);
var getWindow_js_1d = __fuse.dt(getWindow_js_1);
var isScrollParent_js_1 = __fusereq(374);
var isScrollParent_js_1d = __fuse.dt(isScrollParent_js_1);
function listScrollParents(element, list) {
  var _element$ownerDocumen;
  if (list === void 0) {
    list = [];
  }
  var scrollParent = getScrollParent_js_1d.default(element);
  var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
  var win = getWindow_js_1d.default(scrollParent);
  var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent_js_1d.default(scrollParent) ? scrollParent : []) : scrollParent;
  var updatedList = list.concat(target);
  return isBody ? updatedList : updatedList.concat(listScrollParents(getParentNode_js_1d.default(target)));
}
exports.default = listScrollParents;

},

// node_modules/@popperjs/core/lib/utils/orderModifiers.js @364
364: function(__fusereq, exports, module){
exports.__esModule = true;
var enums_js_1 = __fusereq(294);
function order(modifiers) {
  var map = new Map();
  var visited = new Set();
  var result = [];
  modifiers.forEach(function (modifier) {
    map.set(modifier.name, modifier);
  });
  function sort(modifier) {
    visited.add(modifier.name);
    var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
    requires.forEach(function (dep) {
      if (!visited.has(dep)) {
        var depModifier = map.get(dep);
        if (depModifier) {
          sort(depModifier);
        }
      }
    });
    result.push(modifier);
  }
  modifiers.forEach(function (modifier) {
    if (!visited.has(modifier.name)) {
      sort(modifier);
    }
  });
  return result;
}
function orderModifiers(modifiers) {
  var orderedModifiers = order(modifiers);
  return enums_js_1.modifierPhases.reduce(function (acc, phase) {
    return acc.concat(orderedModifiers.filter(function (modifier) {
      return modifier.phase === phase;
    }));
  }, []);
}
exports.default = orderModifiers;

},

// node_modules/@popperjs/core/lib/utils/debounce.js @365
365: function(__fusereq, exports, module){
exports.__esModule = true;
function debounce(fn) {
  var pending;
  return function () {
    if (!pending) {
      pending = new Promise(function (resolve) {
        Promise.resolve().then(function () {
          pending = undefined;
          resolve(fn());
        });
      });
    }
    return pending;
  };
}
exports.default = debounce;

},

// node_modules/@popperjs/core/lib/utils/validateModifiers.js @366
366: function(__fusereq, exports, module){
exports.__esModule = true;
var format_js_1 = __fusereq(375);
var format_js_1d = __fuse.dt(format_js_1);
var enums_js_1 = __fusereq(294);
var INVALID_MODIFIER_ERROR = 'Popper: modifier "%s" provided an invalid %s property, expected %s but got %s';
var MISSING_DEPENDENCY_ERROR = 'Popper: modifier "%s" requires "%s", but "%s" modifier is not available';
var VALID_PROPERTIES = ['name', 'enabled', 'phase', 'fn', 'effect', 'requires', 'options'];
function validateModifiers(modifiers) {
  modifiers.forEach(function (modifier) {
    Object.keys(modifier).forEach(function (key) {
      switch (key) {
        case 'name':
          if (typeof modifier.name !== 'string') {
            console.error(format_js_1d.default(INVALID_MODIFIER_ERROR, String(modifier.name), '"name"', '"string"', "\"" + String(modifier.name) + "\""));
          }
          break;
        case 'enabled':
          if (typeof modifier.enabled !== 'boolean') {
            console.error(format_js_1d.default(INVALID_MODIFIER_ERROR, modifier.name, '"enabled"', '"boolean"', "\"" + String(modifier.enabled) + "\""));
          }
        case 'phase':
          if (enums_js_1.modifierPhases.indexOf(modifier.phase) < 0) {
            console.error(format_js_1d.default(INVALID_MODIFIER_ERROR, modifier.name, '"phase"', "either " + enums_js_1.modifierPhases.join(', '), "\"" + String(modifier.phase) + "\""));
          }
          break;
        case 'fn':
          if (typeof modifier.fn !== 'function') {
            console.error(format_js_1d.default(INVALID_MODIFIER_ERROR, modifier.name, '"fn"', '"function"', "\"" + String(modifier.fn) + "\""));
          }
          break;
        case 'effect':
          if (typeof modifier.effect !== 'function') {
            console.error(format_js_1d.default(INVALID_MODIFIER_ERROR, modifier.name, '"effect"', '"function"', "\"" + String(modifier.fn) + "\""));
          }
          break;
        case 'requires':
          if (!Array.isArray(modifier.requires)) {
            console.error(format_js_1d.default(INVALID_MODIFIER_ERROR, modifier.name, '"requires"', '"array"', "\"" + String(modifier.requires) + "\""));
          }
          break;
        case 'requiresIfExists':
          if (!Array.isArray(modifier.requiresIfExists)) {
            console.error(format_js_1d.default(INVALID_MODIFIER_ERROR, modifier.name, '"requiresIfExists"', '"array"', "\"" + String(modifier.requiresIfExists) + "\""));
          }
          break;
        case 'options':
        case 'data':
          break;
        default:
          console.error("PopperJS: an invalid property has been provided to the \"" + modifier.name + "\" modifier, valid properties are " + VALID_PROPERTIES.map(function (s) {
            return "\"" + s + "\"";
          }).join(', ') + "; but \"" + key + "\" was provided.");
      }
      modifier.requires && modifier.requires.forEach(function (requirement) {
        if (modifiers.find(function (mod) {
          return mod.name === requirement;
        }) == null) {
          console.error(format_js_1d.default(MISSING_DEPENDENCY_ERROR, String(modifier.name), requirement, requirement));
        }
      });
    });
  });
}
exports.default = validateModifiers;

},

// node_modules/@popperjs/core/lib/utils/uniqueBy.js @367
367: function(__fusereq, exports, module){
exports.__esModule = true;
function uniqueBy(arr, fn) {
  var identifiers = new Set();
  return arr.filter(function (item) {
    var identifier = fn(item);
    if (!identifiers.has(identifier)) {
      identifiers.add(identifier);
      return true;
    }
  });
}
exports.default = uniqueBy;

},

// node_modules/@popperjs/core/lib/utils/mergeByName.js @368
368: function(__fusereq, exports, module){
exports.__esModule = true;
function mergeByName(modifiers) {
  var merged = modifiers.reduce(function (merged, current) {
    var existing = merged[current.name];
    merged[current.name] = existing ? Object.assign({}, existing, current, {
      options: Object.assign({}, existing.options, current.options),
      data: Object.assign({}, existing.data, current.data)
    }) : current;
    return merged;
  }, {});
  return Object.keys(merged).map(function (key) {
    return merged[key];
  });
}
exports.default = mergeByName;

},

// node_modules/@popperjs/core/lib/dom-utils/getViewportRect.js @370
370: function(__fusereq, exports, module){
exports.__esModule = true;
var getWindow_js_1 = __fusereq(337);
var getWindow_js_1d = __fuse.dt(getWindow_js_1);
var getDocumentElement_js_1 = __fusereq(338);
var getDocumentElement_js_1d = __fuse.dt(getDocumentElement_js_1);
var getWindowScrollBarX_js_1 = __fusereq(373);
var getWindowScrollBarX_js_1d = __fuse.dt(getWindowScrollBarX_js_1);
function getViewportRect(element) {
  var win = getWindow_js_1d.default(element);
  var html = getDocumentElement_js_1d.default(element);
  var visualViewport = win.visualViewport;
  var width = html.clientWidth;
  var height = html.clientHeight;
  var x = 0;
  var y = 0;
  if (visualViewport) {
    width = visualViewport.width;
    height = visualViewport.height;
    if (!(/^((?!chrome|android).)*safari/i).test(navigator.userAgent)) {
      x = visualViewport.offsetLeft;
      y = visualViewport.offsetTop;
    }
  }
  return {
    width: width,
    height: height,
    x: x + getWindowScrollBarX_js_1d.default(element),
    y: y
  };
}
exports.default = getViewportRect;

},

// node_modules/@popperjs/core/lib/dom-utils/getDocumentRect.js @371
371: function(__fusereq, exports, module){
exports.__esModule = true;
var getDocumentElement_js_1 = __fusereq(338);
var getDocumentElement_js_1d = __fuse.dt(getDocumentElement_js_1);
var getComputedStyle_js_1 = __fusereq(339);
var getComputedStyle_js_1d = __fuse.dt(getComputedStyle_js_1);
var getWindowScrollBarX_js_1 = __fusereq(373);
var getWindowScrollBarX_js_1d = __fuse.dt(getWindowScrollBarX_js_1);
var getWindowScroll_js_1 = __fusereq(377);
var getWindowScroll_js_1d = __fuse.dt(getWindowScroll_js_1);
var math_js_1 = __fusereq(340);
function getDocumentRect(element) {
  var _element$ownerDocumen;
  var html = getDocumentElement_js_1d.default(element);
  var winScroll = getWindowScroll_js_1d.default(element);
  var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
  var width = math_js_1.max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
  var height = math_js_1.max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
  var x = -winScroll.scrollLeft + getWindowScrollBarX_js_1d.default(element);
  var y = -winScroll.scrollTop;
  if (getComputedStyle_js_1d.default(body || html).direction === 'rtl') {
    x += math_js_1.max(html.clientWidth, body ? body.clientWidth : 0) - width;
  }
  return {
    width: width,
    height: height,
    x: x,
    y: y
  };
}
exports.default = getDocumentRect;

},

// node_modules/@popperjs/core/lib/dom-utils/getNodeScroll.js @372
372: function(__fusereq, exports, module){
exports.__esModule = true;
var getWindowScroll_js_1 = __fusereq(377);
var getWindowScroll_js_1d = __fuse.dt(getWindowScroll_js_1);
var getWindow_js_1 = __fusereq(337);
var getWindow_js_1d = __fuse.dt(getWindow_js_1);
var instanceOf_js_1 = __fusereq(336);
var getHTMLElementScroll_js_1 = __fusereq(378);
var getHTMLElementScroll_js_1d = __fuse.dt(getHTMLElementScroll_js_1);
function getNodeScroll(node) {
  if (node === getWindow_js_1d.default(node) || !instanceOf_js_1.isHTMLElement(node)) {
    return getWindowScroll_js_1d.default(node);
  } else {
    return getHTMLElementScroll_js_1d.default(node);
  }
}
exports.default = getNodeScroll;

},

// node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js @373
373: function(__fusereq, exports, module){
exports.__esModule = true;
var getBoundingClientRect_js_1 = __fusereq(356);
var getBoundingClientRect_js_1d = __fuse.dt(getBoundingClientRect_js_1);
var getDocumentElement_js_1 = __fusereq(338);
var getDocumentElement_js_1d = __fuse.dt(getDocumentElement_js_1);
var getWindowScroll_js_1 = __fusereq(377);
var getWindowScroll_js_1d = __fuse.dt(getWindowScroll_js_1);
function getWindowScrollBarX(element) {
  return getBoundingClientRect_js_1d.default(getDocumentElement_js_1d.default(element)).left + getWindowScroll_js_1d.default(element).scrollLeft;
}
exports.default = getWindowScrollBarX;

},

// node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js @374
374: function(__fusereq, exports, module){
exports.__esModule = true;
var getComputedStyle_js_1 = __fusereq(339);
var getComputedStyle_js_1d = __fuse.dt(getComputedStyle_js_1);
function isScrollParent(element) {
  var _getComputedStyle = getComputedStyle_js_1d.default(element), overflow = _getComputedStyle.overflow, overflowX = _getComputedStyle.overflowX, overflowY = _getComputedStyle.overflowY;
  return (/auto|scroll|overlay|hidden/).test(overflow + overflowY + overflowX);
}
exports.default = isScrollParent;

},

// node_modules/@popperjs/core/lib/utils/format.js @375
375: function(__fusereq, exports, module){
exports.__esModule = true;
function format(str) {
  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }
  return [].concat(args).reduce(function (p, c) {
    return p.replace(/%s/, c);
  }, str);
}
exports.default = format;

},

// node_modules/@popperjs/core/lib/dom-utils/getScrollParent.js @376
376: function(__fusereq, exports, module){
exports.__esModule = true;
var getParentNode_js_1 = __fusereq(359);
var getParentNode_js_1d = __fuse.dt(getParentNode_js_1);
var isScrollParent_js_1 = __fusereq(374);
var isScrollParent_js_1d = __fuse.dt(isScrollParent_js_1);
var getNodeName_js_1 = __fusereq(357);
var getNodeName_js_1d = __fuse.dt(getNodeName_js_1);
var instanceOf_js_1 = __fusereq(336);
function getScrollParent(node) {
  if (['html', 'body', '#document'].indexOf(getNodeName_js_1d.default(node)) >= 0) {
    return node.ownerDocument.body;
  }
  if (instanceOf_js_1.isHTMLElement(node) && isScrollParent_js_1d.default(node)) {
    return node;
  }
  return getScrollParent(getParentNode_js_1d.default(node));
}
exports.default = getScrollParent;

},

// node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js @377
377: function(__fusereq, exports, module){
exports.__esModule = true;
var getWindow_js_1 = __fusereq(337);
var getWindow_js_1d = __fuse.dt(getWindow_js_1);
function getWindowScroll(node) {
  var win = getWindow_js_1d.default(node);
  var scrollLeft = win.pageXOffset;
  var scrollTop = win.pageYOffset;
  return {
    scrollLeft: scrollLeft,
    scrollTop: scrollTop
  };
}
exports.default = getWindowScroll;

},

// node_modules/@popperjs/core/lib/dom-utils/getHTMLElementScroll.js @378
378: function(__fusereq, exports, module){
exports.__esModule = true;
function getHTMLElementScroll(element) {
  return {
    scrollLeft: element.scrollLeft,
    scrollTop: element.scrollTop
  };
}
exports.default = getHTMLElementScroll;

},

// node_modules/react-overlays/esm/Dropdown.js @138
138: function(__fusereq, exports, module){
exports.__esModule = true;
var matches_1 = __fusereq(218);
var matches_1d = __fuse.dt(matches_1);
var querySelectorAll_1 = __fusereq(219);
var querySelectorAll_1d = __fuse.dt(querySelectorAll_1);
var addEventListener_1 = __fusereq(157);
var addEventListener_1d = __fuse.dt(addEventListener_1);
var react_1 = __fusereq(3);
var react_1d = __fuse.dt(react_1);
var prop_types_1 = __fusereq(112);
var prop_types_1d = __fuse.dt(prop_types_1);
var uncontrollable_1 = __fusereq(126);
var usePrevious_1 = __fusereq(220);
var usePrevious_1d = __fuse.dt(usePrevious_1);
var useForceUpdate_1 = __fusereq(221);
var useForceUpdate_1d = __fuse.dt(useForceUpdate_1);
var useGlobalListener_1 = __fusereq(222);
var useGlobalListener_1d = __fuse.dt(useGlobalListener_1);
var useEventCallback_1 = __fusereq(127);
var useEventCallback_1d = __fuse.dt(useEventCallback_1);
var DropdownContext_1 = __fusereq(223);
var DropdownContext_1d = __fuse.dt(DropdownContext_1);
var DropdownMenu_1 = __fusereq(212);
var DropdownMenu_1d = __fuse.dt(DropdownMenu_1);
var DropdownToggle_1 = __fusereq(217);
var DropdownToggle_1d = __fuse.dt(DropdownToggle_1);
var propTypes = {
  children: prop_types_1d.default.node,
  drop: prop_types_1d.default.oneOf(['up', 'left', 'right', 'down']),
  focusFirstItemOnShow: prop_types_1d.default.oneOf([false, true, 'keyboard']),
  itemSelector: prop_types_1d.default.string,
  alignEnd: prop_types_1d.default.bool,
  show: prop_types_1d.default.bool,
  defaultShow: prop_types_1d.default.bool,
  onToggle: prop_types_1d.default.func
};
function useRefWithUpdate() {
  var forceUpdate = useForceUpdate_1d.default();
  var ref = react_1.useRef(null);
  var attachRef = react_1.useCallback(function (element) {
    ref.current = element;
    forceUpdate();
  }, [forceUpdate]);
  return [ref, attachRef];
}
function Dropdown(_ref) {
  var drop = _ref.drop, alignEnd = _ref.alignEnd, defaultShow = _ref.defaultShow, rawShow = _ref.show, rawOnToggle = _ref.onToggle, _ref$itemSelector = _ref.itemSelector, itemSelector = _ref$itemSelector === void 0 ? '* > *' : _ref$itemSelector, focusFirstItemOnShow = _ref.focusFirstItemOnShow, children = _ref.children;
  var _useUncontrolledProp = uncontrollable_1.useUncontrolledProp(rawShow, defaultShow, rawOnToggle), show = _useUncontrolledProp[0], onToggle = _useUncontrolledProp[1];
  var _useRefWithUpdate = useRefWithUpdate(), menuRef = _useRefWithUpdate[0], setMenu = _useRefWithUpdate[1];
  var menuElement = menuRef.current;
  var _useRefWithUpdate2 = useRefWithUpdate(), toggleRef = _useRefWithUpdate2[0], setToggle = _useRefWithUpdate2[1];
  var toggleElement = toggleRef.current;
  var lastShow = usePrevious_1d.default(show);
  var lastSourceEvent = react_1.useRef(null);
  var focusInDropdown = react_1.useRef(false);
  var toggle = react_1.useCallback(function (nextShow, event) {
    onToggle(nextShow, event);
  }, [onToggle]);
  var context = react_1.useMemo(function () {
    return {
      toggle: toggle,
      drop: drop,
      show: show,
      alignEnd: alignEnd,
      menuElement: menuElement,
      toggleElement: toggleElement,
      setMenu: setMenu,
      setToggle: setToggle
    };
  }, [toggle, drop, show, alignEnd, menuElement, toggleElement, setMenu, setToggle]);
  if (menuElement && lastShow && !show) {
    focusInDropdown.current = menuElement.contains(document.activeElement);
  }
  var focusToggle = useEventCallback_1d.default(function () {
    if (toggleElement && toggleElement.focus) {
      toggleElement.focus();
    }
  });
  var maybeFocusFirst = useEventCallback_1d.default(function () {
    var type = lastSourceEvent.current;
    var focusType = focusFirstItemOnShow;
    if (focusType == null) {
      focusType = menuRef.current && matches_1d.default(menuRef.current, '[role=menu]') ? 'keyboard' : false;
    }
    if (focusType === false || focusType === 'keyboard' && !(/^key.+$/).test(type)) {
      return;
    }
    var first = querySelectorAll_1d.default(menuRef.current, itemSelector)[0];
    if (first && first.focus) first.focus();
  });
  react_1.useEffect(function () {
    if (show) maybeFocusFirst(); else if (focusInDropdown.current) {
      focusInDropdown.current = false;
      focusToggle();
    }
  }, [show, focusInDropdown, focusToggle, maybeFocusFirst]);
  react_1.useEffect(function () {
    lastSourceEvent.current = null;
  });
  var getNextFocusedChild = function getNextFocusedChild(current, offset) {
    if (!menuRef.current) return null;
    var items = querySelectorAll_1d.default(menuRef.current, itemSelector);
    var index = items.indexOf(current) + offset;
    index = Math.max(0, Math.min(index, items.length));
    return items[index];
  };
  useGlobalListener_1d.default('keydown', function (event) {
    var _menuRef$current, _toggleRef$current;
    var key = event.key;
    var target = event.target;
    var fromMenu = (_menuRef$current = menuRef.current) == null ? void 0 : _menuRef$current.contains(target);
    var fromToggle = (_toggleRef$current = toggleRef.current) == null ? void 0 : _toggleRef$current.contains(target);
    var isInput = (/input|textarea/i).test(target.tagName);
    if (isInput && (key === ' ' || key !== 'Escape' && fromMenu)) {
      return;
    }
    if (!fromMenu && !fromToggle) {
      return;
    }
    lastSourceEvent.current = event.type;
    switch (key) {
      case 'ArrowUp':
        {
          var next = getNextFocusedChild(target, -1);
          if (next && next.focus) next.focus();
          event.preventDefault();
          return;
        }
      case 'ArrowDown':
        event.preventDefault();
        if (!show) {
          onToggle(true, event);
        } else {
          var _next = getNextFocusedChild(target, 1);
          if (_next && _next.focus) _next.focus();
        }
        return;
      case 'Tab':
        addEventListener_1d.default(document, 'keyup', function (e) {
          if (e.key === 'Tab' && !e.target || !menuRef.current.contains(e.target)) {
            onToggle(false, event);
          }
        }, {
          once: true
        });
        break;
      case 'Escape':
        event.preventDefault();
        event.stopPropagation();
        onToggle(false, event);
        break;
      default:
    }
  });
  return react_1d.default.createElement(DropdownContext_1d.default.Provider, {
    value: context
  }, children);
}
Dropdown.displayName = 'ReactOverlaysDropdown';
Dropdown.propTypes = propTypes;
Dropdown.Menu = DropdownMenu_1d.default;
Dropdown.Toggle = DropdownToggle_1d.default;
exports.default = Dropdown;

},

// node_modules/react-overlays/esm/Modal.js @165
165: function(__fusereq, exports, module){
exports.__esModule = true;
var extends_1 = __fusereq(122);
var extends_1d = __fuse.dt(extends_1);
var objectWithoutPropertiesLoose_1 = __fusereq(123);
var objectWithoutPropertiesLoose_1d = __fuse.dt(objectWithoutPropertiesLoose_1);
var activeElement_1 = __fusereq(235);
var activeElement_1d = __fuse.dt(activeElement_1);
var contains_1 = __fusereq(178);
var contains_1d = __fuse.dt(contains_1);
var canUseDOM_1 = __fusereq(158);
var canUseDOM_1d = __fuse.dt(canUseDOM_1);
var listen_1 = __fusereq(225);
var listen_1d = __fuse.dt(listen_1);
var prop_types_1 = __fusereq(112);
var prop_types_1d = __fuse.dt(prop_types_1);
var react_1 = __fusereq(3);
var react_1d = __fuse.dt(react_1);
var react_dom_1 = __fusereq(4);
var react_dom_1d = __fuse.dt(react_dom_1);
var useMounted_1 = __fusereq(215);
var useMounted_1d = __fuse.dt(useMounted_1);
var useWillUnmount_1 = __fusereq(163);
var useWillUnmount_1d = __fuse.dt(useWillUnmount_1);
var usePrevious_1 = __fusereq(220);
var usePrevious_1d = __fuse.dt(usePrevious_1);
var useEventCallback_1 = __fusereq(127);
var useEventCallback_1d = __fuse.dt(useEventCallback_1);
var ModalManager_1 = __fusereq(227);
var ModalManager_1d = __fuse.dt(ModalManager_1);
var useWaitForDOMRef_1 = __fusereq(231);
var useWaitForDOMRef_1d = __fuse.dt(useWaitForDOMRef_1);
var manager;
function getManager() {
  if (!manager) manager = new ModalManager_1d.default();
  return manager;
}
function useModalManager(provided) {
  var modalManager = provided || getManager();
  var modal = react_1.useRef({
    dialog: null,
    backdrop: null
  });
  return Object.assign(modal.current, {
    add: function add(container, className) {
      return modalManager.add(modal.current, container, className);
    },
    remove: function remove() {
      return modalManager.remove(modal.current);
    },
    isTopModal: function isTopModal() {
      return modalManager.isTopModal(modal.current);
    },
    setDialogRef: react_1.useCallback(function (ref) {
      modal.current.dialog = ref;
    }, []),
    setBackdropRef: react_1.useCallback(function (ref) {
      modal.current.backdrop = ref;
    }, [])
  });
}
var Modal = react_1.forwardRef(function (_ref, ref) {
  var _ref$show = _ref.show, show = _ref$show === void 0 ? false : _ref$show, _ref$role = _ref.role, role = _ref$role === void 0 ? 'dialog' : _ref$role, className = _ref.className, style = _ref.style, children = _ref.children, _ref$backdrop = _ref.backdrop, backdrop = _ref$backdrop === void 0 ? true : _ref$backdrop, _ref$keyboard = _ref.keyboard, keyboard = _ref$keyboard === void 0 ? true : _ref$keyboard, onBackdropClick = _ref.onBackdropClick, onEscapeKeyDown = _ref.onEscapeKeyDown, transition = _ref.transition, backdropTransition = _ref.backdropTransition, _ref$autoFocus = _ref.autoFocus, autoFocus = _ref$autoFocus === void 0 ? true : _ref$autoFocus, _ref$enforceFocus = _ref.enforceFocus, enforceFocus = _ref$enforceFocus === void 0 ? true : _ref$enforceFocus, _ref$restoreFocus = _ref.restoreFocus, restoreFocus = _ref$restoreFocus === void 0 ? true : _ref$restoreFocus, restoreFocusOptions = _ref.restoreFocusOptions, renderDialog = _ref.renderDialog, _ref$renderBackdrop = _ref.renderBackdrop, renderBackdrop = _ref$renderBackdrop === void 0 ? function (props) {
    return react_1d.default.createElement("div", props);
  } : _ref$renderBackdrop, providedManager = _ref.manager, containerRef = _ref.container, containerClassName = _ref.containerClassName, onShow = _ref.onShow, _ref$onHide = _ref.onHide, onHide = _ref$onHide === void 0 ? function () {} : _ref$onHide, onExit = _ref.onExit, onExited = _ref.onExited, onExiting = _ref.onExiting, onEnter = _ref.onEnter, onEntering = _ref.onEntering, onEntered = _ref.onEntered, rest = objectWithoutPropertiesLoose_1d.default(_ref, ["show", "role", "className", "style", "children", "backdrop", "keyboard", "onBackdropClick", "onEscapeKeyDown", "transition", "backdropTransition", "autoFocus", "enforceFocus", "restoreFocus", "restoreFocusOptions", "renderDialog", "renderBackdrop", "manager", "container", "containerClassName", "onShow", "onHide", "onExit", "onExited", "onExiting", "onEnter", "onEntering", "onEntered"]);
  var container = useWaitForDOMRef_1d.default(containerRef);
  var modal = useModalManager(providedManager);
  var isMounted = useMounted_1d.default();
  var prevShow = usePrevious_1d.default(show);
  var _useState = react_1.useState(!show), exited = _useState[0], setExited = _useState[1];
  var lastFocusRef = react_1.useRef(null);
  react_1.useImperativeHandle(ref, function () {
    return modal;
  }, [modal]);
  if (canUseDOM_1d.default && !prevShow && show) {
    lastFocusRef.current = activeElement_1d.default();
  }
  if (!transition && !show && !exited) {
    setExited(true);
  } else if (show && exited) {
    setExited(false);
  }
  var handleShow = useEventCallback_1d.default(function () {
    modal.add(container, containerClassName);
    removeKeydownListenerRef.current = listen_1d.default(document, 'keydown', handleDocumentKeyDown);
    removeFocusListenerRef.current = listen_1d.default(document, 'focus', function () {
      return setTimeout(handleEnforceFocus);
    }, true);
    if (onShow) {
      onShow();
    }
    if (autoFocus) {
      var currentActiveElement = activeElement_1d.default(document);
      if (modal.dialog && currentActiveElement && !contains_1d.default(modal.dialog, currentActiveElement)) {
        lastFocusRef.current = currentActiveElement;
        modal.dialog.focus();
      }
    }
  });
  var handleHide = useEventCallback_1d.default(function () {
    modal.remove();
    removeKeydownListenerRef.current == null ? void 0 : removeKeydownListenerRef.current();
    removeFocusListenerRef.current == null ? void 0 : removeFocusListenerRef.current();
    if (restoreFocus) {
      var _lastFocusRef$current;
      (_lastFocusRef$current = lastFocusRef.current) == null ? void 0 : _lastFocusRef$current.focus == null ? void 0 : _lastFocusRef$current.focus(restoreFocusOptions);
      lastFocusRef.current = null;
    }
  });
  react_1.useEffect(function () {
    if (!show || !container) return;
    handleShow();
  }, [show, container, handleShow]);
  react_1.useEffect(function () {
    if (!exited) return;
    handleHide();
  }, [exited, handleHide]);
  useWillUnmount_1d.default(function () {
    handleHide();
  });
  var handleEnforceFocus = useEventCallback_1d.default(function () {
    if (!enforceFocus || !isMounted() || !modal.isTopModal()) {
      return;
    }
    var currentActiveElement = activeElement_1d.default();
    if (modal.dialog && currentActiveElement && !contains_1d.default(modal.dialog, currentActiveElement)) {
      modal.dialog.focus();
    }
  });
  var handleBackdropClick = useEventCallback_1d.default(function (e) {
    if (e.target !== e.currentTarget) {
      return;
    }
    onBackdropClick == null ? void 0 : onBackdropClick(e);
    if (backdrop === true) {
      onHide();
    }
  });
  var handleDocumentKeyDown = useEventCallback_1d.default(function (e) {
    if (keyboard && e.keyCode === 27 && modal.isTopModal()) {
      onEscapeKeyDown == null ? void 0 : onEscapeKeyDown(e);
      if (!e.defaultPrevented) {
        onHide();
      }
    }
  });
  var removeFocusListenerRef = react_1.useRef();
  var removeKeydownListenerRef = react_1.useRef();
  var handleHidden = function handleHidden() {
    setExited(true);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    onExited == null ? void 0 : onExited.apply(void 0, args);
  };
  var Transition = transition;
  if (!container || !(show || Transition && !exited)) {
    return null;
  }
  var dialogProps = extends_1d.default({
    role: role,
    ref: modal.setDialogRef,
    'aria-modal': role === 'dialog' ? true : undefined
  }, rest, {
    style: style,
    className: className,
    tabIndex: -1
  });
  var dialog = renderDialog ? renderDialog(dialogProps) : react_1d.default.createElement("div", dialogProps, react_1d.default.cloneElement(children, {
    role: 'document'
  }));
  if (Transition) {
    dialog = react_1d.default.createElement(Transition, {
      appear: true,
      unmountOnExit: true,
      "in": !!show,
      onExit: onExit,
      onExiting: onExiting,
      onExited: handleHidden,
      onEnter: onEnter,
      onEntering: onEntering,
      onEntered: onEntered
    }, dialog);
  }
  var backdropElement = null;
  if (backdrop) {
    var BackdropTransition = backdropTransition;
    backdropElement = renderBackdrop({
      ref: modal.setBackdropRef,
      onClick: handleBackdropClick
    });
    if (BackdropTransition) {
      backdropElement = react_1d.default.createElement(BackdropTransition, {
        appear: true,
        "in": !!show
      }, backdropElement);
    }
  }
  return react_1d.default.createElement(react_1d.default.Fragment, null, react_dom_1d.default.createPortal(react_1d.default.createElement(react_1d.default.Fragment, null, backdropElement, dialog), container));
});
var propTypes = {
  show: prop_types_1d.default.bool,
  container: prop_types_1d.default.any,
  onShow: prop_types_1d.default.func,
  onHide: prop_types_1d.default.func,
  backdrop: prop_types_1d.default.oneOfType([prop_types_1d.default.bool, prop_types_1d.default.oneOf(['static'])]),
  renderDialog: prop_types_1d.default.func,
  renderBackdrop: prop_types_1d.default.func,
  onEscapeKeyDown: prop_types_1d.default.func,
  onBackdropClick: prop_types_1d.default.func,
  containerClassName: prop_types_1d.default.string,
  keyboard: prop_types_1d.default.bool,
  transition: prop_types_1d.default.elementType,
  backdropTransition: prop_types_1d.default.elementType,
  autoFocus: prop_types_1d.default.bool,
  enforceFocus: prop_types_1d.default.bool,
  restoreFocus: prop_types_1d.default.bool,
  restoreFocusOptions: prop_types_1d.default.shape({
    preventScroll: prop_types_1d.default.bool
  }),
  onEnter: prop_types_1d.default.func,
  onEntering: prop_types_1d.default.func,
  onEntered: prop_types_1d.default.func,
  onExit: prop_types_1d.default.func,
  onExiting: prop_types_1d.default.func,
  onExited: prop_types_1d.default.func,
  manager: prop_types_1d.default.instanceOf(ModalManager_1d.default)
};
Modal.displayName = 'Modal';
Modal.propTypes = propTypes;
exports.default = Object.assign(Modal, {
  Manager: ModalManager_1d.default
});

},

// node_modules/react-overlays/esm/Overlay.js @174
174: function(__fusereq, exports, module){
exports.__esModule = true;
var extends_1 = __fusereq(122);
var extends_1d = __fuse.dt(extends_1);
var objectWithoutPropertiesLoose_1 = __fusereq(123);
var objectWithoutPropertiesLoose_1d = __fuse.dt(objectWithoutPropertiesLoose_1);
var prop_types_1 = __fusereq(112);
var prop_types_1d = __fuse.dt(prop_types_1);
var react_1 = __fusereq(3);
var react_1d = __fuse.dt(react_1);
var react_dom_1 = __fusereq(4);
var react_dom_1d = __fuse.dt(react_dom_1);
var useCallbackRef_1 = __fusereq(162);
var useCallbackRef_1d = __fuse.dt(useCallbackRef_1);
var useMergedRefs_1 = __fusereq(213);
var useMergedRefs_1d = __fuse.dt(useMergedRefs_1);
var popper_1 = __fusereq(228);
var usePopper_1 = __fusereq(229);
var usePopper_1d = __fuse.dt(usePopper_1);
var useRootClose_1 = __fusereq(230);
var useRootClose_1d = __fuse.dt(useRootClose_1);
var useWaitForDOMRef_1 = __fusereq(231);
var useWaitForDOMRef_1d = __fuse.dt(useWaitForDOMRef_1);
var mergeOptionsWithPopperConfig_1 = __fusereq(232);
var mergeOptionsWithPopperConfig_1d = __fuse.dt(mergeOptionsWithPopperConfig_1);
var Overlay = react_1d.default.forwardRef(function (props, outerRef) {
  var flip = props.flip, offset = props.offset, placement = props.placement, _props$containerPaddi = props.containerPadding, containerPadding = _props$containerPaddi === void 0 ? 5 : _props$containerPaddi, _props$popperConfig = props.popperConfig, popperConfig = _props$popperConfig === void 0 ? {} : _props$popperConfig, Transition = props.transition;
  var _useCallbackRef = useCallbackRef_1d.default(), rootElement = _useCallbackRef[0], attachRef = _useCallbackRef[1];
  var _useCallbackRef2 = useCallbackRef_1d.default(), arrowElement = _useCallbackRef2[0], attachArrowRef = _useCallbackRef2[1];
  var mergedRef = useMergedRefs_1d.default(attachRef, outerRef);
  var container = useWaitForDOMRef_1d.default(props.container);
  var target = useWaitForDOMRef_1d.default(props.target);
  var _useState = react_1.useState(!props.show), exited = _useState[0], setExited = _useState[1];
  var _usePopper = usePopper_1d.default(target, rootElement, mergeOptionsWithPopperConfig_1d.default({
    placement: placement,
    enableEvents: !!props.show,
    containerPadding: containerPadding || 5,
    flip: flip,
    offset: offset,
    arrowElement: arrowElement,
    popperConfig: popperConfig
  })), styles = _usePopper.styles, attributes = _usePopper.attributes, popper = objectWithoutPropertiesLoose_1d.default(_usePopper, ["styles", "attributes"]);
  if (props.show) {
    if (exited) setExited(false);
  } else if (!props.transition && !exited) {
    setExited(true);
  }
  var handleHidden = function handleHidden() {
    setExited(true);
    if (props.onExited) {
      props.onExited.apply(props, arguments);
    }
  };
  var mountOverlay = props.show || Transition && !exited;
  useRootClose_1d.default(rootElement, props.onHide, {
    disabled: !props.rootClose || props.rootCloseDisabled,
    clickTrigger: props.rootCloseEvent
  });
  if (!mountOverlay) {
    return null;
  }
  var child = props.children(extends_1d.default({}, popper, {
    show: !!props.show,
    props: extends_1d.default({}, attributes.popper, {
      style: styles.popper,
      ref: mergedRef
    }),
    arrowProps: extends_1d.default({}, attributes.arrow, {
      style: styles.arrow,
      ref: attachArrowRef
    })
  }));
  if (Transition) {
    var onExit = props.onExit, onExiting = props.onExiting, onEnter = props.onEnter, onEntering = props.onEntering, onEntered = props.onEntered;
    child = react_1d.default.createElement(Transition, {
      "in": props.show,
      appear: true,
      onExit: onExit,
      onExiting: onExiting,
      onExited: handleHidden,
      onEnter: onEnter,
      onEntering: onEntering,
      onEntered: onEntered
    }, child);
  }
  return container ? react_dom_1d.default.createPortal(child, container) : null;
});
Overlay.displayName = 'Overlay';
Overlay.propTypes = {
  show: prop_types_1d.default.bool,
  placement: prop_types_1d.default.oneOf(popper_1.placements),
  target: prop_types_1d.default.any,
  container: prop_types_1d.default.any,
  flip: prop_types_1d.default.bool,
  children: prop_types_1d.default.func.isRequired,
  containerPadding: prop_types_1d.default.number,
  popperConfig: prop_types_1d.default.object,
  rootClose: prop_types_1d.default.bool,
  rootCloseEvent: prop_types_1d.default.oneOf(['click', 'mousedown']),
  rootCloseDisabled: prop_types_1d.default.bool,
  onHide: function onHide(props) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    if (props.rootClose) {
      var _PropTypes$func;
      return (_PropTypes$func = prop_types_1d.default.func).isRequired.apply(_PropTypes$func, [props].concat(args));
    }
    return prop_types_1d.default.func.apply(prop_types_1d.default, [props].concat(args));
  },
  transition: prop_types_1d.default.elementType,
  onEnter: prop_types_1d.default.func,
  onEntering: prop_types_1d.default.func,
  onEntered: prop_types_1d.default.func,
  onExit: prop_types_1d.default.func,
  onExiting: prop_types_1d.default.func,
  onExited: prop_types_1d.default.func
};
exports.default = Overlay;

},

// node_modules/react-overlays/esm/safeFindDOMNode.js @175
175: function(__fusereq, exports, module){
exports.__esModule = true;
var react_dom_1 = __fusereq(4);
var react_dom_1d = __fuse.dt(react_dom_1);
function safeFindDOMNode(componentOrElement) {
  if (componentOrElement && ('setState' in componentOrElement)) {
    return react_dom_1d.default.findDOMNode(componentOrElement);
  }
  return componentOrElement != null ? componentOrElement : null;
}
exports.default = safeFindDOMNode;

},

// node_modules/react-overlays/esm/DropdownMenu.js @212
212: function(__fusereq, exports, module){
exports.__esModule = true;
var objectWithoutPropertiesLoose_1 = __fusereq(123);
var objectWithoutPropertiesLoose_1d = __fuse.dt(objectWithoutPropertiesLoose_1);
var extends_1 = __fusereq(122);
var extends_1d = __fuse.dt(extends_1);
var prop_types_1 = __fusereq(112);
var prop_types_1d = __fuse.dt(prop_types_1);
var react_1 = __fusereq(3);
var react_1d = __fuse.dt(react_1);
var useCallbackRef_1 = __fusereq(162);
var useCallbackRef_1d = __fuse.dt(useCallbackRef_1);
var DropdownContext_1 = __fusereq(223);
var DropdownContext_1d = __fuse.dt(DropdownContext_1);
var usePopper_1 = __fusereq(229);
var usePopper_1d = __fuse.dt(usePopper_1);
var useRootClose_1 = __fusereq(230);
var useRootClose_1d = __fuse.dt(useRootClose_1);
var mergeOptionsWithPopperConfig_1 = __fusereq(232);
var mergeOptionsWithPopperConfig_1d = __fuse.dt(mergeOptionsWithPopperConfig_1);
var noop = function noop() {};
function useDropdownMenu(options) {
  if (options === void 0) {
    options = {};
  }
  var context = react_1.useContext(DropdownContext_1d.default);
  var _useCallbackRef = useCallbackRef_1d.default(), arrowElement = _useCallbackRef[0], attachArrowRef = _useCallbackRef[1];
  var hasShownRef = react_1.useRef(false);
  var _options = options, flip = _options.flip, offset = _options.offset, rootCloseEvent = _options.rootCloseEvent, _options$fixed = _options.fixed, fixed = _options$fixed === void 0 ? false : _options$fixed, _options$popperConfig = _options.popperConfig, popperConfig = _options$popperConfig === void 0 ? {} : _options$popperConfig, _options$usePopper = _options.usePopper, shouldUsePopper = _options$usePopper === void 0 ? !!context : _options$usePopper;
  var show = (context == null ? void 0 : context.show) == null ? !!options.show : context.show;
  var alignEnd = (context == null ? void 0 : context.alignEnd) == null ? options.alignEnd : context.alignEnd;
  if (show && !hasShownRef.current) {
    hasShownRef.current = true;
  }
  var handleClose = function handleClose(e) {
    context == null ? void 0 : context.toggle(false, e);
  };
  var _ref = context || ({}), drop = _ref.drop, setMenu = _ref.setMenu, menuElement = _ref.menuElement, toggleElement = _ref.toggleElement;
  var placement = alignEnd ? 'bottom-end' : 'bottom-start';
  if (drop === 'up') placement = alignEnd ? 'top-end' : 'top-start'; else if (drop === 'right') placement = alignEnd ? 'right-end' : 'right-start'; else if (drop === 'left') placement = alignEnd ? 'left-end' : 'left-start';
  var popper = usePopper_1d.default(toggleElement, menuElement, mergeOptionsWithPopperConfig_1d.default({
    placement: placement,
    enabled: !!(shouldUsePopper && show),
    enableEvents: show,
    offset: offset,
    flip: flip,
    fixed: fixed,
    arrowElement: arrowElement,
    popperConfig: popperConfig
  }));
  var menuProps = extends_1d.default({
    ref: setMenu || noop,
    'aria-labelledby': toggleElement == null ? void 0 : toggleElement.id
  }, popper.attributes.popper, {
    style: popper.styles.popper
  });
  var metadata = {
    show: show,
    alignEnd: alignEnd,
    hasShown: hasShownRef.current,
    toggle: context == null ? void 0 : context.toggle,
    popper: shouldUsePopper ? popper : null,
    arrowProps: shouldUsePopper ? extends_1d.default({
      ref: attachArrowRef
    }, popper.attributes.arrow, {
      style: popper.styles.arrow
    }) : {}
  };
  useRootClose_1d.default(menuElement, handleClose, {
    clickTrigger: rootCloseEvent,
    disabled: !show
  });
  return [menuProps, metadata];
}
exports.useDropdownMenu = useDropdownMenu;
var propTypes = {
  children: prop_types_1d.default.func.isRequired,
  show: prop_types_1d.default.bool,
  alignEnd: prop_types_1d.default.bool,
  flip: prop_types_1d.default.bool,
  usePopper: prop_types_1d.default.oneOf([true, false]),
  popperConfig: prop_types_1d.default.object,
  rootCloseEvent: prop_types_1d.default.string
};
var defaultProps = {
  usePopper: true
};
function DropdownMenu(_ref2) {
  var children = _ref2.children, options = objectWithoutPropertiesLoose_1d.default(_ref2, ["children"]);
  var _useDropdownMenu = useDropdownMenu(options), props = _useDropdownMenu[0], meta = _useDropdownMenu[1];
  return react_1d.default.createElement(react_1d.default.Fragment, null, meta.hasShown ? children(props, meta) : null);
}
DropdownMenu.displayName = 'ReactOverlaysDropdownMenu';
DropdownMenu.propTypes = propTypes;
DropdownMenu.defaultProps = defaultProps;
exports.default = DropdownMenu;

},

// node_modules/react-overlays/esm/DropdownToggle.js @217
217: function(__fusereq, exports, module){
exports.__esModule = true;
var prop_types_1 = __fusereq(112);
var prop_types_1d = __fuse.dt(prop_types_1);
var react_1 = __fusereq(3);
var react_1d = __fuse.dt(react_1);
var DropdownContext_1 = __fusereq(223);
var DropdownContext_1d = __fuse.dt(DropdownContext_1);
var noop = function noop() {};
function useDropdownToggle() {
  var _ref = react_1.useContext(DropdownContext_1d.default) || ({}), _ref$show = _ref.show, show = _ref$show === void 0 ? false : _ref$show, _ref$toggle = _ref.toggle, toggle = _ref$toggle === void 0 ? noop : _ref$toggle, setToggle = _ref.setToggle;
  var handleClick = react_1.useCallback(function (e) {
    toggle(!show, e);
  }, [show, toggle]);
  return [{
    ref: setToggle || noop,
    onClick: handleClick,
    'aria-haspopup': true,
    'aria-expanded': !!show
  }, {
    show: show,
    toggle: toggle
  }];
}
exports.useDropdownToggle = useDropdownToggle;
var propTypes = {
  children: prop_types_1d.default.func.isRequired
};
function DropdownToggle(_ref2) {
  var children = _ref2.children;
  var _useDropdownToggle = useDropdownToggle(), props = _useDropdownToggle[0], meta = _useDropdownToggle[1];
  return react_1d.default.createElement(react_1d.default.Fragment, null, children(props, meta));
}
DropdownToggle.displayName = 'ReactOverlaysDropdownToggle';
DropdownToggle.propTypes = propTypes;
exports.default = DropdownToggle;

},

// node_modules/react-overlays/esm/DropdownContext.js @223
223: function(__fusereq, exports, module){
exports.__esModule = true;
var react_1 = __fusereq(3);
var react_1d = __fuse.dt(react_1);
var DropdownContext = react_1d.default.createContext(null);
exports.default = DropdownContext;

},

// node_modules/react-overlays/esm/ModalManager.js @227
227: function(__fusereq, exports, module){
exports.__esModule = true;
var addClass_1 = __fusereq(280);
var addClass_1d = __fuse.dt(addClass_1);
var removeClass_1 = __fusereq(281);
var removeClass_1d = __fuse.dt(removeClass_1);
var css_1 = __fusereq(133);
var css_1d = __fuse.dt(css_1);
var scrollbarSize_1 = __fusereq(161);
var scrollbarSize_1d = __fuse.dt(scrollbarSize_1);
var isOverflowing_1 = __fusereq(282);
var isOverflowing_1d = __fuse.dt(isOverflowing_1);
var manageAriaHidden_1 = __fusereq(283);
function findIndexOf(arr, cb) {
  var idx = -1;
  arr.some(function (d, i) {
    if (cb(d, i)) {
      idx = i;
      return true;
    }
    return false;
  });
  return idx;
}
var ModalManager = (function () {
  function ModalManager(_temp) {
    var _ref = _temp === void 0 ? {} : _temp, _ref$hideSiblingNodes = _ref.hideSiblingNodes, hideSiblingNodes = _ref$hideSiblingNodes === void 0 ? true : _ref$hideSiblingNodes, _ref$handleContainerO = _ref.handleContainerOverflow, handleContainerOverflow = _ref$handleContainerO === void 0 ? true : _ref$handleContainerO;
    this.hideSiblingNodes = void 0;
    this.handleContainerOverflow = void 0;
    this.modals = void 0;
    this.containers = void 0;
    this.data = void 0;
    this.scrollbarSize = void 0;
    this.hideSiblingNodes = hideSiblingNodes;
    this.handleContainerOverflow = handleContainerOverflow;
    this.modals = [];
    this.containers = [];
    this.data = [];
    this.scrollbarSize = scrollbarSize_1d.default();
  }
  var _proto = ModalManager.prototype;
  _proto.isContainerOverflowing = function isContainerOverflowing(modal) {
    var data = this.data[this.containerIndexFromModal(modal)];
    return data && data.overflowing;
  };
  _proto.containerIndexFromModal = function containerIndexFromModal(modal) {
    return findIndexOf(this.data, function (d) {
      return d.modals.indexOf(modal) !== -1;
    });
  };
  _proto.setContainerStyle = function setContainerStyle(containerState, container) {
    var style = {
      overflow: 'hidden'
    };
    containerState.style = {
      overflow: container.style.overflow,
      paddingRight: container.style.paddingRight
    };
    if (containerState.overflowing) {
      style.paddingRight = parseInt(css_1d.default(container, 'paddingRight') || '0', 10) + this.scrollbarSize + "px";
    }
    css_1d.default(container, style);
  };
  _proto.removeContainerStyle = function removeContainerStyle(containerState, container) {
    Object.assign(container.style, containerState.style);
  };
  _proto.add = function add(modal, container, className) {
    var modalIdx = this.modals.indexOf(modal);
    var containerIdx = this.containers.indexOf(container);
    if (modalIdx !== -1) {
      return modalIdx;
    }
    modalIdx = this.modals.length;
    this.modals.push(modal);
    if (this.hideSiblingNodes) {
      manageAriaHidden_1.hideSiblings(container, modal);
    }
    if (containerIdx !== -1) {
      this.data[containerIdx].modals.push(modal);
      return modalIdx;
    }
    var data = {
      modals: [modal],
      classes: className ? className.split(/\s+/) : [],
      overflowing: isOverflowing_1d.default(container)
    };
    if (this.handleContainerOverflow) {
      this.setContainerStyle(data, container);
    }
    data.classes.forEach(addClass_1d.default.bind(null, container));
    this.containers.push(container);
    this.data.push(data);
    return modalIdx;
  };
  _proto.remove = function remove(modal) {
    var modalIdx = this.modals.indexOf(modal);
    if (modalIdx === -1) {
      return;
    }
    var containerIdx = this.containerIndexFromModal(modal);
    var data = this.data[containerIdx];
    var container = this.containers[containerIdx];
    data.modals.splice(data.modals.indexOf(modal), 1);
    this.modals.splice(modalIdx, 1);
    if (data.modals.length === 0) {
      data.classes.forEach(removeClass_1d.default.bind(null, container));
      if (this.handleContainerOverflow) {
        this.removeContainerStyle(data, container);
      }
      if (this.hideSiblingNodes) {
        manageAriaHidden_1.showSiblings(container, modal);
      }
      this.containers.splice(containerIdx, 1);
      this.data.splice(containerIdx, 1);
    } else if (this.hideSiblingNodes) {
      var _data$modals = data.modals[data.modals.length - 1], backdrop = _data$modals.backdrop, dialog = _data$modals.dialog;
      manageAriaHidden_1.ariaHidden(false, dialog);
      manageAriaHidden_1.ariaHidden(false, backdrop);
    }
  };
  _proto.isTopModal = function isTopModal(modal) {
    return !!this.modals.length && this.modals[this.modals.length - 1] === modal;
  };
  return ModalManager;
})();
exports.default = ModalManager;

},

// node_modules/react-overlays/esm/popper.js @228
228: function(__fusereq, exports, module){
exports.__esModule = true;
var arrow_1 = __fusereq(286);
var arrow_1d = __fuse.dt(arrow_1);
var computeStyles_1 = __fusereq(287);
var computeStyles_1d = __fuse.dt(computeStyles_1);
var eventListeners_1 = __fusereq(288);
var eventListeners_1d = __fuse.dt(eventListeners_1);
var flip_1 = __fusereq(289);
var flip_1d = __fuse.dt(flip_1);
var hide_1 = __fusereq(290);
var hide_1d = __fuse.dt(hide_1);
var offset_1 = __fusereq(291);
var offset_1d = __fuse.dt(offset_1);
var popperOffsets_1 = __fusereq(292);
var popperOffsets_1d = __fuse.dt(popperOffsets_1);
var preventOverflow_1 = __fusereq(293);
var preventOverflow_1d = __fuse.dt(preventOverflow_1);
var enums_1 = __fusereq(294);
var popper_base_1 = __fusereq(295);
exports.createPopper = popper_base_1.popperGenerator({
  defaultModifiers: [hide_1d.default, popperOffsets_1d.default, computeStyles_1d.default, eventListeners_1d.default, offset_1d.default, flip_1d.default, preventOverflow_1d.default, arrow_1d.default]
});
exports.placements = enums_1.placements;

},

// node_modules/react-overlays/esm/usePopper.js @229
229: function(__fusereq, exports, module){
exports.__esModule = true;
var extends_1 = __fusereq(122);
var extends_1d = __fuse.dt(extends_1);
var objectWithoutPropertiesLoose_1 = __fusereq(123);
var objectWithoutPropertiesLoose_1d = __fuse.dt(objectWithoutPropertiesLoose_1);
var react_1 = __fusereq(3);
var useSafeState_1 = __fusereq(284);
var useSafeState_1d = __fuse.dt(useSafeState_1);
var popper_1 = __fusereq(228);
var initialPopperStyles = function initialPopperStyles(position) {
  return {
    position: position,
    top: '0',
    left: '0',
    opacity: '0',
    pointerEvents: 'none'
  };
};
var disabledApplyStylesModifier = {
  name: 'applyStyles',
  enabled: false
};
var ariaDescribedByModifier = {
  name: 'ariaDescribedBy',
  enabled: true,
  phase: 'afterWrite',
  effect: function effect(_ref) {
    var state = _ref.state;
    return function () {
      var _state$elements = state.elements, reference = _state$elements.reference, popper = _state$elements.popper;
      if (('removeAttribute' in reference)) {
        var ids = (reference.getAttribute('aria-describedby') || '').split(',').filter(function (id) {
          return id.trim() !== popper.id;
        });
        if (!ids.length) reference.removeAttribute('aria-describedby'); else reference.setAttribute('aria-describedby', ids.join(','));
      }
    };
  },
  fn: function fn(_ref2) {
    var _popper$getAttribute;
    var state = _ref2.state;
    var _state$elements2 = state.elements, popper = _state$elements2.popper, reference = _state$elements2.reference;
    var role = (_popper$getAttribute = popper.getAttribute('role')) == null ? void 0 : _popper$getAttribute.toLowerCase();
    if (popper.id && role === 'tooltip' && ('setAttribute' in reference)) {
      var ids = reference.getAttribute('aria-describedby');
      if (ids && ids.split(',').indexOf(popper.id) !== -1) {
        return;
      }
      reference.setAttribute('aria-describedby', ids ? ids + "," + popper.id : popper.id);
    }
  }
};
var EMPTY_MODIFIERS = [];
function usePopper(referenceElement, popperElement, _temp) {
  var _ref3 = _temp === void 0 ? {} : _temp, _ref3$enabled = _ref3.enabled, enabled = _ref3$enabled === void 0 ? true : _ref3$enabled, _ref3$placement = _ref3.placement, placement = _ref3$placement === void 0 ? 'bottom' : _ref3$placement, _ref3$strategy = _ref3.strategy, strategy = _ref3$strategy === void 0 ? 'absolute' : _ref3$strategy, _ref3$modifiers = _ref3.modifiers, modifiers = _ref3$modifiers === void 0 ? EMPTY_MODIFIERS : _ref3$modifiers, config = objectWithoutPropertiesLoose_1d.default(_ref3, ["enabled", "placement", "strategy", "modifiers"]);
  var popperInstanceRef = react_1.useRef();
  var update = react_1.useCallback(function () {
    var _popperInstanceRef$cu;
    (_popperInstanceRef$cu = popperInstanceRef.current) == null ? void 0 : _popperInstanceRef$cu.update();
  }, []);
  var forceUpdate = react_1.useCallback(function () {
    var _popperInstanceRef$cu2;
    (_popperInstanceRef$cu2 = popperInstanceRef.current) == null ? void 0 : _popperInstanceRef$cu2.forceUpdate();
  }, []);
  var _useSafeState = useSafeState_1d.default(react_1.useState({
    placement: placement,
    update: update,
    forceUpdate: forceUpdate,
    attributes: {},
    styles: {
      popper: initialPopperStyles(strategy),
      arrow: {}
    }
  })), popperState = _useSafeState[0], setState = _useSafeState[1];
  var updateModifier = react_1.useMemo(function () {
    return {
      name: 'updateStateModifier',
      enabled: true,
      phase: 'write',
      requires: ['computeStyles'],
      fn: function fn(_ref4) {
        var state = _ref4.state;
        var styles = {};
        var attributes = {};
        Object.keys(state.elements).forEach(function (element) {
          styles[element] = state.styles[element];
          attributes[element] = state.attributes[element];
        });
        setState({
          state: state,
          styles: styles,
          attributes: attributes,
          update: update,
          forceUpdate: forceUpdate,
          placement: state.placement
        });
      }
    };
  }, [update, forceUpdate, setState]);
  react_1.useEffect(function () {
    if (!popperInstanceRef.current || !enabled) return;
    popperInstanceRef.current.setOptions({
      placement: placement,
      strategy: strategy,
      modifiers: [].concat(modifiers, [updateModifier, disabledApplyStylesModifier])
    });
  }, [strategy, placement, updateModifier, enabled]);
  react_1.useEffect(function () {
    if (!enabled || referenceElement == null || popperElement == null) {
      return undefined;
    }
    popperInstanceRef.current = popper_1.createPopper(referenceElement, popperElement, extends_1d.default({}, config, {
      placement: placement,
      strategy: strategy,
      modifiers: [].concat(modifiers, [ariaDescribedByModifier, updateModifier])
    }));
    return function () {
      if (popperInstanceRef.current != null) {
        popperInstanceRef.current.destroy();
        popperInstanceRef.current = undefined;
        setState(function (s) {
          return extends_1d.default({}, s, {
            attributes: {},
            styles: {
              popper: initialPopperStyles(strategy)
            }
          });
        });
      }
    };
  }, [enabled, referenceElement, popperElement]);
  return popperState;
}
exports.default = usePopper;

},

// node_modules/react-overlays/esm/useRootClose.js @230
230: function(__fusereq, exports, module){
exports.__esModule = true;
var contains_1 = __fusereq(178);
var contains_1d = __fuse.dt(contains_1);
var listen_1 = __fusereq(225);
var listen_1d = __fuse.dt(listen_1);
var react_1 = __fusereq(3);
var useEventCallback_1 = __fusereq(127);
var useEventCallback_1d = __fuse.dt(useEventCallback_1);
var warning_1 = __fusereq(152);
var warning_1d = __fuse.dt(warning_1);
var ownerDocument_1 = __fusereq(285);
var ownerDocument_1d = __fuse.dt(ownerDocument_1);
var escapeKeyCode = 27;
var noop = function noop() {};
function isLeftClickEvent(event) {
  return event.button === 0;
}
function isModifiedEvent(event) {
  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
}
var getRefTarget = function getRefTarget(ref) {
  return ref && (('current' in ref) ? ref.current : ref);
};
function useRootClose(ref, onRootClose, _temp) {
  var _ref = _temp === void 0 ? {} : _temp, disabled = _ref.disabled, _ref$clickTrigger = _ref.clickTrigger, clickTrigger = _ref$clickTrigger === void 0 ? 'click' : _ref$clickTrigger;
  var preventMouseRootCloseRef = react_1.useRef(false);
  var onClose = onRootClose || noop;
  var handleMouseCapture = react_1.useCallback(function (e) {
    var currentTarget = getRefTarget(ref);
    warning_1d.default(!!currentTarget, 'RootClose captured a close event but does not have a ref to compare it to. ' + 'useRootClose(), should be passed a ref that resolves to a DOM node');
    preventMouseRootCloseRef.current = !currentTarget || isModifiedEvent(e) || !isLeftClickEvent(e) || !!contains_1d.default(currentTarget, e.target);
  }, [ref]);
  var handleMouse = useEventCallback_1d.default(function (e) {
    if (!preventMouseRootCloseRef.current) {
      onClose(e);
    }
  });
  var handleKeyUp = useEventCallback_1d.default(function (e) {
    if (e.keyCode === escapeKeyCode) {
      onClose(e);
    }
  });
  react_1.useEffect(function () {
    if (disabled || ref == null) return undefined;
    var currentEvent = window.event;
    var doc = ownerDocument_1d.default(getRefTarget(ref));
    var removeMouseCaptureListener = listen_1d.default(doc, clickTrigger, handleMouseCapture, true);
    var removeMouseListener = listen_1d.default(doc, clickTrigger, function (e) {
      if (e === currentEvent) {
        currentEvent = undefined;
        return;
      }
      handleMouse(e);
    });
    var removeKeyupListener = listen_1d.default(doc, 'keyup', function (e) {
      if (e === currentEvent) {
        currentEvent = undefined;
        return;
      }
      handleKeyUp(e);
    });
    var mobileSafariHackListeners = [];
    if (('ontouchstart' in doc.documentElement)) {
      mobileSafariHackListeners = [].slice.call(doc.body.children).map(function (el) {
        return listen_1d.default(el, 'mousemove', noop);
      });
    }
    return function () {
      removeMouseCaptureListener();
      removeMouseListener();
      removeKeyupListener();
      mobileSafariHackListeners.forEach(function (remove) {
        return remove();
      });
    };
  }, [ref, disabled, clickTrigger, handleMouseCapture, handleMouse, handleKeyUp]);
}
exports.default = useRootClose;

},

// node_modules/react-overlays/esm/useWaitForDOMRef.js @231
231: function(__fusereq, exports, module){
exports.__esModule = true;
var ownerDocument_1 = __fusereq(159);
var ownerDocument_1d = __fuse.dt(ownerDocument_1);
var react_1 = __fusereq(3);
exports.resolveContainerRef = function resolveContainerRef(ref) {
  var _ref;
  if (typeof document === 'undefined') return null;
  if (ref == null) return ownerDocument_1d.default().body;
  if (typeof ref === 'function') ref = ref();
  if (ref && ('current' in ref)) ref = ref.current;
  if ((_ref = ref) != null && _ref.nodeType) return ref || null;
  return null;
};
function useWaitForDOMRef(ref, onResolved) {
  var _useState = react_1.useState(function () {
    return exports.resolveContainerRef(ref);
  }), resolvedRef = _useState[0], setRef = _useState[1];
  if (!resolvedRef) {
    var earlyRef = exports.resolveContainerRef(ref);
    if (earlyRef) setRef(earlyRef);
  }
  react_1.useEffect(function () {
    if (onResolved && resolvedRef) {
      onResolved(resolvedRef);
    }
  }, [onResolved, resolvedRef]);
  react_1.useEffect(function () {
    var nextRef = exports.resolveContainerRef(ref);
    if (nextRef !== resolvedRef) {
      setRef(nextRef);
    }
  }, [ref, resolvedRef]);
  return resolvedRef;
}
exports.default = useWaitForDOMRef;

},

// node_modules/react-overlays/esm/mergeOptionsWithPopperConfig.js @232
232: function(__fusereq, exports, module){
exports.__esModule = true;
var extends_1 = __fusereq(122);
var extends_1d = __fuse.dt(extends_1);
function toModifierMap(modifiers) {
  var result = {};
  if (!Array.isArray(modifiers)) {
    return modifiers || result;
  }
  modifiers == null ? void 0 : modifiers.forEach(function (m) {
    result[m.name] = m;
  });
  return result;
}
exports.toModifierMap = toModifierMap;
function toModifierArray(map) {
  if (map === void 0) {
    map = {};
  }
  if (Array.isArray(map)) return map;
  return Object.keys(map).map(function (k) {
    map[k].name = k;
    return map[k];
  });
}
exports.toModifierArray = toModifierArray;
function mergeOptionsWithPopperConfig(_ref) {
  var _modifiers$preventOve, _modifiers$preventOve2, _modifiers$offset, _modifiers$arrow;
  var enabled = _ref.enabled, enableEvents = _ref.enableEvents, placement = _ref.placement, flip = _ref.flip, offset = _ref.offset, fixed = _ref.fixed, containerPadding = _ref.containerPadding, arrowElement = _ref.arrowElement, _ref$popperConfig = _ref.popperConfig, popperConfig = _ref$popperConfig === void 0 ? {} : _ref$popperConfig;
  var modifiers = toModifierMap(popperConfig.modifiers);
  return extends_1d.default({}, popperConfig, {
    placement: placement,
    enabled: enabled,
    strategy: fixed ? 'fixed' : popperConfig.strategy,
    modifiers: toModifierArray(extends_1d.default({}, modifiers, {
      eventListeners: {
        enabled: enableEvents
      },
      preventOverflow: extends_1d.default({}, modifiers.preventOverflow, {
        options: containerPadding ? extends_1d.default({
          padding: containerPadding
        }, (_modifiers$preventOve = modifiers.preventOverflow) == null ? void 0 : _modifiers$preventOve.options) : (_modifiers$preventOve2 = modifiers.preventOverflow) == null ? void 0 : _modifiers$preventOve2.options
      }),
      offset: {
        options: extends_1d.default({
          offset: offset
        }, (_modifiers$offset = modifiers.offset) == null ? void 0 : _modifiers$offset.options)
      },
      arrow: extends_1d.default({}, modifiers.arrow, {
        enabled: !!arrowElement,
        options: extends_1d.default({}, (_modifiers$arrow = modifiers.arrow) == null ? void 0 : _modifiers$arrow.options, {
          element: arrowElement
        })
      }),
      flip: extends_1d.default({
        enabled: !!flip
      }, modifiers.flip)
    }))
  });
}
exports.default = mergeOptionsWithPopperConfig;

},

// node_modules/react-overlays/esm/isOverflowing.js @282
282: function(__fusereq, exports, module){
exports.__esModule = true;
var isWindow_1 = __fusereq(327);
var isWindow_1d = __fuse.dt(isWindow_1);
var ownerDocument_1 = __fusereq(159);
var ownerDocument_1d = __fuse.dt(ownerDocument_1);
function isBody(node) {
  return node && node.tagName.toLowerCase() === 'body';
}
function bodyIsOverflowing(node) {
  var doc = isWindow_1d.default(node) ? ownerDocument_1d.default() : ownerDocument_1d.default(node);
  var win = isWindow_1d.default(node) || doc.defaultView;
  return doc.body.clientWidth < win.innerWidth;
}
function isOverflowing(container) {
  var win = isWindow_1d.default(container);
  return win || isBody(container) ? bodyIsOverflowing(container) : container.scrollHeight > container.clientHeight;
}
exports.default = isOverflowing;

},

// node_modules/react-overlays/esm/manageAriaHidden.js @283
283: function(__fusereq, exports, module){
var BLACKLIST = ['template', 'script', 'style'];
var isHidable = function isHidable(_ref) {
  var nodeType = _ref.nodeType, tagName = _ref.tagName;
  return nodeType === 1 && BLACKLIST.indexOf(tagName.toLowerCase()) === -1;
};
var siblings = function siblings(container, exclude, cb) {
  [].forEach.call(container.children, function (node) {
    if (exclude.indexOf(node) === -1 && isHidable(node)) {
      cb(node);
    }
  });
};
function ariaHidden(hide, node) {
  if (!node) return;
  if (hide) {
    node.setAttribute('aria-hidden', 'true');
  } else {
    node.removeAttribute('aria-hidden');
  }
}
exports.ariaHidden = ariaHidden;
function hideSiblings(container, _ref2) {
  var dialog = _ref2.dialog, backdrop = _ref2.backdrop;
  siblings(container, [dialog, backdrop], function (node) {
    return ariaHidden(true, node);
  });
}
exports.hideSiblings = hideSiblings;
function showSiblings(container, _ref3) {
  var dialog = _ref3.dialog, backdrop = _ref3.backdrop;
  siblings(container, [dialog, backdrop], function (node) {
    return ariaHidden(false, node);
  });
}
exports.showSiblings = showSiblings;

},

// node_modules/react-overlays/esm/ownerDocument.js @285
285: function(__fusereq, exports, module){
exports.__esModule = true;
var ownerDocument_1 = __fusereq(159);
var ownerDocument_1d = __fuse.dt(ownerDocument_1);
var safeFindDOMNode_1 = __fusereq(175);
var safeFindDOMNode_1d = __fuse.dt(safeFindDOMNode_1);
exports.default = function (componentOrElement) {
  return ownerDocument_1d.default(safeFindDOMNode_1d.default(componentOrElement));
};

},

// node_modules/react-bootstrap/esm/index.js @14
14: function(__fusereq, exports, module){
exports.__esModule = true;
var Accordion_1 = __fusereq(25);
var Accordion_1d = __fuse.dt(Accordion_1);
exports.Accordion = Accordion_1d.default;
var AccordionContext_1 = __fusereq(26);
var AccordionContext_1d = __fuse.dt(AccordionContext_1);
exports.AccordionContext = AccordionContext_1d.default;
var AccordionCollapse_1 = __fusereq(27);
var AccordionCollapse_1d = __fuse.dt(AccordionCollapse_1);
exports.AccordionCollapse = AccordionCollapse_1d.default;
var AccordionToggle_1 = __fusereq(28);
var AccordionToggle_1d = __fuse.dt(AccordionToggle_1);
exports.AccordionToggle = AccordionToggle_1d.default;
exports.useAccordionToggle = AccordionToggle_1.useAccordionToggle;
var Alert_1 = __fusereq(29);
var Alert_1d = __fuse.dt(Alert_1);
exports.Alert = Alert_1d.default;
var Badge_1 = __fusereq(30);
var Badge_1d = __fuse.dt(Badge_1);
exports.Badge = Badge_1d.default;
var Breadcrumb_1 = __fusereq(31);
var Breadcrumb_1d = __fuse.dt(Breadcrumb_1);
exports.Breadcrumb = Breadcrumb_1d.default;
var BreadcrumbItem_1 = __fusereq(32);
var BreadcrumbItem_1d = __fuse.dt(BreadcrumbItem_1);
exports.BreadcrumbItem = BreadcrumbItem_1d.default;
var Button_1 = __fusereq(33);
var Button_1d = __fuse.dt(Button_1);
exports.Button = Button_1d.default;
var ButtonGroup_1 = __fusereq(34);
var ButtonGroup_1d = __fuse.dt(ButtonGroup_1);
exports.ButtonGroup = ButtonGroup_1d.default;
var ButtonToolbar_1 = __fusereq(35);
var ButtonToolbar_1d = __fuse.dt(ButtonToolbar_1);
exports.ButtonToolbar = ButtonToolbar_1d.default;
var Card_1 = __fusereq(36);
var Card_1d = __fuse.dt(Card_1);
exports.Card = Card_1d.default;
var CardColumns_1 = __fusereq(37);
var CardColumns_1d = __fuse.dt(CardColumns_1);
exports.CardColumns = CardColumns_1d.default;
var CardDeck_1 = __fusereq(38);
var CardDeck_1d = __fuse.dt(CardDeck_1);
exports.CardDeck = CardDeck_1d.default;
var CardImg_1 = __fusereq(39);
var CardImg_1d = __fuse.dt(CardImg_1);
exports.CardImg = CardImg_1d.default;
var CardGroup_1 = __fusereq(40);
var CardGroup_1d = __fuse.dt(CardGroup_1);
exports.CardGroup = CardGroup_1d.default;
var Carousel_1 = __fusereq(41);
var Carousel_1d = __fuse.dt(Carousel_1);
exports.Carousel = Carousel_1d.default;
var CarouselItem_1 = __fusereq(42);
var CarouselItem_1d = __fuse.dt(CarouselItem_1);
exports.CarouselItem = CarouselItem_1d.default;
var CloseButton_1 = __fusereq(43);
var CloseButton_1d = __fuse.dt(CloseButton_1);
exports.CloseButton = CloseButton_1d.default;
var Col_1 = __fusereq(44);
var Col_1d = __fuse.dt(Col_1);
exports.Col = Col_1d.default;
var Collapse_1 = __fusereq(45);
var Collapse_1d = __fuse.dt(Collapse_1);
exports.Collapse = Collapse_1d.default;
var Dropdown_1 = __fusereq(46);
var Dropdown_1d = __fuse.dt(Dropdown_1);
exports.Dropdown = Dropdown_1d.default;
var DropdownButton_1 = __fusereq(47);
var DropdownButton_1d = __fuse.dt(DropdownButton_1);
exports.DropdownButton = DropdownButton_1d.default;
var Fade_1 = __fusereq(48);
var Fade_1d = __fuse.dt(Fade_1);
exports.Fade = Fade_1d.default;
var Form_1 = __fusereq(49);
var Form_1d = __fuse.dt(Form_1);
exports.Form = Form_1d.default;
var FormControl_1 = __fusereq(50);
var FormControl_1d = __fuse.dt(FormControl_1);
exports.FormControl = FormControl_1d.default;
var FormCheck_1 = __fusereq(51);
var FormCheck_1d = __fuse.dt(FormCheck_1);
exports.FormCheck = FormCheck_1d.default;
var FormFile_1 = __fusereq(52);
var FormFile_1d = __fuse.dt(FormFile_1);
exports.FormFile = FormFile_1d.default;
var FormGroup_1 = __fusereq(53);
var FormGroup_1d = __fuse.dt(FormGroup_1);
exports.FormGroup = FormGroup_1d.default;
var FormLabel_1 = __fusereq(54);
var FormLabel_1d = __fuse.dt(FormLabel_1);
exports.FormLabel = FormLabel_1d.default;
var FormText_1 = __fusereq(55);
var FormText_1d = __fuse.dt(FormText_1);
exports.FormText = FormText_1d.default;
var Container_1 = __fusereq(56);
var Container_1d = __fuse.dt(Container_1);
exports.Container = Container_1d.default;
var Image_1 = __fusereq(57);
var Image_1d = __fuse.dt(Image_1);
exports.Image = Image_1d.default;
var Figure_1 = __fusereq(58);
var Figure_1d = __fuse.dt(Figure_1);
exports.Figure = Figure_1d.default;
var InputGroup_1 = __fusereq(59);
var InputGroup_1d = __fuse.dt(InputGroup_1);
exports.InputGroup = InputGroup_1d.default;
var Jumbotron_1 = __fusereq(60);
var Jumbotron_1d = __fuse.dt(Jumbotron_1);
exports.Jumbotron = Jumbotron_1d.default;
var ListGroup_1 = __fusereq(61);
var ListGroup_1d = __fuse.dt(ListGroup_1);
exports.ListGroup = ListGroup_1d.default;
var ListGroupItem_1 = __fusereq(62);
var ListGroupItem_1d = __fuse.dt(ListGroupItem_1);
exports.ListGroupItem = ListGroupItem_1d.default;
var Media_1 = __fusereq(63);
var Media_1d = __fuse.dt(Media_1);
exports.Media = Media_1d.default;
var Modal_1 = __fusereq(64);
var Modal_1d = __fuse.dt(Modal_1);
exports.Modal = Modal_1d.default;
var ModalBody_1 = __fusereq(65);
var ModalBody_1d = __fuse.dt(ModalBody_1);
exports.ModalBody = ModalBody_1d.default;
var ModalDialog_1 = __fusereq(66);
var ModalDialog_1d = __fuse.dt(ModalDialog_1);
exports.ModalDialog = ModalDialog_1d.default;
var ModalFooter_1 = __fusereq(67);
var ModalFooter_1d = __fuse.dt(ModalFooter_1);
exports.ModalFooter = ModalFooter_1d.default;
var ModalTitle_1 = __fusereq(68);
var ModalTitle_1d = __fuse.dt(ModalTitle_1);
exports.ModalTitle = ModalTitle_1d.default;
var Nav_1 = __fusereq(69);
var Nav_1d = __fuse.dt(Nav_1);
exports.Nav = Nav_1d.default;
var Navbar_1 = __fusereq(70);
var Navbar_1d = __fuse.dt(Navbar_1);
exports.Navbar = Navbar_1d.default;
var NavbarBrand_1 = __fusereq(71);
var NavbarBrand_1d = __fuse.dt(NavbarBrand_1);
exports.NavbarBrand = NavbarBrand_1d.default;
var NavDropdown_1 = __fusereq(72);
var NavDropdown_1d = __fuse.dt(NavDropdown_1);
exports.NavDropdown = NavDropdown_1d.default;
var NavItem_1 = __fusereq(73);
var NavItem_1d = __fuse.dt(NavItem_1);
exports.NavItem = NavItem_1d.default;
var NavLink_1 = __fusereq(74);
var NavLink_1d = __fuse.dt(NavLink_1);
exports.NavLink = NavLink_1d.default;
var Overlay_1 = __fusereq(75);
var Overlay_1d = __fuse.dt(Overlay_1);
exports.Overlay = Overlay_1d.default;
var OverlayTrigger_1 = __fusereq(76);
var OverlayTrigger_1d = __fuse.dt(OverlayTrigger_1);
exports.OverlayTrigger = OverlayTrigger_1d.default;
var PageItem_1 = __fusereq(77);
var PageItem_1d = __fuse.dt(PageItem_1);
exports.PageItem = PageItem_1d.default;
var Pagination_1 = __fusereq(78);
var Pagination_1d = __fuse.dt(Pagination_1);
exports.Pagination = Pagination_1d.default;
var Popover_1 = __fusereq(79);
var Popover_1d = __fuse.dt(Popover_1);
exports.Popover = Popover_1d.default;
var PopoverTitle_1 = __fusereq(80);
var PopoverTitle_1d = __fuse.dt(PopoverTitle_1);
exports.PopoverTitle = PopoverTitle_1d.default;
var PopoverContent_1 = __fusereq(81);
var PopoverContent_1d = __fuse.dt(PopoverContent_1);
exports.PopoverContent = PopoverContent_1d.default;
var ProgressBar_1 = __fusereq(82);
var ProgressBar_1d = __fuse.dt(ProgressBar_1);
exports.ProgressBar = ProgressBar_1d.default;
var ResponsiveEmbed_1 = __fusereq(83);
var ResponsiveEmbed_1d = __fuse.dt(ResponsiveEmbed_1);
exports.ResponsiveEmbed = ResponsiveEmbed_1d.default;
var Row_1 = __fusereq(84);
var Row_1d = __fuse.dt(Row_1);
exports.Row = Row_1d.default;
var SafeAnchor_1 = __fusereq(85);
var SafeAnchor_1d = __fuse.dt(SafeAnchor_1);
exports.SafeAnchor = SafeAnchor_1d.default;
var Spinner_1 = __fusereq(86);
var Spinner_1d = __fuse.dt(Spinner_1);
exports.Spinner = Spinner_1d.default;
var SplitButton_1 = __fusereq(87);
var SplitButton_1d = __fuse.dt(SplitButton_1);
exports.SplitButton = SplitButton_1d.default;
var Tab_1 = __fusereq(88);
var Tab_1d = __fuse.dt(Tab_1);
exports.Tab = Tab_1d.default;
var TabContainer_1 = __fusereq(89);
var TabContainer_1d = __fuse.dt(TabContainer_1);
exports.TabContainer = TabContainer_1d.default;
var TabContent_1 = __fusereq(90);
var TabContent_1d = __fuse.dt(TabContent_1);
exports.TabContent = TabContent_1d.default;
var Table_1 = __fusereq(91);
var Table_1d = __fuse.dt(Table_1);
exports.Table = Table_1d.default;
var TabPane_1 = __fusereq(92);
var TabPane_1d = __fuse.dt(TabPane_1);
exports.TabPane = TabPane_1d.default;
var Tabs_1 = __fusereq(93);
var Tabs_1d = __fuse.dt(Tabs_1);
exports.Tabs = Tabs_1d.default;
var ThemeProvider_1 = __fusereq(94);
var ThemeProvider_1d = __fuse.dt(ThemeProvider_1);
exports.ThemeProvider = ThemeProvider_1d.default;
var Toast_1 = __fusereq(95);
var Toast_1d = __fuse.dt(Toast_1);
exports.Toast = Toast_1d.default;
var ToastBody_1 = __fusereq(96);
var ToastBody_1d = __fuse.dt(ToastBody_1);
exports.ToastBody = ToastBody_1d.default;
var ToastHeader_1 = __fusereq(97);
var ToastHeader_1d = __fuse.dt(ToastHeader_1);
exports.ToastHeader = ToastHeader_1d.default;
var ToggleButton_1 = __fusereq(98);
var ToggleButton_1d = __fuse.dt(ToggleButton_1);
exports.ToggleButton = ToggleButton_1d.default;
var ToggleButtonGroup_1 = __fusereq(99);
var ToggleButtonGroup_1d = __fuse.dt(ToggleButtonGroup_1);
exports.ToggleButtonGroup = ToggleButtonGroup_1d.default;
var Tooltip_1 = __fusereq(100);
var Tooltip_1d = __fuse.dt(Tooltip_1);
exports.Tooltip = Tooltip_1d.default;

},

// node_modules/react-bootstrap/esm/Accordion.js @25
25: function(__fusereq, exports, module){
exports.__esModule = true;
var extends_1 = __fusereq(122);
var extends_1d = __fuse.dt(extends_1);
var objectWithoutPropertiesLoose_1 = __fusereq(123);
var objectWithoutPropertiesLoose_1d = __fuse.dt(objectWithoutPropertiesLoose_1);
var classnames_1 = __fusereq(125);
var classnames_1d = __fuse.dt(classnames_1);
var react_1 = __fusereq(3);
var react_1d = __fuse.dt(react_1);
var uncontrollable_1 = __fusereq(126);
var ThemeProvider_1 = __fusereq(94);
var AccordionToggle_1 = __fusereq(28);
var AccordionToggle_1d = __fuse.dt(AccordionToggle_1);
var SelectableContext_1 = __fusereq(124);
var SelectableContext_1d = __fuse.dt(SelectableContext_1);
var AccordionCollapse_1 = __fusereq(27);
var AccordionCollapse_1d = __fuse.dt(AccordionCollapse_1);
var AccordionContext_1 = __fusereq(26);
var AccordionContext_1d = __fuse.dt(AccordionContext_1);
var Accordion = react_1d.default.forwardRef(function (props, ref) {
  var _useUncontrolled = uncontrollable_1.useUncontrolled(props, {
    activeKey: 'onSelect'
  }), _useUncontrolled$as = _useUncontrolled.as, Component = _useUncontrolled$as === void 0 ? 'div' : _useUncontrolled$as, activeKey = _useUncontrolled.activeKey, bsPrefix = _useUncontrolled.bsPrefix, children = _useUncontrolled.children, className = _useUncontrolled.className, onSelect = _useUncontrolled.onSelect, controlledProps = objectWithoutPropertiesLoose_1d.default(_useUncontrolled, ["as", "activeKey", "bsPrefix", "children", "className", "onSelect"]);
  var finalClassName = classnames_1d.default(className, ThemeProvider_1.useBootstrapPrefix(bsPrefix, 'accordion'));
  return react_1d.default.createElement(AccordionContext_1d.default.Provider, {
    value: activeKey || null
  }, react_1d.default.createElement(SelectableContext_1d.default.Provider, {
    value: onSelect || null
  }, react_1d.default.createElement(Component, extends_1d.default({
    ref: ref
  }, controlledProps, {
    className: finalClassName
  }), children)));
});
Accordion.displayName = 'Accordion';
Accordion.Toggle = AccordionToggle_1d.default;
Accordion.Collapse = AccordionCollapse_1d.default;
exports.default = Accordion;

},

// node_modules/react-bootstrap/esm/AccordionContext.js @26
26: function(__fusereq, exports, module){
exports.__esModule = true;
var react_1 = __fusereq(3);
var react_1d = __fuse.dt(react_1);
var context = react_1d.default.createContext(null);
context.displayName = 'AccordionContext';
exports.default = context;

},

// node_modules/react-bootstrap/esm/AccordionCollapse.js @27
27: function(__fusereq, exports, module){
exports.__esModule = true;
var extends_1 = __fusereq(122);
var extends_1d = __fuse.dt(extends_1);
var objectWithoutPropertiesLoose_1 = __fusereq(123);
var objectWithoutPropertiesLoose_1d = __fuse.dt(objectWithoutPropertiesLoose_1);
var react_1 = __fusereq(3);
var react_1d = __fuse.dt(react_1);
var Collapse_1 = __fusereq(45);
var Collapse_1d = __fuse.dt(Collapse_1);
var AccordionContext_1 = __fusereq(26);
var AccordionContext_1d = __fuse.dt(AccordionContext_1);
var SelectableContext_1 = __fusereq(124);
var SelectableContext_1d = __fuse.dt(SelectableContext_1);
var AccordionCollapse = react_1d.default.forwardRef(function (_ref, ref) {
  var children = _ref.children, eventKey = _ref.eventKey, props = objectWithoutPropertiesLoose_1d.default(_ref, ["children", "eventKey"]);
  var contextEventKey = react_1.useContext(AccordionContext_1d.default);
  return react_1d.default.createElement(SelectableContext_1d.default.Provider, {
    value: null
  }, react_1d.default.createElement(Collapse_1d.default, extends_1d.default({
    ref: ref,
    in: contextEventKey === eventKey
  }, props), react_1d.default.createElement("div", null, react_1d.default.Children.only(children))));
});
AccordionCollapse.displayName = 'AccordionCollapse';
exports.default = AccordionCollapse;

},

// node_modules/react-bootstrap/esm/AccordionToggle.js @28
28: function(__fusereq, exports, module){
exports.__esModule = true;
var extends_1 = __fusereq(122);
var extends_1d = __fuse.dt(extends_1);
var objectWithoutPropertiesLoose_1 = __fusereq(123);
var objectWithoutPropertiesLoose_1d = __fuse.dt(objectWithoutPropertiesLoose_1);
var react_1 = __fusereq(3);
var react_1d = __fuse.dt(react_1);
var SelectableContext_1 = __fusereq(124);
var SelectableContext_1d = __fuse.dt(SelectableContext_1);
var AccordionContext_1 = __fusereq(26);
var AccordionContext_1d = __fuse.dt(AccordionContext_1);
function useAccordionToggle(eventKey, onClick) {
  var contextEventKey = react_1.useContext(AccordionContext_1d.default);
  var onSelect = react_1.useContext(SelectableContext_1d.default);
  return function (e) {
    var eventKeyPassed = eventKey === contextEventKey ? null : eventKey;
    if (onSelect) onSelect(eventKeyPassed, e);
    if (onClick) onClick(e);
  };
}
exports.useAccordionToggle = useAccordionToggle;
var AccordionToggle = react_1d.default.forwardRef(function (_ref, ref) {
  var _ref$as = _ref.as, Component = _ref$as === void 0 ? 'button' : _ref$as, children = _ref.children, eventKey = _ref.eventKey, onClick = _ref.onClick, props = objectWithoutPropertiesLoose_1d.default(_ref, ["as", "children", "eventKey", "onClick"]);
  var accordionOnClick = useAccordionToggle(eventKey, onClick);
  if (Component === 'button') {
    props.type = 'button';
  }
  return react_1d.default.createElement(Component, extends_1d.default({
    ref: ref,
    onClick: accordionOnClick
  }, props), children);
});
exports.default = AccordionToggle;

},

// node_modules/react-bootstrap/esm/Alert.js @29
29: function(__fusereq, exports, module){
exports.__esModule = true;
var extends_1 = __fusereq(122);
var extends_1d = __fuse.dt(extends_1);
var objectWithoutPropertiesLoose_1 = __fusereq(123);
var objectWithoutPropertiesLoose_1d = __fuse.dt(objectWithoutPropertiesLoose_1);
var classnames_1 = __fusereq(125);
var classnames_1d = __fuse.dt(classnames_1);
var react_1 = __fusereq(3);
var react_1d = __fuse.dt(react_1);
var uncontrollable_1 = __fusereq(126);
var useEventCallback_1 = __fusereq(127);
var useEventCallback_1d = __fuse.dt(useEventCallback_1);
var ThemeProvider_1 = __fusereq(94);
var Fade_1 = __fusereq(48);
var Fade_1d = __fuse.dt(Fade_1);
var CloseButton_1 = __fusereq(43);
var CloseButton_1d = __fuse.dt(CloseButton_1);
var divWithClassName_1 = __fusereq(128);
var divWithClassName_1d = __fuse.dt(divWithClassName_1);
var createWithBsPrefix_1 = __fusereq(129);
var createWithBsPrefix_1d = __fuse.dt(createWithBsPrefix_1);
var SafeAnchor_1 = __fusereq(85);
var SafeAnchor_1d = __fuse.dt(SafeAnchor_1);
var DivStyledAsH4 = divWithClassName_1d.default('h4');
DivStyledAsH4.displayName = 'DivStyledAsH4';
var AlertHeading = createWithBsPrefix_1d.default('alert-heading', {
  Component: DivStyledAsH4
});
var AlertLink = createWithBsPrefix_1d.default('alert-link', {
  Component: SafeAnchor_1d.default
});
var defaultProps = {
  show: true,
  transition: Fade_1d.default,
  closeLabel: 'Close alert'
};
var Alert = react_1d.default.forwardRef(function (uncontrolledProps, ref) {
  var _useUncontrolled = uncontrollable_1.useUncontrolled(uncontrolledProps, {
    show: 'onClose'
  }), bsPrefix = _useUncontrolled.bsPrefix, show = _useUncontrolled.show, closeLabel = _useUncontrolled.closeLabel, className = _useUncontrolled.className, children = _useUncontrolled.children, variant = _useUncontrolled.variant, onClose = _useUncontrolled.onClose, dismissible = _useUncontrolled.dismissible, transition = _useUncontrolled.transition, props = objectWithoutPropertiesLoose_1d.default(_useUncontrolled, ["bsPrefix", "show", "closeLabel", "className", "children", "variant", "onClose", "dismissible", "transition"]);
  var prefix = ThemeProvider_1.useBootstrapPrefix(bsPrefix, 'alert');
  var handleClose = useEventCallback_1d.default(function (e) {
    if (onClose) {
      onClose(false, e);
    }
  });
  var Transition = transition === true ? Fade_1d.default : transition;
  var alert = react_1d.default.createElement("div", extends_1d.default({
    role: "alert"
  }, !Transition ? props : undefined, {
    ref: ref,
    className: classnames_1d.default(className, prefix, variant && prefix + "-" + variant, dismissible && prefix + "-dismissible")
  }), dismissible && react_1d.default.createElement(CloseButton_1d.default, {
    onClick: handleClose,
    label: closeLabel
  }), children);
  if (!Transition) return show ? alert : null;
  return react_1d.default.createElement(Transition, extends_1d.default({
    unmountOnExit: true
  }, props, {
    ref: undefined,
    in: show
  }), alert);
});
Alert.displayName = 'Alert';
Alert.defaultProps = defaultProps;
Alert.Link = AlertLink;
Alert.Heading = AlertHeading;
exports.default = Alert;

},

// node_modules/react-bootstrap/esm/Badge.js @30
30: function(__fusereq, exports, module){
exports.__esModule = true;
var extends_1 = __fusereq(122);
var extends_1d = __fuse.dt(extends_1);
var objectWithoutPropertiesLoose_1 = __fusereq(123);
var objectWithoutPropertiesLoose_1d = __fuse.dt(objectWithoutPropertiesLoose_1);
var classnames_1 = __fusereq(125);
var classnames_1d = __fuse.dt(classnames_1);
var react_1 = __fusereq(3);
var react_1d = __fuse.dt(react_1);
var ThemeProvider_1 = __fusereq(94);
var defaultProps = {
  pill: false
};
var Badge = react_1d.default.forwardRef(function (_ref, ref) {
  var bsPrefix = _ref.bsPrefix, variant = _ref.variant, pill = _ref.pill, className = _ref.className, _ref$as = _ref.as, Component = _ref$as === void 0 ? 'span' : _ref$as, props = objectWithoutPropertiesLoose_1d.default(_ref, ["bsPrefix", "variant", "pill", "className", "as"]);
  var prefix = ThemeProvider_1.useBootstrapPrefix(bsPrefix, 'badge');
  return react_1d.default.createElement(Component, extends_1d.default({
    ref: ref
  }, props, {
    className: classnames_1d.default(className, prefix, pill && prefix + "-pill", variant && prefix + "-" + variant)
  }));
});
Badge.displayName = 'Badge';
Badge.defaultProps = defaultProps;
exports.default = Badge;

},

// node_modules/react-bootstrap/esm/Breadcrumb.js @31
31: function(__fusereq, exports, module){
exports.__esModule = true;
var extends_1 = __fusereq(122);
var extends_1d = __fuse.dt(extends_1);
var objectWithoutPropertiesLoose_1 = __fusereq(123);
var objectWithoutPropertiesLoose_1d = __fuse.dt(objectWithoutPropertiesLoose_1);
var classnames_1 = __fusereq(125);
var classnames_1d = __fuse.dt(classnames_1);
var react_1 = __fusereq(3);
var react_1d = __fuse.dt(react_1);
var ThemeProvider_1 = __fusereq(94);
var BreadcrumbItem_1 = __fusereq(32);
var BreadcrumbItem_1d = __fuse.dt(BreadcrumbItem_1);
var defaultProps = {
  label: 'breadcrumb',
  listProps: {}
};
var Breadcrumb = react_1d.default.forwardRef(function (_ref, ref) {
  var bsPrefix = _ref.bsPrefix, className = _ref.className, listProps = _ref.listProps, children = _ref.children, label = _ref.label, _ref$as = _ref.as, Component = _ref$as === void 0 ? 'nav' : _ref$as, props = objectWithoutPropertiesLoose_1d.default(_ref, ["bsPrefix", "className", "listProps", "children", "label", "as"]);
  var prefix = ThemeProvider_1.useBootstrapPrefix(bsPrefix, 'breadcrumb');
  return react_1d.default.createElement(Component, extends_1d.default({
    "aria-label": label,
    className: className,
    ref: ref
  }, props), react_1d.default.createElement("ol", extends_1d.default({}, listProps, {
    className: classnames_1d.default(prefix, listProps == null ? void 0 : listProps.className)
  }), children));
});
Breadcrumb.displayName = 'Breadcrumb';
Breadcrumb.defaultProps = defaultProps;
Breadcrumb.Item = BreadcrumbItem_1d.default;
exports.default = Breadcrumb;

},

// node_modules/react-bootstrap/esm/BreadcrumbItem.js @32
32: function(__fusereq, exports, module){
exports.__esModule = true;
var extends_1 = __fusereq(122);
var extends_1d = __fuse.dt(extends_1);
var objectWithoutPropertiesLoose_1 = __fusereq(123);
var objectWithoutPropertiesLoose_1d = __fuse.dt(objectWithoutPropertiesLoose_1);
var classnames_1 = __fusereq(125);
var classnames_1d = __fuse.dt(classnames_1);
var react_1 = __fusereq(3);
var react_1d = __fuse.dt(react_1);
var SafeAnchor_1 = __fusereq(85);
var SafeAnchor_1d = __fuse.dt(SafeAnchor_1);
var ThemeProvider_1 = __fusereq(94);
var defaultProps = {
  active: false,
  linkProps: {}
};
var BreadcrumbItem = react_1d.default.forwardRef(function (_ref, ref) {
  var bsPrefix = _ref.bsPrefix, active = _ref.active, children = _ref.children, className = _ref.className, _ref$as = _ref.as, Component = _ref$as === void 0 ? 'li' : _ref$as, _ref$linkAs = _ref.linkAs, LinkComponent = _ref$linkAs === void 0 ? SafeAnchor_1d.default : _ref$linkAs, linkProps = _ref.linkProps, href = _ref.href, title = _ref.title, target = _ref.target, props = objectWithoutPropertiesLoose_1d.default(_ref, ["bsPrefix", "active", "children", "className", "as", "linkAs", "linkProps", "href", "title", "target"]);
  var prefix = ThemeProvider_1.useBootstrapPrefix(bsPrefix, 'breadcrumb-item');
  return react_1d.default.createElement(Component, extends_1d.default({
    ref: ref
  }, props, {
    className: classnames_1d.default(prefix, className, {
      active: active
    }),
    "aria-current": active ? 'page' : undefined
  }), active ? children : react_1d.default.createElement(LinkComponent, extends_1d.default({}, linkProps, {
    href: href,
    title: title,
    target: target
  }), children));
});
BreadcrumbItem.displayName = 'BreadcrumbItem';
BreadcrumbItem.defaultProps = defaultProps;
exports.default = BreadcrumbItem;

},

// node_modules/react-bootstrap/esm/Button.js @33
33: function(__fusereq, exports, module){
exports.__esModule = true;
var extends_1 = __fusereq(122);
var extends_1d = __fuse.dt(extends_1);
var objectWithoutPropertiesLoose_1 = __fusereq(123);
var objectWithoutPropertiesLoose_1d = __fuse.dt(objectWithoutPropertiesLoose_1);
var classnames_1 = __fusereq(125);
var classnames_1d = __fuse.dt(classnames_1);
var react_1 = __fusereq(3);
var react_1d = __fuse.dt(react_1);
var ThemeProvider_1 = __fusereq(94);
var SafeAnchor_1 = __fusereq(85);
var SafeAnchor_1d = __fuse.dt(SafeAnchor_1);
var defaultProps = {
  variant: 'primary',
  active: false,
  disabled: false
};
var Button = react_1d.default.forwardRef(function (_ref, ref) {
  var bsPrefix = _ref.bsPrefix, variant = _ref.variant, size = _ref.size, active = _ref.active, className = _ref.className, block = _ref.block, type = _ref.type, as = _ref.as, props = objectWithoutPropertiesLoose_1d.default(_ref, ["bsPrefix", "variant", "size", "active", "className", "block", "type", "as"]);
  var prefix = ThemeProvider_1.useBootstrapPrefix(bsPrefix, 'btn');
  var classes = classnames_1d.default(className, prefix, active && 'active', variant && prefix + "-" + variant, block && prefix + "-block", size && prefix + "-" + size);
  if (props.href) {
    return react_1d.default.createElement(SafeAnchor_1d.default, extends_1d.default({}, props, {
      as: as,
      ref: ref,
      className: classnames_1d.default(classes, props.disabled && 'disabled')
    }));
  }
  if (ref) {
    props.ref = ref;
  }
  if (type) {
    props.type = type;
  } else if (!as) {
    props.type = 'button';
  }
  var Component = as || 'button';
  return react_1d.default.createElement(Component, extends_1d.default({}, props, {
    className: classes
  }));
});
Button.displayName = 'Button';
Button.defaultProps = defaultProps;
exports.default = Button;

},

// node_modules/react-bootstrap/esm/ButtonGroup.js @34
34: function(__fusereq, exports, module){
exports.__esModule = true;
var extends_1 = __fusereq(122);
var extends_1d = __fuse.dt(extends_1);
var objectWithoutPropertiesLoose_1 = __fusereq(123);
var objectWithoutPropertiesLoose_1d = __fuse.dt(objectWithoutPropertiesLoose_1);
var classnames_1 = __fusereq(125);
var classnames_1d = __fuse.dt(classnames_1);
var react_1 = __fusereq(3);
var react_1d = __fuse.dt(react_1);
var ThemeProvider_1 = __fusereq(94);
var defaultProps = {
  vertical: false,
  toggle: false,
  role: 'group'
};
var ButtonGroup = react_1d.default.forwardRef(function (_ref, ref) {
  var bsPrefix = _ref.bsPrefix, size = _ref.size, toggle = _ref.toggle, vertical = _ref.vertical, className = _ref.className, _ref$as = _ref.as, Component = _ref$as === void 0 ? 'div' : _ref$as, rest = objectWithoutPropertiesLoose_1d.default(_ref, ["bsPrefix", "size", "toggle", "vertical", "className", "as"]);
  var prefix = ThemeProvider_1.useBootstrapPrefix(bsPrefix, 'btn-group');
  var baseClass = prefix;
  if (vertical) baseClass = prefix + "-vertical";
  return react_1d.default.createElement(Component, extends_1d.default({}, rest, {
    ref: ref,
    className: classnames_1d.default(className, baseClass, size && prefix + "-" + size, toggle && prefix + "-toggle")
  }));
});
ButtonGroup.displayName = 'ButtonGroup';
ButtonGroup.defaultProps = defaultProps;
exports.default = ButtonGroup;

},

// node_modules/react-bootstrap/esm/ButtonToolbar.js @35
35: function(__fusereq, exports, module){
exports.__esModule = true;
var extends_1 = __fusereq(122);
var extends_1d = __fuse.dt(extends_1);
var objectWithoutPropertiesLoose_1 = __fusereq(123);
var objectWithoutPropertiesLoose_1d = __fuse.dt(objectWithoutPropertiesLoose_1);
var classnames_1 = __fusereq(125);
var classnames_1d = __fuse.dt(classnames_1);
var react_1 = __fusereq(3);
var react_1d = __fuse.dt(react_1);
var ThemeProvider_1 = __fusereq(94);
var defaultProps = {
  role: 'toolbar'
};
var ButtonToolbar = react_1d.default.forwardRef(function (_ref, ref) {
  var bsPrefix = _ref.bsPrefix, className = _ref.className, props = objectWithoutPropertiesLoose_1d.default(_ref, ["bsPrefix", "className"]);
  var prefix = ThemeProvider_1.useBootstrapPrefix(bsPrefix, 'btn-toolbar');
  return react_1d.default.createElement("div", extends_1d.default({}, props, {
    ref: ref,
    className: classnames_1d.default(className, prefix)
  }));
});
ButtonToolbar.displayName = 'ButtonToolbar';
ButtonToolbar.defaultProps = defaultProps;
exports.default = ButtonToolbar;

},

// node_modules/react-bootstrap/esm/Card.js @36
36: function(__fusereq, exports, module){
exports.__esModule = true;
var extends_1 = __fusereq(122);
var extends_1d = __fuse.dt(extends_1);
var objectWithoutPropertiesLoose_1 = __fusereq(123);
var objectWithoutPropertiesLoose_1d = __fuse.dt(objectWithoutPropertiesLoose_1);
var classnames_1 = __fusereq(125);
var classnames_1d = __fuse.dt(classnames_1);
var react_1 = __fusereq(3);
var react_1d = __fuse.dt(react_1);
var ThemeProvider_1 = __fusereq(94);
var createWithBsPrefix_1 = __fusereq(129);
var createWithBsPrefix_1d = __fuse.dt(createWithBsPrefix_1);
var divWithClassName_1 = __fusereq(128);
var divWithClassName_1d = __fuse.dt(divWithClassName_1);
var CardContext_1 = __fusereq(130);
var CardContext_1d = __fuse.dt(CardContext_1);
var CardImg_1 = __fusereq(39);
var CardImg_1d = __fuse.dt(CardImg_1);
var DivStyledAsH5 = divWithClassName_1d.default('h5');
var DivStyledAsH6 = divWithClassName_1d.default('h6');
var CardBody = createWithBsPrefix_1d.default('card-body');
var CardTitle = createWithBsPrefix_1d.default('card-title', {
  Component: DivStyledAsH5
});
var CardSubtitle = createWithBsPrefix_1d.default('card-subtitle', {
  Component: DivStyledAsH6
});
var CardLink = createWithBsPrefix_1d.default('card-link', {
  Component: 'a'
});
var CardText = createWithBsPrefix_1d.default('card-text', {
  Component: 'p'
});
var CardHeader = createWithBsPrefix_1d.default('card-header');
var CardFooter = createWithBsPrefix_1d.default('card-footer');
var CardImgOverlay = createWithBsPrefix_1d.default('card-img-overlay');
var defaultProps = {
  body: false
};
var Card = react_1d.default.forwardRef(function (_ref, ref) {
  var bsPrefix = _ref.bsPrefix, className = _ref.className, bg = _ref.bg, text = _ref.text, border = _ref.border, body = _ref.body, children = _ref.children, _ref$as = _ref.as, Component = _ref$as === void 0 ? 'div' : _ref$as, props = objectWithoutPropertiesLoose_1d.default(_ref, ["bsPrefix", "className", "bg", "text", "border", "body", "children", "as"]);
  var prefix = ThemeProvider_1.useBootstrapPrefix(bsPrefix, 'card');
  var cardContext = react_1.useMemo(function () {
    return {
      cardHeaderBsPrefix: prefix + "-header"
    };
  }, [prefix]);
  return react_1d.default.createElement(CardContext_1d.default.Provider, {
    value: cardContext
  }, react_1d.default.createElement(Component, extends_1d.default({
    ref: ref
  }, props, {
    className: classnames_1d.default(className, prefix, bg && "bg-" + bg, text && "text-" + text, border && "border-" + border)
  }), body ? react_1d.default.createElement(CardBody, null, children) : children));
});
Card.displayName = 'Card';
Card.defaultProps = defaultProps;
Card.Img = CardImg_1d.default;
Card.Title = CardTitle;
Card.Subtitle = CardSubtitle;
Card.Body = CardBody;
Card.Link = CardLink;
Card.Text = CardText;
Card.Header = CardHeader;
Card.Footer = CardFooter;
Card.ImgOverlay = CardImgOverlay;
exports.default = Card;

},

// node_modules/react-bootstrap/esm/CardColumns.js @37
37: function(__fusereq, exports, module){
exports.__esModule = true;
var createWithBsPrefix_1 = __fusereq(129);
var createWithBsPrefix_1d = __fuse.dt(createWithBsPrefix_1);
exports.default = createWithBsPrefix_1d.default('card-columns');

},

// node_modules/react-bootstrap/esm/CardDeck.js @38
38: function(__fusereq, exports, module){
exports.__esModule = true;
var createWithBsPrefix_1 = __fusereq(129);
var createWithBsPrefix_1d = __fuse.dt(createWithBsPrefix_1);
exports.default = createWithBsPrefix_1d.default('card-deck');

},

// node_modules/react-bootstrap/esm/CardImg.js @39
39: function(__fusereq, exports, module){
exports.__esModule = true;
var extends_1 = __fusereq(122);
var extends_1d = __fuse.dt(extends_1);
var objectWithoutPropertiesLoose_1 = __fusereq(123);
var objectWithoutPropertiesLoose_1d = __fuse.dt(objectWithoutPropertiesLoose_1);
var classnames_1 = __fusereq(125);
var classnames_1d = __fuse.dt(classnames_1);
var react_1 = __fusereq(3);
var react_1d = __fuse.dt(react_1);
var ThemeProvider_1 = __fusereq(94);
var defaultProps = {
  variant: null
};
var CardImg = react_1d.default.forwardRef(function (_ref, ref) {
  var bsPrefix = _ref.bsPrefix, className = _ref.className, variant = _ref.variant, _ref$as = _ref.as, Component = _ref$as === void 0 ? 'img' : _ref$as, props = objectWithoutPropertiesLoose_1d.default(_ref, ["bsPrefix", "className", "variant", "as"]);
  var prefix = ThemeProvider_1.useBootstrapPrefix(bsPrefix, 'card-img');
  return react_1d.default.createElement(Component, extends_1d.default({
    ref: ref,
    className: classnames_1d.default(variant ? prefix + "-" + variant : prefix, className)
  }, props));
});
CardImg.displayName = 'CardImg';
CardImg.defaultProps = defaultProps;
exports.default = CardImg;

},

// node_modules/react-bootstrap/esm/CardGroup.js @40
40: function(__fusereq, exports, module){
exports.__esModule = true;
var createWithBsPrefix_1 = __fusereq(129);
var createWithBsPrefix_1d = __fuse.dt(createWithBsPrefix_1);
exports.default = createWithBsPrefix_1d.default('card-group');

},

// node_modules/react-bootstrap/esm/Carousel.js @41
41: function(__fusereq, exports, module){
exports.__esModule = true;
var extends_1 = __fusereq(122);
var extends_1d = __fuse.dt(extends_1);
var objectWithoutPropertiesLoose_1 = __fusereq(123);
var objectWithoutPropertiesLoose_1d = __fuse.dt(objectWithoutPropertiesLoose_1);
var useEventCallback_1 = __fusereq(127);
var useEventCallback_1d = __fuse.dt(useEventCallback_1);
var useUpdateEffect_1 = __fusereq(142);
var useUpdateEffect_1d = __fuse.dt(useUpdateEffect_1);
var useCommittedRef_1 = __fusereq(143);
var useCommittedRef_1d = __fuse.dt(useCommittedRef_1);
var useTimeout_1 = __fusereq(144);
var useTimeout_1d = __fuse.dt(useTimeout_1);
var classnames_1 = __fusereq(125);
var classnames_1d = __fuse.dt(classnames_1);
var Transition_1 = __fusereq(134);
var Transition_1d = __fuse.dt(Transition_1);
var prop_types_1 = __fusereq(112);
var prop_types_1d = __fuse.dt(prop_types_1);
var react_1 = __fusereq(3);
var react_1d = __fuse.dt(react_1);
var uncontrollable_1 = __fusereq(126);
var CarouselCaption_1 = __fusereq(145);
var CarouselCaption_1d = __fuse.dt(CarouselCaption_1);
var CarouselItem_1 = __fusereq(42);
var CarouselItem_1d = __fuse.dt(CarouselItem_1);
var ElementChildren_1 = __fusereq(146);
var SafeAnchor_1 = __fusereq(85);
var SafeAnchor_1d = __fuse.dt(SafeAnchor_1);
var ThemeProvider_1 = __fusereq(94);
var transitionEndListener_1 = __fusereq(135);
var transitionEndListener_1d = __fuse.dt(transitionEndListener_1);
var triggerBrowserReflow_1 = __fusereq(137);
var triggerBrowserReflow_1d = __fuse.dt(triggerBrowserReflow_1);
var SWIPE_THRESHOLD = 40;
var propTypes = {
  bsPrefix: prop_types_1d.default.string,
  as: prop_types_1d.default.elementType,
  slide: prop_types_1d.default.bool,
  fade: prop_types_1d.default.bool,
  controls: prop_types_1d.default.bool,
  indicators: prop_types_1d.default.bool,
  activeIndex: prop_types_1d.default.number,
  onSelect: prop_types_1d.default.func,
  onSlide: prop_types_1d.default.func,
  onSlid: prop_types_1d.default.func,
  interval: prop_types_1d.default.number,
  keyboard: prop_types_1d.default.bool,
  pause: prop_types_1d.default.oneOf(['hover', false]),
  wrap: prop_types_1d.default.bool,
  touch: prop_types_1d.default.bool,
  prevIcon: prop_types_1d.default.node,
  prevLabel: prop_types_1d.default.string,
  nextIcon: prop_types_1d.default.node,
  nextLabel: prop_types_1d.default.string
};
var defaultProps = {
  slide: true,
  fade: false,
  controls: true,
  indicators: true,
  defaultActiveIndex: 0,
  interval: 5000,
  keyboard: true,
  pause: 'hover',
  wrap: true,
  touch: true,
  prevIcon: react_1d.default.createElement("span", {
    "aria-hidden": "true",
    className: "carousel-control-prev-icon"
  }),
  prevLabel: 'Previous',
  nextIcon: react_1d.default.createElement("span", {
    "aria-hidden": "true",
    className: "carousel-control-next-icon"
  }),
  nextLabel: 'Next'
};
function isVisible(element) {
  if (!element || !element.style || !element.parentNode || !element.parentNode.style) {
    return false;
  }
  var elementStyle = getComputedStyle(element);
  return elementStyle.display !== 'none' && elementStyle.visibility !== 'hidden' && getComputedStyle(element.parentNode).display !== 'none';
}
function CarouselFunc(uncontrolledProps, ref) {
  var _useUncontrolled = uncontrollable_1.useUncontrolled(uncontrolledProps, {
    activeIndex: 'onSelect'
  }), _useUncontrolled$as = _useUncontrolled.as, Component = _useUncontrolled$as === void 0 ? 'div' : _useUncontrolled$as, bsPrefix = _useUncontrolled.bsPrefix, slide = _useUncontrolled.slide, fade = _useUncontrolled.fade, controls = _useUncontrolled.controls, indicators = _useUncontrolled.indicators, activeIndex = _useUncontrolled.activeIndex, onSelect = _useUncontrolled.onSelect, onSlide = _useUncontrolled.onSlide, onSlid = _useUncontrolled.onSlid, interval = _useUncontrolled.interval, keyboard = _useUncontrolled.keyboard, onKeyDown = _useUncontrolled.onKeyDown, pause = _useUncontrolled.pause, onMouseOver = _useUncontrolled.onMouseOver, onMouseOut = _useUncontrolled.onMouseOut, wrap = _useUncontrolled.wrap, touch = _useUncontrolled.touch, onTouchStart = _useUncontrolled.onTouchStart, onTouchMove = _useUncontrolled.onTouchMove, onTouchEnd = _useUncontrolled.onTouchEnd, prevIcon = _useUncontrolled.prevIcon, prevLabel = _useUncontrolled.prevLabel, nextIcon = _useUncontrolled.nextIcon, nextLabel = _useUncontrolled.nextLabel, className = _useUncontrolled.className, children = _useUncontrolled.children, props = objectWithoutPropertiesLoose_1d.default(_useUncontrolled, ["as", "bsPrefix", "slide", "fade", "controls", "indicators", "activeIndex", "onSelect", "onSlide", "onSlid", "interval", "keyboard", "onKeyDown", "pause", "onMouseOver", "onMouseOut", "wrap", "touch", "onTouchStart", "onTouchMove", "onTouchEnd", "prevIcon", "prevLabel", "nextIcon", "nextLabel", "className", "children"]);
  var prefix = ThemeProvider_1.useBootstrapPrefix(bsPrefix, 'carousel');
  var nextDirectionRef = react_1.useRef(null);
  var _useState = react_1.useState('next'), direction = _useState[0], setDirection = _useState[1];
  var _useState2 = react_1.useState(false), paused = _useState2[0], setPaused = _useState2[1];
  var _useState3 = react_1.useState(false), isSliding = _useState3[0], setIsSliding = _useState3[1];
  var _useState4 = react_1.useState(activeIndex || 0), renderedActiveIndex = _useState4[0], setRenderedActiveIndex = _useState4[1];
  if (!isSliding && activeIndex !== renderedActiveIndex) {
    if (nextDirectionRef.current) {
      setDirection(nextDirectionRef.current);
    } else {
      setDirection((activeIndex || 0) > renderedActiveIndex ? 'next' : 'prev');
    }
    if (slide) {
      setIsSliding(true);
    }
    setRenderedActiveIndex(activeIndex || 0);
  }
  react_1.useEffect(function () {
    if (nextDirectionRef.current) {
      nextDirectionRef.current = null;
    }
  });
  var numChildren = 0;
  var activeChildInterval;
  ElementChildren_1.forEach(children, function (child, index) {
    ++numChildren;
    if (index === activeIndex) {
      activeChildInterval = child.props.interval;
    }
  });
  var activeChildIntervalRef = useCommittedRef_1d.default(activeChildInterval);
  var prev = react_1.useCallback(function (event) {
    if (isSliding) {
      return;
    }
    var nextActiveIndex = renderedActiveIndex - 1;
    if (nextActiveIndex < 0) {
      if (!wrap) {
        return;
      }
      nextActiveIndex = numChildren - 1;
    }
    nextDirectionRef.current = 'prev';
    if (onSelect) {
      onSelect(nextActiveIndex, event);
    }
  }, [isSliding, renderedActiveIndex, onSelect, wrap, numChildren]);
  var next = useEventCallback_1d.default(function (event) {
    if (isSliding) {
      return;
    }
    var nextActiveIndex = renderedActiveIndex + 1;
    if (nextActiveIndex >= numChildren) {
      if (!wrap) {
        return;
      }
      nextActiveIndex = 0;
    }
    nextDirectionRef.current = 'next';
    if (onSelect) {
      onSelect(nextActiveIndex, event);
    }
  });
  var elementRef = react_1.useRef();
  react_1.useImperativeHandle(ref, function () {
    return {
      element: elementRef.current,
      prev: prev,
      next: next
    };
  });
  var nextWhenVisible = useEventCallback_1d.default(function () {
    if (!document.hidden && isVisible(elementRef.current)) {
      next();
    }
  });
  var slideDirection = direction === 'next' ? 'left' : 'right';
  useUpdateEffect_1d.default(function () {
    if (slide) {
      return;
    }
    if (onSlide) {
      onSlide(renderedActiveIndex, slideDirection);
    }
    if (onSlid) {
      onSlid(renderedActiveIndex, slideDirection);
    }
  }, [renderedActiveIndex]);
  var orderClassName = prefix + "-item-" + direction;
  var directionalClassName = prefix + "-item-" + slideDirection;
  var handleEnter = react_1.useCallback(function (node) {
    triggerBrowserReflow_1d.default(node);
    if (onSlide) {
      onSlide(renderedActiveIndex, slideDirection);
    }
  }, [onSlide, renderedActiveIndex, slideDirection]);
  var handleEntered = react_1.useCallback(function () {
    setIsSliding(false);
    if (onSlid) {
      onSlid(renderedActiveIndex, slideDirection);
    }
  }, [onSlid, renderedActiveIndex, slideDirection]);
  var handleKeyDown = react_1.useCallback(function (event) {
    if (keyboard && !(/input|textarea/i).test(event.target.tagName)) {
      switch (event.key) {
        case 'ArrowLeft':
          event.preventDefault();
          prev(event);
          return;
        case 'ArrowRight':
          event.preventDefault();
          next(event);
          return;
        default:
      }
    }
    if (onKeyDown) {
      onKeyDown(event);
    }
  }, [keyboard, onKeyDown, prev, next]);
  var handleMouseOver = react_1.useCallback(function (event) {
    if (pause === 'hover') {
      setPaused(true);
    }
    if (onMouseOver) {
      onMouseOver(event);
    }
  }, [pause, onMouseOver]);
  var handleMouseOut = react_1.useCallback(function (event) {
    setPaused(false);
    if (onMouseOut) {
      onMouseOut(event);
    }
  }, [onMouseOut]);
  var touchStartXRef = react_1.useRef(0);
  var touchDeltaXRef = react_1.useRef(0);
  var touchUnpauseTimeout = useTimeout_1d.default();
  var handleTouchStart = react_1.useCallback(function (event) {
    touchStartXRef.current = event.touches[0].clientX;
    touchDeltaXRef.current = 0;
    if (pause === 'hover') {
      setPaused(true);
    }
    if (onTouchStart) {
      onTouchStart(event);
    }
  }, [pause, onTouchStart]);
  var handleTouchMove = react_1.useCallback(function (event) {
    if (event.touches && event.touches.length > 1) {
      touchDeltaXRef.current = 0;
    } else {
      touchDeltaXRef.current = event.touches[0].clientX - touchStartXRef.current;
    }
    if (onTouchMove) {
      onTouchMove(event);
    }
  }, [onTouchMove]);
  var handleTouchEnd = react_1.useCallback(function (event) {
    if (touch) {
      var touchDeltaX = touchDeltaXRef.current;
      if (Math.abs(touchDeltaX) > SWIPE_THRESHOLD) {
        if (touchDeltaX > 0) {
          prev(event);
        } else {
          next(event);
        }
      }
    }
    if (pause === 'hover') {
      touchUnpauseTimeout.set(function () {
        setPaused(false);
      }, interval || undefined);
    }
    if (onTouchEnd) {
      onTouchEnd(event);
    }
  }, [touch, pause, prev, next, touchUnpauseTimeout, interval, onTouchEnd]);
  var shouldPlay = interval != null && !paused && !isSliding;
  var intervalHandleRef = react_1.useRef();
  react_1.useEffect(function () {
    var _ref, _activeChildIntervalR;
    if (!shouldPlay) {
      return undefined;
    }
    intervalHandleRef.current = window.setInterval(document.visibilityState ? nextWhenVisible : next, (_ref = (_activeChildIntervalR = activeChildIntervalRef.current) != null ? _activeChildIntervalR : interval) != null ? _ref : undefined);
    return function () {
      if (intervalHandleRef.current !== null) {
        clearInterval(intervalHandleRef.current);
      }
    };
  }, [shouldPlay, next, activeChildIntervalRef, interval, nextWhenVisible]);
  var indicatorOnClicks = react_1.useMemo(function () {
    return indicators && Array.from({
      length: numChildren
    }, function (_, index) {
      return function (event) {
        if (onSelect) {
          onSelect(index, event);
        }
      };
    });
  }, [indicators, numChildren, onSelect]);
  return react_1d.default.createElement(Component, extends_1d.default({
    ref: elementRef
  }, props, {
    onKeyDown: handleKeyDown,
    onMouseOver: handleMouseOver,
    onMouseOut: handleMouseOut,
    onTouchStart: handleTouchStart,
    onTouchMove: handleTouchMove,
    onTouchEnd: handleTouchEnd,
    className: classnames_1d.default(className, prefix, slide && 'slide', fade && prefix + "-fade")
  }), indicators && react_1d.default.createElement("ol", {
    className: prefix + "-indicators"
  }, ElementChildren_1.map(children, function (_child, index) {
    return react_1d.default.createElement("li", {
      key: index,
      className: index === renderedActiveIndex ? 'active' : undefined,
      onClick: indicatorOnClicks ? indicatorOnClicks[index] : undefined
    });
  })), react_1d.default.createElement("div", {
    className: prefix + "-inner"
  }, ElementChildren_1.map(children, function (child, index) {
    var isActive = index === renderedActiveIndex;
    return slide ? react_1d.default.createElement(Transition_1d.default, {
      in: isActive,
      onEnter: isActive ? handleEnter : undefined,
      onEntered: isActive ? handleEntered : undefined,
      addEndListener: transitionEndListener_1d.default
    }, function (status) {
      return react_1d.default.cloneElement(child, {
        className: classnames_1d.default(child.props.className, isActive && status !== 'entered' && orderClassName, (status === 'entered' || status === 'exiting') && 'active', (status === 'entering' || status === 'exiting') && directionalClassName)
      });
    }) : react_1d.default.cloneElement(child, {
      className: classnames_1d.default(child.props.className, isActive && 'active')
    });
  })), controls && react_1d.default.createElement(react_1d.default.Fragment, null, (wrap || activeIndex !== 0) && react_1d.default.createElement(SafeAnchor_1d.default, {
    className: prefix + "-control-prev",
    onClick: prev
  }, prevIcon, prevLabel && react_1d.default.createElement("span", {
    className: "sr-only"
  }, prevLabel)), (wrap || activeIndex !== numChildren - 1) && react_1d.default.createElement(SafeAnchor_1d.default, {
    className: prefix + "-control-next",
    onClick: next
  }, nextIcon, nextLabel && react_1d.default.createElement("span", {
    className: "sr-only"
  }, nextLabel))));
}
var Carousel = react_1d.default.forwardRef(CarouselFunc);
Carousel.displayName = 'Carousel';
Carousel.propTypes = propTypes;
Carousel.defaultProps = defaultProps;
Carousel.Caption = CarouselCaption_1d.default;
Carousel.Item = CarouselItem_1d.default;
exports.default = Carousel;

},

// node_modules/react-bootstrap/esm/CarouselItem.js @42
42: function(__fusereq, exports, module){
exports.__esModule = true;
var extends_1 = __fusereq(122);
var extends_1d = __fuse.dt(extends_1);
var objectWithoutPropertiesLoose_1 = __fusereq(123);
var objectWithoutPropertiesLoose_1d = __fuse.dt(objectWithoutPropertiesLoose_1);
var classnames_1 = __fusereq(125);
var classnames_1d = __fuse.dt(classnames_1);
var react_1 = __fusereq(3);
var react_1d = __fuse.dt(react_1);
var ThemeProvider_1 = __fusereq(94);
var CarouselItem = react_1d.default.forwardRef(function (_ref, ref) {
  var _ref$as = _ref.as, Component = _ref$as === void 0 ? 'div' : _ref$as, bsPrefix = _ref.bsPrefix, children = _ref.children, className = _ref.className, props = objectWithoutPropertiesLoose_1d.default(_ref, ["as", "bsPrefix", "children", "className"]);
  var finalClassName = classnames_1d.default(className, ThemeProvider_1.useBootstrapPrefix(bsPrefix, 'carousel-item'));
  return react_1d.default.createElement(Component, extends_1d.default({
    ref: ref
  }, props, {
    className: finalClassName
  }), children);
});
CarouselItem.displayName = 'CarouselItem';
exports.default = CarouselItem;

},

// node_modules/react-bootstrap/esm/CloseButton.js @43
43: function(__fusereq, exports, module){
exports.__esModule = true;
var extends_1 = __fusereq(122);
var extends_1d = __fuse.dt(extends_1);
var objectWithoutPropertiesLoose_1 = __fusereq(123);
var objectWithoutPropertiesLoose_1d = __fuse.dt(objectWithoutPropertiesLoose_1);
var prop_types_1 = __fusereq(112);
var prop_types_1d = __fuse.dt(prop_types_1);
var react_1 = __fusereq(3);
var react_1d = __fuse.dt(react_1);
var classnames_1 = __fusereq(125);
var classnames_1d = __fuse.dt(classnames_1);
var propTypes = {
  label: prop_types_1d.default.string.isRequired,
  onClick: prop_types_1d.default.func
};
var defaultProps = {
  label: 'Close'
};
var CloseButton = react_1d.default.forwardRef(function (_ref, ref) {
  var label = _ref.label, onClick = _ref.onClick, className = _ref.className, props = objectWithoutPropertiesLoose_1d.default(_ref, ["label", "onClick", "className"]);
  return react_1d.default.createElement("button", extends_1d.default({
    ref: ref,
    type: "button",
    className: classnames_1d.default('close', className),
    onClick: onClick
  }, props), react_1d.default.createElement("span", {
    "aria-hidden": "true"
  }, "\xD7"), react_1d.default.createElement("span", {
    className: "sr-only"
  }, label));
});
CloseButton.displayName = 'CloseButton';
CloseButton.propTypes = propTypes;
CloseButton.defaultProps = defaultProps;
exports.default = CloseButton;

},

// node_modules/react-bootstrap/esm/Col.js @44
44: function(__fusereq, exports, module){
exports.__esModule = true;
var extends_1 = __fusereq(122);
var extends_1d = __fuse.dt(extends_1);
var objectWithoutPropertiesLoose_1 = __fusereq(123);
var objectWithoutPropertiesLoose_1d = __fuse.dt(objectWithoutPropertiesLoose_1);
var classnames_1 = __fusereq(125);
var classnames_1d = __fuse.dt(classnames_1);
var react_1 = __fusereq(3);
var react_1d = __fuse.dt(react_1);
var ThemeProvider_1 = __fusereq(94);
var DEVICE_SIZES = ['xl', 'lg', 'md', 'sm', 'xs'];
var Col = react_1d.default.forwardRef(function (_ref, ref) {
  var bsPrefix = _ref.bsPrefix, className = _ref.className, _ref$as = _ref.as, Component = _ref$as === void 0 ? 'div' : _ref$as, props = objectWithoutPropertiesLoose_1d.default(_ref, ["bsPrefix", "className", "as"]);
  var prefix = ThemeProvider_1.useBootstrapPrefix(bsPrefix, 'col');
  var spans = [];
  var classes = [];
  DEVICE_SIZES.forEach(function (brkPoint) {
    var propValue = props[brkPoint];
    delete props[brkPoint];
    var span;
    var offset;
    var order;
    if (typeof propValue === 'object' && propValue != null) {
      var _propValue$span = propValue.span;
      span = _propValue$span === void 0 ? true : _propValue$span;
      offset = propValue.offset;
      order = propValue.order;
    } else {
      span = propValue;
    }
    var infix = brkPoint !== 'xs' ? "-" + brkPoint : '';
    if (span) spans.push(span === true ? "" + prefix + infix : "" + prefix + infix + "-" + span);
    if (order != null) classes.push("order" + infix + "-" + order);
    if (offset != null) classes.push("offset" + infix + "-" + offset);
  });
  if (!spans.length) {
    spans.push(prefix);
  }
  return react_1d.default.createElement(Component, extends_1d.default({}, props, {
    ref: ref,
    className: classnames_1d.default.apply(void 0, [className].concat(spans, classes))
  }));
});
Col.displayName = 'Col';
exports.default = Col;

},

// node_modules/react-bootstrap/esm/Collapse.js @45
45: function(__fusereq, exports, module){
exports.__esModule = true;
var extends_1 = __fusereq(122);
var extends_1d = __fuse.dt(extends_1);
var objectWithoutPropertiesLoose_1 = __fusereq(123);
var objectWithoutPropertiesLoose_1d = __fuse.dt(objectWithoutPropertiesLoose_1);
var _collapseStyles;
var classnames_1 = __fusereq(125);
var classnames_1d = __fuse.dt(classnames_1);
var css_1 = __fusereq(133);
var css_1d = __fuse.dt(css_1);
var react_1 = __fusereq(3);
var react_1d = __fuse.dt(react_1);
var Transition_1 = __fusereq(134);
var Transition_1d = __fuse.dt(Transition_1);
var transitionEndListener_1 = __fusereq(135);
var transitionEndListener_1d = __fuse.dt(transitionEndListener_1);
var createChainedFunction_1 = __fusereq(136);
var createChainedFunction_1d = __fuse.dt(createChainedFunction_1);
var triggerBrowserReflow_1 = __fusereq(137);
var triggerBrowserReflow_1d = __fuse.dt(triggerBrowserReflow_1);
var MARGINS = {
  height: ['marginTop', 'marginBottom'],
  width: ['marginLeft', 'marginRight']
};
function getDefaultDimensionValue(dimension, elem) {
  var offset = "offset" + dimension[0].toUpperCase() + dimension.slice(1);
  var value = elem[offset];
  var margins = MARGINS[dimension];
  return value + parseInt(css_1d.default(elem, margins[0]), 10) + parseInt(css_1d.default(elem, margins[1]), 10);
}
var collapseStyles = (_collapseStyles = {}, _collapseStyles[Transition_1.EXITED] = 'collapse', _collapseStyles[Transition_1.EXITING] = 'collapsing', _collapseStyles[Transition_1.ENTERING] = 'collapsing', _collapseStyles[Transition_1.ENTERED] = 'collapse show', _collapseStyles);
var defaultProps = {
  in: false,
  timeout: 300,
  mountOnEnter: false,
  unmountOnExit: false,
  appear: false,
  getDimensionValue: getDefaultDimensionValue
};
var Collapse = react_1d.default.forwardRef(function (_ref, ref) {
  var onEnter = _ref.onEnter, onEntering = _ref.onEntering, onEntered = _ref.onEntered, onExit = _ref.onExit, onExiting = _ref.onExiting, className = _ref.className, children = _ref.children, _ref$dimension = _ref.dimension, dimension = _ref$dimension === void 0 ? 'height' : _ref$dimension, _ref$getDimensionValu = _ref.getDimensionValue, getDimensionValue = _ref$getDimensionValu === void 0 ? getDefaultDimensionValue : _ref$getDimensionValu, props = objectWithoutPropertiesLoose_1d.default(_ref, ["onEnter", "onEntering", "onEntered", "onExit", "onExiting", "className", "children", "dimension", "getDimensionValue"]);
  var computedDimension = typeof dimension === 'function' ? dimension() : dimension;
  var handleEnter = react_1.useMemo(function () {
    return createChainedFunction_1d.default(function (elem) {
      elem.style[computedDimension] = '0';
    }, onEnter);
  }, [computedDimension, onEnter]);
  var handleEntering = react_1.useMemo(function () {
    return createChainedFunction_1d.default(function (elem) {
      var scroll = "scroll" + computedDimension[0].toUpperCase() + computedDimension.slice(1);
      elem.style[computedDimension] = elem[scroll] + "px";
    }, onEntering);
  }, [computedDimension, onEntering]);
  var handleEntered = react_1.useMemo(function () {
    return createChainedFunction_1d.default(function (elem) {
      elem.style[computedDimension] = null;
    }, onEntered);
  }, [computedDimension, onEntered]);
  var handleExit = react_1.useMemo(function () {
    return createChainedFunction_1d.default(function (elem) {
      elem.style[computedDimension] = getDimensionValue(computedDimension, elem) + "px";
      triggerBrowserReflow_1d.default(elem);
    }, onExit);
  }, [onExit, getDimensionValue, computedDimension]);
  var handleExiting = react_1.useMemo(function () {
    return createChainedFunction_1d.default(function (elem) {
      elem.style[computedDimension] = null;
    }, onExiting);
  }, [computedDimension, onExiting]);
  return react_1d.default.createElement(Transition_1d.default, extends_1d.default({
    ref: ref,
    addEndListener: transitionEndListener_1d.default
  }, props, {
    "aria-expanded": props.role ? props.in : null,
    onEnter: handleEnter,
    onEntering: handleEntering,
    onEntered: handleEntered,
    onExit: handleExit,
    onExiting: handleExiting
  }), function (state, innerProps) {
    return react_1d.default.cloneElement(children, extends_1d.default({}, innerProps, {
      className: classnames_1d.default(className, children.props.className, collapseStyles[state], computedDimension === 'width' && 'width')
    }));
  });
});
Collapse.defaultProps = defaultProps;
exports.default = Collapse;

},

// node_modules/react-bootstrap/esm/Dropdown.js @46
46: function(__fusereq, exports, module){
exports.__esModule = true;
var extends_1 = __fusereq(122);
var extends_1d = __fuse.dt(extends_1);
var objectWithoutPropertiesLoose_1 = __fusereq(123);
var objectWithoutPropertiesLoose_1d = __fuse.dt(objectWithoutPropertiesLoose_1);
var classnames_1 = __fusereq(125);
var classnames_1d = __fuse.dt(classnames_1);
var react_1 = __fusereq(3);
var react_1d = __fuse.dt(react_1);
var Dropdown_1 = __fusereq(138);
var Dropdown_1d = __fuse.dt(Dropdown_1);
var uncontrollable_1 = __fusereq(126);
var useEventCallback_1 = __fusereq(127);
var useEventCallback_1d = __fuse.dt(useEventCallback_1);
var DropdownItem_1 = __fusereq(139);
var DropdownItem_1d = __fuse.dt(DropdownItem_1);
var DropdownMenu_1 = __fusereq(140);
var DropdownMenu_1d = __fuse.dt(DropdownMenu_1);
var DropdownToggle_1 = __fusereq(141);
var DropdownToggle_1d = __fuse.dt(DropdownToggle_1);
var SelectableContext_1 = __fusereq(124);
var SelectableContext_1d = __fuse.dt(SelectableContext_1);
var ThemeProvider_1 = __fusereq(94);
var createWithBsPrefix_1 = __fusereq(129);
var createWithBsPrefix_1d = __fuse.dt(createWithBsPrefix_1);
var DropdownHeader = createWithBsPrefix_1d.default('dropdown-header', {
  defaultProps: {
    role: 'heading'
  }
});
var DropdownDivider = createWithBsPrefix_1d.default('dropdown-divider', {
  defaultProps: {
    role: 'separator'
  }
});
var DropdownItemText = createWithBsPrefix_1d.default('dropdown-item-text', {
  Component: 'span'
});
var defaultProps = {
  navbar: false
};
var Dropdown = react_1d.default.forwardRef(function (pProps, ref) {
  var _useUncontrolled = uncontrollable_1.useUncontrolled(pProps, {
    show: 'onToggle'
  }), bsPrefix = _useUncontrolled.bsPrefix, drop = _useUncontrolled.drop, show = _useUncontrolled.show, className = _useUncontrolled.className, alignRight = _useUncontrolled.alignRight, onSelect = _useUncontrolled.onSelect, onToggle = _useUncontrolled.onToggle, focusFirstItemOnShow = _useUncontrolled.focusFirstItemOnShow, _useUncontrolled$as = _useUncontrolled.as, Component = _useUncontrolled$as === void 0 ? 'div' : _useUncontrolled$as, _4 = _useUncontrolled.navbar, props = objectWithoutPropertiesLoose_1d.default(_useUncontrolled, ["bsPrefix", "drop", "show", "className", "alignRight", "onSelect", "onToggle", "focusFirstItemOnShow", "as", "navbar"]);
  var onSelectCtx = react_1.useContext(SelectableContext_1d.default);
  var prefix = ThemeProvider_1.useBootstrapPrefix(bsPrefix, 'dropdown');
  var handleToggle = useEventCallback_1d.default(function (nextShow, event, source) {
    if (source === void 0) {
      source = event.type;
    }
    if (event.currentTarget === document && (source !== 'keydown' || event.key === 'Escape')) source = 'rootClose';
    if (onToggle) {
      onToggle(nextShow, event, {
        source: source
      });
    }
  });
  var handleSelect = useEventCallback_1d.default(function (key, event) {
    if (onSelectCtx) onSelectCtx(key, event);
    if (onSelect) onSelect(key, event);
    handleToggle(false, event, 'select');
  });
  return react_1d.default.createElement(SelectableContext_1d.default.Provider, {
    value: handleSelect
  }, react_1d.default.createElement(Dropdown_1d.default, {
    drop: drop,
    show: show,
    alignEnd: alignRight,
    onToggle: handleToggle,
    focusFirstItemOnShow: focusFirstItemOnShow,
    itemSelector: "." + prefix + "-item:not(.disabled):not(:disabled)"
  }, react_1d.default.createElement(Component, extends_1d.default({}, props, {
    ref: ref,
    className: classnames_1d.default(className, show && 'show', (!drop || drop === 'down') && prefix, drop === 'up' && 'dropup', drop === 'right' && 'dropright', drop === 'left' && 'dropleft')
  }))));
});
Dropdown.displayName = 'Dropdown';
Dropdown.defaultProps = defaultProps;
Dropdown.Divider = DropdownDivider;
Dropdown.Header = DropdownHeader;
Dropdown.Item = DropdownItem_1d.default;
Dropdown.ItemText = DropdownItemText;
Dropdown.Menu = DropdownMenu_1d.default;
Dropdown.Toggle = DropdownToggle_1d.default;
exports.default = Dropdown;

},

// node_modules/react-bootstrap/esm/DropdownButton.js @47
47: function(__fusereq, exports, module){
exports.__esModule = true;
var extends_1 = __fusereq(122);
var extends_1d = __fuse.dt(extends_1);
var objectWithoutPropertiesLoose_1 = __fusereq(123);
var objectWithoutPropertiesLoose_1d = __fuse.dt(objectWithoutPropertiesLoose_1);
var react_1 = __fusereq(3);
var react_1d = __fuse.dt(react_1);
var prop_types_1 = __fusereq(112);
var prop_types_1d = __fuse.dt(prop_types_1);
var Dropdown_1 = __fusereq(46);
var Dropdown_1d = __fuse.dt(Dropdown_1);
var DropdownToggle_1 = __fusereq(141);
var DropdownToggle_1d = __fuse.dt(DropdownToggle_1);
var DropdownMenu_1 = __fusereq(140);
var DropdownMenu_1d = __fuse.dt(DropdownMenu_1);
var propTypes = {
  id: prop_types_1d.default.any,
  href: prop_types_1d.default.string,
  onClick: prop_types_1d.default.func,
  title: prop_types_1d.default.node.isRequired,
  disabled: prop_types_1d.default.bool,
  menuAlign: DropdownMenu_1.alignPropType,
  menuRole: prop_types_1d.default.string,
  renderMenuOnMount: prop_types_1d.default.bool,
  rootCloseEvent: prop_types_1d.default.string,
  bsPrefix: prop_types_1d.default.string,
  variant: prop_types_1d.default.string,
  size: prop_types_1d.default.string
};
var DropdownButton = react_1d.default.forwardRef(function (_ref, ref) {
  var title = _ref.title, children = _ref.children, bsPrefix = _ref.bsPrefix, rootCloseEvent = _ref.rootCloseEvent, variant = _ref.variant, size = _ref.size, menuAlign = _ref.menuAlign, menuRole = _ref.menuRole, renderMenuOnMount = _ref.renderMenuOnMount, disabled = _ref.disabled, href = _ref.href, id = _ref.id, props = objectWithoutPropertiesLoose_1d.default(_ref, ["title", "children", "bsPrefix", "rootCloseEvent", "variant", "size", "menuAlign", "menuRole", "renderMenuOnMount", "disabled", "href", "id"]);
  return react_1d.default.createElement(Dropdown_1d.default, extends_1d.default({
    ref: ref
  }, props), react_1d.default.createElement(DropdownToggle_1d.default, {
    id: id,
    href: href,
    size: size,
    variant: variant,
    disabled: disabled,
    childBsPrefix: bsPrefix
  }, title), react_1d.default.createElement(DropdownMenu_1d.default, {
    align: menuAlign,
    role: menuRole,
    renderOnMount: renderMenuOnMount,
    rootCloseEvent: rootCloseEvent
  }, children));
});
DropdownButton.displayName = 'DropdownButton';
DropdownButton.propTypes = propTypes;
exports.default = DropdownButton;

},

// node_modules/react-bootstrap/esm/Fade.js @48
48: function(__fusereq, exports, module){
exports.__esModule = true;
var extends_1 = __fusereq(122);
var extends_1d = __fuse.dt(extends_1);
var objectWithoutPropertiesLoose_1 = __fusereq(123);
var objectWithoutPropertiesLoose_1d = __fuse.dt(objectWithoutPropertiesLoose_1);
var _fadeStyles;
var classnames_1 = __fusereq(125);
var classnames_1d = __fuse.dt(classnames_1);
var react_1 = __fusereq(3);
var react_1d = __fuse.dt(react_1);
var Transition_1 = __fusereq(134);
var Transition_1d = __fuse.dt(Transition_1);
var transitionEndListener_1 = __fusereq(135);
var transitionEndListener_1d = __fuse.dt(transitionEndListener_1);
var triggerBrowserReflow_1 = __fusereq(137);
var triggerBrowserReflow_1d = __fuse.dt(triggerBrowserReflow_1);
var defaultProps = {
  in: false,
  timeout: 300,
  mountOnEnter: false,
  unmountOnExit: false,
  appear: false
};
var fadeStyles = (_fadeStyles = {}, _fadeStyles[Transition_1.ENTERING] = 'show', _fadeStyles[Transition_1.ENTERED] = 'show', _fadeStyles);
var Fade = react_1d.default.forwardRef(function (_ref, ref) {
  var className = _ref.className, children = _ref.children, props = objectWithoutPropertiesLoose_1d.default(_ref, ["className", "children"]);
  var handleEnter = react_1.useCallback(function (node) {
    triggerBrowserReflow_1d.default(node);
    if (props.onEnter) props.onEnter(node);
  }, [props]);
  return react_1d.default.createElement(Transition_1d.default, extends_1d.default({
    ref: ref,
    addEndListener: transitionEndListener_1d.default
  }, props, {
    onEnter: handleEnter
  }), function (status, innerProps) {
    return react_1d.default.cloneElement(children, extends_1d.default({}, innerProps, {
      className: classnames_1d.default('fade', className, children.props.className, fadeStyles[status])
    }));
  });
});
Fade.defaultProps = defaultProps;
Fade.displayName = 'Fade';
exports.default = Fade;

},

// node_modules/react-bootstrap/esm/Form.js @49
49: function(__fusereq, exports, module){
exports.__esModule = true;
var extends_1 = __fusereq(122);
var extends_1d = __fuse.dt(extends_1);
var objectWithoutPropertiesLoose_1 = __fusereq(123);
var objectWithoutPropertiesLoose_1d = __fuse.dt(objectWithoutPropertiesLoose_1);
var classnames_1 = __fusereq(125);
var classnames_1d = __fuse.dt(classnames_1);
var react_1 = __fusereq(3);
var react_1d = __fuse.dt(react_1);
var FormCheck_1 = __fusereq(51);
var FormCheck_1d = __fuse.dt(FormCheck_1);
var FormFile_1 = __fusereq(52);
var FormFile_1d = __fuse.dt(FormFile_1);
var FormControl_1 = __fusereq(50);
var FormControl_1d = __fuse.dt(FormControl_1);
var FormGroup_1 = __fusereq(53);
var FormGroup_1d = __fuse.dt(FormGroup_1);
var FormLabel_1 = __fusereq(54);
var FormLabel_1d = __fuse.dt(FormLabel_1);
var FormText_1 = __fusereq(55);
var FormText_1d = __fuse.dt(FormText_1);
var Switch_1 = __fusereq(147);
var Switch_1d = __fuse.dt(Switch_1);
var ThemeProvider_1 = __fusereq(94);
var createWithBsPrefix_1 = __fusereq(129);
var createWithBsPrefix_1d = __fuse.dt(createWithBsPrefix_1);
var FormRow = createWithBsPrefix_1d.default('form-row');
var defaultProps = {
  inline: false
};
var FormImpl = react_1d.default.forwardRef(function (_ref, ref) {
  var bsPrefix = _ref.bsPrefix, inline = _ref.inline, className = _ref.className, validated = _ref.validated, _ref$as = _ref.as, Component = _ref$as === void 0 ? 'form' : _ref$as, props = objectWithoutPropertiesLoose_1d.default(_ref, ["bsPrefix", "inline", "className", "validated", "as"]);
  bsPrefix = ThemeProvider_1.useBootstrapPrefix(bsPrefix, 'form');
  return react_1d.default.createElement(Component, extends_1d.default({}, props, {
    ref: ref,
    className: classnames_1d.default(className, validated && 'was-validated', inline && bsPrefix + "-inline")
  }));
});
FormImpl.displayName = 'Form';
FormImpl.defaultProps = defaultProps;
FormImpl.Row = FormRow;
FormImpl.Group = FormGroup_1d.default;
FormImpl.Control = FormControl_1d.default;
FormImpl.Check = FormCheck_1d.default;
FormImpl.File = FormFile_1d.default;
FormImpl.Switch = Switch_1d.default;
FormImpl.Label = FormLabel_1d.default;
FormImpl.Text = FormText_1d.default;
exports.default = FormImpl;

},

// node_modules/react-bootstrap/esm/FormControl.js @50
50: function(__fusereq, exports, module){
exports.__esModule = true;
var extends_1 = __fusereq(122);
var extends_1d = __fuse.dt(extends_1);
var objectWithoutPropertiesLoose_1 = __fusereq(123);
var objectWithoutPropertiesLoose_1d = __fuse.dt(objectWithoutPropertiesLoose_1);
var classnames_1 = __fusereq(125);
var classnames_1d = __fuse.dt(classnames_1);
var react_1 = __fusereq(3);
var react_1d = __fuse.dt(react_1);
var warning_1 = __fusereq(152);
var warning_1d = __fuse.dt(warning_1);
var Feedback_1 = __fusereq(148);
var Feedback_1d = __fuse.dt(Feedback_1);
var FormContext_1 = __fusereq(151);
var FormContext_1d = __fuse.dt(FormContext_1);
var ThemeProvider_1 = __fusereq(94);
var FormControl = react_1d.default.forwardRef(function (_ref, ref) {
  var bsPrefix = _ref.bsPrefix, bsCustomPrefix = _ref.bsCustomPrefix, type = _ref.type, size = _ref.size, htmlSize = _ref.htmlSize, id = _ref.id, className = _ref.className, _ref$isValid = _ref.isValid, isValid = _ref$isValid === void 0 ? false : _ref$isValid, _ref$isInvalid = _ref.isInvalid, isInvalid = _ref$isInvalid === void 0 ? false : _ref$isInvalid, plaintext = _ref.plaintext, readOnly = _ref.readOnly, custom = _ref.custom, _ref$as = _ref.as, Component = _ref$as === void 0 ? 'input' : _ref$as, props = objectWithoutPropertiesLoose_1d.default(_ref, ["bsPrefix", "bsCustomPrefix", "type", "size", "htmlSize", "id", "className", "isValid", "isInvalid", "plaintext", "readOnly", "custom", "as"]);
  var _useContext = react_1.useContext(FormContext_1d.default), controlId = _useContext.controlId;
  var _ref2 = custom ? [bsCustomPrefix, 'custom'] : [bsPrefix, 'form-control'], prefix = _ref2[0], defaultPrefix = _ref2[1];
  bsPrefix = ThemeProvider_1.useBootstrapPrefix(prefix, defaultPrefix);
  var classes;
  if (plaintext) {
    var _classes;
    classes = (_classes = {}, _classes[bsPrefix + "-plaintext"] = true, _classes);
  } else if (type === 'file') {
    var _classes2;
    classes = (_classes2 = {}, _classes2[bsPrefix + "-file"] = true, _classes2);
  } else if (type === 'range') {
    var _classes3;
    classes = (_classes3 = {}, _classes3[bsPrefix + "-range"] = true, _classes3);
  } else if (Component === 'select' && custom) {
    var _classes4;
    classes = (_classes4 = {}, _classes4[bsPrefix + "-select"] = true, _classes4[bsPrefix + "-select-" + size] = size, _classes4);
  } else {
    var _classes5;
    classes = (_classes5 = {}, _classes5[bsPrefix] = true, _classes5[bsPrefix + "-" + size] = size, _classes5);
  }
  "development" !== "production" ? warning_1d.default(controlId == null || !id, '`controlId` is ignored on `<FormControl>` when `id` is specified.') : void 0;
  return react_1d.default.createElement(Component, extends_1d.default({}, props, {
    type: type,
    size: htmlSize,
    ref: ref,
    readOnly: readOnly,
    id: id || controlId,
    className: classnames_1d.default(className, classes, isValid && "is-valid", isInvalid && "is-invalid")
  }));
});
FormControl.displayName = 'FormControl';
exports.default = Object.assign(FormControl, {
  Feedback: Feedback_1d.default
});

},

// node_modules/react-bootstrap/esm/FormCheck.js @51
51: function(__fusereq, exports, module){
exports.__esModule = true;
var extends_1 = __fusereq(122);
var extends_1d = __fuse.dt(extends_1);
var objectWithoutPropertiesLoose_1 = __fusereq(123);
var objectWithoutPropertiesLoose_1d = __fuse.dt(objectWithoutPropertiesLoose_1);
var classnames_1 = __fusereq(125);
var classnames_1d = __fuse.dt(classnames_1);
var react_1 = __fusereq(3);
var react_1d = __fuse.dt(react_1);
var Feedback_1 = __fusereq(148);
var Feedback_1d = __fuse.dt(Feedback_1);
var FormCheckInput_1 = __fusereq(149);
var FormCheckInput_1d = __fuse.dt(FormCheckInput_1);
var FormCheckLabel_1 = __fusereq(150);
var FormCheckLabel_1d = __fuse.dt(FormCheckLabel_1);
var FormContext_1 = __fusereq(151);
var FormContext_1d = __fuse.dt(FormContext_1);
var ThemeProvider_1 = __fusereq(94);
var FormCheck = react_1d.default.forwardRef(function (_ref, ref) {
  var id = _ref.id, bsPrefix = _ref.bsPrefix, bsCustomPrefix = _ref.bsCustomPrefix, _ref$inline = _ref.inline, inline = _ref$inline === void 0 ? false : _ref$inline, _ref$disabled = _ref.disabled, disabled = _ref$disabled === void 0 ? false : _ref$disabled, _ref$isValid = _ref.isValid, isValid = _ref$isValid === void 0 ? false : _ref$isValid, _ref$isInvalid = _ref.isInvalid, isInvalid = _ref$isInvalid === void 0 ? false : _ref$isInvalid, _ref$feedbackTooltip = _ref.feedbackTooltip, feedbackTooltip = _ref$feedbackTooltip === void 0 ? false : _ref$feedbackTooltip, feedback = _ref.feedback, className = _ref.className, style = _ref.style, _ref$title = _ref.title, title = _ref$title === void 0 ? '' : _ref$title, _ref$type = _ref.type, type = _ref$type === void 0 ? 'checkbox' : _ref$type, label = _ref.label, children = _ref.children, propCustom = _ref.custom, _ref$as = _ref.as, as = _ref$as === void 0 ? 'input' : _ref$as, props = objectWithoutPropertiesLoose_1d.default(_ref, ["id", "bsPrefix", "bsCustomPrefix", "inline", "disabled", "isValid", "isInvalid", "feedbackTooltip", "feedback", "className", "style", "title", "type", "label", "children", "custom", "as"]);
  var custom = type === 'switch' ? true : propCustom;
  var _ref2 = custom ? [bsCustomPrefix, 'custom-control'] : [bsPrefix, 'form-check'], prefix = _ref2[0], defaultPrefix = _ref2[1];
  bsPrefix = ThemeProvider_1.useBootstrapPrefix(prefix, defaultPrefix);
  var _useContext = react_1.useContext(FormContext_1d.default), controlId = _useContext.controlId;
  var innerFormContext = react_1.useMemo(function () {
    return {
      controlId: id || controlId,
      custom: custom
    };
  }, [controlId, custom, id]);
  var hasLabel = custom || label != null && label !== false && !children;
  var input = react_1d.default.createElement(FormCheckInput_1d.default, extends_1d.default({}, props, {
    type: type === 'switch' ? 'checkbox' : type,
    ref: ref,
    isValid: isValid,
    isInvalid: isInvalid,
    isStatic: !hasLabel,
    disabled: disabled,
    as: as
  }));
  return react_1d.default.createElement(FormContext_1d.default.Provider, {
    value: innerFormContext
  }, react_1d.default.createElement("div", {
    style: style,
    className: classnames_1d.default(className, bsPrefix, custom && "custom-" + type, inline && bsPrefix + "-inline")
  }, children || react_1d.default.createElement(react_1d.default.Fragment, null, input, hasLabel && react_1d.default.createElement(FormCheckLabel_1d.default, {
    title: title
  }, label), (isValid || isInvalid) && react_1d.default.createElement(Feedback_1d.default, {
    type: isValid ? 'valid' : 'invalid',
    tooltip: feedbackTooltip
  }, feedback))));
});
FormCheck.displayName = 'FormCheck';
FormCheck.Input = FormCheckInput_1d.default;
FormCheck.Label = FormCheckLabel_1d.default;
exports.default = FormCheck;

},

// node_modules/react-bootstrap/esm/FormFile.js @52
52: function(__fusereq, exports, module){
exports.__esModule = true;
var extends_1 = __fusereq(122);
var extends_1d = __fuse.dt(extends_1);
var objectWithoutPropertiesLoose_1 = __fusereq(123);
var objectWithoutPropertiesLoose_1d = __fuse.dt(objectWithoutPropertiesLoose_1);
var classnames_1 = __fusereq(125);
var classnames_1d = __fuse.dt(classnames_1);
var react_1 = __fusereq(3);
var react_1d = __fuse.dt(react_1);
var Feedback_1 = __fusereq(148);
var Feedback_1d = __fuse.dt(Feedback_1);
var FormFileInput_1 = __fusereq(153);
var FormFileInput_1d = __fuse.dt(FormFileInput_1);
var FormFileLabel_1 = __fusereq(154);
var FormFileLabel_1d = __fuse.dt(FormFileLabel_1);
var FormContext_1 = __fusereq(151);
var FormContext_1d = __fuse.dt(FormContext_1);
var ThemeProvider_1 = __fusereq(94);
var FormFile = react_1d.default.forwardRef(function (_ref, ref) {
  var id = _ref.id, bsPrefix = _ref.bsPrefix, bsCustomPrefix = _ref.bsCustomPrefix, _ref$disabled = _ref.disabled, disabled = _ref$disabled === void 0 ? false : _ref$disabled, _ref$isValid = _ref.isValid, isValid = _ref$isValid === void 0 ? false : _ref$isValid, _ref$isInvalid = _ref.isInvalid, isInvalid = _ref$isInvalid === void 0 ? false : _ref$isInvalid, _ref$feedbackTooltip = _ref.feedbackTooltip, feedbackTooltip = _ref$feedbackTooltip === void 0 ? false : _ref$feedbackTooltip, feedback = _ref.feedback, className = _ref.className, style = _ref.style, label = _ref.label, children = _ref.children, custom = _ref.custom, lang = _ref.lang, dataBrowse = _ref['data-browse'], _ref$as = _ref.as, Component = _ref$as === void 0 ? 'div' : _ref$as, _ref$inputAs = _ref.inputAs, inputAs = _ref$inputAs === void 0 ? 'input' : _ref$inputAs, props = objectWithoutPropertiesLoose_1d.default(_ref, ["id", "bsPrefix", "bsCustomPrefix", "disabled", "isValid", "isInvalid", "feedbackTooltip", "feedback", "className", "style", "label", "children", "custom", "lang", "data-browse", "as", "inputAs"]);
  var _ref2 = custom ? [bsCustomPrefix, 'custom'] : [bsPrefix, 'form-file'], prefix = _ref2[0], defaultPrefix = _ref2[1];
  bsPrefix = ThemeProvider_1.useBootstrapPrefix(prefix, defaultPrefix);
  var type = 'file';
  var _useContext = react_1.useContext(FormContext_1d.default), controlId = _useContext.controlId;
  var innerFormContext = react_1.useMemo(function () {
    return {
      controlId: id || controlId,
      custom: custom
    };
  }, [controlId, custom, id]);
  var hasLabel = label != null && label !== false && !children;
  var input = react_1d.default.createElement(FormFileInput_1d.default, extends_1d.default({}, props, {
    ref: ref,
    isValid: isValid,
    isInvalid: isInvalid,
    disabled: disabled,
    as: inputAs,
    lang: lang
  }));
  return react_1d.default.createElement(FormContext_1d.default.Provider, {
    value: innerFormContext
  }, react_1d.default.createElement(Component, {
    style: style,
    className: classnames_1d.default(className, bsPrefix, custom && "custom-" + type)
  }, children || react_1d.default.createElement(react_1d.default.Fragment, null, custom ? react_1d.default.createElement(react_1d.default.Fragment, null, input, hasLabel && react_1d.default.createElement(FormFileLabel_1d.default, {
    "data-browse": dataBrowse
  }, label)) : react_1d.default.createElement(react_1d.default.Fragment, null, hasLabel && react_1d.default.createElement(FormFileLabel_1d.default, null, label), input), (isValid || isInvalid) && react_1d.default.createElement(Feedback_1d.default, {
    type: isValid ? 'valid' : 'invalid',
    tooltip: feedbackTooltip
  }, feedback))));
});
FormFile.displayName = 'FormFile';
FormFile.Input = FormFileInput_1d.default;
FormFile.Label = FormFileLabel_1d.default;
exports.default = FormFile;

},

// node_modules/react-bootstrap/esm/FormGroup.js @53
53: function(__fusereq, exports, module){
exports.__esModule = true;
var extends_1 = __fusereq(122);
var extends_1d = __fuse.dt(extends_1);
var objectWithoutPropertiesLoose_1 = __fusereq(123);
var objectWithoutPropertiesLoose_1d = __fuse.dt(objectWithoutPropertiesLoose_1);
var classnames_1 = __fusereq(125);
var classnames_1d = __fuse.dt(classnames_1);
var react_1 = __fusereq(3);
var react_1d = __fuse.dt(react_1);
var FormContext_1 = __fusereq(151);
var FormContext_1d = __fuse.dt(FormContext_1);
var ThemeProvider_1 = __fusereq(94);
var FormGroup = react_1d.default.forwardRef(function (_ref, ref) {
  var bsPrefix = _ref.bsPrefix, className = _ref.className, children = _ref.children, controlId = _ref.controlId, _ref$as = _ref.as, Component = _ref$as === void 0 ? 'div' : _ref$as, props = objectWithoutPropertiesLoose_1d.default(_ref, ["bsPrefix", "className", "children", "controlId", "as"]);
  bsPrefix = ThemeProvider_1.useBootstrapPrefix(bsPrefix, 'form-group');
  var context = react_1.useMemo(function () {
    return {
      controlId: controlId
    };
  }, [controlId]);
  return react_1d.default.createElement(FormContext_1d.default.Provider, {
    value: context
  }, react_1d.default.createElement(Component, extends_1d.default({}, props, {
    ref: ref,
    className: classnames_1d.default(className, bsPrefix)
  }), children));
});
FormGroup.displayName = 'FormGroup';
exports.default = FormGroup;

},

// node_modules/react-bootstrap/esm/FormLabel.js @54
54: function(__fusereq, exports, module){
exports.__esModule = true;
var extends_1 = __fusereq(122);
var extends_1d = __fuse.dt(extends_1);
var objectWithoutPropertiesLoose_1 = __fusereq(123);
var objectWithoutPropertiesLoose_1d = __fuse.dt(objectWithoutPropertiesLoose_1);
var classnames_1 = __fusereq(125);
var classnames_1d = __fuse.dt(classnames_1);
var react_1 = __fusereq(3);
var react_1d = __fuse.dt(react_1);
var warning_1 = __fusereq(152);
var warning_1d = __fuse.dt(warning_1);
var Col_1 = __fusereq(44);
var Col_1d = __fuse.dt(Col_1);
var FormContext_1 = __fusereq(151);
var FormContext_1d = __fuse.dt(FormContext_1);
var ThemeProvider_1 = __fusereq(94);
var defaultProps = {
  column: false,
  srOnly: false
};
var FormLabel = react_1d.default.forwardRef(function (_ref, ref) {
  var _ref$as = _ref.as, Component = _ref$as === void 0 ? 'label' : _ref$as, bsPrefix = _ref.bsPrefix, column = _ref.column, srOnly = _ref.srOnly, className = _ref.className, htmlFor = _ref.htmlFor, props = objectWithoutPropertiesLoose_1d.default(_ref, ["as", "bsPrefix", "column", "srOnly", "className", "htmlFor"]);
  var _useContext = react_1.useContext(FormContext_1d.default), controlId = _useContext.controlId;
  bsPrefix = ThemeProvider_1.useBootstrapPrefix(bsPrefix, 'form-label');
  var columnClass = 'col-form-label';
  if (typeof column === 'string') columnClass = columnClass + " " + columnClass + "-" + column;
  var classes = classnames_1d.default(className, bsPrefix, srOnly && 'sr-only', column && columnClass);
  "development" !== "production" ? warning_1d.default(controlId == null || !htmlFor, '`controlId` is ignored on `<FormLabel>` when `htmlFor` is specified.') : void 0;
  htmlFor = htmlFor || controlId;
  if (column) return react_1d.default.createElement(Col_1d.default, extends_1d.default({
    as: "label",
    className: classes,
    htmlFor: htmlFor
  }, props));
  return react_1d.default.createElement(Component, extends_1d.default({
    ref: ref,
    className: classes,
    htmlFor: htmlFor
  }, props));
});
FormLabel.displayName = 'FormLabel';
FormLabel.defaultProps = defaultProps;
exports.default = FormLabel;

},

// node_modules/react-bootstrap/esm/FormText.js @55
55: function(__fusereq, exports, module){
exports.__esModule = true;
var extends_1 = __fusereq(122);
var extends_1d = __fuse.dt(extends_1);
var objectWithoutPropertiesLoose_1 = __fusereq(123);
var objectWithoutPropertiesLoose_1d = __fuse.dt(objectWithoutPropertiesLoose_1);
var classnames_1 = __fusereq(125);
var classnames_1d = __fuse.dt(classnames_1);
var react_1 = __fusereq(3);
var react_1d = __fuse.dt(react_1);
var ThemeProvider_1 = __fusereq(94);
var FormText = react_1d.default.forwardRef(function (_ref, ref) {
  var bsPrefix = _ref.bsPrefix, className = _ref.className, _ref$as = _ref.as, Component = _ref$as === void 0 ? 'small' : _ref$as, muted = _ref.muted, props = objectWithoutPropertiesLoose_1d.default(_ref, ["bsPrefix", "className", "as", "muted"]);
  bsPrefix = ThemeProvider_1.useBootstrapPrefix(bsPrefix, 'form-text');
  return react_1d.default.createElement(Component, extends_1d.default({}, props, {
    ref: ref,
    className: classnames_1d.default(className, bsPrefix, muted && 'text-muted')
  }));
});
FormText.displayName = 'FormText';
exports.default = FormText;

},

// node_modules/react-bootstrap/esm/Container.js @56
56: function(__fusereq, exports, module){
exports.__esModule = true;
var extends_1 = __fusereq(122);
var extends_1d = __fuse.dt(extends_1);
var objectWithoutPropertiesLoose_1 = __fusereq(123);
var objectWithoutPropertiesLoose_1d = __fuse.dt(objectWithoutPropertiesLoose_1);
var classnames_1 = __fusereq(125);
var classnames_1d = __fuse.dt(classnames_1);
var react_1 = __fusereq(3);
var react_1d = __fuse.dt(react_1);
var ThemeProvider_1 = __fusereq(94);
var defaultProps = {
  fluid: false
};
var Container = react_1d.default.forwardRef(function (_ref, ref) {
  var bsPrefix = _ref.bsPrefix, fluid = _ref.fluid, _ref$as = _ref.as, Component = _ref$as === void 0 ? 'div' : _ref$as, className = _ref.className, props = objectWithoutPropertiesLoose_1d.default(_ref, ["bsPrefix", "fluid", "as", "className"]);
  var prefix = ThemeProvider_1.useBootstrapPrefix(bsPrefix, 'container');
  var suffix = typeof fluid === 'string' ? "-" + fluid : '-fluid';
  return react_1d.default.createElement(Component, extends_1d.default({
    ref: ref
  }, props, {
    className: classnames_1d.default(className, fluid ? "" + prefix + suffix : prefix)
  }));
});
Container.displayName = 'Container';
Container.defaultProps = defaultProps;
exports.default = Container;

},

// node_modules/react-bootstrap/esm/Image.js @57
57: function(__fusereq, exports, module){
exports.__esModule = true;
var extends_1 = __fusereq(122);
var extends_1d = __fuse.dt(extends_1);
var objectWithoutPropertiesLoose_1 = __fusereq(123);
var objectWithoutPropertiesLoose_1d = __fuse.dt(objectWithoutPropertiesLoose_1);
var classnames_1 = __fusereq(125);
var classnames_1d = __fuse.dt(classnames_1);
var react_1 = __fusereq(3);
var react_1d = __fuse.dt(react_1);
var prop_types_1 = __fusereq(112);
var prop_types_1d = __fuse.dt(prop_types_1);
var ThemeProvider_1 = __fusereq(94);
exports.propTypes = {
  bsPrefix: prop_types_1d.default.string,
  fluid: prop_types_1d.default.bool,
  rounded: prop_types_1d.default.bool,
  roundedCircle: prop_types_1d.default.bool,
  thumbnail: prop_types_1d.default.bool
};
var defaultProps = {
  fluid: false,
  rounded: false,
  roundedCircle: false,
  thumbnail: false
};
var Image = react_1d.default.forwardRef(function (_ref, ref) {
  var bsPrefix = _ref.bsPrefix, className = _ref.className, fluid = _ref.fluid, rounded = _ref.rounded, roundedCircle = _ref.roundedCircle, thumbnail = _ref.thumbnail, props = objectWithoutPropertiesLoose_1d.default(_ref, ["bsPrefix", "className", "fluid", "rounded", "roundedCircle", "thumbnail"]);
  bsPrefix = ThemeProvider_1.useBootstrapPrefix(bsPrefix, 'img');
  var classes = classnames_1d.default(fluid && bsPrefix + "-fluid", rounded && "rounded", roundedCircle && "rounded-circle", thumbnail && bsPrefix + "-thumbnail");
  return react_1d.default.createElement("img", extends_1d.default({
    ref: ref
  }, props, {
    className: classnames_1d.default(className, classes)
  }));
});
Image.displayName = 'Image';
Image.defaultProps = defaultProps;
exports.default = Image;

},

// node_modules/react-bootstrap/esm/Figure.js @58
58: function(__fusereq, exports, module){
exports.__esModule = true;
var createWithBsPrefix_1 = __fusereq(129);
var createWithBsPrefix_1d = __fuse.dt(createWithBsPrefix_1);
var FigureImage_1 = __fusereq(155);
var FigureImage_1d = __fuse.dt(FigureImage_1);
var FigureCaption_1 = __fusereq(156);
var FigureCaption_1d = __fuse.dt(FigureCaption_1);
var Figure = createWithBsPrefix_1d.default('figure', {
  Component: 'figure'
});
Figure.Image = FigureImage_1d.default;
Figure.Caption = FigureCaption_1d.default;
exports.default = Figure;

},

// node_modules/react-bootstrap/esm/InputGroup.js @59
59: function(__fusereq, exports, module){
exports.__esModule = true;
var objectWithoutPropertiesLoose_1 = __fusereq(123);
var objectWithoutPropertiesLoose_1d = __fuse.dt(objectWithoutPropertiesLoose_1);
var extends_1 = __fusereq(122);
var extends_1d = __fuse.dt(extends_1);
var classnames_1 = __fusereq(125);
var classnames_1d = __fuse.dt(classnames_1);
var react_1 = __fusereq(3);
var react_1d = __fuse.dt(react_1);
var createWithBsPrefix_1 = __fusereq(129);
var createWithBsPrefix_1d = __fuse.dt(createWithBsPrefix_1);
var ThemeProvider_1 = __fusereq(94);
var InputGroupAppend = createWithBsPrefix_1d.default('input-group-append');
var InputGroupPrepend = createWithBsPrefix_1d.default('input-group-prepend');
var InputGroupText = createWithBsPrefix_1d.default('input-group-text', {
  Component: 'span'
});
var InputGroupCheckbox = function InputGroupCheckbox(props) {
  return react_1d.default.createElement(InputGroupText, null, react_1d.default.createElement("input", extends_1d.default({
    type: "checkbox"
  }, props)));
};
var InputGroupRadio = function InputGroupRadio(props) {
  return react_1d.default.createElement(InputGroupText, null, react_1d.default.createElement("input", extends_1d.default({
    type: "radio"
  }, props)));
};
var InputGroup = react_1d.default.forwardRef(function (_ref, ref) {
  var bsPrefix = _ref.bsPrefix, size = _ref.size, hasValidation = _ref.hasValidation, className = _ref.className, _ref$as = _ref.as, Component = _ref$as === void 0 ? 'div' : _ref$as, props = objectWithoutPropertiesLoose_1d.default(_ref, ["bsPrefix", "size", "hasValidation", "className", "as"]);
  bsPrefix = ThemeProvider_1.useBootstrapPrefix(bsPrefix, 'input-group');
  return react_1d.default.createElement(Component, extends_1d.default({
    ref: ref
  }, props, {
    className: classnames_1d.default(className, bsPrefix, size && bsPrefix + "-" + size, hasValidation && 'has-validation')
  }));
});
InputGroup.displayName = 'InputGroup';
var InputGroupWithExtras = extends_1d.default({}, InputGroup, {
  Text: InputGroupText,
  Radio: InputGroupRadio,
  Checkbox: InputGroupCheckbox,
  Append: InputGroupAppend,
  Prepend: InputGroupPrepend
});
exports.default = InputGroupWithExtras;

},

// node_modules/react-bootstrap/esm/Jumbotron.js @60
60: function(__fusereq, exports, module){
exports.__esModule = true;
var extends_1 = __fusereq(122);
var extends_1d = __fuse.dt(extends_1);
var objectWithoutPropertiesLoose_1 = __fusereq(123);
var objectWithoutPropertiesLoose_1d = __fuse.dt(objectWithoutPropertiesLoose_1);
var react_1 = __fusereq(3);
var react_1d = __fuse.dt(react_1);
var classnames_1 = __fusereq(125);
var classnames_1d = __fuse.dt(classnames_1);
var ThemeProvider_1 = __fusereq(94);
var defaultProps = {
  fluid: false
};
var Jumbotron = react_1d.default.forwardRef(function (_ref, ref) {
  var _classes;
  var _ref$as = _ref.as, Component = _ref$as === void 0 ? 'div' : _ref$as, className = _ref.className, fluid = _ref.fluid, bsPrefix = _ref.bsPrefix, props = objectWithoutPropertiesLoose_1d.default(_ref, ["as", "className", "fluid", "bsPrefix"]);
  bsPrefix = ThemeProvider_1.useBootstrapPrefix(bsPrefix, 'jumbotron');
  var classes = (_classes = {}, _classes[bsPrefix] = true, _classes[bsPrefix + "-fluid"] = fluid, _classes);
  return react_1d.default.createElement(Component, extends_1d.default({
    ref: ref
  }, props, {
    className: classnames_1d.default(className, classes)
  }));
});
Jumbotron.defaultProps = defaultProps;
Jumbotron.displayName = 'Jumbotron';
exports.default = Jumbotron;

},

// node_modules/react-bootstrap/esm/ListGroup.js @61
61: function(__fusereq, exports, module){
exports.__esModule = true;
var extends_1 = __fusereq(122);
var extends_1d = __fuse.dt(extends_1);
var objectWithoutPropertiesLoose_1 = __fusereq(123);
var objectWithoutPropertiesLoose_1d = __fuse.dt(objectWithoutPropertiesLoose_1);
var classnames_1 = __fusereq(125);
var classnames_1d = __fuse.dt(classnames_1);
var react_1 = __fusereq(3);
var react_1d = __fuse.dt(react_1);
var warning_1 = __fusereq(152);
var warning_1d = __fuse.dt(warning_1);
var uncontrollable_1 = __fusereq(126);
var ThemeProvider_1 = __fusereq(94);
var AbstractNav_1 = __fusereq(170);
var AbstractNav_1d = __fuse.dt(AbstractNav_1);
var ListGroupItem_1 = __fusereq(62);
var ListGroupItem_1d = __fuse.dt(ListGroupItem_1);
var defaultProps = {
  variant: undefined,
  horizontal: undefined
};
var ListGroup = react_1d.default.forwardRef(function (props, ref) {
  var _useUncontrolled = uncontrollable_1.useUncontrolled(props, {
    activeKey: 'onSelect'
  }), className = _useUncontrolled.className, initialBsPrefix = _useUncontrolled.bsPrefix, variant = _useUncontrolled.variant, horizontal = _useUncontrolled.horizontal, _useUncontrolled$as = _useUncontrolled.as, as = _useUncontrolled$as === void 0 ? 'div' : _useUncontrolled$as, controlledProps = objectWithoutPropertiesLoose_1d.default(_useUncontrolled, ["className", "bsPrefix", "variant", "horizontal", "as"]);
  var bsPrefix = ThemeProvider_1.useBootstrapPrefix(initialBsPrefix, 'list-group');
  var horizontalVariant;
  if (horizontal) {
    horizontalVariant = horizontal === true ? 'horizontal' : "horizontal-" + horizontal;
  } else {
    horizontalVariant = null;
  }
  "development" !== "production" ? warning_1d.default(!(horizontal && variant === 'flush'), '`variant="flush"` and `horizontal` should not be used together.') : void 0;
  return react_1d.default.createElement(AbstractNav_1d.default, extends_1d.default({
    ref: ref
  }, controlledProps, {
    as: as,
    className: classnames_1d.default(className, bsPrefix, variant && bsPrefix + "-" + variant, horizontalVariant && bsPrefix + "-" + horizontalVariant)
  }));
});
ListGroup.defaultProps = defaultProps;
ListGroup.displayName = 'ListGroup';
ListGroup.Item = ListGroupItem_1d.default;
exports.default = ListGroup;

},

// node_modules/react-bootstrap/esm/ListGroupItem.js @62
62: function(__fusereq, exports, module){
exports.__esModule = true;
var extends_1 = __fusereq(122);
var extends_1d = __fuse.dt(extends_1);
var objectWithoutPropertiesLoose_1 = __fusereq(123);
var objectWithoutPropertiesLoose_1d = __fuse.dt(objectWithoutPropertiesLoose_1);
var classnames_1 = __fusereq(125);
var classnames_1d = __fuse.dt(classnames_1);
var react_1 = __fusereq(3);
var react_1d = __fuse.dt(react_1);
var AbstractNavItem_1 = __fusereq(173);
var AbstractNavItem_1d = __fuse.dt(AbstractNavItem_1);
var ThemeProvider_1 = __fusereq(94);
var defaultProps = {
  variant: undefined,
  active: false,
  disabled: false
};
var ListGroupItem = react_1d.default.forwardRef(function (_ref, ref) {
  var bsPrefix = _ref.bsPrefix, active = _ref.active, disabled = _ref.disabled, className = _ref.className, variant = _ref.variant, action = _ref.action, as = _ref.as, onClick = _ref.onClick, props = objectWithoutPropertiesLoose_1d.default(_ref, ["bsPrefix", "active", "disabled", "className", "variant", "action", "as", "onClick"]);
  bsPrefix = ThemeProvider_1.useBootstrapPrefix(bsPrefix, 'list-group-item');
  var handleClick = react_1.useCallback(function (event) {
    if (disabled) {
      event.preventDefault();
      event.stopPropagation();
      return;
    }
    if (onClick) onClick(event);
  }, [disabled, onClick]);
  if (disabled && props.tabIndex === undefined) {
    props.tabIndex = -1;
    props['aria-disabled'] = true;
  }
  return react_1d.default.createElement(AbstractNavItem_1d.default, extends_1d.default({
    ref: ref
  }, props, {
    as: as || (action ? props.href ? 'a' : 'button' : 'div'),
    onClick: handleClick,
    className: classnames_1d.default(className, bsPrefix, active && 'active', disabled && 'disabled', variant && bsPrefix + "-" + variant, action && bsPrefix + "-action")
  }));
});
ListGroupItem.defaultProps = defaultProps;
ListGroupItem.displayName = 'ListGroupItem';
exports.default = ListGroupItem;

},

// node_modules/react-bootstrap/esm/Media.js @63
63: function(__fusereq, exports, module){
exports.__esModule = true;
var extends_1 = __fusereq(122);
var extends_1d = __fuse.dt(extends_1);
var objectWithoutPropertiesLoose_1 = __fusereq(123);
var objectWithoutPropertiesLoose_1d = __fuse.dt(objectWithoutPropertiesLoose_1);
var classnames_1 = __fusereq(125);
var classnames_1d = __fuse.dt(classnames_1);
var react_1 = __fusereq(3);
var react_1d = __fuse.dt(react_1);
var createWithBsPrefix_1 = __fusereq(129);
var createWithBsPrefix_1d = __fuse.dt(createWithBsPrefix_1);
var ThemeProvider_1 = __fusereq(94);
var MediaBody = createWithBsPrefix_1d.default('media-body');
var Media = react_1d.default.forwardRef(function (_ref, ref) {
  var bsPrefix = _ref.bsPrefix, className = _ref.className, _ref$as = _ref.as, Component = _ref$as === void 0 ? 'div' : _ref$as, props = objectWithoutPropertiesLoose_1d.default(_ref, ["bsPrefix", "className", "as"]);
  var prefix = ThemeProvider_1.useBootstrapPrefix(bsPrefix, 'media');
  return react_1d.default.createElement(Component, extends_1d.default({}, props, {
    ref: ref,
    className: classnames_1d.default(className, prefix)
  }));
});
Media.displayName = 'Media';
Media.Body = MediaBody;
exports.default = Media;

},

// node_modules/react-bootstrap/esm/Modal.js @64
64: function(__fusereq, exports, module){
exports.__esModule = true;
var extends_1 = __fusereq(122);
var extends_1d = __fuse.dt(extends_1);
var objectWithoutPropertiesLoose_1 = __fusereq(123);
var objectWithoutPropertiesLoose_1d = __fuse.dt(objectWithoutPropertiesLoose_1);
var classnames_1 = __fusereq(125);
var classnames_1d = __fuse.dt(classnames_1);
var addEventListener_1 = __fusereq(157);
var addEventListener_1d = __fuse.dt(addEventListener_1);
var canUseDOM_1 = __fusereq(158);
var canUseDOM_1d = __fuse.dt(canUseDOM_1);
var ownerDocument_1 = __fusereq(159);
var ownerDocument_1d = __fuse.dt(ownerDocument_1);
var removeEventListener_1 = __fusereq(160);
var removeEventListener_1d = __fuse.dt(removeEventListener_1);
var scrollbarSize_1 = __fusereq(161);
var scrollbarSize_1d = __fuse.dt(scrollbarSize_1);
var useCallbackRef_1 = __fusereq(162);
var useCallbackRef_1d = __fuse.dt(useCallbackRef_1);
var useEventCallback_1 = __fusereq(127);
var useEventCallback_1d = __fuse.dt(useEventCallback_1);
var useWillUnmount_1 = __fusereq(163);
var useWillUnmount_1d = __fuse.dt(useWillUnmount_1);
var transitionEnd_1 = __fusereq(164);
var transitionEnd_1d = __fuse.dt(transitionEnd_1);
var react_1 = __fusereq(3);
var react_1d = __fuse.dt(react_1);
var Modal_1 = __fusereq(165);
var Modal_1d = __fuse.dt(Modal_1);
var warning_1 = __fusereq(152);
var warning_1d = __fuse.dt(warning_1);
var BootstrapModalManager_1 = __fusereq(166);
var BootstrapModalManager_1d = __fuse.dt(BootstrapModalManager_1);
var Fade_1 = __fusereq(48);
var Fade_1d = __fuse.dt(Fade_1);
var ModalBody_1 = __fusereq(65);
var ModalBody_1d = __fuse.dt(ModalBody_1);
var ModalContext_1 = __fusereq(167);
var ModalContext_1d = __fuse.dt(ModalContext_1);
var ModalDialog_1 = __fusereq(66);
var ModalDialog_1d = __fuse.dt(ModalDialog_1);
var ModalFooter_1 = __fusereq(67);
var ModalFooter_1d = __fuse.dt(ModalFooter_1);
var ModalHeader_1 = __fusereq(168);
var ModalHeader_1d = __fuse.dt(ModalHeader_1);
var ModalTitle_1 = __fusereq(68);
var ModalTitle_1d = __fuse.dt(ModalTitle_1);
var ThemeProvider_1 = __fusereq(94);
var manager;
var defaultProps = {
  show: false,
  backdrop: true,
  keyboard: true,
  autoFocus: true,
  enforceFocus: true,
  restoreFocus: true,
  animation: true,
  dialogAs: ModalDialog_1d.default
};
function DialogTransition(props) {
  return react_1d.default.createElement(Fade_1d.default, props);
}
function BackdropTransition(props) {
  return react_1d.default.createElement(Fade_1d.default, props);
}
var Modal = react_1d.default.forwardRef(function (_ref, ref) {
  var bsPrefix = _ref.bsPrefix, className = _ref.className, style = _ref.style, dialogClassName = _ref.dialogClassName, contentClassName = _ref.contentClassName, children = _ref.children, Dialog = _ref.dialogAs, ariaLabelledby = _ref['aria-labelledby'], show = _ref.show, animation = _ref.animation, backdrop = _ref.backdrop, keyboard = _ref.keyboard, onEscapeKeyDown = _ref.onEscapeKeyDown, onShow = _ref.onShow, onHide = _ref.onHide, container = _ref.container, autoFocus = _ref.autoFocus, enforceFocus = _ref.enforceFocus, restoreFocus = _ref.restoreFocus, restoreFocusOptions = _ref.restoreFocusOptions, onEntered = _ref.onEntered, onExit = _ref.onExit, onExiting = _ref.onExiting, onEnter = _ref.onEnter, onEntering = _ref.onEntering, onExited = _ref.onExited, backdropClassName = _ref.backdropClassName, propsManager = _ref.manager, props = objectWithoutPropertiesLoose_1d.default(_ref, ["bsPrefix", "className", "style", "dialogClassName", "contentClassName", "children", "dialogAs", "aria-labelledby", "show", "animation", "backdrop", "keyboard", "onEscapeKeyDown", "onShow", "onHide", "container", "autoFocus", "enforceFocus", "restoreFocus", "restoreFocusOptions", "onEntered", "onExit", "onExiting", "onEnter", "onEntering", "onExited", "backdropClassName", "manager"]);
  var _useState = react_1.useState({}), modalStyle = _useState[0], setStyle = _useState[1];
  var _useState2 = react_1.useState(false), animateStaticModal = _useState2[0], setAnimateStaticModal = _useState2[1];
  var waitingForMouseUpRef = react_1.useRef(false);
  var ignoreBackdropClickRef = react_1.useRef(false);
  var removeStaticModalAnimationRef = react_1.useRef(null);
  var _useCallbackRef = useCallbackRef_1d.default(), modal = _useCallbackRef[0], setModalRef = _useCallbackRef[1];
  var handleHide = useEventCallback_1d.default(onHide);
  bsPrefix = ThemeProvider_1.useBootstrapPrefix(bsPrefix, 'modal');
  react_1.useImperativeHandle(ref, function () {
    return {
      get _modal() {
        "development" !== "production" ? warning_1d.default(false, 'Accessing `_modal` is not supported and will be removed in a future release') : void 0;
        return modal;
      }
    };
  }, [modal]);
  var modalContext = react_1.useMemo(function () {
    return {
      onHide: handleHide
    };
  }, [handleHide]);
  function getModalManager() {
    if (propsManager) return propsManager;
    if (!manager) manager = new BootstrapModalManager_1d.default();
    return manager;
  }
  function updateDialogStyle(node) {
    if (!canUseDOM_1d.default) return;
    var containerIsOverflowing = getModalManager().isContainerOverflowing(modal);
    var modalIsOverflowing = node.scrollHeight > ownerDocument_1d.default(node).documentElement.clientHeight;
    setStyle({
      paddingRight: containerIsOverflowing && !modalIsOverflowing ? scrollbarSize_1d.default() : undefined,
      paddingLeft: !containerIsOverflowing && modalIsOverflowing ? scrollbarSize_1d.default() : undefined
    });
  }
  var handleWindowResize = useEventCallback_1d.default(function () {
    if (modal) {
      updateDialogStyle(modal.dialog);
    }
  });
  useWillUnmount_1d.default(function () {
    removeEventListener_1d.default(window, 'resize', handleWindowResize);
    if (removeStaticModalAnimationRef.current) {
      removeStaticModalAnimationRef.current();
    }
  });
  var handleDialogMouseDown = function handleDialogMouseDown() {
    waitingForMouseUpRef.current = true;
  };
  var handleMouseUp = function handleMouseUp(e) {
    if (waitingForMouseUpRef.current && modal && e.target === modal.dialog) {
      ignoreBackdropClickRef.current = true;
    }
    waitingForMouseUpRef.current = false;
  };
  var handleStaticModalAnimation = function handleStaticModalAnimation() {
    setAnimateStaticModal(true);
    removeStaticModalAnimationRef.current = transitionEnd_1d.default(modal.dialog, function () {
      setAnimateStaticModal(false);
    });
  };
  var handleStaticBackdropClick = function handleStaticBackdropClick(e) {
    if (e.target !== e.currentTarget) {
      return;
    }
    handleStaticModalAnimation();
  };
  var handleClick = function handleClick(e) {
    if (backdrop === 'static') {
      handleStaticBackdropClick(e);
      return;
    }
    if (ignoreBackdropClickRef.current || e.target !== e.currentTarget) {
      ignoreBackdropClickRef.current = false;
      return;
    }
    onHide();
  };
  var handleEscapeKeyDown = function handleEscapeKeyDown(e) {
    if (!keyboard && backdrop === 'static') {
      e.preventDefault();
      handleStaticModalAnimation();
    } else if (keyboard && onEscapeKeyDown) {
      onEscapeKeyDown(e);
    }
  };
  var handleEnter = function handleEnter(node) {
    if (node) {
      node.style.display = 'block';
      updateDialogStyle(node);
    }
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    if (onEnter) onEnter.apply(void 0, [node].concat(args));
  };
  var handleExit = function handleExit(node) {
    if (removeStaticModalAnimationRef.current) {
      removeStaticModalAnimationRef.current();
    }
    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      args[_key2 - 1] = arguments[_key2];
    }
    if (onExit) onExit.apply(void 0, [node].concat(args));
  };
  var handleEntering = function handleEntering(node) {
    for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
      args[_key3 - 1] = arguments[_key3];
    }
    if (onEntering) onEntering.apply(void 0, [node].concat(args));
    addEventListener_1d.default(window, 'resize', handleWindowResize);
  };
  var handleExited = function handleExited(node) {
    if (node) node.style.display = '';
    for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
      args[_key4 - 1] = arguments[_key4];
    }
    if (onExited) onExited.apply(void 0, args);
    removeEventListener_1d.default(window, 'resize', handleWindowResize);
  };
  var renderBackdrop = react_1.useCallback(function (backdropProps) {
    return react_1d.default.createElement("div", extends_1d.default({}, backdropProps, {
      className: classnames_1d.default(bsPrefix + "-backdrop", backdropClassName, !animation && 'show')
    }));
  }, [animation, backdropClassName, bsPrefix]);
  var baseModalStyle = extends_1d.default({}, style, modalStyle);
  if (!animation) {
    baseModalStyle.display = 'block';
  }
  var renderDialog = function renderDialog(dialogProps) {
    return react_1d.default.createElement("div", extends_1d.default({
      role: "dialog"
    }, dialogProps, {
      style: baseModalStyle,
      className: classnames_1d.default(className, bsPrefix, animateStaticModal && bsPrefix + "-static"),
      onClick: backdrop ? handleClick : undefined,
      onMouseUp: handleMouseUp,
      "aria-labelledby": ariaLabelledby
    }), react_1d.default.createElement(Dialog, extends_1d.default({}, props, {
      onMouseDown: handleDialogMouseDown,
      className: dialogClassName,
      contentClassName: contentClassName
    }), children));
  };
  return react_1d.default.createElement(ModalContext_1d.default.Provider, {
    value: modalContext
  }, react_1d.default.createElement(Modal_1d.default, {
    show: show,
    ref: setModalRef,
    backdrop: backdrop,
    container: container,
    keyboard: true,
    autoFocus: autoFocus,
    enforceFocus: enforceFocus,
    restoreFocus: restoreFocus,
    restoreFocusOptions: restoreFocusOptions,
    onEscapeKeyDown: handleEscapeKeyDown,
    onShow: onShow,
    onHide: onHide,
    onEnter: handleEnter,
    onEntering: handleEntering,
    onEntered: onEntered,
    onExit: handleExit,
    onExiting: onExiting,
    onExited: handleExited,
    manager: getModalManager(),
    containerClassName: bsPrefix + "-open",
    transition: animation ? DialogTransition : undefined,
    backdropTransition: animation ? BackdropTransition : undefined,
    renderBackdrop: renderBackdrop,
    renderDialog: renderDialog
  }));
});
Modal.displayName = 'Modal';
Modal.defaultProps = defaultProps;
Modal.Body = ModalBody_1d.default;
Modal.Header = ModalHeader_1d.default;
Modal.Title = ModalTitle_1d.default;
Modal.Footer = ModalFooter_1d.default;
Modal.Dialog = ModalDialog_1d.default;
Modal.TRANSITION_DURATION = 300;
Modal.BACKDROP_TRANSITION_DURATION = 150;
exports.default = Modal;

},

// node_modules/react-bootstrap/esm/ModalBody.js @65
65: function(__fusereq, exports, module){
exports.__esModule = true;
var createWithBsPrefix_1 = __fusereq(129);
var createWithBsPrefix_1d = __fuse.dt(createWithBsPrefix_1);
exports.default = createWithBsPrefix_1d.default('modal-body');

},

// node_modules/react-bootstrap/esm/ModalDialog.js @66
66: function(__fusereq, exports, module){
exports.__esModule = true;
var extends_1 = __fusereq(122);
var extends_1d = __fuse.dt(extends_1);
var objectWithoutPropertiesLoose_1 = __fusereq(123);
var objectWithoutPropertiesLoose_1d = __fuse.dt(objectWithoutPropertiesLoose_1);
var classnames_1 = __fusereq(125);
var classnames_1d = __fuse.dt(classnames_1);
var react_1 = __fusereq(3);
var react_1d = __fuse.dt(react_1);
var ThemeProvider_1 = __fusereq(94);
var ModalDialog = react_1d.default.forwardRef(function (_ref, ref) {
  var bsPrefix = _ref.bsPrefix, className = _ref.className, contentClassName = _ref.contentClassName, centered = _ref.centered, size = _ref.size, children = _ref.children, scrollable = _ref.scrollable, props = objectWithoutPropertiesLoose_1d.default(_ref, ["bsPrefix", "className", "contentClassName", "centered", "size", "children", "scrollable"]);
  bsPrefix = ThemeProvider_1.useBootstrapPrefix(bsPrefix, 'modal');
  var dialogClass = bsPrefix + "-dialog";
  return react_1d.default.createElement("div", extends_1d.default({}, props, {
    ref: ref,
    className: classnames_1d.default(dialogClass, className, size && bsPrefix + "-" + size, centered && dialogClass + "-centered", scrollable && dialogClass + "-scrollable")
  }), react_1d.default.createElement("div", {
    className: classnames_1d.default(bsPrefix + "-content", contentClassName)
  }, children));
});
ModalDialog.displayName = 'ModalDialog';
exports.default = ModalDialog;

},

// node_modules/react-bootstrap/esm/ModalFooter.js @67
67: function(__fusereq, exports, module){
exports.__esModule = true;
var createWithBsPrefix_1 = __fusereq(129);
var createWithBsPrefix_1d = __fuse.dt(createWithBsPrefix_1);
exports.default = createWithBsPrefix_1d.default('modal-footer');

},

// node_modules/react-bootstrap/esm/ModalTitle.js @68
68: function(__fusereq, exports, module){
exports.__esModule = true;
var createWithBsPrefix_1 = __fusereq(129);
var createWithBsPrefix_1d = __fuse.dt(createWithBsPrefix_1);
var divWithClassName_1 = __fusereq(128);
var divWithClassName_1d = __fuse.dt(divWithClassName_1);
var DivStyledAsH4 = divWithClassName_1d.default('h4');
exports.default = createWithBsPrefix_1d.default('modal-title', {
  Component: DivStyledAsH4
});

},

// node_modules/react-bootstrap/esm/Nav.js @69
69: function(__fusereq, exports, module){
exports.__esModule = true;
var extends_1 = __fusereq(122);
var extends_1d = __fuse.dt(extends_1);
var objectWithoutPropertiesLoose_1 = __fusereq(123);
var objectWithoutPropertiesLoose_1d = __fuse.dt(objectWithoutPropertiesLoose_1);
var classnames_1 = __fusereq(125);
var classnames_1d = __fuse.dt(classnames_1);
var react_1 = __fusereq(3);
var react_1d = __fuse.dt(react_1);
var uncontrollable_1 = __fusereq(126);
var ThemeProvider_1 = __fusereq(94);
var NavbarContext_1 = __fusereq(169);
var NavbarContext_1d = __fuse.dt(NavbarContext_1);
var CardContext_1 = __fusereq(130);
var CardContext_1d = __fuse.dt(CardContext_1);
var AbstractNav_1 = __fusereq(170);
var AbstractNav_1d = __fuse.dt(AbstractNav_1);
var NavItem_1 = __fusereq(73);
var NavItem_1d = __fuse.dt(NavItem_1);
var NavLink_1 = __fusereq(74);
var NavLink_1d = __fuse.dt(NavLink_1);
var defaultProps = {
  justify: false,
  fill: false
};
var Nav = react_1d.default.forwardRef(function (uncontrolledProps, ref) {
  var _classNames;
  var _useUncontrolled = uncontrollable_1.useUncontrolled(uncontrolledProps, {
    activeKey: 'onSelect'
  }), _useUncontrolled$as = _useUncontrolled.as, as = _useUncontrolled$as === void 0 ? 'div' : _useUncontrolled$as, initialBsPrefix = _useUncontrolled.bsPrefix, variant = _useUncontrolled.variant, fill = _useUncontrolled.fill, justify = _useUncontrolled.justify, navbar = _useUncontrolled.navbar, navbarScroll = _useUncontrolled.navbarScroll, className = _useUncontrolled.className, children = _useUncontrolled.children, activeKey = _useUncontrolled.activeKey, props = objectWithoutPropertiesLoose_1d.default(_useUncontrolled, ["as", "bsPrefix", "variant", "fill", "justify", "navbar", "navbarScroll", "className", "children", "activeKey"]);
  var bsPrefix = ThemeProvider_1.useBootstrapPrefix(initialBsPrefix, 'nav');
  var navbarBsPrefix;
  var cardHeaderBsPrefix;
  var isNavbar = false;
  var navbarContext = react_1.useContext(NavbarContext_1d.default);
  var cardContext = react_1.useContext(CardContext_1d.default);
  if (navbarContext) {
    navbarBsPrefix = navbarContext.bsPrefix;
    isNavbar = navbar == null ? true : navbar;
  } else if (cardContext) {
    cardHeaderBsPrefix = cardContext.cardHeaderBsPrefix;
  }
  return react_1d.default.createElement(AbstractNav_1d.default, extends_1d.default({
    as: as,
    ref: ref,
    activeKey: activeKey,
    className: classnames_1d.default(className, (_classNames = {}, _classNames[bsPrefix] = !isNavbar, _classNames[navbarBsPrefix + "-nav"] = isNavbar, _classNames[navbarBsPrefix + "-nav-scroll"] = isNavbar && navbarScroll, _classNames[cardHeaderBsPrefix + "-" + variant] = !!cardHeaderBsPrefix, _classNames[bsPrefix + "-" + variant] = !!variant, _classNames[bsPrefix + "-fill"] = fill, _classNames[bsPrefix + "-justified"] = justify, _classNames))
  }, props), children);
});
Nav.displayName = 'Nav';
Nav.defaultProps = defaultProps;
Nav.Item = NavItem_1d.default;
Nav.Link = NavLink_1d.default;
exports.default = Nav;

},

// node_modules/react-bootstrap/esm/Navbar.js @70
70: function(__fusereq, exports, module){
exports.__esModule = true;
var extends_1 = __fusereq(122);
var extends_1d = __fuse.dt(extends_1);
var objectWithoutPropertiesLoose_1 = __fusereq(123);
var objectWithoutPropertiesLoose_1d = __fuse.dt(objectWithoutPropertiesLoose_1);
var classnames_1 = __fusereq(125);
var classnames_1d = __fuse.dt(classnames_1);
var react_1 = __fusereq(3);
var react_1d = __fuse.dt(react_1);
var uncontrollable_1 = __fusereq(126);
var createWithBsPrefix_1 = __fusereq(129);
var createWithBsPrefix_1d = __fuse.dt(createWithBsPrefix_1);
var NavbarBrand_1 = __fusereq(71);
var NavbarBrand_1d = __fuse.dt(NavbarBrand_1);
var NavbarCollapse_1 = __fusereq(171);
var NavbarCollapse_1d = __fuse.dt(NavbarCollapse_1);
var NavbarToggle_1 = __fusereq(172);
var NavbarToggle_1d = __fuse.dt(NavbarToggle_1);
var ThemeProvider_1 = __fusereq(94);
var NavbarContext_1 = __fusereq(169);
var NavbarContext_1d = __fuse.dt(NavbarContext_1);
var SelectableContext_1 = __fusereq(124);
var SelectableContext_1d = __fuse.dt(SelectableContext_1);
var NavbarText = createWithBsPrefix_1d.default('navbar-text', {
  Component: 'span'
});
var defaultProps = {
  expand: true,
  variant: 'light',
  collapseOnSelect: false
};
var Navbar = react_1d.default.forwardRef(function (props, ref) {
  var _useUncontrolled = uncontrollable_1.useUncontrolled(props, {
    expanded: 'onToggle'
  }), initialBsPrefix = _useUncontrolled.bsPrefix, expand = _useUncontrolled.expand, variant = _useUncontrolled.variant, bg = _useUncontrolled.bg, fixed = _useUncontrolled.fixed, sticky = _useUncontrolled.sticky, className = _useUncontrolled.className, children = _useUncontrolled.children, _useUncontrolled$as = _useUncontrolled.as, Component = _useUncontrolled$as === void 0 ? 'nav' : _useUncontrolled$as, expanded = _useUncontrolled.expanded, _onToggle = _useUncontrolled.onToggle, onSelect = _useUncontrolled.onSelect, collapseOnSelect = _useUncontrolled.collapseOnSelect, controlledProps = objectWithoutPropertiesLoose_1d.default(_useUncontrolled, ["bsPrefix", "expand", "variant", "bg", "fixed", "sticky", "className", "children", "as", "expanded", "onToggle", "onSelect", "collapseOnSelect"]);
  var bsPrefix = ThemeProvider_1.useBootstrapPrefix(initialBsPrefix, 'navbar');
  var handleCollapse = react_1.useCallback(function () {
    if (onSelect) onSelect.apply(void 0, arguments);
    if (collapseOnSelect && expanded) {
      if (_onToggle) {
        _onToggle(false);
      }
    }
  }, [onSelect, collapseOnSelect, expanded, _onToggle]);
  if (controlledProps.role === undefined && Component !== 'nav') {
    controlledProps.role = 'navigation';
  }
  var expandClass = bsPrefix + "-expand";
  if (typeof expand === 'string') expandClass = expandClass + "-" + expand;
  var navbarContext = react_1.useMemo(function () {
    return {
      onToggle: function onToggle() {
        return _onToggle && _onToggle(!expanded);
      },
      bsPrefix: bsPrefix,
      expanded: !!expanded
    };
  }, [bsPrefix, expanded, _onToggle]);
  return react_1d.default.createElement(NavbarContext_1d.default.Provider, {
    value: navbarContext
  }, react_1d.default.createElement(SelectableContext_1d.default.Provider, {
    value: handleCollapse
  }, react_1d.default.createElement(Component, extends_1d.default({
    ref: ref
  }, controlledProps, {
    className: classnames_1d.default(className, bsPrefix, expand && expandClass, variant && bsPrefix + "-" + variant, bg && "bg-" + bg, sticky && "sticky-" + sticky, fixed && "fixed-" + fixed)
  }), children)));
});
Navbar.defaultProps = defaultProps;
Navbar.displayName = 'Navbar';
Navbar.Brand = NavbarBrand_1d.default;
Navbar.Toggle = NavbarToggle_1d.default;
Navbar.Collapse = NavbarCollapse_1d.default;
Navbar.Text = NavbarText;
exports.default = Navbar;

},

// node_modules/react-bootstrap/esm/NavbarBrand.js @71
71: function(__fusereq, exports, module){
exports.__esModule = true;
var extends_1 = __fusereq(122);
var extends_1d = __fuse.dt(extends_1);
var objectWithoutPropertiesLoose_1 = __fusereq(123);
var objectWithoutPropertiesLoose_1d = __fuse.dt(objectWithoutPropertiesLoose_1);
var classnames_1 = __fusereq(125);
var classnames_1d = __fuse.dt(classnames_1);
var react_1 = __fusereq(3);
var react_1d = __fuse.dt(react_1);
var ThemeProvider_1 = __fusereq(94);
var NavbarBrand = react_1d.default.forwardRef(function (_ref, ref) {
  var bsPrefix = _ref.bsPrefix, className = _ref.className, as = _ref.as, props = objectWithoutPropertiesLoose_1d.default(_ref, ["bsPrefix", "className", "as"]);
  bsPrefix = ThemeProvider_1.useBootstrapPrefix(bsPrefix, 'navbar-brand');
  var Component = as || (props.href ? 'a' : 'span');
  return react_1d.default.createElement(Component, extends_1d.default({}, props, {
    ref: ref,
    className: classnames_1d.default(className, bsPrefix)
  }));
});
NavbarBrand.displayName = 'NavbarBrand';
exports.default = NavbarBrand;

},

// node_modules/react-bootstrap/esm/NavDropdown.js @72
72: function(__fusereq, exports, module){
exports.__esModule = true;
var extends_1 = __fusereq(122);
var extends_1d = __fuse.dt(extends_1);
var objectWithoutPropertiesLoose_1 = __fusereq(123);
var objectWithoutPropertiesLoose_1d = __fuse.dt(objectWithoutPropertiesLoose_1);
var classnames_1 = __fusereq(125);
var classnames_1d = __fuse.dt(classnames_1);
var react_1 = __fusereq(3);
var react_1d = __fuse.dt(react_1);
var ThemeProvider_1 = __fusereq(94);
var Dropdown_1 = __fusereq(46);
var Dropdown_1d = __fuse.dt(Dropdown_1);
var NavLink_1 = __fusereq(74);
var NavLink_1d = __fuse.dt(NavLink_1);
var NavDropdown = react_1d.default.forwardRef(function (_ref, ref) {
  var id = _ref.id, title = _ref.title, children = _ref.children, bsPrefix = _ref.bsPrefix, className = _ref.className, rootCloseEvent = _ref.rootCloseEvent, menuRole = _ref.menuRole, disabled = _ref.disabled, active = _ref.active, renderMenuOnMount = _ref.renderMenuOnMount, props = objectWithoutPropertiesLoose_1d.default(_ref, ["id", "title", "children", "bsPrefix", "className", "rootCloseEvent", "menuRole", "disabled", "active", "renderMenuOnMount"]);
  var navItemPrefix = ThemeProvider_1.useBootstrapPrefix(undefined, 'nav-item');
  return react_1d.default.createElement(Dropdown_1d.default, extends_1d.default({
    ref: ref
  }, props, {
    className: classnames_1d.default(className, navItemPrefix)
  }), react_1d.default.createElement(Dropdown_1d.default.Toggle, {
    id: id,
    eventKey: null,
    active: active,
    disabled: disabled,
    childBsPrefix: bsPrefix,
    as: NavLink_1d.default
  }, title), react_1d.default.createElement(Dropdown_1d.default.Menu, {
    role: menuRole,
    renderOnMount: renderMenuOnMount,
    rootCloseEvent: rootCloseEvent
  }, children));
});
NavDropdown.displayName = 'NavDropdown';
NavDropdown.Item = Dropdown_1d.default.Item;
NavDropdown.ItemText = Dropdown_1d.default.ItemText;
NavDropdown.Divider = Dropdown_1d.default.Divider;
NavDropdown.Header = Dropdown_1d.default.Header;
exports.default = NavDropdown;

},

// node_modules/react-bootstrap/esm/NavItem.js @73
73: function(__fusereq, exports, module){
exports.__esModule = true;
var extends_1 = __fusereq(122);
var extends_1d = __fuse.dt(extends_1);
var objectWithoutPropertiesLoose_1 = __fusereq(123);
var objectWithoutPropertiesLoose_1d = __fuse.dt(objectWithoutPropertiesLoose_1);
var classnames_1 = __fusereq(125);
var classnames_1d = __fuse.dt(classnames_1);
var react_1 = __fusereq(3);
var react_1d = __fuse.dt(react_1);
var ThemeProvider_1 = __fusereq(94);
var NavItem = react_1d.default.forwardRef(function (_ref, ref) {
  var bsPrefix = _ref.bsPrefix, className = _ref.className, children = _ref.children, _ref$as = _ref.as, Component = _ref$as === void 0 ? 'div' : _ref$as, props = objectWithoutPropertiesLoose_1d.default(_ref, ["bsPrefix", "className", "children", "as"]);
  bsPrefix = ThemeProvider_1.useBootstrapPrefix(bsPrefix, 'nav-item');
  return react_1d.default.createElement(Component, extends_1d.default({}, props, {
    ref: ref,
    className: classnames_1d.default(className, bsPrefix)
  }), children);
});
NavItem.displayName = 'NavItem';
exports.default = NavItem;

},

// node_modules/react-bootstrap/esm/NavLink.js @74
74: function(__fusereq, exports, module){
exports.__esModule = true;
var extends_1 = __fusereq(122);
var extends_1d = __fuse.dt(extends_1);
var objectWithoutPropertiesLoose_1 = __fusereq(123);
var objectWithoutPropertiesLoose_1d = __fuse.dt(objectWithoutPropertiesLoose_1);
var classnames_1 = __fusereq(125);
var classnames_1d = __fuse.dt(classnames_1);
var react_1 = __fusereq(3);
var react_1d = __fuse.dt(react_1);
var SafeAnchor_1 = __fusereq(85);
var SafeAnchor_1d = __fuse.dt(SafeAnchor_1);
var AbstractNavItem_1 = __fusereq(173);
var AbstractNavItem_1d = __fuse.dt(AbstractNavItem_1);
var ThemeProvider_1 = __fusereq(94);
var defaultProps = {
  disabled: false,
  as: SafeAnchor_1d.default
};
var NavLink = react_1d.default.forwardRef(function (_ref, ref) {
  var bsPrefix = _ref.bsPrefix, disabled = _ref.disabled, className = _ref.className, href = _ref.href, eventKey = _ref.eventKey, onSelect = _ref.onSelect, as = _ref.as, props = objectWithoutPropertiesLoose_1d.default(_ref, ["bsPrefix", "disabled", "className", "href", "eventKey", "onSelect", "as"]);
  bsPrefix = ThemeProvider_1.useBootstrapPrefix(bsPrefix, 'nav-link');
  return react_1d.default.createElement(AbstractNavItem_1d.default, extends_1d.default({}, props, {
    href: href,
    ref: ref,
    eventKey: eventKey,
    as: as,
    disabled: disabled,
    onSelect: onSelect,
    className: classnames_1d.default(className, bsPrefix, disabled && 'disabled')
  }));
});
NavLink.displayName = 'NavLink';
NavLink.defaultProps = defaultProps;
exports.default = NavLink;

},

// node_modules/react-bootstrap/esm/Overlay.js @75
75: function(__fusereq, exports, module){
exports.__esModule = true;
var extends_1 = __fusereq(122);
var extends_1d = __fuse.dt(extends_1);
var objectWithoutPropertiesLoose_1 = __fusereq(123);
var objectWithoutPropertiesLoose_1d = __fuse.dt(objectWithoutPropertiesLoose_1);
var react_1 = __fusereq(3);
var react_1d = __fuse.dt(react_1);
var classnames_1 = __fusereq(125);
var classnames_1d = __fuse.dt(classnames_1);
var Overlay_1 = __fusereq(174);
var Overlay_1d = __fuse.dt(Overlay_1);
var safeFindDOMNode_1 = __fusereq(175);
var safeFindDOMNode_1d = __fuse.dt(safeFindDOMNode_1);
var usePopperMarginModifiers_1 = __fusereq(176);
var usePopperMarginModifiers_1d = __fuse.dt(usePopperMarginModifiers_1);
var Fade_1 = __fusereq(48);
var Fade_1d = __fuse.dt(Fade_1);
var defaultProps = {
  transition: Fade_1d.default,
  rootClose: false,
  show: false,
  placement: 'top'
};
function wrapRefs(props, arrowProps) {
  var ref = props.ref;
  var aRef = arrowProps.ref;
  props.ref = ref.__wrapped || (ref.__wrapped = function (r) {
    return ref(safeFindDOMNode_1d.default(r));
  });
  arrowProps.ref = aRef.__wrapped || (aRef.__wrapped = function (r) {
    return aRef(safeFindDOMNode_1d.default(r));
  });
}
function Overlay(_ref) {
  var overlay = _ref.children, transition = _ref.transition, _ref$popperConfig = _ref.popperConfig, popperConfig = _ref$popperConfig === void 0 ? {} : _ref$popperConfig, outerProps = objectWithoutPropertiesLoose_1d.default(_ref, ["children", "transition", "popperConfig"]);
  var popperRef = react_1.useRef({});
  var _usePopperMarginModif = usePopperMarginModifiers_1d.default(), ref = _usePopperMarginModif[0], marginModifiers = _usePopperMarginModif[1];
  var actualTransition = transition === true ? Fade_1d.default : transition || null;
  return react_1d.default.createElement(Overlay_1d.default, extends_1d.default({}, outerProps, {
    ref: ref,
    popperConfig: extends_1d.default({}, popperConfig, {
      modifiers: marginModifiers.concat(popperConfig.modifiers || [])
    }),
    transition: actualTransition
  }), function (_ref2) {
    var _state$modifiersData$;
    var overlayProps = _ref2.props, arrowProps = _ref2.arrowProps, show = _ref2.show, update = _ref2.update, _ = _ref2.forceUpdate, placement = _ref2.placement, state = _ref2.state, props = objectWithoutPropertiesLoose_1d.default(_ref2, ["props", "arrowProps", "show", "update", "forceUpdate", "placement", "state"]);
    wrapRefs(overlayProps, arrowProps);
    var popper = Object.assign(popperRef.current, {
      state: state,
      scheduleUpdate: update,
      placement: placement,
      outOfBoundaries: (state == null ? void 0 : (_state$modifiersData$ = state.modifiersData.hide) == null ? void 0 : _state$modifiersData$.isReferenceHidden) || false
    });
    if (typeof overlay === 'function') return overlay(extends_1d.default({}, props, overlayProps, {
      placement: placement,
      show: show
    }, !transition && show && ({
      className: 'show'
    }), {
      popper: popper,
      arrowProps: arrowProps
    }));
    return react_1d.default.cloneElement(overlay, extends_1d.default({}, props, overlayProps, {
      placement: placement,
      arrowProps: arrowProps,
      popper: popper,
      className: classnames_1d.default(overlay.props.className, !transition && show && 'show'),
      style: extends_1d.default({}, overlay.props.style, overlayProps.style)
    }));
  });
}
Overlay.defaultProps = defaultProps;
exports.default = Overlay;

},

// node_modules/react-bootstrap/esm/OverlayTrigger.js @76
76: function(__fusereq, exports, module){
exports.__esModule = true;
var extends_1 = __fusereq(122);
var extends_1d = __fuse.dt(extends_1);
var objectWithoutPropertiesLoose_1 = __fusereq(123);
var objectWithoutPropertiesLoose_1d = __fuse.dt(objectWithoutPropertiesLoose_1);
var inheritsLoose_1 = __fusereq(177);
var inheritsLoose_1d = __fuse.dt(inheritsLoose_1);
var contains_1 = __fusereq(178);
var contains_1d = __fuse.dt(contains_1);
var react_1 = __fusereq(3);
var react_1d = __fuse.dt(react_1);
var useTimeout_1 = __fusereq(144);
var useTimeout_1d = __fuse.dt(useTimeout_1);
var safeFindDOMNode_1 = __fusereq(175);
var safeFindDOMNode_1d = __fuse.dt(safeFindDOMNode_1);
var warning_1 = __fusereq(152);
var warning_1d = __fuse.dt(warning_1);
var uncontrollable_1 = __fusereq(126);
var Overlay_1 = __fusereq(75);
var Overlay_1d = __fuse.dt(Overlay_1);
var RefHolder = (function (_React$Component) {
  inheritsLoose_1d.default(RefHolder, _React$Component);
  function RefHolder() {
    return _React$Component.apply(this, arguments) || this;
  }
  var _proto = RefHolder.prototype;
  _proto.render = function render() {
    return this.props.children;
  };
  return RefHolder;
})(react_1d.default.Component);
function normalizeDelay(delay) {
  return delay && typeof delay === 'object' ? delay : {
    show: delay,
    hide: delay
  };
}
function handleMouseOverOut(handler, args, relatedNative) {
  var e = args[0];
  var target = e.currentTarget;
  var related = e.relatedTarget || e.nativeEvent[relatedNative];
  if ((!related || related !== target) && !contains_1d.default(target, related)) {
    handler.apply(void 0, args);
  }
}
var defaultProps = {
  defaultShow: false,
  trigger: ['hover', 'focus']
};
function OverlayTrigger(_ref) {
  var trigger = _ref.trigger, overlay = _ref.overlay, children = _ref.children, _ref$popperConfig = _ref.popperConfig, popperConfig = _ref$popperConfig === void 0 ? {} : _ref$popperConfig, propsShow = _ref.show, _ref$defaultShow = _ref.defaultShow, defaultShow = _ref$defaultShow === void 0 ? false : _ref$defaultShow, onToggle = _ref.onToggle, propsDelay = _ref.delay, placement = _ref.placement, _ref$flip = _ref.flip, flip = _ref$flip === void 0 ? placement && placement.indexOf('auto') !== -1 : _ref$flip, props = objectWithoutPropertiesLoose_1d.default(_ref, ["trigger", "overlay", "children", "popperConfig", "show", "defaultShow", "onToggle", "delay", "placement", "flip"]);
  var triggerNodeRef = react_1.useRef(null);
  var timeout = useTimeout_1d.default();
  var hoverStateRef = react_1.useRef('');
  var _useUncontrolledProp = uncontrollable_1.useUncontrolledProp(propsShow, defaultShow, onToggle), show = _useUncontrolledProp[0], setShow = _useUncontrolledProp[1];
  var delay = normalizeDelay(propsDelay);
  var _ref2 = typeof children !== 'function' ? react_1d.default.Children.only(children).props : {}, onFocus = _ref2.onFocus, onBlur = _ref2.onBlur, onClick = _ref2.onClick;
  var getTarget = react_1.useCallback(function () {
    return safeFindDOMNode_1d.default(triggerNodeRef.current);
  }, []);
  var handleShow = react_1.useCallback(function () {
    timeout.clear();
    hoverStateRef.current = 'show';
    if (!delay.show) {
      setShow(true);
      return;
    }
    timeout.set(function () {
      if (hoverStateRef.current === 'show') setShow(true);
    }, delay.show);
  }, [delay.show, setShow, timeout]);
  var handleHide = react_1.useCallback(function () {
    timeout.clear();
    hoverStateRef.current = 'hide';
    if (!delay.hide) {
      setShow(false);
      return;
    }
    timeout.set(function () {
      if (hoverStateRef.current === 'hide') setShow(false);
    }, delay.hide);
  }, [delay.hide, setShow, timeout]);
  var handleFocus = react_1.useCallback(function () {
    handleShow();
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    onFocus == null ? void 0 : onFocus.apply(void 0, args);
  }, [handleShow, onFocus]);
  var handleBlur = react_1.useCallback(function () {
    handleHide();
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }
    onBlur == null ? void 0 : onBlur.apply(void 0, args);
  }, [handleHide, onBlur]);
  var handleClick = react_1.useCallback(function () {
    setShow(!show);
    if (onClick) onClick.apply(void 0, arguments);
  }, [onClick, setShow, show]);
  var handleMouseOver = react_1.useCallback(function () {
    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      args[_key3] = arguments[_key3];
    }
    handleMouseOverOut(handleShow, args, 'fromElement');
  }, [handleShow]);
  var handleMouseOut = react_1.useCallback(function () {
    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
      args[_key4] = arguments[_key4];
    }
    handleMouseOverOut(handleHide, args, 'toElement');
  }, [handleHide]);
  var triggers = trigger == null ? [] : [].concat(trigger);
  var triggerProps = {};
  if (triggers.indexOf('click') !== -1) {
    triggerProps.onClick = handleClick;
  }
  if (triggers.indexOf('focus') !== -1) {
    triggerProps.onFocus = handleFocus;
    triggerProps.onBlur = handleBlur;
  }
  if (triggers.indexOf('hover') !== -1) {
    "development" !== "production" ? warning_1d.default(triggers.length > 1, '[react-bootstrap] Specifying only the `"hover"` trigger limits the visibility of the overlay to just mouse users. Consider also including the `"focus"` trigger so that touch and keyboard only users can see the overlay as well.') : void 0;
    triggerProps.onMouseOver = handleMouseOver;
    triggerProps.onMouseOut = handleMouseOut;
  }
  return react_1d.default.createElement(react_1d.default.Fragment, null, typeof children === 'function' ? children(extends_1d.default({}, triggerProps, {
    ref: triggerNodeRef
  })) : react_1d.default.createElement(RefHolder, {
    ref: triggerNodeRef
  }, react_1.cloneElement(children, triggerProps)), react_1d.default.createElement(Overlay_1d.default, extends_1d.default({}, props, {
    show: show,
    onHide: handleHide,
    flip: flip,
    placement: placement,
    popperConfig: popperConfig,
    target: getTarget
  }), overlay));
}
OverlayTrigger.defaultProps = defaultProps;
exports.default = OverlayTrigger;

},

// node_modules/react-bootstrap/esm/PageItem.js @77
77: function(__fusereq, exports, module){
exports.__esModule = true;
var extends_1 = __fusereq(122);
var extends_1d = __fuse.dt(extends_1);
var objectWithoutPropertiesLoose_1 = __fusereq(123);
var objectWithoutPropertiesLoose_1d = __fuse.dt(objectWithoutPropertiesLoose_1);
var classnames_1 = __fusereq(125);
var classnames_1d = __fuse.dt(classnames_1);
var react_1 = __fusereq(3);
var react_1d = __fuse.dt(react_1);
var SafeAnchor_1 = __fusereq(85);
var SafeAnchor_1d = __fuse.dt(SafeAnchor_1);
var defaultProps = {
  active: false,
  disabled: false,
  activeLabel: '(current)'
};
var PageItem = react_1d.default.forwardRef(function (_ref, ref) {
  var active = _ref.active, disabled = _ref.disabled, className = _ref.className, style = _ref.style, activeLabel = _ref.activeLabel, children = _ref.children, props = objectWithoutPropertiesLoose_1d.default(_ref, ["active", "disabled", "className", "style", "activeLabel", "children"]);
  var Component = active || disabled ? 'span' : SafeAnchor_1d.default;
  return react_1d.default.createElement("li", {
    ref: ref,
    style: style,
    className: classnames_1d.default(className, 'page-item', {
      active: active,
      disabled: disabled
    })
  }, react_1d.default.createElement(Component, extends_1d.default({
    className: "page-link",
    disabled: disabled
  }, props), children, active && activeLabel && react_1d.default.createElement("span", {
    className: "sr-only"
  }, activeLabel)));
});
PageItem.defaultProps = defaultProps;
PageItem.displayName = 'PageItem';
exports.default = PageItem;
function createButton(name, defaultValue, label) {
  if (label === void 0) {
    label = name;
  }
  function Button(_ref2) {
    var children = _ref2.children, props = objectWithoutPropertiesLoose_1d.default(_ref2, ["children"]);
    return react_1d.default.createElement(PageItem, props, react_1d.default.createElement("span", {
      "aria-hidden": "true"
    }, children || defaultValue), react_1d.default.createElement("span", {
      className: "sr-only"
    }, label));
  }
  Button.displayName = name;
  return Button;
}
exports.First = createButton('First', '«');
exports.Prev = createButton('Prev', '‹', 'Previous');
exports.Ellipsis = createButton('Ellipsis', '…', 'More');
exports.Next = createButton('Next', '›');
exports.Last = createButton('Last', '»');

},

// node_modules/react-bootstrap/esm/Pagination.js @78
78: function(__fusereq, exports, module){
exports.__esModule = true;
var extends_1 = __fusereq(122);
var extends_1d = __fuse.dt(extends_1);
var objectWithoutPropertiesLoose_1 = __fusereq(123);
var objectWithoutPropertiesLoose_1d = __fuse.dt(objectWithoutPropertiesLoose_1);
var classnames_1 = __fusereq(125);
var classnames_1d = __fuse.dt(classnames_1);
var react_1 = __fusereq(3);
var react_1d = __fuse.dt(react_1);
var ThemeProvider_1 = __fusereq(94);
var PageItem_1 = __fusereq(77);
var PageItem_1d = __fuse.dt(PageItem_1);
var Pagination = react_1d.default.forwardRef(function (_ref, ref) {
  var bsPrefix = _ref.bsPrefix, className = _ref.className, children = _ref.children, size = _ref.size, props = objectWithoutPropertiesLoose_1d.default(_ref, ["bsPrefix", "className", "children", "size"]);
  var decoratedBsPrefix = ThemeProvider_1.useBootstrapPrefix(bsPrefix, 'pagination');
  return react_1d.default.createElement("ul", extends_1d.default({
    ref: ref
  }, props, {
    className: classnames_1d.default(className, decoratedBsPrefix, size && decoratedBsPrefix + "-" + size)
  }), children);
});
Pagination.First = PageItem_1.First;
Pagination.Prev = PageItem_1.Prev;
Pagination.Ellipsis = PageItem_1.Ellipsis;
Pagination.Item = PageItem_1d.default;
Pagination.Next = PageItem_1.Next;
Pagination.Last = PageItem_1.Last;
exports.default = Pagination;

},

// node_modules/react-bootstrap/esm/Popover.js @79
79: function(__fusereq, exports, module){
exports.__esModule = true;
var extends_1 = __fusereq(122);
var extends_1d = __fuse.dt(extends_1);
var objectWithoutPropertiesLoose_1 = __fusereq(123);
var objectWithoutPropertiesLoose_1d = __fuse.dt(objectWithoutPropertiesLoose_1);
var classnames_1 = __fusereq(125);
var classnames_1d = __fuse.dt(classnames_1);
var react_1 = __fusereq(3);
var react_1d = __fuse.dt(react_1);
var ThemeProvider_1 = __fusereq(94);
var PopoverTitle_1 = __fusereq(80);
var PopoverTitle_1d = __fuse.dt(PopoverTitle_1);
var PopoverContent_1 = __fusereq(81);
var PopoverContent_1d = __fuse.dt(PopoverContent_1);
var defaultProps = {
  placement: 'right'
};
var Popover = react_1d.default.forwardRef(function (_ref, ref) {
  var bsPrefix = _ref.bsPrefix, placement = _ref.placement, className = _ref.className, style = _ref.style, children = _ref.children, content = _ref.content, arrowProps = _ref.arrowProps, _ = _ref.popper, _1 = _ref.show, props = objectWithoutPropertiesLoose_1d.default(_ref, ["bsPrefix", "placement", "className", "style", "children", "content", "arrowProps", "popper", "show"]);
  var decoratedBsPrefix = ThemeProvider_1.useBootstrapPrefix(bsPrefix, 'popover');
  var _ref2 = (placement == null ? void 0 : placement.split('-')) || [], primaryPlacement = _ref2[0];
  return react_1d.default.createElement("div", extends_1d.default({
    ref: ref,
    role: "tooltip",
    style: style,
    "x-placement": primaryPlacement,
    className: classnames_1d.default(className, decoratedBsPrefix, primaryPlacement && "bs-popover-" + primaryPlacement)
  }, props), react_1d.default.createElement("div", extends_1d.default({
    className: "arrow"
  }, arrowProps)), content ? react_1d.default.createElement(PopoverContent_1d.default, null, children) : children);
});
Popover.defaultProps = defaultProps;
Popover.Title = PopoverTitle_1d.default;
Popover.Content = PopoverContent_1d.default;
exports.default = Popover;

},

// node_modules/react-bootstrap/esm/PopoverTitle.js @80
80: function(__fusereq, exports, module){
exports.__esModule = true;
var extends_1 = __fusereq(122);
var extends_1d = __fuse.dt(extends_1);
var objectWithoutPropertiesLoose_1 = __fusereq(123);
var objectWithoutPropertiesLoose_1d = __fuse.dt(objectWithoutPropertiesLoose_1);
var classnames_1 = __fusereq(125);
var classnames_1d = __fuse.dt(classnames_1);
var react_1 = __fusereq(3);
var react_1d = __fuse.dt(react_1);
var ThemeProvider_1 = __fusereq(94);
var PopoverTitle = react_1d.default.forwardRef(function (_ref, ref) {
  var _ref$as = _ref.as, Component = _ref$as === void 0 ? 'div' : _ref$as, bsPrefix = _ref.bsPrefix, className = _ref.className, children = _ref.children, props = objectWithoutPropertiesLoose_1d.default(_ref, ["as", "bsPrefix", "className", "children"]);
  bsPrefix = ThemeProvider_1.useBootstrapPrefix(bsPrefix, 'popover-header');
  return react_1d.default.createElement(Component, extends_1d.default({
    ref: ref
  }, props, {
    className: classnames_1d.default(bsPrefix, className)
  }), children);
});
exports.default = PopoverTitle;

},

// node_modules/react-bootstrap/esm/PopoverContent.js @81
81: function(__fusereq, exports, module){
exports.__esModule = true;
var extends_1 = __fusereq(122);
var extends_1d = __fuse.dt(extends_1);
var objectWithoutPropertiesLoose_1 = __fusereq(123);
var objectWithoutPropertiesLoose_1d = __fuse.dt(objectWithoutPropertiesLoose_1);
var classnames_1 = __fusereq(125);
var classnames_1d = __fuse.dt(classnames_1);
var react_1 = __fusereq(3);
var react_1d = __fuse.dt(react_1);
var ThemeProvider_1 = __fusereq(94);
var PopoverContent = react_1d.default.forwardRef(function (_ref, ref) {
  var _ref$as = _ref.as, Component = _ref$as === void 0 ? 'div' : _ref$as, bsPrefix = _ref.bsPrefix, className = _ref.className, children = _ref.children, props = objectWithoutPropertiesLoose_1d.default(_ref, ["as", "bsPrefix", "className", "children"]);
  bsPrefix = ThemeProvider_1.useBootstrapPrefix(bsPrefix, 'popover-body');
  return react_1d.default.createElement(Component, extends_1d.default({
    ref: ref
  }, props, {
    className: classnames_1d.default(className, bsPrefix)
  }), children);
});
exports.default = PopoverContent;

},

// node_modules/react-bootstrap/esm/ProgressBar.js @82
82: function(__fusereq, exports, module){
exports.__esModule = true;
var extends_1 = __fusereq(122);
var extends_1d = __fuse.dt(extends_1);
var objectWithoutPropertiesLoose_1 = __fusereq(123);
var objectWithoutPropertiesLoose_1d = __fuse.dt(objectWithoutPropertiesLoose_1);
var classnames_1 = __fusereq(125);
var classnames_1d = __fuse.dt(classnames_1);
var react_1 = __fusereq(3);
var react_1d = __fuse.dt(react_1);
var ThemeProvider_1 = __fusereq(94);
var ElementChildren_1 = __fusereq(146);
var ROUND_PRECISION = 1000;
function onlyProgressBar(props, propName, componentName) {
  var children = props[propName];
  if (!children) {
    return null;
  }
  var error = null;
  react_1d.default.Children.forEach(children, function (child) {
    if (error) {
      return;
    }
    var element = react_1d.default.createElement(ProgressBar, null);
    if (child.type === element.type) return;
    var childType = child.type;
    var childIdentifier = react_1d.default.isValidElement(child) ? childType.displayName || childType.name || childType : child;
    error = new Error("Children of " + componentName + " can contain only ProgressBar " + ("components. Found " + childIdentifier + "."));
  });
  return error;
}
var defaultProps = {
  min: 0,
  max: 100,
  animated: false,
  isChild: false,
  srOnly: false,
  striped: false
};
function getPercentage(now, min, max) {
  var percentage = (now - min) / (max - min) * 100;
  return Math.round(percentage * ROUND_PRECISION) / ROUND_PRECISION;
}
function renderProgressBar(_ref, ref) {
  var _classNames;
  var min = _ref.min, now = _ref.now, max = _ref.max, label = _ref.label, srOnly = _ref.srOnly, striped = _ref.striped, animated = _ref.animated, className = _ref.className, style = _ref.style, variant = _ref.variant, bsPrefix = _ref.bsPrefix, props = objectWithoutPropertiesLoose_1d.default(_ref, ["min", "now", "max", "label", "srOnly", "striped", "animated", "className", "style", "variant", "bsPrefix"]);
  return react_1d.default.createElement("div", extends_1d.default({
    ref: ref
  }, props, {
    role: "progressbar",
    className: classnames_1d.default(className, bsPrefix + "-bar", (_classNames = {}, _classNames["bg-" + variant] = variant, _classNames[bsPrefix + "-bar-animated"] = animated, _classNames[bsPrefix + "-bar-striped"] = animated || striped, _classNames)),
    style: extends_1d.default({
      width: getPercentage(now, min, max) + "%"
    }, style),
    "aria-valuenow": now,
    "aria-valuemin": min,
    "aria-valuemax": max
  }), srOnly ? react_1d.default.createElement("span", {
    className: "sr-only"
  }, label) : label);
}
var ProgressBar = react_1d.default.forwardRef(function (_ref2, ref) {
  var isChild = _ref2.isChild, props = objectWithoutPropertiesLoose_1d.default(_ref2, ["isChild"]);
  props.bsPrefix = ThemeProvider_1.useBootstrapPrefix(props.bsPrefix, 'progress');
  if (isChild) {
    return renderProgressBar(props, ref);
  }
  var min = props.min, now = props.now, max = props.max, label = props.label, srOnly = props.srOnly, striped = props.striped, animated = props.animated, bsPrefix = props.bsPrefix, variant = props.variant, className = props.className, children = props.children, wrapperProps = objectWithoutPropertiesLoose_1d.default(props, ["min", "now", "max", "label", "srOnly", "striped", "animated", "bsPrefix", "variant", "className", "children"]);
  return react_1d.default.createElement("div", extends_1d.default({
    ref: ref
  }, wrapperProps, {
    className: classnames_1d.default(className, bsPrefix)
  }), children ? ElementChildren_1.map(children, function (child) {
    return react_1.cloneElement(child, {
      isChild: true
    });
  }) : renderProgressBar({
    min: min,
    now: now,
    max: max,
    label: label,
    srOnly: srOnly,
    striped: striped,
    animated: animated,
    bsPrefix: bsPrefix,
    variant: variant
  }, ref));
});
ProgressBar.displayName = 'ProgressBar';
ProgressBar.defaultProps = defaultProps;
exports.default = ProgressBar;

},

// node_modules/react-bootstrap/esm/ResponsiveEmbed.js @83
83: function(__fusereq, exports, module){
exports.__esModule = true;
var extends_1 = __fusereq(122);
var extends_1d = __fuse.dt(extends_1);
var objectWithoutPropertiesLoose_1 = __fusereq(123);
var objectWithoutPropertiesLoose_1d = __fuse.dt(objectWithoutPropertiesLoose_1);
var classnames_1 = __fusereq(125);
var classnames_1d = __fuse.dt(classnames_1);
var react_1 = __fusereq(3);
var react_1d = __fuse.dt(react_1);
var ThemeProvider_1 = __fusereq(94);
var defaultProps = {
  aspectRatio: '1by1'
};
var ResponsiveEmbed = react_1d.default.forwardRef(function (_ref, ref) {
  var bsPrefix = _ref.bsPrefix, className = _ref.className, children = _ref.children, aspectRatio = _ref.aspectRatio, props = objectWithoutPropertiesLoose_1d.default(_ref, ["bsPrefix", "className", "children", "aspectRatio"]);
  var decoratedBsPrefix = ThemeProvider_1.useBootstrapPrefix(bsPrefix, 'embed-responsive');
  var child = react_1d.default.Children.only(children);
  return react_1d.default.createElement("div", extends_1d.default({
    ref: ref
  }, props, {
    className: classnames_1d.default(decoratedBsPrefix, className, aspectRatio && decoratedBsPrefix + "-" + aspectRatio)
  }), react_1d.default.cloneElement(child, {
    className: classnames_1d.default(child.props.className, decoratedBsPrefix + "-item")
  }));
});
ResponsiveEmbed.defaultProps = defaultProps;
exports.default = ResponsiveEmbed;

},

// node_modules/react-bootstrap/esm/Row.js @84
84: function(__fusereq, exports, module){
exports.__esModule = true;
var extends_1 = __fusereq(122);
var extends_1d = __fuse.dt(extends_1);
var objectWithoutPropertiesLoose_1 = __fusereq(123);
var objectWithoutPropertiesLoose_1d = __fuse.dt(objectWithoutPropertiesLoose_1);
var classnames_1 = __fusereq(125);
var classnames_1d = __fuse.dt(classnames_1);
var react_1 = __fusereq(3);
var react_1d = __fuse.dt(react_1);
var ThemeProvider_1 = __fusereq(94);
var DEVICE_SIZES = ['xl', 'lg', 'md', 'sm', 'xs'];
var defaultProps = {
  noGutters: false
};
var Row = react_1d.default.forwardRef(function (_ref, ref) {
  var bsPrefix = _ref.bsPrefix, className = _ref.className, noGutters = _ref.noGutters, _ref$as = _ref.as, Component = _ref$as === void 0 ? 'div' : _ref$as, props = objectWithoutPropertiesLoose_1d.default(_ref, ["bsPrefix", "className", "noGutters", "as"]);
  var decoratedBsPrefix = ThemeProvider_1.useBootstrapPrefix(bsPrefix, 'row');
  var sizePrefix = decoratedBsPrefix + "-cols";
  var classes = [];
  DEVICE_SIZES.forEach(function (brkPoint) {
    var propValue = props[brkPoint];
    delete props[brkPoint];
    var cols;
    if (propValue != null && typeof propValue === 'object') {
      cols = propValue.cols;
    } else {
      cols = propValue;
    }
    var infix = brkPoint !== 'xs' ? "-" + brkPoint : '';
    if (cols != null) classes.push("" + sizePrefix + infix + "-" + cols);
  });
  return react_1d.default.createElement(Component, extends_1d.default({
    ref: ref
  }, props, {
    className: classnames_1d.default.apply(void 0, [className, decoratedBsPrefix, noGutters && 'no-gutters'].concat(classes))
  }));
});
Row.displayName = 'Row';
Row.defaultProps = defaultProps;
exports.default = Row;

},

// node_modules/react-bootstrap/esm/SafeAnchor.js @85
85: function(__fusereq, exports, module){
exports.__esModule = true;
var extends_1 = __fusereq(122);
var extends_1d = __fuse.dt(extends_1);
var objectWithoutPropertiesLoose_1 = __fusereq(123);
var objectWithoutPropertiesLoose_1d = __fuse.dt(objectWithoutPropertiesLoose_1);
var react_1 = __fusereq(3);
var react_1d = __fuse.dt(react_1);
var createChainedFunction_1 = __fusereq(136);
var createChainedFunction_1d = __fuse.dt(createChainedFunction_1);
function isTrivialHref(href) {
  return !href || href.trim() === '#';
}
var SafeAnchor = react_1d.default.forwardRef(function (_ref, ref) {
  var _ref$as = _ref.as, Component = _ref$as === void 0 ? 'a' : _ref$as, disabled = _ref.disabled, onKeyDown = _ref.onKeyDown, props = objectWithoutPropertiesLoose_1d.default(_ref, ["as", "disabled", "onKeyDown"]);
  var handleClick = function handleClick(event) {
    var href = props.href, onClick = props.onClick;
    if (disabled || isTrivialHref(href)) {
      event.preventDefault();
    }
    if (disabled) {
      event.stopPropagation();
      return;
    }
    if (onClick) {
      onClick(event);
    }
  };
  var handleKeyDown = function handleKeyDown(event) {
    if (event.key === ' ') {
      event.preventDefault();
      handleClick(event);
    }
  };
  if (isTrivialHref(props.href)) {
    props.role = props.role || 'button';
    props.href = props.href || '#';
  }
  if (disabled) {
    props.tabIndex = -1;
    props['aria-disabled'] = true;
  }
  return react_1d.default.createElement(Component, extends_1d.default({
    ref: ref
  }, props, {
    onClick: handleClick,
    onKeyDown: createChainedFunction_1d.default(handleKeyDown, onKeyDown)
  }));
});
SafeAnchor.displayName = 'SafeAnchor';
exports.default = SafeAnchor;

},

// node_modules/react-bootstrap/esm/Spinner.js @86
86: function(__fusereq, exports, module){
exports.__esModule = true;
var extends_1 = __fusereq(122);
var extends_1d = __fuse.dt(extends_1);
var objectWithoutPropertiesLoose_1 = __fusereq(123);
var objectWithoutPropertiesLoose_1d = __fuse.dt(objectWithoutPropertiesLoose_1);
var classnames_1 = __fusereq(125);
var classnames_1d = __fuse.dt(classnames_1);
var react_1 = __fusereq(3);
var react_1d = __fuse.dt(react_1);
var ThemeProvider_1 = __fusereq(94);
var Spinner = react_1d.default.forwardRef(function (_ref, ref) {
  var bsPrefix = _ref.bsPrefix, variant = _ref.variant, animation = _ref.animation, size = _ref.size, children = _ref.children, _ref$as = _ref.as, Component = _ref$as === void 0 ? 'div' : _ref$as, className = _ref.className, props = objectWithoutPropertiesLoose_1d.default(_ref, ["bsPrefix", "variant", "animation", "size", "children", "as", "className"]);
  bsPrefix = ThemeProvider_1.useBootstrapPrefix(bsPrefix, 'spinner');
  var bsSpinnerPrefix = bsPrefix + "-" + animation;
  return react_1d.default.createElement(Component, extends_1d.default({
    ref: ref
  }, props, {
    className: classnames_1d.default(className, bsSpinnerPrefix, size && bsSpinnerPrefix + "-" + size, variant && "text-" + variant)
  }), children);
});
Spinner.displayName = 'Spinner';
exports.default = Spinner;

},

// node_modules/react-bootstrap/esm/SplitButton.js @87
87: function(__fusereq, exports, module){
exports.__esModule = true;
var extends_1 = __fusereq(122);
var extends_1d = __fuse.dt(extends_1);
var objectWithoutPropertiesLoose_1 = __fusereq(123);
var objectWithoutPropertiesLoose_1d = __fuse.dt(objectWithoutPropertiesLoose_1);
var react_1 = __fusereq(3);
var react_1d = __fuse.dt(react_1);
var prop_types_1 = __fusereq(112);
var prop_types_1d = __fuse.dt(prop_types_1);
var Button_1 = __fusereq(33);
var Button_1d = __fuse.dt(Button_1);
var ButtonGroup_1 = __fusereq(34);
var ButtonGroup_1d = __fuse.dt(ButtonGroup_1);
var Dropdown_1 = __fusereq(46);
var Dropdown_1d = __fuse.dt(Dropdown_1);
var DropdownMenu_1 = __fusereq(140);
var propTypes = {
  id: prop_types_1d.default.any,
  toggleLabel: prop_types_1d.default.string,
  href: prop_types_1d.default.string,
  target: prop_types_1d.default.string,
  onClick: prop_types_1d.default.func,
  title: prop_types_1d.default.node.isRequired,
  type: prop_types_1d.default.string,
  disabled: prop_types_1d.default.bool,
  menuAlign: DropdownMenu_1.alignPropType,
  menuRole: prop_types_1d.default.string,
  renderMenuOnMount: prop_types_1d.default.bool,
  rootCloseEvent: prop_types_1d.default.string,
  bsPrefix: prop_types_1d.default.string,
  variant: prop_types_1d.default.string,
  size: prop_types_1d.default.string
};
var defaultProps = {
  toggleLabel: 'Toggle dropdown',
  type: 'button'
};
var SplitButton = react_1d.default.forwardRef(function (_ref, ref) {
  var id = _ref.id, bsPrefix = _ref.bsPrefix, size = _ref.size, variant = _ref.variant, title = _ref.title, type = _ref.type, toggleLabel = _ref.toggleLabel, children = _ref.children, onClick = _ref.onClick, href = _ref.href, target = _ref.target, menuAlign = _ref.menuAlign, menuRole = _ref.menuRole, renderMenuOnMount = _ref.renderMenuOnMount, rootCloseEvent = _ref.rootCloseEvent, props = objectWithoutPropertiesLoose_1d.default(_ref, ["id", "bsPrefix", "size", "variant", "title", "type", "toggleLabel", "children", "onClick", "href", "target", "menuAlign", "menuRole", "renderMenuOnMount", "rootCloseEvent"]);
  return react_1d.default.createElement(Dropdown_1d.default, extends_1d.default({
    ref: ref
  }, props, {
    as: ButtonGroup_1d.default
  }), react_1d.default.createElement(Button_1d.default, {
    size: size,
    variant: variant,
    disabled: props.disabled,
    bsPrefix: bsPrefix,
    href: href,
    target: target,
    onClick: onClick,
    type: type
  }, title), react_1d.default.createElement(Dropdown_1d.default.Toggle, {
    split: true,
    id: id ? id.toString() : undefined,
    size: size,
    variant: variant,
    disabled: props.disabled,
    childBsPrefix: bsPrefix
  }, react_1d.default.createElement("span", {
    className: "sr-only"
  }, toggleLabel)), react_1d.default.createElement(Dropdown_1d.default.Menu, {
    align: menuAlign,
    role: menuRole,
    renderOnMount: renderMenuOnMount,
    rootCloseEvent: rootCloseEvent
  }, children));
});
SplitButton.propTypes = propTypes;
SplitButton.defaultProps = defaultProps;
SplitButton.displayName = 'SplitButton';
exports.default = SplitButton;

},

// node_modules/react-bootstrap/esm/Tab.js @88
88: function(__fusereq, exports, module){
exports.__esModule = true;
var inheritsLoose_1 = __fusereq(177);
var inheritsLoose_1d = __fuse.dt(inheritsLoose_1);
var react_1 = __fusereq(3);
var react_1d = __fuse.dt(react_1);
var TabContainer_1 = __fusereq(89);
var TabContainer_1d = __fuse.dt(TabContainer_1);
var TabContent_1 = __fusereq(90);
var TabContent_1d = __fuse.dt(TabContent_1);
var TabPane_1 = __fusereq(92);
var TabPane_1d = __fuse.dt(TabPane_1);
var Tab = (function (_React$Component) {
  inheritsLoose_1d.default(Tab, _React$Component);
  function Tab() {
    return _React$Component.apply(this, arguments) || this;
  }
  var _proto = Tab.prototype;
  _proto.render = function render() {
    throw new Error('ReactBootstrap: The `Tab` component is not meant to be rendered! ' + "It's an abstract component that is only valid as a direct Child of the `Tabs` Component. " + 'For custom tabs components use TabPane and TabsContainer directly');
    return null;
  };
  return Tab;
})(react_1d.default.Component);
Tab.Container = TabContainer_1d.default;
Tab.Content = TabContent_1d.default;
Tab.Pane = TabPane_1d.default;
exports.default = Tab;

},

// node_modules/react-bootstrap/esm/TabContainer.js @89
89: function(__fusereq, exports, module){
exports.__esModule = true;
var react_1 = __fusereq(3);
var react_1d = __fuse.dt(react_1);
var uncontrollable_1 = __fusereq(126);
var TabContext_1 = __fusereq(179);
var TabContext_1d = __fuse.dt(TabContext_1);
var SelectableContext_1 = __fusereq(124);
var SelectableContext_1d = __fuse.dt(SelectableContext_1);
var TabContainer = function TabContainer(props) {
  var _useUncontrolled = uncontrollable_1.useUncontrolled(props, {
    activeKey: 'onSelect'
  }), id = _useUncontrolled.id, generateCustomChildId = _useUncontrolled.generateChildId, onSelect = _useUncontrolled.onSelect, activeKey = _useUncontrolled.activeKey, transition = _useUncontrolled.transition, mountOnEnter = _useUncontrolled.mountOnEnter, unmountOnExit = _useUncontrolled.unmountOnExit, children = _useUncontrolled.children;
  var generateChildId = react_1.useMemo(function () {
    return generateCustomChildId || (function (key, type) {
      return id ? id + "-" + type + "-" + key : null;
    });
  }, [id, generateCustomChildId]);
  var tabContext = react_1.useMemo(function () {
    return {
      onSelect: onSelect,
      activeKey: activeKey,
      transition: transition,
      mountOnEnter: mountOnEnter || false,
      unmountOnExit: unmountOnExit || false,
      getControlledId: function getControlledId(key) {
        return generateChildId(key, 'tabpane');
      },
      getControllerId: function getControllerId(key) {
        return generateChildId(key, 'tab');
      }
    };
  }, [onSelect, activeKey, transition, mountOnEnter, unmountOnExit, generateChildId]);
  return react_1d.default.createElement(TabContext_1d.default.Provider, {
    value: tabContext
  }, react_1d.default.createElement(SelectableContext_1d.default.Provider, {
    value: onSelect || null
  }, children));
};
exports.default = TabContainer;

},

// node_modules/react-bootstrap/esm/TabContent.js @90
90: function(__fusereq, exports, module){
exports.__esModule = true;
var extends_1 = __fusereq(122);
var extends_1d = __fuse.dt(extends_1);
var objectWithoutPropertiesLoose_1 = __fusereq(123);
var objectWithoutPropertiesLoose_1d = __fuse.dt(objectWithoutPropertiesLoose_1);
var classnames_1 = __fusereq(125);
var classnames_1d = __fuse.dt(classnames_1);
var react_1 = __fusereq(3);
var react_1d = __fuse.dt(react_1);
var ThemeProvider_1 = __fusereq(94);
var TabContent = react_1d.default.forwardRef(function (_ref, ref) {
  var bsPrefix = _ref.bsPrefix, _ref$as = _ref.as, Component = _ref$as === void 0 ? 'div' : _ref$as, className = _ref.className, props = objectWithoutPropertiesLoose_1d.default(_ref, ["bsPrefix", "as", "className"]);
  var decoratedBsPrefix = ThemeProvider_1.useBootstrapPrefix(bsPrefix, 'tab-content');
  return react_1d.default.createElement(Component, extends_1d.default({
    ref: ref
  }, props, {
    className: classnames_1d.default(className, decoratedBsPrefix)
  }));
});
exports.default = TabContent;

},

// node_modules/react-bootstrap/esm/Table.js @91
91: function(__fusereq, exports, module){
exports.__esModule = true;
var extends_1 = __fusereq(122);
var extends_1d = __fuse.dt(extends_1);
var objectWithoutPropertiesLoose_1 = __fusereq(123);
var objectWithoutPropertiesLoose_1d = __fuse.dt(objectWithoutPropertiesLoose_1);
var classnames_1 = __fusereq(125);
var classnames_1d = __fuse.dt(classnames_1);
var react_1 = __fusereq(3);
var react_1d = __fuse.dt(react_1);
var ThemeProvider_1 = __fusereq(94);
var Table = react_1d.default.forwardRef(function (_ref, ref) {
  var bsPrefix = _ref.bsPrefix, className = _ref.className, striped = _ref.striped, bordered = _ref.bordered, borderless = _ref.borderless, hover = _ref.hover, size = _ref.size, variant = _ref.variant, responsive = _ref.responsive, props = objectWithoutPropertiesLoose_1d.default(_ref, ["bsPrefix", "className", "striped", "bordered", "borderless", "hover", "size", "variant", "responsive"]);
  var decoratedBsPrefix = ThemeProvider_1.useBootstrapPrefix(bsPrefix, 'table');
  var classes = classnames_1d.default(className, decoratedBsPrefix, variant && decoratedBsPrefix + "-" + variant, size && decoratedBsPrefix + "-" + size, striped && decoratedBsPrefix + "-striped", bordered && decoratedBsPrefix + "-bordered", borderless && decoratedBsPrefix + "-borderless", hover && decoratedBsPrefix + "-hover");
  var table = react_1d.default.createElement("table", extends_1d.default({}, props, {
    className: classes,
    ref: ref
  }));
  if (responsive) {
    var responsiveClass = decoratedBsPrefix + "-responsive";
    if (typeof responsive === 'string') {
      responsiveClass = responsiveClass + "-" + responsive;
    }
    return react_1d.default.createElement("div", {
      className: responsiveClass
    }, table);
  }
  return table;
});
exports.default = Table;

},

// node_modules/react-bootstrap/esm/TabPane.js @92
92: function(__fusereq, exports, module){
exports.__esModule = true;
var extends_1 = __fusereq(122);
var extends_1d = __fuse.dt(extends_1);
var objectWithoutPropertiesLoose_1 = __fusereq(123);
var objectWithoutPropertiesLoose_1d = __fuse.dt(objectWithoutPropertiesLoose_1);
var classnames_1 = __fusereq(125);
var classnames_1d = __fuse.dt(classnames_1);
var react_1 = __fusereq(3);
var react_1d = __fuse.dt(react_1);
var ThemeProvider_1 = __fusereq(94);
var TabContext_1 = __fusereq(179);
var TabContext_1d = __fuse.dt(TabContext_1);
var SelectableContext_1 = __fusereq(124);
var SelectableContext_1d = __fuse.dt(SelectableContext_1);
var Fade_1 = __fusereq(48);
var Fade_1d = __fuse.dt(Fade_1);
function useTabContext(props) {
  var context = react_1.useContext(TabContext_1d.default);
  if (!context) return props;
  var activeKey = context.activeKey, getControlledId = context.getControlledId, getControllerId = context.getControllerId, rest = objectWithoutPropertiesLoose_1d.default(context, ["activeKey", "getControlledId", "getControllerId"]);
  var shouldTransition = props.transition !== false && rest.transition !== false;
  var key = SelectableContext_1.makeEventKey(props.eventKey);
  return extends_1d.default({}, props, {
    active: props.active == null && key != null ? SelectableContext_1.makeEventKey(activeKey) === key : props.active,
    id: getControlledId(props.eventKey),
    'aria-labelledby': getControllerId(props.eventKey),
    transition: shouldTransition && (props.transition || rest.transition || Fade_1d.default),
    mountOnEnter: props.mountOnEnter != null ? props.mountOnEnter : rest.mountOnEnter,
    unmountOnExit: props.unmountOnExit != null ? props.unmountOnExit : rest.unmountOnExit
  });
}
var TabPane = react_1d.default.forwardRef(function (props, ref) {
  var _useTabContext = useTabContext(props), bsPrefix = _useTabContext.bsPrefix, className = _useTabContext.className, active = _useTabContext.active, onEnter = _useTabContext.onEnter, onEntering = _useTabContext.onEntering, onEntered = _useTabContext.onEntered, onExit = _useTabContext.onExit, onExiting = _useTabContext.onExiting, onExited = _useTabContext.onExited, mountOnEnter = _useTabContext.mountOnEnter, unmountOnExit = _useTabContext.unmountOnExit, Transition = _useTabContext.transition, _useTabContext$as = _useTabContext.as, Component = _useTabContext$as === void 0 ? 'div' : _useTabContext$as, _ = _useTabContext.eventKey, rest = objectWithoutPropertiesLoose_1d.default(_useTabContext, ["bsPrefix", "className", "active", "onEnter", "onEntering", "onEntered", "onExit", "onExiting", "onExited", "mountOnEnter", "unmountOnExit", "transition", "as", "eventKey"]);
  var prefix = ThemeProvider_1.useBootstrapPrefix(bsPrefix, 'tab-pane');
  if (!active && !Transition && unmountOnExit) return null;
  var pane = react_1d.default.createElement(Component, extends_1d.default({}, rest, {
    ref: ref,
    role: "tabpanel",
    "aria-hidden": !active,
    className: classnames_1d.default(className, prefix, {
      active: active
    })
  }));
  if (Transition) pane = react_1d.default.createElement(Transition, {
    in: active,
    onEnter: onEnter,
    onEntering: onEntering,
    onEntered: onEntered,
    onExit: onExit,
    onExiting: onExiting,
    onExited: onExited,
    mountOnEnter: mountOnEnter,
    unmountOnExit: unmountOnExit
  }, pane);
  return react_1d.default.createElement(TabContext_1d.default.Provider, {
    value: null
  }, react_1d.default.createElement(SelectableContext_1d.default.Provider, {
    value: null
  }, pane));
});
TabPane.displayName = 'TabPane';
exports.default = TabPane;

},

// node_modules/react-bootstrap/esm/Tabs.js @93
93: function(__fusereq, exports, module){
exports.__esModule = true;
var extends_1 = __fusereq(122);
var extends_1d = __fuse.dt(extends_1);
var objectWithoutPropertiesLoose_1 = __fusereq(123);
var objectWithoutPropertiesLoose_1d = __fuse.dt(objectWithoutPropertiesLoose_1);
var react_1 = __fusereq(3);
var react_1d = __fuse.dt(react_1);
var uncontrollable_1 = __fusereq(126);
var Nav_1 = __fusereq(69);
var Nav_1d = __fuse.dt(Nav_1);
var NavLink_1 = __fusereq(74);
var NavLink_1d = __fuse.dt(NavLink_1);
var NavItem_1 = __fusereq(73);
var NavItem_1d = __fuse.dt(NavItem_1);
var TabContainer_1 = __fusereq(89);
var TabContainer_1d = __fuse.dt(TabContainer_1);
var TabContent_1 = __fusereq(90);
var TabContent_1d = __fuse.dt(TabContent_1);
var TabPane_1 = __fusereq(92);
var TabPane_1d = __fuse.dt(TabPane_1);
var ElementChildren_1 = __fusereq(146);
var defaultProps = {
  variant: 'tabs',
  mountOnEnter: false,
  unmountOnExit: false
};
function getDefaultActiveKey(children) {
  var defaultActiveKey;
  ElementChildren_1.forEach(children, function (child) {
    if (defaultActiveKey == null) {
      defaultActiveKey = child.props.eventKey;
    }
  });
  return defaultActiveKey;
}
function renderTab(child) {
  var _child$props = child.props, title = _child$props.title, eventKey = _child$props.eventKey, disabled = _child$props.disabled, tabClassName = _child$props.tabClassName, id = _child$props.id;
  if (title == null) {
    return null;
  }
  return react_1d.default.createElement(NavItem_1d.default, {
    as: NavLink_1d.default,
    eventKey: eventKey,
    disabled: disabled,
    id: id,
    className: tabClassName
  }, title);
}
var Tabs = function Tabs(props) {
  var _useUncontrolled = uncontrollable_1.useUncontrolled(props, {
    activeKey: 'onSelect'
  }), id = _useUncontrolled.id, onSelect = _useUncontrolled.onSelect, transition = _useUncontrolled.transition, mountOnEnter = _useUncontrolled.mountOnEnter, unmountOnExit = _useUncontrolled.unmountOnExit, children = _useUncontrolled.children, _useUncontrolled$acti = _useUncontrolled.activeKey, activeKey = _useUncontrolled$acti === void 0 ? getDefaultActiveKey(children) : _useUncontrolled$acti, controlledProps = objectWithoutPropertiesLoose_1d.default(_useUncontrolled, ["id", "onSelect", "transition", "mountOnEnter", "unmountOnExit", "children", "activeKey"]);
  return react_1d.default.createElement(TabContainer_1d.default, {
    id: id,
    activeKey: activeKey,
    onSelect: onSelect,
    transition: transition,
    mountOnEnter: mountOnEnter,
    unmountOnExit: unmountOnExit
  }, react_1d.default.createElement(Nav_1d.default, extends_1d.default({}, controlledProps, {
    role: "tablist",
    as: "nav"
  }), ElementChildren_1.map(children, renderTab)), react_1d.default.createElement(TabContent_1d.default, null, ElementChildren_1.map(children, function (child) {
    var childProps = extends_1d.default({}, child.props);
    delete childProps.title;
    delete childProps.disabled;
    delete childProps.tabClassName;
    return react_1d.default.createElement(TabPane_1d.default, childProps);
  })));
};
Tabs.defaultProps = defaultProps;
Tabs.displayName = 'Tabs';
exports.default = Tabs;

},

// node_modules/react-bootstrap/esm/ThemeProvider.js @94
94: function(__fusereq, exports, module){
exports.__esModule = true;
var extends_1 = __fusereq(122);
var extends_1d = __fuse.dt(extends_1);
var react_1 = __fusereq(3);
var react_1d = __fuse.dt(react_1);
var ThemeContext = react_1d.default.createContext({});
var Consumer = ThemeContext.Consumer, Provider = ThemeContext.Provider;
function ThemeProvider(_ref) {
  var prefixes = _ref.prefixes, children = _ref.children;
  var copiedPrefixes = react_1.useMemo(function () {
    return extends_1d.default({}, prefixes);
  }, [prefixes]);
  return react_1d.default.createElement(Provider, {
    value: copiedPrefixes
  }, children);
}
function useBootstrapPrefix(prefix, defaultPrefix) {
  var prefixes = react_1.useContext(ThemeContext);
  return prefix || prefixes[defaultPrefix] || defaultPrefix;
}
exports.useBootstrapPrefix = useBootstrapPrefix;
function createBootstrapComponent(Component, opts) {
  if (typeof opts === 'string') opts = {
    prefix: opts
  };
  var isClassy = Component.prototype && Component.prototype.isReactComponent;
  var _opts = opts, prefix = _opts.prefix, _opts$forwardRefAs = _opts.forwardRefAs, forwardRefAs = _opts$forwardRefAs === void 0 ? isClassy ? 'ref' : 'innerRef' : _opts$forwardRefAs;
  var Wrapped = react_1d.default.forwardRef(function (_ref2, ref) {
    var props = extends_1d.default({}, _ref2);
    props[forwardRefAs] = ref;
    var bsPrefix = useBootstrapPrefix(props.bsPrefix, prefix);
    return react_1d.default.createElement(Component, extends_1d.default({}, props, {
      bsPrefix: bsPrefix
    }));
  });
  Wrapped.displayName = "Bootstrap(" + (Component.displayName || Component.name) + ")";
  return Wrapped;
}
exports.default = ThemeProvider;
exports.createBootstrapComponent = createBootstrapComponent;
exports.ThemeConsumer = Consumer;

},

// node_modules/react-bootstrap/esm/Toast.js @95
95: function(__fusereq, exports, module){
exports.__esModule = true;
var extends_1 = __fusereq(122);
var extends_1d = __fuse.dt(extends_1);
var objectWithoutPropertiesLoose_1 = __fusereq(123);
var objectWithoutPropertiesLoose_1d = __fuse.dt(objectWithoutPropertiesLoose_1);
var react_1 = __fusereq(3);
var react_1d = __fuse.dt(react_1);
var classnames_1 = __fusereq(125);
var classnames_1d = __fuse.dt(classnames_1);
var useTimeout_1 = __fusereq(144);
var useTimeout_1d = __fuse.dt(useTimeout_1);
var Fade_1 = __fusereq(48);
var Fade_1d = __fuse.dt(Fade_1);
var ToastHeader_1 = __fusereq(97);
var ToastHeader_1d = __fuse.dt(ToastHeader_1);
var ToastBody_1 = __fusereq(96);
var ToastBody_1d = __fuse.dt(ToastBody_1);
var ThemeProvider_1 = __fusereq(94);
var ToastContext_1 = __fusereq(180);
var ToastContext_1d = __fuse.dt(ToastContext_1);
var Toast = react_1d.default.forwardRef(function (_ref, ref) {
  var bsPrefix = _ref.bsPrefix, className = _ref.className, children = _ref.children, _ref$transition = _ref.transition, Transition = _ref$transition === void 0 ? Fade_1d.default : _ref$transition, _ref$show = _ref.show, show = _ref$show === void 0 ? true : _ref$show, _ref$animation = _ref.animation, animation = _ref$animation === void 0 ? true : _ref$animation, _ref$delay = _ref.delay, delay = _ref$delay === void 0 ? 3000 : _ref$delay, _ref$autohide = _ref.autohide, autohide = _ref$autohide === void 0 ? false : _ref$autohide, onClose = _ref.onClose, props = objectWithoutPropertiesLoose_1d.default(_ref, ["bsPrefix", "className", "children", "transition", "show", "animation", "delay", "autohide", "onClose"]);
  bsPrefix = ThemeProvider_1.useBootstrapPrefix(bsPrefix, 'toast');
  var delayRef = react_1.useRef(delay);
  var onCloseRef = react_1.useRef(onClose);
  react_1.useEffect(function () {
    delayRef.current = delay;
    onCloseRef.current = onClose;
  }, [delay, onClose]);
  var autohideTimeout = useTimeout_1d.default();
  var autohideToast = !!(autohide && show);
  var autohideFunc = react_1.useCallback(function () {
    if (autohideToast) {
      onCloseRef.current == null ? void 0 : onCloseRef.current();
    }
  }, [autohideToast]);
  react_1.useEffect(function () {
    autohideTimeout.set(autohideFunc, delayRef.current);
  }, [autohideTimeout, autohideFunc]);
  var toastContext = react_1.useMemo(function () {
    return {
      onClose: onClose
    };
  }, [onClose]);
  var hasAnimation = !!(Transition && animation);
  var toast = react_1d.default.createElement("div", extends_1d.default({}, props, {
    ref: ref,
    className: classnames_1d.default(bsPrefix, className, !hasAnimation && (show ? 'show' : 'hide')),
    role: "alert",
    "aria-live": "assertive",
    "aria-atomic": "true"
  }), children);
  return react_1d.default.createElement(ToastContext_1d.default.Provider, {
    value: toastContext
  }, hasAnimation && Transition ? react_1d.default.createElement(Transition, {
    in: show,
    unmountOnExit: true
  }, toast) : toast);
});
Toast.displayName = 'Toast';
exports.default = Object.assign(Toast, {
  Body: ToastBody_1d.default,
  Header: ToastHeader_1d.default
});

},

// node_modules/react-bootstrap/esm/ToastBody.js @96
96: function(__fusereq, exports, module){
exports.__esModule = true;
var createWithBsPrefix_1 = __fusereq(129);
var createWithBsPrefix_1d = __fuse.dt(createWithBsPrefix_1);
exports.default = createWithBsPrefix_1d.default('toast-body');

},

// node_modules/react-bootstrap/esm/ToastHeader.js @97
97: function(__fusereq, exports, module){
exports.__esModule = true;
var extends_1 = __fusereq(122);
var extends_1d = __fuse.dt(extends_1);
var objectWithoutPropertiesLoose_1 = __fusereq(123);
var objectWithoutPropertiesLoose_1d = __fuse.dt(objectWithoutPropertiesLoose_1);
var classnames_1 = __fusereq(125);
var classnames_1d = __fuse.dt(classnames_1);
var react_1 = __fusereq(3);
var react_1d = __fuse.dt(react_1);
var useEventCallback_1 = __fusereq(127);
var useEventCallback_1d = __fuse.dt(useEventCallback_1);
var ThemeProvider_1 = __fusereq(94);
var CloseButton_1 = __fusereq(43);
var CloseButton_1d = __fuse.dt(CloseButton_1);
var ToastContext_1 = __fusereq(180);
var ToastContext_1d = __fuse.dt(ToastContext_1);
var defaultProps = {
  closeLabel: 'Close',
  closeButton: true
};
var ToastHeader = react_1d.default.forwardRef(function (_ref, ref) {
  var bsPrefix = _ref.bsPrefix, closeLabel = _ref.closeLabel, closeButton = _ref.closeButton, className = _ref.className, children = _ref.children, props = objectWithoutPropertiesLoose_1d.default(_ref, ["bsPrefix", "closeLabel", "closeButton", "className", "children"]);
  bsPrefix = ThemeProvider_1.useBootstrapPrefix(bsPrefix, 'toast-header');
  var context = react_1.useContext(ToastContext_1d.default);
  var handleClick = useEventCallback_1d.default(function (e) {
    if (context && context.onClose) {
      context.onClose(e);
    }
  });
  return react_1d.default.createElement("div", extends_1d.default({
    ref: ref
  }, props, {
    className: classnames_1d.default(bsPrefix, className)
  }), children, closeButton && react_1d.default.createElement(CloseButton_1d.default, {
    label: closeLabel,
    onClick: handleClick,
    className: "ml-2 mb-1",
    "data-dismiss": "toast"
  }));
});
ToastHeader.displayName = 'ToastHeader';
ToastHeader.defaultProps = defaultProps;
exports.default = ToastHeader;

},

// node_modules/react-bootstrap/esm/ToggleButton.js @98
98: function(__fusereq, exports, module){
exports.__esModule = true;
var extends_1 = __fusereq(122);
var extends_1d = __fuse.dt(extends_1);
var objectWithoutPropertiesLoose_1 = __fusereq(123);
var objectWithoutPropertiesLoose_1d = __fuse.dt(objectWithoutPropertiesLoose_1);
var classnames_1 = __fusereq(125);
var classnames_1d = __fuse.dt(classnames_1);
var react_1 = __fusereq(3);
var react_1d = __fuse.dt(react_1);
var Button_1 = __fusereq(33);
var Button_1d = __fuse.dt(Button_1);
var noop = function noop() {
  return undefined;
};
var ToggleButton = react_1d.default.forwardRef(function (_ref, ref) {
  var children = _ref.children, name = _ref.name, className = _ref.className, checked = _ref.checked, type = _ref.type, onChange = _ref.onChange, value = _ref.value, disabled = _ref.disabled, inputRef = _ref.inputRef, props = objectWithoutPropertiesLoose_1d.default(_ref, ["children", "name", "className", "checked", "type", "onChange", "value", "disabled", "inputRef"]);
  var _useState = react_1.useState(false), focused = _useState[0], setFocused = _useState[1];
  var handleFocus = react_1.useCallback(function (e) {
    if (e.target.tagName === 'INPUT') setFocused(true);
  }, []);
  var handleBlur = react_1.useCallback(function (e) {
    if (e.target.tagName === 'INPUT') setFocused(false);
  }, []);
  return react_1d.default.createElement(Button_1d.default, extends_1d.default({}, props, {
    ref: ref,
    className: classnames_1d.default(className, focused && 'focus', disabled && 'disabled'),
    type: undefined,
    active: !!checked,
    as: "label"
  }), react_1d.default.createElement("input", {
    name: name,
    type: type,
    value: value,
    ref: inputRef,
    autoComplete: "off",
    checked: !!checked,
    disabled: !!disabled,
    onFocus: handleFocus,
    onBlur: handleBlur,
    onChange: onChange || noop
  }), children);
});
ToggleButton.displayName = 'ToggleButton';
exports.default = ToggleButton;

},

// node_modules/react-bootstrap/esm/ToggleButtonGroup.js @99
99: function(__fusereq, exports, module){
exports.__esModule = true;
var extends_1 = __fusereq(122);
var extends_1d = __fuse.dt(extends_1);
var objectWithoutPropertiesLoose_1 = __fusereq(123);
var objectWithoutPropertiesLoose_1d = __fuse.dt(objectWithoutPropertiesLoose_1);
var react_1 = __fusereq(3);
var react_1d = __fuse.dt(react_1);
var invariant_1 = __fusereq(181);
var invariant_1d = __fuse.dt(invariant_1);
var uncontrollable_1 = __fusereq(126);
var createChainedFunction_1 = __fusereq(136);
var createChainedFunction_1d = __fuse.dt(createChainedFunction_1);
var ElementChildren_1 = __fusereq(146);
var ButtonGroup_1 = __fusereq(34);
var ButtonGroup_1d = __fuse.dt(ButtonGroup_1);
var ToggleButton_1 = __fusereq(98);
var ToggleButton_1d = __fuse.dt(ToggleButton_1);
var defaultProps = {
  type: 'radio',
  vertical: false
};
var ToggleButtonGroup = react_1d.default.forwardRef(function (props, ref) {
  var _useUncontrolled = uncontrollable_1.useUncontrolled(props, {
    value: 'onChange'
  }), children = _useUncontrolled.children, type = _useUncontrolled.type, name = _useUncontrolled.name, value = _useUncontrolled.value, onChange = _useUncontrolled.onChange, controlledProps = objectWithoutPropertiesLoose_1d.default(_useUncontrolled, ["children", "type", "name", "value", "onChange"]);
  var getValues = function getValues() {
    return value == null ? [] : [].concat(value);
  };
  var handleToggle = function handleToggle(inputVal, event) {
    if (!onChange) {
      return;
    }
    var values = getValues();
    var isActive = values.indexOf(inputVal) !== -1;
    if (type === 'radio') {
      if (!isActive && onChange) onChange(inputVal, event);
      return;
    }
    if (isActive) {
      onChange(values.filter(function (n) {
        return n !== inputVal;
      }), event);
    } else {
      onChange([].concat(values, [inputVal]), event);
    }
  };
  !(type !== 'radio' || !!name) ? "development" !== "production" ? invariant_1d.default(false, 'A `name` is required to group the toggle buttons when the `type` ' + 'is set to "radio"') : invariant_1d.default(false) : void 0;
  return react_1d.default.createElement(ButtonGroup_1d.default, extends_1d.default({}, controlledProps, {
    ref: ref,
    toggle: true
  }), ElementChildren_1.map(children, function (child) {
    var values = getValues();
    var _child$props = child.props, childVal = _child$props.value, childOnChange = _child$props.onChange;
    var handler = function handler(e) {
      return handleToggle(childVal, e);
    };
    return react_1d.default.cloneElement(child, {
      type: type,
      name: child.name || name,
      checked: values.indexOf(childVal) !== -1,
      onChange: createChainedFunction_1d.default(childOnChange, handler)
    });
  }));
});
ToggleButtonGroup.defaultProps = defaultProps;
ToggleButtonGroup.Button = ToggleButton_1d.default;
exports.default = ToggleButtonGroup;

},

// node_modules/react-bootstrap/esm/Tooltip.js @100
100: function(__fusereq, exports, module){
exports.__esModule = true;
var extends_1 = __fusereq(122);
var extends_1d = __fuse.dt(extends_1);
var objectWithoutPropertiesLoose_1 = __fusereq(123);
var objectWithoutPropertiesLoose_1d = __fuse.dt(objectWithoutPropertiesLoose_1);
var classnames_1 = __fusereq(125);
var classnames_1d = __fuse.dt(classnames_1);
var react_1 = __fusereq(3);
var react_1d = __fuse.dt(react_1);
var ThemeProvider_1 = __fusereq(94);
var defaultProps = {
  placement: 'right'
};
var Tooltip = react_1d.default.forwardRef(function (_ref, ref) {
  var bsPrefix = _ref.bsPrefix, placement = _ref.placement, className = _ref.className, style = _ref.style, children = _ref.children, arrowProps = _ref.arrowProps, _ = _ref.popper, _2 = _ref.show, props = objectWithoutPropertiesLoose_1d.default(_ref, ["bsPrefix", "placement", "className", "style", "children", "arrowProps", "popper", "show"]);
  bsPrefix = ThemeProvider_1.useBootstrapPrefix(bsPrefix, 'tooltip');
  var _ref2 = (placement == null ? void 0 : placement.split('-')) || [], primaryPlacement = _ref2[0];
  return react_1d.default.createElement("div", extends_1d.default({
    ref: ref,
    style: style,
    role: "tooltip",
    "x-placement": primaryPlacement,
    className: classnames_1d.default(className, bsPrefix, "bs-tooltip-" + primaryPlacement)
  }, props), react_1d.default.createElement("div", extends_1d.default({
    className: "arrow"
  }, arrowProps)), react_1d.default.createElement("div", {
    className: bsPrefix + "-inner"
  }, children));
});
Tooltip.defaultProps = defaultProps;
Tooltip.displayName = 'Tooltip';
exports.default = Tooltip;

},

// node_modules/react-bootstrap/esm/SelectableContext.js @124
124: function(__fusereq, exports, module){
exports.__esModule = true;
var react_1 = __fusereq(3);
var react_1d = __fuse.dt(react_1);
var SelectableContext = react_1d.default.createContext(null);
exports.makeEventKey = function makeEventKey(eventKey, href) {
  if (href === void 0) {
    href = null;
  }
  if (eventKey != null) return String(eventKey);
  return href || null;
};
exports.default = SelectableContext;

},

// node_modules/react-bootstrap/esm/divWithClassName.js @128
128: function(__fusereq, exports, module){
exports.__esModule = true;
var extends_1 = __fusereq(122);
var extends_1d = __fuse.dt(extends_1);
var react_1 = __fusereq(3);
var react_1d = __fuse.dt(react_1);
var classnames_1 = __fusereq(125);
var classnames_1d = __fuse.dt(classnames_1);
exports.default = function (className) {
  return react_1d.default.forwardRef(function (p, ref) {
    return react_1d.default.createElement("div", extends_1d.default({}, p, {
      ref: ref,
      className: classnames_1d.default(p.className, className)
    }));
  });
};

},

// node_modules/react-bootstrap/esm/createWithBsPrefix.js @129
129: function(__fusereq, exports, module){
exports.__esModule = true;
var extends_1 = __fusereq(122);
var extends_1d = __fuse.dt(extends_1);
var objectWithoutPropertiesLoose_1 = __fusereq(123);
var objectWithoutPropertiesLoose_1d = __fuse.dt(objectWithoutPropertiesLoose_1);
var classnames_1 = __fusereq(125);
var classnames_1d = __fuse.dt(classnames_1);
var camelize_1 = __fusereq(216);
var camelize_1d = __fuse.dt(camelize_1);
var react_1 = __fusereq(3);
var react_1d = __fuse.dt(react_1);
var ThemeProvider_1 = __fusereq(94);
var pascalCase = function pascalCase(str) {
  return str[0].toUpperCase() + camelize_1d.default(str).slice(1);
};
function createWithBsPrefix(prefix, _temp) {
  var _ref = _temp === void 0 ? {} : _temp, _ref$displayName = _ref.displayName, displayName = _ref$displayName === void 0 ? pascalCase(prefix) : _ref$displayName, Component = _ref.Component, defaultProps = _ref.defaultProps;
  var BsComponent = react_1d.default.forwardRef(function (_ref2, ref) {
    var className = _ref2.className, bsPrefix = _ref2.bsPrefix, _ref2$as = _ref2.as, Tag = _ref2$as === void 0 ? Component || 'div' : _ref2$as, props = objectWithoutPropertiesLoose_1d.default(_ref2, ["className", "bsPrefix", "as"]);
    var resolvedPrefix = ThemeProvider_1.useBootstrapPrefix(bsPrefix, prefix);
    return react_1d.default.createElement(Tag, extends_1d.default({
      ref: ref,
      className: classnames_1d.default(className, resolvedPrefix)
    }, props));
  });
  BsComponent.defaultProps = defaultProps;
  BsComponent.displayName = displayName;
  return BsComponent;
}
exports.default = createWithBsPrefix;

},

// node_modules/react-bootstrap/esm/CardContext.js @130
130: function(__fusereq, exports, module){
exports.__esModule = true;
var react_1 = __fusereq(3);
var react_1d = __fuse.dt(react_1);
var context = react_1d.default.createContext(null);
context.displayName = 'CardContext';
exports.default = context;

},

// node_modules/react-bootstrap/esm/transitionEndListener.js @135
135: function(__fusereq, exports, module){
exports.__esModule = true;
var css_1 = __fusereq(133);
var css_1d = __fuse.dt(css_1);
var transitionEnd_1 = __fusereq(164);
var transitionEnd_1d = __fuse.dt(transitionEnd_1);
function parseDuration(node, property) {
  var str = css_1d.default(node, property) || '';
  var mult = str.indexOf('ms') === -1 ? 1000 : 1;
  return parseFloat(str) * mult;
}
function transitionEndListener(element, handler) {
  var duration = parseDuration(element, 'transitionDuration');
  var delay = parseDuration(element, 'transitionDelay');
  var remove = transitionEnd_1d.default(element, function (e) {
    if (e.target === element) {
      remove();
      handler(e);
    }
  }, duration + delay);
}
exports.default = transitionEndListener;

},

// node_modules/react-bootstrap/esm/createChainedFunction.js @136
136: function(__fusereq, exports, module){
exports.__esModule = true;
function createChainedFunction() {
  for (var _len = arguments.length, funcs = new Array(_len), _key = 0; _key < _len; _key++) {
    funcs[_key] = arguments[_key];
  }
  return funcs.filter(function (f) {
    return f != null;
  }).reduce(function (acc, f) {
    if (typeof f !== 'function') {
      throw new Error('Invalid Argument Type, must only provide functions, undefined, or null.');
    }
    if (acc === null) return f;
    return function chainedFunction() {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }
      acc.apply(this, args);
      f.apply(this, args);
    };
  }, null);
}
exports.default = createChainedFunction;

},

// node_modules/react-bootstrap/esm/triggerBrowserReflow.js @137
137: function(__fusereq, exports, module){
exports.__esModule = true;
function triggerBrowserReflow(node) {
  node.offsetHeight;
}
exports.default = triggerBrowserReflow;

},

// node_modules/react-bootstrap/esm/DropdownItem.js @139
139: function(__fusereq, exports, module){
exports.__esModule = true;
var extends_1 = __fusereq(122);
var extends_1d = __fuse.dt(extends_1);
var objectWithoutPropertiesLoose_1 = __fusereq(123);
var objectWithoutPropertiesLoose_1d = __fuse.dt(objectWithoutPropertiesLoose_1);
var classnames_1 = __fusereq(125);
var classnames_1d = __fuse.dt(classnames_1);
var react_1 = __fusereq(3);
var react_1d = __fuse.dt(react_1);
var useEventCallback_1 = __fusereq(127);
var useEventCallback_1d = __fuse.dt(useEventCallback_1);
var SelectableContext_1 = __fusereq(124);
var SelectableContext_1d = __fuse.dt(SelectableContext_1);
var ThemeProvider_1 = __fusereq(94);
var NavContext_1 = __fusereq(211);
var NavContext_1d = __fuse.dt(NavContext_1);
var SafeAnchor_1 = __fusereq(85);
var SafeAnchor_1d = __fuse.dt(SafeAnchor_1);
var defaultProps = {
  as: SafeAnchor_1d.default,
  disabled: false
};
var DropdownItem = react_1d.default.forwardRef(function (_ref, ref) {
  var bsPrefix = _ref.bsPrefix, className = _ref.className, children = _ref.children, eventKey = _ref.eventKey, disabled = _ref.disabled, href = _ref.href, onClick = _ref.onClick, onSelect = _ref.onSelect, propActive = _ref.active, Component = _ref.as, props = objectWithoutPropertiesLoose_1d.default(_ref, ["bsPrefix", "className", "children", "eventKey", "disabled", "href", "onClick", "onSelect", "active", "as"]);
  var prefix = ThemeProvider_1.useBootstrapPrefix(bsPrefix, 'dropdown-item');
  var onSelectCtx = react_1.useContext(SelectableContext_1d.default);
  var navContext = react_1.useContext(NavContext_1d.default);
  var _ref2 = navContext || ({}), activeKey = _ref2.activeKey;
  var key = SelectableContext_1.makeEventKey(eventKey, href);
  var active = propActive == null && key != null ? SelectableContext_1.makeEventKey(activeKey) === key : propActive;
  var handleClick = useEventCallback_1d.default(function (event) {
    if (disabled) return;
    if (onClick) onClick(event);
    if (onSelectCtx) onSelectCtx(key, event);
    if (onSelect) onSelect(key, event);
  });
  return react_1d.default.createElement(Component, extends_1d.default({}, props, {
    ref: ref,
    href: href,
    disabled: disabled,
    className: classnames_1d.default(className, prefix, active && 'active', disabled && 'disabled'),
    onClick: handleClick
  }), children);
});
DropdownItem.displayName = 'DropdownItem';
DropdownItem.defaultProps = defaultProps;
exports.default = DropdownItem;

},

// node_modules/react-bootstrap/esm/DropdownMenu.js @140
140: function(__fusereq, exports, module){
exports.__esModule = true;
var extends_1 = __fusereq(122);
var extends_1d = __fuse.dt(extends_1);
var objectWithoutPropertiesLoose_1 = __fusereq(123);
var objectWithoutPropertiesLoose_1d = __fuse.dt(objectWithoutPropertiesLoose_1);
var classnames_1 = __fusereq(125);
var classnames_1d = __fuse.dt(classnames_1);
var prop_types_1 = __fusereq(112);
var prop_types_1d = __fuse.dt(prop_types_1);
var react_1 = __fusereq(3);
var react_1d = __fuse.dt(react_1);
var DropdownMenu_1 = __fusereq(212);
var useMergedRefs_1 = __fusereq(213);
var useMergedRefs_1d = __fuse.dt(useMergedRefs_1);
var warning_1 = __fusereq(152);
var warning_1d = __fuse.dt(warning_1);
var NavbarContext_1 = __fusereq(169);
var NavbarContext_1d = __fuse.dt(NavbarContext_1);
var ThemeProvider_1 = __fusereq(94);
var useWrappedRefWithWarning_1 = __fusereq(214);
var useWrappedRefWithWarning_1d = __fuse.dt(useWrappedRefWithWarning_1);
var usePopperMarginModifiers_1 = __fusereq(176);
var usePopperMarginModifiers_1d = __fuse.dt(usePopperMarginModifiers_1);
var alignDirection = prop_types_1d.default.oneOf(['left', 'right']);
exports.alignPropType = prop_types_1d.default.oneOfType([alignDirection, prop_types_1d.default.shape({
  sm: alignDirection
}), prop_types_1d.default.shape({
  md: alignDirection
}), prop_types_1d.default.shape({
  lg: alignDirection
}), prop_types_1d.default.shape({
  xl: alignDirection
})]);
var defaultProps = {
  align: 'left',
  alignRight: false,
  flip: true
};
var DropdownMenu = react_1d.default.forwardRef(function (_ref, ref) {
  var bsPrefix = _ref.bsPrefix, className = _ref.className, align = _ref.align, alignRight = _ref.alignRight, rootCloseEvent = _ref.rootCloseEvent, flip = _ref.flip, showProps = _ref.show, renderOnMount = _ref.renderOnMount, _ref$as = _ref.as, Component = _ref$as === void 0 ? 'div' : _ref$as, popperConfig = _ref.popperConfig, props = objectWithoutPropertiesLoose_1d.default(_ref, ["bsPrefix", "className", "align", "alignRight", "rootCloseEvent", "flip", "show", "renderOnMount", "as", "popperConfig"]);
  var isNavbar = react_1.useContext(NavbarContext_1d.default);
  var prefix = ThemeProvider_1.useBootstrapPrefix(bsPrefix, 'dropdown-menu');
  var _usePopperMarginModif = usePopperMarginModifiers_1d.default(), popperRef = _usePopperMarginModif[0], marginModifiers = _usePopperMarginModif[1];
  var alignClasses = [];
  if (align) {
    if (typeof align === 'object') {
      var keys = Object.keys(align);
      "development" !== "production" ? warning_1d.default(keys.length === 1, 'There should only be 1 breakpoint when passing an object to `align`') : void 0;
      if (keys.length) {
        var brkPoint = keys[0];
        var direction = align[brkPoint];
        alignRight = direction === 'left';
        alignClasses.push(prefix + "-" + brkPoint + "-" + direction);
      }
    } else if (align === 'right') {
      alignRight = true;
    }
  }
  var _useDropdownMenu = DropdownMenu_1.useDropdownMenu({
    flip: flip,
    rootCloseEvent: rootCloseEvent,
    show: showProps,
    alignEnd: alignRight,
    usePopper: !isNavbar && alignClasses.length === 0,
    popperConfig: extends_1d.default({}, popperConfig, {
      modifiers: marginModifiers.concat((popperConfig == null ? void 0 : popperConfig.modifiers) || [])
    })
  }), menuProps = _useDropdownMenu[0], _useDropdownMenu$ = _useDropdownMenu[1], hasShown = _useDropdownMenu$.hasShown, popper = _useDropdownMenu$.popper, show = _useDropdownMenu$.show, alignEnd = _useDropdownMenu$.alignEnd, toggle = _useDropdownMenu$.toggle;
  menuProps.ref = useMergedRefs_1d.default(popperRef, useMergedRefs_1d.default(useWrappedRefWithWarning_1d.default(ref, 'DropdownMenu'), menuProps.ref));
  if (!hasShown && !renderOnMount) return null;
  if (typeof Component !== 'string') {
    menuProps.show = show;
    menuProps.close = function () {
      return toggle == null ? void 0 : toggle(false);
    };
    menuProps.alignRight = alignEnd;
  }
  var style = props.style;
  if (popper != null && popper.placement) {
    style = extends_1d.default({}, props.style, menuProps.style);
    props['x-placement'] = popper.placement;
  }
  return react_1d.default.createElement(Component, extends_1d.default({}, props, menuProps, {
    style: style,
    className: classnames_1d.default.apply(void 0, [className, prefix, show && 'show', alignEnd && prefix + "-right"].concat(alignClasses))
  }));
});
DropdownMenu.displayName = 'DropdownMenu';
DropdownMenu.defaultProps = defaultProps;
exports.default = DropdownMenu;

},

// node_modules/react-bootstrap/esm/DropdownToggle.js @141
141: function(__fusereq, exports, module){
exports.__esModule = true;
var extends_1 = __fusereq(122);
var extends_1d = __fuse.dt(extends_1);
var objectWithoutPropertiesLoose_1 = __fusereq(123);
var objectWithoutPropertiesLoose_1d = __fuse.dt(objectWithoutPropertiesLoose_1);
var classnames_1 = __fusereq(125);
var classnames_1d = __fuse.dt(classnames_1);
var react_1 = __fusereq(3);
var react_1d = __fuse.dt(react_1);
var DropdownToggle_1 = __fusereq(217);
var useMergedRefs_1 = __fusereq(213);
var useMergedRefs_1d = __fuse.dt(useMergedRefs_1);
var Button_1 = __fusereq(33);
var Button_1d = __fuse.dt(Button_1);
var ThemeProvider_1 = __fusereq(94);
var useWrappedRefWithWarning_1 = __fusereq(214);
var useWrappedRefWithWarning_1d = __fuse.dt(useWrappedRefWithWarning_1);
var DropdownToggle = react_1d.default.forwardRef(function (_ref, ref) {
  var bsPrefix = _ref.bsPrefix, split = _ref.split, className = _ref.className, childBsPrefix = _ref.childBsPrefix, _ref$as = _ref.as, Component = _ref$as === void 0 ? Button_1d.default : _ref$as, props = objectWithoutPropertiesLoose_1d.default(_ref, ["bsPrefix", "split", "className", "childBsPrefix", "as"]);
  var prefix = ThemeProvider_1.useBootstrapPrefix(bsPrefix, 'dropdown-toggle');
  if (childBsPrefix !== undefined) {
    props.bsPrefix = childBsPrefix;
  }
  var _useDropdownToggle = DropdownToggle_1.useDropdownToggle(), toggleProps = _useDropdownToggle[0];
  toggleProps.ref = useMergedRefs_1d.default(toggleProps.ref, useWrappedRefWithWarning_1d.default(ref, 'DropdownToggle'));
  return react_1d.default.createElement(Component, extends_1d.default({
    className: classnames_1d.default(className, prefix, split && prefix + "-split")
  }, toggleProps, props));
});
DropdownToggle.displayName = 'DropdownToggle';
exports.default = DropdownToggle;

},

// node_modules/react-bootstrap/esm/CarouselCaption.js @145
145: function(__fusereq, exports, module){
exports.__esModule = true;
var createWithBsPrefix_1 = __fusereq(129);
var createWithBsPrefix_1d = __fuse.dt(createWithBsPrefix_1);
exports.default = createWithBsPrefix_1d.default('carousel-caption');

},

// node_modules/react-bootstrap/esm/ElementChildren.js @146
146: function(__fusereq, exports, module){
exports.__esModule = true;
var react_1 = __fusereq(3);
var react_1d = __fuse.dt(react_1);
function map(children, func) {
  var index = 0;
  return react_1d.default.Children.map(children, function (child) {
    return react_1d.default.isValidElement(child) ? func(child, index++) : child;
  });
}
function forEach(children, func) {
  var index = 0;
  react_1d.default.Children.forEach(children, function (child) {
    if (react_1d.default.isValidElement(child)) func(child, index++);
  });
}
exports.map = map;
exports.forEach = forEach;

},

// node_modules/react-bootstrap/esm/Switch.js @147
147: function(__fusereq, exports, module){
exports.__esModule = true;
var extends_1 = __fusereq(122);
var extends_1d = __fuse.dt(extends_1);
var react_1 = __fusereq(3);
var react_1d = __fuse.dt(react_1);
var FormCheck_1 = __fusereq(51);
var FormCheck_1d = __fuse.dt(FormCheck_1);
var Switch = react_1d.default.forwardRef(function (props, ref) {
  return react_1d.default.createElement(FormCheck_1d.default, extends_1d.default({}, props, {
    ref: ref,
    type: "switch"
  }));
});
Switch.displayName = 'Switch';
Switch.Input = FormCheck_1d.default.Input;
Switch.Label = FormCheck_1d.default.Label;
exports.default = Switch;

},

// node_modules/react-bootstrap/esm/Feedback.js @148
148: function(__fusereq, exports, module){
exports.__esModule = true;
var extends_1 = __fusereq(122);
var extends_1d = __fuse.dt(extends_1);
var objectWithoutPropertiesLoose_1 = __fusereq(123);
var objectWithoutPropertiesLoose_1d = __fuse.dt(objectWithoutPropertiesLoose_1);
var classnames_1 = __fusereq(125);
var classnames_1d = __fuse.dt(classnames_1);
var react_1 = __fusereq(3);
var react_1d = __fuse.dt(react_1);
var prop_types_1 = __fusereq(112);
var prop_types_1d = __fuse.dt(prop_types_1);
var propTypes = {
  type: prop_types_1d.default.string,
  tooltip: prop_types_1d.default.bool,
  as: prop_types_1d.default.elementType
};
var Feedback = react_1d.default.forwardRef(function (_ref, ref) {
  var _ref$as = _ref.as, Component = _ref$as === void 0 ? 'div' : _ref$as, className = _ref.className, _ref$type = _ref.type, type = _ref$type === void 0 ? 'valid' : _ref$type, _ref$tooltip = _ref.tooltip, tooltip = _ref$tooltip === void 0 ? false : _ref$tooltip, props = objectWithoutPropertiesLoose_1d.default(_ref, ["as", "className", "type", "tooltip"]);
  return react_1d.default.createElement(Component, extends_1d.default({}, props, {
    ref: ref,
    className: classnames_1d.default(className, type + "-" + (tooltip ? 'tooltip' : 'feedback'))
  }));
});
Feedback.displayName = 'Feedback';
Feedback.propTypes = propTypes;
exports.default = Feedback;

},

// node_modules/react-bootstrap/esm/FormCheckInput.js @149
149: function(__fusereq, exports, module){
exports.__esModule = true;
var extends_1 = __fusereq(122);
var extends_1d = __fuse.dt(extends_1);
var objectWithoutPropertiesLoose_1 = __fusereq(123);
var objectWithoutPropertiesLoose_1d = __fuse.dt(objectWithoutPropertiesLoose_1);
var classnames_1 = __fusereq(125);
var classnames_1d = __fuse.dt(classnames_1);
var react_1 = __fusereq(3);
var react_1d = __fuse.dt(react_1);
var FormContext_1 = __fusereq(151);
var FormContext_1d = __fuse.dt(FormContext_1);
var ThemeProvider_1 = __fusereq(94);
var FormCheckInput = react_1d.default.forwardRef(function (_ref, ref) {
  var id = _ref.id, bsPrefix = _ref.bsPrefix, bsCustomPrefix = _ref.bsCustomPrefix, className = _ref.className, _ref$type = _ref.type, type = _ref$type === void 0 ? 'checkbox' : _ref$type, _ref$isValid = _ref.isValid, isValid = _ref$isValid === void 0 ? false : _ref$isValid, _ref$isInvalid = _ref.isInvalid, isInvalid = _ref$isInvalid === void 0 ? false : _ref$isInvalid, isStatic = _ref.isStatic, _ref$as = _ref.as, Component = _ref$as === void 0 ? 'input' : _ref$as, props = objectWithoutPropertiesLoose_1d.default(_ref, ["id", "bsPrefix", "bsCustomPrefix", "className", "type", "isValid", "isInvalid", "isStatic", "as"]);
  var _useContext = react_1.useContext(FormContext_1d.default), controlId = _useContext.controlId, custom = _useContext.custom;
  var _ref2 = custom ? [bsCustomPrefix, 'custom-control-input'] : [bsPrefix, 'form-check-input'], prefix = _ref2[0], defaultPrefix = _ref2[1];
  bsPrefix = ThemeProvider_1.useBootstrapPrefix(prefix, defaultPrefix);
  return react_1d.default.createElement(Component, extends_1d.default({}, props, {
    ref: ref,
    type: type,
    id: id || controlId,
    className: classnames_1d.default(className, bsPrefix, isValid && 'is-valid', isInvalid && 'is-invalid', isStatic && 'position-static')
  }));
});
FormCheckInput.displayName = 'FormCheckInput';
exports.default = FormCheckInput;

},

// node_modules/react-bootstrap/esm/FormCheckLabel.js @150
150: function(__fusereq, exports, module){
exports.__esModule = true;
var extends_1 = __fusereq(122);
var extends_1d = __fuse.dt(extends_1);
var objectWithoutPropertiesLoose_1 = __fusereq(123);
var objectWithoutPropertiesLoose_1d = __fuse.dt(objectWithoutPropertiesLoose_1);
var classnames_1 = __fusereq(125);
var classnames_1d = __fuse.dt(classnames_1);
var react_1 = __fusereq(3);
var react_1d = __fuse.dt(react_1);
var FormContext_1 = __fusereq(151);
var FormContext_1d = __fuse.dt(FormContext_1);
var ThemeProvider_1 = __fusereq(94);
var FormCheckLabel = react_1d.default.forwardRef(function (_ref, ref) {
  var bsPrefix = _ref.bsPrefix, bsCustomPrefix = _ref.bsCustomPrefix, className = _ref.className, htmlFor = _ref.htmlFor, props = objectWithoutPropertiesLoose_1d.default(_ref, ["bsPrefix", "bsCustomPrefix", "className", "htmlFor"]);
  var _useContext = react_1.useContext(FormContext_1d.default), controlId = _useContext.controlId, custom = _useContext.custom;
  var _ref2 = custom ? [bsCustomPrefix, 'custom-control-label'] : [bsPrefix, 'form-check-label'], prefix = _ref2[0], defaultPrefix = _ref2[1];
  bsPrefix = ThemeProvider_1.useBootstrapPrefix(prefix, defaultPrefix);
  return react_1d.default.createElement("label", extends_1d.default({}, props, {
    ref: ref,
    htmlFor: htmlFor || controlId,
    className: classnames_1d.default(className, bsPrefix)
  }));
});
FormCheckLabel.displayName = 'FormCheckLabel';
exports.default = FormCheckLabel;

},

// node_modules/react-bootstrap/esm/FormContext.js @151
151: function(__fusereq, exports, module){
exports.__esModule = true;
var react_1 = __fusereq(3);
var react_1d = __fuse.dt(react_1);
var FormContext = react_1d.default.createContext({
  controlId: undefined
});
exports.default = FormContext;

},

// node_modules/react-bootstrap/esm/FormFileInput.js @153
153: function(__fusereq, exports, module){
exports.__esModule = true;
var extends_1 = __fusereq(122);
var extends_1d = __fuse.dt(extends_1);
var objectWithoutPropertiesLoose_1 = __fusereq(123);
var objectWithoutPropertiesLoose_1d = __fuse.dt(objectWithoutPropertiesLoose_1);
var classnames_1 = __fusereq(125);
var classnames_1d = __fuse.dt(classnames_1);
var react_1 = __fusereq(3);
var react_1d = __fuse.dt(react_1);
var FormContext_1 = __fusereq(151);
var FormContext_1d = __fuse.dt(FormContext_1);
var ThemeProvider_1 = __fusereq(94);
var FormFileInput = react_1d.default.forwardRef(function (_ref, ref) {
  var id = _ref.id, bsPrefix = _ref.bsPrefix, bsCustomPrefix = _ref.bsCustomPrefix, className = _ref.className, isValid = _ref.isValid, isInvalid = _ref.isInvalid, lang = _ref.lang, _ref$as = _ref.as, Component = _ref$as === void 0 ? 'input' : _ref$as, props = objectWithoutPropertiesLoose_1d.default(_ref, ["id", "bsPrefix", "bsCustomPrefix", "className", "isValid", "isInvalid", "lang", "as"]);
  var _useContext = react_1.useContext(FormContext_1d.default), controlId = _useContext.controlId, custom = _useContext.custom;
  var type = 'file';
  var _ref2 = custom ? [bsCustomPrefix, 'custom-file-input'] : [bsPrefix, 'form-control-file'], prefix = _ref2[0], defaultPrefix = _ref2[1];
  bsPrefix = ThemeProvider_1.useBootstrapPrefix(prefix, defaultPrefix);
  return react_1d.default.createElement(Component, extends_1d.default({}, props, {
    ref: ref,
    id: id || controlId,
    type: type,
    lang: lang,
    className: classnames_1d.default(className, bsPrefix, isValid && 'is-valid', isInvalid && 'is-invalid')
  }));
});
FormFileInput.displayName = 'FormFileInput';
exports.default = FormFileInput;

},

// node_modules/react-bootstrap/esm/FormFileLabel.js @154
154: function(__fusereq, exports, module){
exports.__esModule = true;
var extends_1 = __fusereq(122);
var extends_1d = __fuse.dt(extends_1);
var objectWithoutPropertiesLoose_1 = __fusereq(123);
var objectWithoutPropertiesLoose_1d = __fuse.dt(objectWithoutPropertiesLoose_1);
var classnames_1 = __fusereq(125);
var classnames_1d = __fuse.dt(classnames_1);
var react_1 = __fusereq(3);
var react_1d = __fuse.dt(react_1);
var FormContext_1 = __fusereq(151);
var FormContext_1d = __fuse.dt(FormContext_1);
var ThemeProvider_1 = __fusereq(94);
var FormFileLabel = react_1d.default.forwardRef(function (_ref, ref) {
  var bsPrefix = _ref.bsPrefix, bsCustomPrefix = _ref.bsCustomPrefix, className = _ref.className, htmlFor = _ref.htmlFor, props = objectWithoutPropertiesLoose_1d.default(_ref, ["bsPrefix", "bsCustomPrefix", "className", "htmlFor"]);
  var _useContext = react_1.useContext(FormContext_1d.default), controlId = _useContext.controlId, custom = _useContext.custom;
  var _ref2 = custom ? [bsCustomPrefix, 'custom-file-label'] : [bsPrefix, 'form-file-label'], prefix = _ref2[0], defaultPrefix = _ref2[1];
  bsPrefix = ThemeProvider_1.useBootstrapPrefix(prefix, defaultPrefix);
  return react_1d.default.createElement("label", extends_1d.default({}, props, {
    ref: ref,
    htmlFor: htmlFor || controlId,
    className: classnames_1d.default(className, bsPrefix),
    "data-browse": props['data-browse']
  }));
});
FormFileLabel.displayName = 'FormFileLabel';
exports.default = FormFileLabel;

},

// node_modules/react-bootstrap/esm/FigureImage.js @155
155: function(__fusereq, exports, module){
exports.__esModule = true;
var extends_1 = __fusereq(122);
var extends_1d = __fuse.dt(extends_1);
var objectWithoutPropertiesLoose_1 = __fusereq(123);
var objectWithoutPropertiesLoose_1d = __fuse.dt(objectWithoutPropertiesLoose_1);
var classnames_1 = __fusereq(125);
var classnames_1d = __fuse.dt(classnames_1);
var react_1 = __fusereq(3);
var react_1d = __fuse.dt(react_1);
var Image_1 = __fusereq(57);
var Image_1d = __fuse.dt(Image_1);
var defaultProps = {
  fluid: true
};
var FigureImage = react_1d.default.forwardRef(function (_ref, ref) {
  var className = _ref.className, props = objectWithoutPropertiesLoose_1d.default(_ref, ["className"]);
  return react_1d.default.createElement(Image_1d.default, extends_1d.default({
    ref: ref
  }, props, {
    className: classnames_1d.default(className, 'figure-img')
  }));
});
FigureImage.displayName = 'FigureImage';
FigureImage.propTypes = Image_1.propTypes;
FigureImage.defaultProps = defaultProps;
exports.default = FigureImage;

},

// node_modules/react-bootstrap/esm/FigureCaption.js @156
156: function(__fusereq, exports, module){
exports.__esModule = true;
var createWithBsPrefix_1 = __fusereq(129);
var createWithBsPrefix_1d = __fuse.dt(createWithBsPrefix_1);
var FigureCaption = createWithBsPrefix_1d.default('figure-caption', {
  Component: 'figcaption'
});
exports.default = FigureCaption;

},

// node_modules/react-bootstrap/esm/BootstrapModalManager.js @166
166: function(__fusereq, exports, module){
exports.__esModule = true;
var inheritsLoose_1 = __fusereq(177);
var inheritsLoose_1d = __fuse.dt(inheritsLoose_1);
var css_1 = __fusereq(133);
var css_1d = __fuse.dt(css_1);
var querySelectorAll_1 = __fusereq(219);
var querySelectorAll_1d = __fuse.dt(querySelectorAll_1);
var scrollbarSize_1 = __fusereq(161);
var scrollbarSize_1d = __fuse.dt(scrollbarSize_1);
var ModalManager_1 = __fusereq(227);
var ModalManager_1d = __fuse.dt(ModalManager_1);
var Selector = {
  FIXED_CONTENT: '.fixed-top, .fixed-bottom, .is-fixed, .sticky-top',
  STICKY_CONTENT: '.sticky-top',
  NAVBAR_TOGGLER: '.navbar-toggler'
};
var BootstrapModalManager = (function (_ModalManager) {
  inheritsLoose_1d.default(BootstrapModalManager, _ModalManager);
  function BootstrapModalManager() {
    return _ModalManager.apply(this, arguments) || this;
  }
  var _proto = BootstrapModalManager.prototype;
  _proto.adjustAndStore = function adjustAndStore(prop, element, adjust) {
    var _css;
    var actual = element.style[prop];
    element.dataset[prop] = actual;
    css_1d.default(element, (_css = {}, _css[prop] = parseFloat(css_1d.default(element, prop)) + adjust + "px", _css));
  };
  _proto.restore = function restore(prop, element) {
    var value = element.dataset[prop];
    if (value !== undefined) {
      var _css2;
      delete element.dataset[prop];
      css_1d.default(element, (_css2 = {}, _css2[prop] = value, _css2));
    }
  };
  _proto.setContainerStyle = function setContainerStyle(containerState, container) {
    var _this = this;
    _ModalManager.prototype.setContainerStyle.call(this, containerState, container);
    if (!containerState.overflowing) return;
    var size = scrollbarSize_1d.default();
    querySelectorAll_1d.default(container, Selector.FIXED_CONTENT).forEach(function (el) {
      return _this.adjustAndStore('paddingRight', el, size);
    });
    querySelectorAll_1d.default(container, Selector.STICKY_CONTENT).forEach(function (el) {
      return _this.adjustAndStore('marginRight', el, -size);
    });
    querySelectorAll_1d.default(container, Selector.NAVBAR_TOGGLER).forEach(function (el) {
      return _this.adjustAndStore('marginRight', el, size);
    });
  };
  _proto.removeContainerStyle = function removeContainerStyle(containerState, container) {
    var _this2 = this;
    _ModalManager.prototype.removeContainerStyle.call(this, containerState, container);
    querySelectorAll_1d.default(container, Selector.FIXED_CONTENT).forEach(function (el) {
      return _this2.restore('paddingRight', el);
    });
    querySelectorAll_1d.default(container, Selector.STICKY_CONTENT).forEach(function (el) {
      return _this2.restore('marginRight', el);
    });
    querySelectorAll_1d.default(container, Selector.NAVBAR_TOGGLER).forEach(function (el) {
      return _this2.restore('marginRight', el);
    });
  };
  return BootstrapModalManager;
})(ModalManager_1d.default);
exports.default = BootstrapModalManager;

},

// node_modules/react-bootstrap/esm/ModalContext.js @167
167: function(__fusereq, exports, module){
exports.__esModule = true;
var react_1 = __fusereq(3);
var react_1d = __fuse.dt(react_1);
var ModalContext = react_1d.default.createContext({
  onHide: function onHide() {}
});
exports.default = ModalContext;

},

// node_modules/react-bootstrap/esm/ModalHeader.js @168
168: function(__fusereq, exports, module){
exports.__esModule = true;
var extends_1 = __fusereq(122);
var extends_1d = __fuse.dt(extends_1);
var objectWithoutPropertiesLoose_1 = __fusereq(123);
var objectWithoutPropertiesLoose_1d = __fuse.dt(objectWithoutPropertiesLoose_1);
var classnames_1 = __fusereq(125);
var classnames_1d = __fuse.dt(classnames_1);
var react_1 = __fusereq(3);
var react_1d = __fuse.dt(react_1);
var useEventCallback_1 = __fusereq(127);
var useEventCallback_1d = __fuse.dt(useEventCallback_1);
var ThemeProvider_1 = __fusereq(94);
var CloseButton_1 = __fusereq(43);
var CloseButton_1d = __fuse.dt(CloseButton_1);
var ModalContext_1 = __fusereq(167);
var ModalContext_1d = __fuse.dt(ModalContext_1);
var defaultProps = {
  closeLabel: 'Close',
  closeButton: false
};
var ModalHeader = react_1d.default.forwardRef(function (_ref, ref) {
  var bsPrefix = _ref.bsPrefix, closeLabel = _ref.closeLabel, closeButton = _ref.closeButton, onHide = _ref.onHide, className = _ref.className, children = _ref.children, props = objectWithoutPropertiesLoose_1d.default(_ref, ["bsPrefix", "closeLabel", "closeButton", "onHide", "className", "children"]);
  bsPrefix = ThemeProvider_1.useBootstrapPrefix(bsPrefix, 'modal-header');
  var context = react_1.useContext(ModalContext_1d.default);
  var handleClick = useEventCallback_1d.default(function () {
    if (context) context.onHide();
    if (onHide) onHide();
  });
  return react_1d.default.createElement("div", extends_1d.default({
    ref: ref
  }, props, {
    className: classnames_1d.default(className, bsPrefix)
  }), children, closeButton && react_1d.default.createElement(CloseButton_1d.default, {
    label: closeLabel,
    onClick: handleClick
  }));
});
ModalHeader.displayName = 'ModalHeader';
ModalHeader.defaultProps = defaultProps;
exports.default = ModalHeader;

},

// node_modules/react-bootstrap/esm/NavbarContext.js @169
169: function(__fusereq, exports, module){
exports.__esModule = true;
var react_1 = __fusereq(3);
var react_1d = __fuse.dt(react_1);
var context = react_1d.default.createContext(null);
context.displayName = 'NavbarContext';
exports.default = context;

},

// node_modules/react-bootstrap/esm/AbstractNav.js @170
170: function(__fusereq, exports, module){
exports.__esModule = true;
var extends_1 = __fusereq(122);
var extends_1d = __fuse.dt(extends_1);
var objectWithoutPropertiesLoose_1 = __fusereq(123);
var objectWithoutPropertiesLoose_1d = __fuse.dt(objectWithoutPropertiesLoose_1);
var querySelectorAll_1 = __fusereq(219);
var querySelectorAll_1d = __fuse.dt(querySelectorAll_1);
var react_1 = __fusereq(3);
var react_1d = __fuse.dt(react_1);
var useForceUpdate_1 = __fusereq(221);
var useForceUpdate_1d = __fuse.dt(useForceUpdate_1);
var useMergedRefs_1 = __fusereq(213);
var useMergedRefs_1d = __fuse.dt(useMergedRefs_1);
var NavContext_1 = __fusereq(211);
var NavContext_1d = __fuse.dt(NavContext_1);
var SelectableContext_1 = __fusereq(124);
var SelectableContext_1d = __fuse.dt(SelectableContext_1);
var TabContext_1 = __fusereq(179);
var TabContext_1d = __fuse.dt(TabContext_1);
var noop = function noop() {};
var AbstractNav = react_1d.default.forwardRef(function (_ref, ref) {
  var _ref$as = _ref.as, Component = _ref$as === void 0 ? 'ul' : _ref$as, onSelect = _ref.onSelect, activeKey = _ref.activeKey, role = _ref.role, onKeyDown = _ref.onKeyDown, props = objectWithoutPropertiesLoose_1d.default(_ref, ["as", "onSelect", "activeKey", "role", "onKeyDown"]);
  var forceUpdate = useForceUpdate_1d.default();
  var needsRefocusRef = react_1.useRef(false);
  var parentOnSelect = react_1.useContext(SelectableContext_1d.default);
  var tabContext = react_1.useContext(TabContext_1d.default);
  var getControlledId, getControllerId;
  if (tabContext) {
    role = role || 'tablist';
    activeKey = tabContext.activeKey;
    getControlledId = tabContext.getControlledId;
    getControllerId = tabContext.getControllerId;
  }
  var listNode = react_1.useRef(null);
  var getNextActiveChild = function getNextActiveChild(offset) {
    var currentListNode = listNode.current;
    if (!currentListNode) return null;
    var items = querySelectorAll_1d.default(currentListNode, '[data-rb-event-key]:not(.disabled)');
    var activeChild = currentListNode.querySelector('.active');
    if (!activeChild) return null;
    var index = items.indexOf(activeChild);
    if (index === -1) return null;
    var nextIndex = index + offset;
    if (nextIndex >= items.length) nextIndex = 0;
    if (nextIndex < 0) nextIndex = items.length - 1;
    return items[nextIndex];
  };
  var handleSelect = function handleSelect(key, event) {
    if (key == null) return;
    if (onSelect) onSelect(key, event);
    if (parentOnSelect) parentOnSelect(key, event);
  };
  var handleKeyDown = function handleKeyDown(event) {
    if (onKeyDown) onKeyDown(event);
    var nextActiveChild;
    switch (event.key) {
      case 'ArrowLeft':
      case 'ArrowUp':
        nextActiveChild = getNextActiveChild(-1);
        break;
      case 'ArrowRight':
      case 'ArrowDown':
        nextActiveChild = getNextActiveChild(1);
        break;
      default:
        return;
    }
    if (!nextActiveChild) return;
    event.preventDefault();
    handleSelect(nextActiveChild.dataset.rbEventKey, event);
    needsRefocusRef.current = true;
    forceUpdate();
  };
  react_1.useEffect(function () {
    if (listNode.current && needsRefocusRef.current) {
      var activeChild = listNode.current.querySelector('[data-rb-event-key].active');
      if (activeChild) activeChild.focus();
    }
    needsRefocusRef.current = false;
  });
  var mergedRef = useMergedRefs_1d.default(ref, listNode);
  return react_1d.default.createElement(SelectableContext_1d.default.Provider, {
    value: handleSelect
  }, react_1d.default.createElement(NavContext_1d.default.Provider, {
    value: {
      role: role,
      activeKey: SelectableContext_1.makeEventKey(activeKey),
      getControlledId: getControlledId || noop,
      getControllerId: getControllerId || noop
    }
  }, react_1d.default.createElement(Component, extends_1d.default({}, props, {
    onKeyDown: handleKeyDown,
    ref: mergedRef,
    role: role
  }))));
});
exports.default = AbstractNav;

},

// node_modules/react-bootstrap/esm/NavbarCollapse.js @171
171: function(__fusereq, exports, module){
exports.__esModule = true;
var extends_1 = __fusereq(122);
var extends_1d = __fuse.dt(extends_1);
var objectWithoutPropertiesLoose_1 = __fusereq(123);
var objectWithoutPropertiesLoose_1d = __fuse.dt(objectWithoutPropertiesLoose_1);
var react_1 = __fusereq(3);
var react_1d = __fuse.dt(react_1);
var Collapse_1 = __fusereq(45);
var Collapse_1d = __fuse.dt(Collapse_1);
var ThemeProvider_1 = __fusereq(94);
var NavbarContext_1 = __fusereq(169);
var NavbarContext_1d = __fuse.dt(NavbarContext_1);
var NavbarCollapse = react_1d.default.forwardRef(function (_ref, ref) {
  var children = _ref.children, bsPrefix = _ref.bsPrefix, props = objectWithoutPropertiesLoose_1d.default(_ref, ["children", "bsPrefix"]);
  bsPrefix = ThemeProvider_1.useBootstrapPrefix(bsPrefix, 'navbar-collapse');
  return react_1d.default.createElement(NavbarContext_1d.default.Consumer, null, function (context) {
    return react_1d.default.createElement(Collapse_1d.default, extends_1d.default({
      in: !!(context && context.expanded)
    }, props), react_1d.default.createElement("div", {
      ref: ref,
      className: bsPrefix
    }, children));
  });
});
NavbarCollapse.displayName = 'NavbarCollapse';
exports.default = NavbarCollapse;

},

// node_modules/react-bootstrap/esm/NavbarToggle.js @172
172: function(__fusereq, exports, module){
exports.__esModule = true;
var extends_1 = __fusereq(122);
var extends_1d = __fuse.dt(extends_1);
var objectWithoutPropertiesLoose_1 = __fusereq(123);
var objectWithoutPropertiesLoose_1d = __fuse.dt(objectWithoutPropertiesLoose_1);
var classnames_1 = __fusereq(125);
var classnames_1d = __fuse.dt(classnames_1);
var react_1 = __fusereq(3);
var react_1d = __fuse.dt(react_1);
var useEventCallback_1 = __fusereq(127);
var useEventCallback_1d = __fuse.dt(useEventCallback_1);
var ThemeProvider_1 = __fusereq(94);
var NavbarContext_1 = __fusereq(169);
var NavbarContext_1d = __fuse.dt(NavbarContext_1);
var defaultProps = {
  label: 'Toggle navigation'
};
var NavbarToggle = react_1d.default.forwardRef(function (_ref, ref) {
  var bsPrefix = _ref.bsPrefix, className = _ref.className, children = _ref.children, label = _ref.label, _ref$as = _ref.as, Component = _ref$as === void 0 ? 'button' : _ref$as, onClick = _ref.onClick, props = objectWithoutPropertiesLoose_1d.default(_ref, ["bsPrefix", "className", "children", "label", "as", "onClick"]);
  bsPrefix = ThemeProvider_1.useBootstrapPrefix(bsPrefix, 'navbar-toggler');
  var _ref2 = react_1.useContext(NavbarContext_1d.default) || ({}), onToggle = _ref2.onToggle, expanded = _ref2.expanded;
  var handleClick = useEventCallback_1d.default(function (e) {
    if (onClick) onClick(e);
    if (onToggle) onToggle();
  });
  if (Component === 'button') {
    props.type = 'button';
  }
  return react_1d.default.createElement(Component, extends_1d.default({}, props, {
    ref: ref,
    onClick: handleClick,
    "aria-label": label,
    className: classnames_1d.default(className, bsPrefix, !expanded && 'collapsed')
  }), children || react_1d.default.createElement("span", {
    className: bsPrefix + "-icon"
  }));
});
NavbarToggle.displayName = 'NavbarToggle';
NavbarToggle.defaultProps = defaultProps;
exports.default = NavbarToggle;

},

// node_modules/react-bootstrap/esm/AbstractNavItem.js @173
173: function(__fusereq, exports, module){
exports.__esModule = true;
var extends_1 = __fusereq(122);
var extends_1d = __fuse.dt(extends_1);
var objectWithoutPropertiesLoose_1 = __fusereq(123);
var objectWithoutPropertiesLoose_1d = __fuse.dt(objectWithoutPropertiesLoose_1);
var classnames_1 = __fusereq(125);
var classnames_1d = __fuse.dt(classnames_1);
var react_1 = __fusereq(3);
var react_1d = __fuse.dt(react_1);
var useEventCallback_1 = __fusereq(127);
var useEventCallback_1d = __fuse.dt(useEventCallback_1);
var warning_1 = __fusereq(152);
var warning_1d = __fuse.dt(warning_1);
var NavContext_1 = __fusereq(211);
var NavContext_1d = __fuse.dt(NavContext_1);
var SelectableContext_1 = __fusereq(124);
var SelectableContext_1d = __fuse.dt(SelectableContext_1);
var defaultProps = {
  disabled: false
};
var AbstractNavItem = react_1d.default.forwardRef(function (_ref, ref) {
  var active = _ref.active, className = _ref.className, eventKey = _ref.eventKey, onSelect = _ref.onSelect, onClick = _ref.onClick, Component = _ref.as, props = objectWithoutPropertiesLoose_1d.default(_ref, ["active", "className", "eventKey", "onSelect", "onClick", "as"]);
  var navKey = SelectableContext_1.makeEventKey(eventKey, props.href);
  var parentOnSelect = react_1.useContext(SelectableContext_1d.default);
  var navContext = react_1.useContext(NavContext_1d.default);
  var isActive = active;
  if (navContext) {
    if (!props.role && navContext.role === 'tablist') props.role = 'tab';
    var contextControllerId = navContext.getControllerId(navKey);
    var contextControlledId = navContext.getControlledId(navKey);
    "development" !== "production" ? warning_1d.default(!contextControllerId || !props.id, "[react-bootstrap] The provided id '" + props.id + "' was overwritten by the current navContext with '" + contextControllerId + "'.") : void 0;
    "development" !== "production" ? warning_1d.default(!contextControlledId || !props['aria-controls'], "[react-bootstrap] The provided aria-controls value '" + props['aria-controls'] + "' was overwritten by the current navContext with '" + contextControlledId + "'.") : void 0;
    props['data-rb-event-key'] = navKey;
    props.id = contextControllerId || props.id;
    props['aria-controls'] = contextControlledId || props['aria-controls'];
    isActive = active == null && navKey != null ? navContext.activeKey === navKey : active;
  }
  if (props.role === 'tab') {
    if (props.disabled) {
      props.tabIndex = -1;
      props['aria-disabled'] = true;
    }
    props['aria-selected'] = isActive;
  }
  var handleOnclick = useEventCallback_1d.default(function (e) {
    if (onClick) onClick(e);
    if (navKey == null) return;
    if (onSelect) onSelect(navKey, e);
    if (parentOnSelect) parentOnSelect(navKey, e);
  });
  return react_1d.default.createElement(Component, extends_1d.default({}, props, {
    ref: ref,
    onClick: handleOnclick,
    className: classnames_1d.default(className, isActive && 'active')
  }));
});
AbstractNavItem.defaultProps = defaultProps;
exports.default = AbstractNavItem;

},

// node_modules/react-bootstrap/esm/usePopperMarginModifiers.js @176
176: function(__fusereq, exports, module){
exports.__esModule = true;
var react_1 = __fusereq(3);
var hasClass_1 = __fusereq(233);
var hasClass_1d = __fuse.dt(hasClass_1);
var ThemeProvider_1 = __fusereq(94);
function getMargins(element) {
  var styles = window.getComputedStyle(element);
  var top = parseFloat(styles.marginTop) || 0;
  var right = parseFloat(styles.marginRight) || 0;
  var bottom = parseFloat(styles.marginBottom) || 0;
  var left = parseFloat(styles.marginLeft) || 0;
  return {
    top: top,
    right: right,
    bottom: bottom,
    left: left
  };
}
function usePopperMarginModifiers() {
  var overlayRef = react_1.useRef(null);
  var margins = react_1.useRef(null);
  var arrowMargins = react_1.useRef(null);
  var popoverClass = ThemeProvider_1.useBootstrapPrefix(undefined, 'popover');
  var dropdownMenuClass = ThemeProvider_1.useBootstrapPrefix(undefined, 'dropdown-menu');
  var callback = react_1.useCallback(function (overlay) {
    if (!overlay || !(hasClass_1d.default(overlay, popoverClass) || hasClass_1d.default(overlay, dropdownMenuClass))) return;
    margins.current = getMargins(overlay);
    overlay.style.margin = '0';
    overlayRef.current = overlay;
  }, [popoverClass, dropdownMenuClass]);
  var offset = react_1.useMemo(function () {
    return {
      name: 'offset',
      options: {
        offset: function offset(_ref) {
          var placement = _ref.placement;
          if (!margins.current) return [0, 0];
          var _margins$current = margins.current, top = _margins$current.top, left = _margins$current.left, bottom = _margins$current.bottom, right = _margins$current.right;
          switch (placement.split('-')[0]) {
            case 'top':
              return [0, bottom];
            case 'left':
              return [0, right];
            case 'bottom':
              return [0, top];
            case 'right':
              return [0, left];
            default:
              return [0, 0];
          }
        }
      }
    };
  }, [margins]);
  var arrow = react_1.useMemo(function () {
    return {
      name: 'arrow',
      options: {
        padding: function padding() {
          if (!arrowMargins.current) {
            return 0;
          }
          var _arrowMargins$current = arrowMargins.current, top = _arrowMargins$current.top, right = _arrowMargins$current.right;
          var padding = top || right;
          return {
            top: padding,
            left: padding,
            right: padding,
            bottom: padding
          };
        }
      }
    };
  }, [arrowMargins]);
  var popoverArrowMargins = react_1.useMemo(function () {
    return {
      name: 'popoverArrowMargins',
      enabled: true,
      phase: 'main',
      requiresIfExists: ['arrow'],
      effect: function effect(_ref2) {
        var state = _ref2.state;
        if (!overlayRef.current || !state.elements.arrow || !hasClass_1d.default(overlayRef.current, popoverClass)) {
          return undefined;
        }
        if (state.modifiersData['arrow#persistent']) {
          var _getMargins = getMargins(state.elements.arrow), top = _getMargins.top, right = _getMargins.right;
          var padding = top || right;
          state.modifiersData['arrow#persistent'].padding = {
            top: padding,
            left: padding,
            right: padding,
            bottom: padding
          };
        } else {
          arrowMargins.current = getMargins(state.elements.arrow);
        }
        state.elements.arrow.style.margin = '0';
        return function () {
          if (state.elements.arrow) state.elements.arrow.style.margin = '';
        };
      }
    };
  }, [popoverClass]);
  return [callback, [offset, arrow, popoverArrowMargins]];
}
exports.default = usePopperMarginModifiers;

},

// node_modules/react-bootstrap/esm/TabContext.js @179
179: function(__fusereq, exports, module){
exports.__esModule = true;
var react_1 = __fusereq(3);
var react_1d = __fuse.dt(react_1);
var TabContext = react_1d.default.createContext(null);
exports.default = TabContext;

},

// node_modules/react-bootstrap/esm/ToastContext.js @180
180: function(__fusereq, exports, module){
exports.__esModule = true;
var react_1 = __fusereq(3);
var react_1d = __fuse.dt(react_1);
var ToastContext = react_1d.default.createContext({
  onClose: function onClose() {}
});
exports.default = ToastContext;

},

// node_modules/react-bootstrap/esm/NavContext.js @211
211: function(__fusereq, exports, module){
exports.__esModule = true;
var react_1 = __fusereq(3);
var react_1d = __fuse.dt(react_1);
var NavContext = react_1d.default.createContext(null);
NavContext.displayName = 'NavContext';
exports.default = NavContext;

},

// node_modules/react-bootstrap/esm/useWrappedRefWithWarning.js @214
214: function(__fusereq, exports, module){
exports.__esModule = true;
var invariant_1 = __fusereq(181);
var invariant_1d = __fuse.dt(invariant_1);
var react_1 = __fusereq(3);
var useMergedRefs_1 = __fusereq(213);
var useMergedRefs_1d = __fuse.dt(useMergedRefs_1);
function useWrappedRefWithWarning(ref, componentName) {
  if (!("development" !== "production")) return ref;
  var warningRef = react_1.useCallback(function (refValue) {
    !(refValue == null || !refValue.isReactComponent) ? "development" !== "production" ? invariant_1d.default(false, componentName + " injected a ref to a provided `as` component that resolved to a component instance instead of a DOM element. " + 'Use `React.forwardRef` to provide the injected ref to the class component as a prop in order to pass it directly to a DOM element') : invariant_1d.default(false) : void 0;
  }, [componentName]);
  return useMergedRefs_1d.default(warningRef, ref);
}
exports.default = useWrappedRefWithWarning;

}
}, function(){
__fuse.r(1)
const hmr = __fuse.r(2);
hmr.connect({"useCurrentURL":true})
})